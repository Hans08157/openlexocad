# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _Base
else:
    import _Base

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _Base.SWIG_PyInstanceMethod_New
_swig_new_static_method = _Base.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

class SwigPyIterator(object):
    r"""Proxy of C++ swig::SwigPyIterator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Base.delete_SwigPyIterator
    value = _swig_new_instance_method(_Base.SwigPyIterator_value)
    incr = _swig_new_instance_method(_Base.SwigPyIterator_incr)
    decr = _swig_new_instance_method(_Base.SwigPyIterator_decr)
    distance = _swig_new_instance_method(_Base.SwigPyIterator_distance)
    equal = _swig_new_instance_method(_Base.SwigPyIterator_equal)
    copy = _swig_new_instance_method(_Base.SwigPyIterator_copy)
    next = _swig_new_instance_method(_Base.SwigPyIterator_next)
    __next__ = _swig_new_instance_method(_Base.SwigPyIterator___next__)
    previous = _swig_new_instance_method(_Base.SwigPyIterator_previous)
    advance = _swig_new_instance_method(_Base.SwigPyIterator_advance)
    __eq__ = _swig_new_instance_method(_Base.SwigPyIterator___eq__)
    __ne__ = _swig_new_instance_method(_Base.SwigPyIterator___ne__)
    __iadd__ = _swig_new_instance_method(_Base.SwigPyIterator___iadd__)
    __isub__ = _swig_new_instance_method(_Base.SwigPyIterator___isub__)
    __add__ = _swig_new_instance_method(_Base.SwigPyIterator___add__)
    __sub__ = _swig_new_instance_method(_Base.SwigPyIterator___sub__)
    def __iter__(self):
        return self

# Register SwigPyIterator in _Base:
_Base.SwigPyIterator_swigregister(SwigPyIterator)
class intP(object):
    r"""Proxy of C++ intP class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(intP self) -> intP"""
        _Base.intP_swiginit(self, _Base.new_intP())
    __swig_destroy__ = _Base.delete_intP
    assign = _swig_new_instance_method(_Base.intP_assign)
    value = _swig_new_instance_method(_Base.intP_value)
    cast = _swig_new_instance_method(_Base.intP_cast)
    frompointer = _swig_new_static_method(_Base.intP_frompointer)

# Register intP in _Base:
_Base.intP_swigregister(intP)
intP_frompointer = _Base.intP_frompointer

class doubleP(object):
    r"""Proxy of C++ doubleP class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(doubleP self) -> doubleP"""
        _Base.doubleP_swiginit(self, _Base.new_doubleP())
    __swig_destroy__ = _Base.delete_doubleP
    assign = _swig_new_instance_method(_Base.doubleP_assign)
    value = _swig_new_instance_method(_Base.doubleP_value)
    cast = _swig_new_instance_method(_Base.doubleP_cast)
    frompointer = _swig_new_static_method(_Base.doubleP_frompointer)

# Register doubleP in _Base:
_Base.doubleP_swigregister(doubleP)
doubleP_frompointer = _Base.doubleP_frompointer

class boolP(object):
    r"""Proxy of C++ boolP class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(boolP self) -> boolP"""
        _Base.boolP_swiginit(self, _Base.new_boolP())
    __swig_destroy__ = _Base.delete_boolP
    assign = _swig_new_instance_method(_Base.boolP_assign)
    value = _swig_new_instance_method(_Base.boolP_value)
    cast = _swig_new_instance_method(_Base.boolP_cast)
    frompointer = _swig_new_static_method(_Base.boolP_frompointer)

# Register boolP in _Base:
_Base.boolP_swigregister(boolP)
boolP_frompointer = _Base.boolP_frompointer

class GlobalId(object):
    r"""Proxy of C++ Base::GlobalId class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(GlobalId self) -> GlobalId
        __init__(GlobalId self, String aBase64, bool aCheckBase64=False) -> GlobalId
        __init__(GlobalId self, char const * aUniqueId) -> GlobalId
        """
        _Base.GlobalId_swiginit(self, _Base.new_GlobalId(*args))
    isNull = _swig_new_instance_method(_Base.GlobalId_isNull)
    createGlobalId = _swig_new_static_method(_Base.GlobalId_createGlobalId)
    fromQUuid = _swig_new_static_method(_Base.GlobalId_fromQUuid)
    toBase64 = _swig_new_instance_method(_Base.GlobalId_toBase64)
    toString = _swig_new_instance_method(_Base.GlobalId_toString)
    toQString = _swig_new_instance_method(_Base.GlobalId_toQString)
    toQBase64 = _swig_new_instance_method(_Base.GlobalId_toQBase64)
    data1 = property(_Base.GlobalId_data1_get, _Base.GlobalId_data1_set, doc=r"""data1 : unsigned int""")
    data2 = property(_Base.GlobalId_data2_get, _Base.GlobalId_data2_set, doc=r"""data2 : unsigned short""")
    data3 = property(_Base.GlobalId_data3_get, _Base.GlobalId_data3_set, doc=r"""data3 : unsigned short""")
    data4 = property(_Base.GlobalId_data4_get, _Base.GlobalId_data4_set, doc=r"""data4 : a(8).unsigned char""")
    __eq__ = _swig_new_instance_method(_Base.GlobalId___eq__)
    __ne__ = _swig_new_instance_method(_Base.GlobalId___ne__)
    __lt__ = _swig_new_instance_method(_Base.GlobalId___lt__)
    __gt__ = _swig_new_instance_method(_Base.GlobalId___gt__)
    hash = _swig_new_instance_method(_Base.GlobalId_hash)
    __swig_destroy__ = _Base.delete_GlobalId

# Register GlobalId in _Base:
_Base.GlobalId_swigregister(GlobalId)
GlobalId_createGlobalId = _Base.GlobalId_createGlobalId
GlobalId_fromQUuid = _Base.GlobalId_fromQUuid

SIPrefix_EXA = _Base.SIPrefix_EXA

SIPrefix_PETA = _Base.SIPrefix_PETA

SIPrefix_TERA = _Base.SIPrefix_TERA

SIPrefix_GIGA = _Base.SIPrefix_GIGA

SIPrefix_MEGA = _Base.SIPrefix_MEGA

SIPrefix_KILO = _Base.SIPrefix_KILO

SIPrefix_HECTO = _Base.SIPrefix_HECTO

SIPrefix_DECA = _Base.SIPrefix_DECA

SIPrefix_NONE = _Base.SIPrefix_NONE

SIPrefix_DECI = _Base.SIPrefix_DECI

SIPrefix_CENTI = _Base.SIPrefix_CENTI

SIPrefix_MILLI = _Base.SIPrefix_MILLI

SIPrefix_MICRO = _Base.SIPrefix_MICRO

SIPrefix_NANO = _Base.SIPrefix_NANO

SIPrefix_PICO = _Base.SIPrefix_PICO

SIPrefix_FEMTO = _Base.SIPrefix_FEMTO

SIPrefix_ATTO = _Base.SIPrefix_ATTO

SIUnitName_AMPERE = _Base.SIUnitName_AMPERE

SIUnitName_BECQUEREL = _Base.SIUnitName_BECQUEREL

SIUnitName_CANDELA = _Base.SIUnitName_CANDELA

SIUnitName_COULOMB = _Base.SIUnitName_COULOMB

SIUnitName_CUBIC_METRE = _Base.SIUnitName_CUBIC_METRE

SIUnitName_DEGREE_CELSIUS = _Base.SIUnitName_DEGREE_CELSIUS

SIUnitName_FARAD = _Base.SIUnitName_FARAD

SIUnitName_GRAM = _Base.SIUnitName_GRAM

SIUnitName_GRAY = _Base.SIUnitName_GRAY

SIUnitName_HENRY = _Base.SIUnitName_HENRY

SIUnitName_HERTZ = _Base.SIUnitName_HERTZ

SIUnitName_JOULE = _Base.SIUnitName_JOULE

SIUnitName_KELVIN = _Base.SIUnitName_KELVIN

SIUnitName_LUMEN = _Base.SIUnitName_LUMEN

SIUnitName_LUX = _Base.SIUnitName_LUX

SIUnitName_METRE = _Base.SIUnitName_METRE

SIUnitName_MOLE = _Base.SIUnitName_MOLE

SIUnitName_NEWTON = _Base.SIUnitName_NEWTON

SIUnitName_OHM = _Base.SIUnitName_OHM

SIUnitName_PASCAL_UNIT = _Base.SIUnitName_PASCAL_UNIT

SIUnitName_RADIAN = _Base.SIUnitName_RADIAN

SIUnitName_SECOND = _Base.SIUnitName_SECOND

SIUnitName_SIEMENS = _Base.SIUnitName_SIEMENS

SIUnitName_SIEVERT = _Base.SIUnitName_SIEVERT

SIUnitName_SQUARE_METRE = _Base.SIUnitName_SQUARE_METRE

SIUnitName_STERADIAN = _Base.SIUnitName_STERADIAN

SIUnitName_TESLA = _Base.SIUnitName_TESLA

SIUnitName_VOLT = _Base.SIUnitName_VOLT

SIUnitName_WATT = _Base.SIUnitName_WATT

SIUnitName_WEBER = _Base.SIUnitName_WEBER

Quantity_NOTDEFINED = _Base.Quantity_NOTDEFINED

Quantity_AMOUNT_OF_SUBSTANCE = _Base.Quantity_AMOUNT_OF_SUBSTANCE

Quantity_ELECTRIC_CURRENT = _Base.Quantity_ELECTRIC_CURRENT

Quantity_LENGTH = _Base.Quantity_LENGTH

Quantity_LUMINOUS_INTENSITY = _Base.Quantity_LUMINOUS_INTENSITY

Quantity_MASS = _Base.Quantity_MASS

Quantity_TIME = _Base.Quantity_TIME

Quantity_THERMODYNAMIC_TEMPERATURE = _Base.Quantity_THERMODYNAMIC_TEMPERATURE

Quantity_ABSORBED_DOSE = _Base.Quantity_ABSORBED_DOSE

Quantity_CATALYTIC_ACTIVITY = _Base.Quantity_CATALYTIC_ACTIVITY

Quantity_ELECTRIC_CAPACITANCE = _Base.Quantity_ELECTRIC_CAPACITANCE

Quantity_ELECTRIC_CHARGE = _Base.Quantity_ELECTRIC_CHARGE

Quantity_ELECTRIC_RESISTANCE = _Base.Quantity_ELECTRIC_RESISTANCE

Quantity_ELECTRICAL_CONDUCTANCE = _Base.Quantity_ELECTRICAL_CONDUCTANCE

Quantity_ELECTRICAL_POTENTIAL_DIFFERENCE = _Base.Quantity_ELECTRICAL_POTENTIAL_DIFFERENCE

Quantity_ELECTROMOTIVE_FORCE = _Base.Quantity_ELECTROMOTIVE_FORCE

Quantity_ENERGY = _Base.Quantity_ENERGY

Quantity_EQUIVALENT_DOSE = _Base.Quantity_EQUIVALENT_DOSE

Quantity_FORCE = _Base.Quantity_FORCE

Quantity_FREQUENCY = _Base.Quantity_FREQUENCY

Quantity_HEAT = _Base.Quantity_HEAT

Quantity_ILLUMINANCE = _Base.Quantity_ILLUMINANCE

Quantity_IMPEDANCE = _Base.Quantity_IMPEDANCE

Quantity_INDUCTANCE = _Base.Quantity_INDUCTANCE

Quantity_LUMINOUS_FLUX = _Base.Quantity_LUMINOUS_FLUX

Quantity_MAGNETIC_FIELD = _Base.Quantity_MAGNETIC_FIELD

Quantity_MAGNETIC_FLUX = _Base.Quantity_MAGNETIC_FLUX

Quantity_PLANE_ANGLE = _Base.Quantity_PLANE_ANGLE

Quantity_POWER = _Base.Quantity_POWER

Quantity_PRESSURE = _Base.Quantity_PRESSURE

Quantity_RADIANT_FLUX = _Base.Quantity_RADIANT_FLUX

Quantity_RADIOACTIVITY = _Base.Quantity_RADIOACTIVITY

Quantity_REACTANCE = _Base.Quantity_REACTANCE

Quantity_SOLID_ANGLE = _Base.Quantity_SOLID_ANGLE

Quantity_STRESS = _Base.Quantity_STRESS

Quantity_TEMPERATURE = _Base.Quantity_TEMPERATURE

Quantity_VOLTAGE = _Base.Quantity_VOLTAGE

Quantity_WEIGHT = _Base.Quantity_WEIGHT

Quantity_WORK = _Base.Quantity_WORK

Quantity_AREA = _Base.Quantity_AREA

Quantity_MASS_DENSITY = _Base.Quantity_MASS_DENSITY

Quantity_AREA_DENSITY = _Base.Quantity_AREA_DENSITY

Quantity_VOLUME = _Base.Quantity_VOLUME

getPrefixSymbol = _Base.getPrefixSymbol
class LengthUnit(object):
    r"""Proxy of C++ Base::LengthUnit class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    METRE = _Base.LengthUnit_METRE
    
    MILLIMETRE = _Base.LengthUnit_MILLIMETRE
    
    FOOT = _Base.LengthUnit_FOOT
    
    INCH = _Base.LengthUnit_INCH
    
    CENTIMETRE = _Base.LengthUnit_CENTIMETRE
    

    def __init__(self, *args):
        r"""
        __init__(LengthUnit self) -> LengthUnit
        __init__(LengthUnit self, double value, Base::LengthUnit::LengthUnitEnum unit=METRE) -> LengthUnit
        """
        _Base.LengthUnit_swiginit(self, _Base.new_LengthUnit(*args))
    __swig_destroy__ = _Base.delete_LengthUnit
    setValue = _swig_new_instance_method(_Base.LengthUnit_setValue)
    getSymbolFromUnit = _swig_new_static_method(_Base.LengthUnit_getSymbolFromUnit)
    getUnitFromSymbol = _swig_new_static_method(_Base.LengthUnit_getUnitFromSymbol)
    getDefaultUnit = _swig_new_static_method(_Base.LengthUnit_getDefaultUnit)
    isImperial = _swig_new_static_method(_Base.LengthUnit_isImperial)
    getIn = _swig_new_instance_method(_Base.LengthUnit_getIn)
    getInMetre = _swig_new_instance_method(_Base.LengthUnit_getInMetre)
    getInMilliMetre = _swig_new_instance_method(_Base.LengthUnit_getInMilliMetre)
    getInCentiMetre = _swig_new_instance_method(_Base.LengthUnit_getInCentiMetre)
    getInFoot = _swig_new_instance_method(_Base.LengthUnit_getInFoot)
    getInInch = _swig_new_instance_method(_Base.LengthUnit_getInInch)

# Register LengthUnit in _Base:
_Base.LengthUnit_swigregister(LengthUnit)
LengthUnit_getSymbolFromUnit = _Base.LengthUnit_getSymbolFromUnit
LengthUnit_getUnitFromSymbol = _Base.LengthUnit_getUnitFromSymbol
LengthUnit_getDefaultUnit = _Base.LengthUnit_getDefaultUnit
LengthUnit_isImperial = _Base.LengthUnit_isImperial

class PlaneAngleUnit(object):
    r"""Proxy of C++ Base::PlaneAngleUnit class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    RADIAN = _Base.PlaneAngleUnit_RADIAN
    
    DEGREE = _Base.PlaneAngleUnit_DEGREE
    
    GON = _Base.PlaneAngleUnit_GON
    
    PERCENT = _Base.PlaneAngleUnit_PERCENT
    
    PERMILLE = _Base.PlaneAngleUnit_PERMILLE
    
    V_H = _Base.PlaneAngleUnit_V_H
    

    def __init__(self, *args):
        r"""
        __init__(PlaneAngleUnit self) -> PlaneAngleUnit
        __init__(PlaneAngleUnit self, double value, Base::PlaneAngleUnit::PlaneAngleUnitEnum unit=DEGREE) -> PlaneAngleUnit
        """
        _Base.PlaneAngleUnit_swiginit(self, _Base.new_PlaneAngleUnit(*args))
    __swig_destroy__ = _Base.delete_PlaneAngleUnit
    setValue = _swig_new_instance_method(_Base.PlaneAngleUnit_setValue)
    getSymbolFromUnit = _swig_new_static_method(_Base.PlaneAngleUnit_getSymbolFromUnit)
    getUnitFromSymbol = _swig_new_static_method(_Base.PlaneAngleUnit_getUnitFromSymbol)
    getDefaultUnit = _swig_new_static_method(_Base.PlaneAngleUnit_getDefaultUnit)
    isImperial = _swig_new_static_method(_Base.PlaneAngleUnit_isImperial)
    getIn = _swig_new_instance_method(_Base.PlaneAngleUnit_getIn)
    getInRadian = _swig_new_instance_method(_Base.PlaneAngleUnit_getInRadian)
    getInDegree = _swig_new_instance_method(_Base.PlaneAngleUnit_getInDegree)
    getInGon = _swig_new_instance_method(_Base.PlaneAngleUnit_getInGon)
    getInPercent = _swig_new_instance_method(_Base.PlaneAngleUnit_getInPercent)
    getInPermille = _swig_new_instance_method(_Base.PlaneAngleUnit_getInPermille)
    getInVH = _swig_new_instance_method(_Base.PlaneAngleUnit_getInVH)

# Register PlaneAngleUnit in _Base:
_Base.PlaneAngleUnit_swigregister(PlaneAngleUnit)
PlaneAngleUnit_getSymbolFromUnit = _Base.PlaneAngleUnit_getSymbolFromUnit
PlaneAngleUnit_getUnitFromSymbol = _Base.PlaneAngleUnit_getUnitFromSymbol
PlaneAngleUnit_getDefaultUnit = _Base.PlaneAngleUnit_getDefaultUnit
PlaneAngleUnit_isImperial = _Base.PlaneAngleUnit_isImperial

class AreaUnit(object):
    r"""Proxy of C++ Base::AreaUnit class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    SQUARE_METRE = _Base.AreaUnit_SQUARE_METRE
    
    SQUARE_FOOT = _Base.AreaUnit_SQUARE_FOOT
    
    SQUARE_MILLIMETRE = _Base.AreaUnit_SQUARE_MILLIMETRE
    
    SQUARE_CENTIMETRE = _Base.AreaUnit_SQUARE_CENTIMETRE
    

    def __init__(self, *args):
        r"""
        __init__(AreaUnit self) -> AreaUnit
        __init__(AreaUnit self, double value, Base::AreaUnit::AreaUnitEnum unit=SQUARE_METRE) -> AreaUnit
        """
        _Base.AreaUnit_swiginit(self, _Base.new_AreaUnit(*args))
    __swig_destroy__ = _Base.delete_AreaUnit
    setValue = _swig_new_instance_method(_Base.AreaUnit_setValue)
    getSymbolFromUnit = _swig_new_static_method(_Base.AreaUnit_getSymbolFromUnit)
    getUnitFromSymbol = _swig_new_static_method(_Base.AreaUnit_getUnitFromSymbol)
    getDefaultUnit = _swig_new_static_method(_Base.AreaUnit_getDefaultUnit)
    isImperial = _swig_new_static_method(_Base.AreaUnit_isImperial)
    getIn = _swig_new_instance_method(_Base.AreaUnit_getIn)
    getInSquareMetre = _swig_new_instance_method(_Base.AreaUnit_getInSquareMetre)
    getInSquareMilliMetre = _swig_new_instance_method(_Base.AreaUnit_getInSquareMilliMetre)
    getInSquareCentiMetre = _swig_new_instance_method(_Base.AreaUnit_getInSquareCentiMetre)
    getInSquareFoot = _swig_new_instance_method(_Base.AreaUnit_getInSquareFoot)

# Register AreaUnit in _Base:
_Base.AreaUnit_swigregister(AreaUnit)
AreaUnit_getSymbolFromUnit = _Base.AreaUnit_getSymbolFromUnit
AreaUnit_getUnitFromSymbol = _Base.AreaUnit_getUnitFromSymbol
AreaUnit_getDefaultUnit = _Base.AreaUnit_getDefaultUnit
AreaUnit_isImperial = _Base.AreaUnit_isImperial

class VolumeUnit(object):
    r"""Proxy of C++ Base::VolumeUnit class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    CUBIC_METRE = _Base.VolumeUnit_CUBIC_METRE
    
    BOARD_FOOT = _Base.VolumeUnit_BOARD_FOOT
    
    CUBIC_FOOT = _Base.VolumeUnit_CUBIC_FOOT
    
    CUBIC_MILLIMETRE = _Base.VolumeUnit_CUBIC_MILLIMETRE
    
    CUBIC_CENTIMETRE = _Base.VolumeUnit_CUBIC_CENTIMETRE
    

    def __init__(self, *args):
        r"""
        __init__(VolumeUnit self) -> VolumeUnit
        __init__(VolumeUnit self, double value, Base::VolumeUnit::VolumeUnitEnum unit=CUBIC_METRE) -> VolumeUnit
        """
        _Base.VolumeUnit_swiginit(self, _Base.new_VolumeUnit(*args))
    __swig_destroy__ = _Base.delete_VolumeUnit
    setValue = _swig_new_instance_method(_Base.VolumeUnit_setValue)
    getSymbolFromUnit = _swig_new_static_method(_Base.VolumeUnit_getSymbolFromUnit)
    getUnitFromSymbol = _swig_new_static_method(_Base.VolumeUnit_getUnitFromSymbol)
    getDefaultUnit = _swig_new_static_method(_Base.VolumeUnit_getDefaultUnit)
    isImperial = _swig_new_static_method(_Base.VolumeUnit_isImperial)
    getIn = _swig_new_instance_method(_Base.VolumeUnit_getIn)
    getInCubicMetre = _swig_new_instance_method(_Base.VolumeUnit_getInCubicMetre)
    getInCubicMilliMetre = _swig_new_instance_method(_Base.VolumeUnit_getInCubicMilliMetre)
    getInCubicCentiMetre = _swig_new_instance_method(_Base.VolumeUnit_getInCubicCentiMetre)
    getInBoardFoot = _swig_new_instance_method(_Base.VolumeUnit_getInBoardFoot)
    getInCubicFoot = _swig_new_instance_method(_Base.VolumeUnit_getInCubicFoot)

# Register VolumeUnit in _Base:
_Base.VolumeUnit_swigregister(VolumeUnit)
VolumeUnit_getSymbolFromUnit = _Base.VolumeUnit_getSymbolFromUnit
VolumeUnit_getUnitFromSymbol = _Base.VolumeUnit_getUnitFromSymbol
VolumeUnit_getDefaultUnit = _Base.VolumeUnit_getDefaultUnit
VolumeUnit_isImperial = _Base.VolumeUnit_isImperial

class MassUnit(object):
    r"""Proxy of C++ Base::MassUnit class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    KILOGRAM = _Base.MassUnit_KILOGRAM
    
    TONNE = _Base.MassUnit_TONNE
    
    POUND = _Base.MassUnit_POUND
    

    def __init__(self, *args):
        r"""
        __init__(MassUnit self) -> MassUnit
        __init__(MassUnit self, double value, Base::MassUnit::MassUnitEnum unit=KILOGRAM) -> MassUnit
        """
        _Base.MassUnit_swiginit(self, _Base.new_MassUnit(*args))
    __swig_destroy__ = _Base.delete_MassUnit
    setValue = _swig_new_instance_method(_Base.MassUnit_setValue)
    getSymbolFromUnit = _swig_new_static_method(_Base.MassUnit_getSymbolFromUnit)
    getUnitFromSymbol = _swig_new_static_method(_Base.MassUnit_getUnitFromSymbol)
    getDefaultUnit = _swig_new_static_method(_Base.MassUnit_getDefaultUnit)
    isImperial = _swig_new_static_method(_Base.MassUnit_isImperial)
    getIn = _swig_new_instance_method(_Base.MassUnit_getIn)
    getInKilogram = _swig_new_instance_method(_Base.MassUnit_getInKilogram)
    getInTonne = _swig_new_instance_method(_Base.MassUnit_getInTonne)
    getInPound = _swig_new_instance_method(_Base.MassUnit_getInPound)

# Register MassUnit in _Base:
_Base.MassUnit_swigregister(MassUnit)
MassUnit_getSymbolFromUnit = _Base.MassUnit_getSymbolFromUnit
MassUnit_getUnitFromSymbol = _Base.MassUnit_getUnitFromSymbol
MassUnit_getDefaultUnit = _Base.MassUnit_getDefaultUnit
MassUnit_isImperial = _Base.MassUnit_isImperial

class MassDensityUnit(object):
    r"""Proxy of C++ Base::MassDensityUnit class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    KILOGRAM_CUBICMETRE = _Base.MassDensityUnit_KILOGRAM_CUBICMETRE
    
    TONNE_CUBICMETRE = _Base.MassDensityUnit_TONNE_CUBICMETRE
    
    POUND_CUBICFOOT = _Base.MassDensityUnit_POUND_CUBICFOOT
    

    def __init__(self, *args):
        r"""
        __init__(MassDensityUnit self) -> MassDensityUnit
        __init__(MassDensityUnit self, double value, Base::MassDensityUnit::MassDensityUnitEnum unit=KILOGRAM_CUBICMETRE) -> MassDensityUnit
        """
        _Base.MassDensityUnit_swiginit(self, _Base.new_MassDensityUnit(*args))
    __swig_destroy__ = _Base.delete_MassDensityUnit
    setValue = _swig_new_instance_method(_Base.MassDensityUnit_setValue)
    getSymbolFromUnit = _swig_new_static_method(_Base.MassDensityUnit_getSymbolFromUnit)
    getUnitFromSymbol = _swig_new_static_method(_Base.MassDensityUnit_getUnitFromSymbol)
    getDefaultUnit = _swig_new_static_method(_Base.MassDensityUnit_getDefaultUnit)
    isImperial = _swig_new_static_method(_Base.MassDensityUnit_isImperial)
    getIn = _swig_new_instance_method(_Base.MassDensityUnit_getIn)
    getInKilogramCubicMetre = _swig_new_instance_method(_Base.MassDensityUnit_getInKilogramCubicMetre)
    getInTonneCubicMetre = _swig_new_instance_method(_Base.MassDensityUnit_getInTonneCubicMetre)
    getInPoundCubicFoot = _swig_new_instance_method(_Base.MassDensityUnit_getInPoundCubicFoot)

# Register MassDensityUnit in _Base:
_Base.MassDensityUnit_swigregister(MassDensityUnit)
MassDensityUnit_getSymbolFromUnit = _Base.MassDensityUnit_getSymbolFromUnit
MassDensityUnit_getUnitFromSymbol = _Base.MassDensityUnit_getUnitFromSymbol
MassDensityUnit_getDefaultUnit = _Base.MassDensityUnit_getDefaultUnit
MassDensityUnit_isImperial = _Base.MassDensityUnit_isImperial

class AreaDensityUnit(object):
    r"""Proxy of C++ Base::AreaDensityUnit class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    KILOGRAM_SQUAREMETRE = _Base.AreaDensityUnit_KILOGRAM_SQUAREMETRE
    
    TONNE_SQUAREMETRE = _Base.AreaDensityUnit_TONNE_SQUAREMETRE
    
    POUND_SQUAREFOOT = _Base.AreaDensityUnit_POUND_SQUAREFOOT
    

    def __init__(self, *args):
        r"""
        __init__(AreaDensityUnit self) -> AreaDensityUnit
        __init__(AreaDensityUnit self, double value, Base::AreaDensityUnit::AreaDensityUnitEnum unit=KILOGRAM_SQUAREMETRE) -> AreaDensityUnit
        """
        _Base.AreaDensityUnit_swiginit(self, _Base.new_AreaDensityUnit(*args))
    __swig_destroy__ = _Base.delete_AreaDensityUnit
    setValue = _swig_new_instance_method(_Base.AreaDensityUnit_setValue)
    getSymbolFromUnit = _swig_new_static_method(_Base.AreaDensityUnit_getSymbolFromUnit)
    getUnitFromSymbol = _swig_new_static_method(_Base.AreaDensityUnit_getUnitFromSymbol)
    getDefaultUnit = _swig_new_static_method(_Base.AreaDensityUnit_getDefaultUnit)
    isImperial = _swig_new_static_method(_Base.AreaDensityUnit_isImperial)
    getIn = _swig_new_instance_method(_Base.AreaDensityUnit_getIn)
    getInKilogramSquareMetre = _swig_new_instance_method(_Base.AreaDensityUnit_getInKilogramSquareMetre)
    getInTonneSquareMetre = _swig_new_instance_method(_Base.AreaDensityUnit_getInTonneSquareMetre)
    getInPoundSquareFoot = _swig_new_instance_method(_Base.AreaDensityUnit_getInPoundSquareFoot)

# Register AreaDensityUnit in _Base:
_Base.AreaDensityUnit_swigregister(AreaDensityUnit)
AreaDensityUnit_getSymbolFromUnit = _Base.AreaDensityUnit_getSymbolFromUnit
AreaDensityUnit_getUnitFromSymbol = _Base.AreaDensityUnit_getUnitFromSymbol
AreaDensityUnit_getDefaultUnit = _Base.AreaDensityUnit_getDefaultUnit
AreaDensityUnit_isImperial = _Base.AreaDensityUnit_isImperial

class Bool(object):
    r"""Proxy of C++ Base::Bool class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(Bool self) -> Bool
        __init__(Bool self, bool b) -> Bool
        """
        _Base.Bool_swiginit(self, _Base.new_Bool(*args))
    value = property(_Base.Bool_value_get, _Base.Bool_value_set, doc=r"""value : bool""")
    __swig_destroy__ = _Base.delete_Bool

# Register Bool in _Base:
_Base.Bool_swigregister(Bool)
class MColor(object):
    r"""Proxy of C++ Base::MColor class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(MColor self, unsigned char r, unsigned char g, unsigned char b, unsigned char a) -> MColor
        __init__(MColor self) -> MColor
        __init__(MColor self, Color c) -> MColor
        """
        _Base.MColor_swiginit(self, _Base.new_MColor(*args))
    red = _swig_new_instance_method(_Base.MColor_red)
    green = _swig_new_instance_method(_Base.MColor_green)
    blue = _swig_new_instance_method(_Base.MColor_blue)
    alpha = _swig_new_instance_method(_Base.MColor_alpha)
    r = property(_Base.MColor_r_get, _Base.MColor_r_set, doc=r"""r : unsigned char""")
    g = property(_Base.MColor_g_get, _Base.MColor_g_set, doc=r"""g : unsigned char""")
    b = property(_Base.MColor_b_get, _Base.MColor_b_set, doc=r"""b : unsigned char""")
    a = property(_Base.MColor_a_get, _Base.MColor_a_set, doc=r"""a : unsigned char""")
    __eq__ = _swig_new_instance_method(_Base.MColor___eq__)
    __ne__ = _swig_new_instance_method(_Base.MColor___ne__)
    hash = _swig_new_instance_method(_Base.MColor_hash)
    __swig_destroy__ = _Base.delete_MColor

# Register MColor in _Base:
_Base.MColor_swigregister(MColor)
class Color(object):
    r"""Proxy of C++ Base::Color class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Invalid = _Base.Color_Invalid
    
    Rgb = _Base.Color_Rgb
    
    Hsv = _Base.Color_Hsv
    
    Cmyk = _Base.Color_Cmyk
    
    isValid = _swig_new_instance_method(_Base.Color_isValid)
    name = _swig_new_instance_method(_Base.Color_name)
    setNamedColor = _swig_new_instance_method(_Base.Color_setNamedColor)
    colorNames = _swig_new_static_method(_Base.Color_colorNames)
    spec = _swig_new_instance_method(_Base.Color_spec)
    alpha = _swig_new_instance_method(_Base.Color_alpha)
    setAlpha = _swig_new_instance_method(_Base.Color_setAlpha)
    alphaF = _swig_new_instance_method(_Base.Color_alphaF)
    setAlphaF = _swig_new_instance_method(_Base.Color_setAlphaF)
    red = _swig_new_instance_method(_Base.Color_red)
    green = _swig_new_instance_method(_Base.Color_green)
    blue = _swig_new_instance_method(_Base.Color_blue)
    setRed = _swig_new_instance_method(_Base.Color_setRed)
    setGreen = _swig_new_instance_method(_Base.Color_setGreen)
    setBlue = _swig_new_instance_method(_Base.Color_setBlue)
    redF = _swig_new_instance_method(_Base.Color_redF)
    greenF = _swig_new_instance_method(_Base.Color_greenF)
    blueF = _swig_new_instance_method(_Base.Color_blueF)
    setRedF = _swig_new_instance_method(_Base.Color_setRedF)
    setGreenF = _swig_new_instance_method(_Base.Color_setGreenF)
    setBlueF = _swig_new_instance_method(_Base.Color_setBlueF)
    getRgb = _swig_new_instance_method(_Base.Color_getRgb)
    setRgb = _swig_new_instance_method(_Base.Color_setRgb)
    getRgbF = _swig_new_instance_method(_Base.Color_getRgbF)
    setRgbF = _swig_new_instance_method(_Base.Color_setRgbF)
    hue = _swig_new_instance_method(_Base.Color_hue)
    saturation = _swig_new_instance_method(_Base.Color_saturation)
    value = _swig_new_instance_method(_Base.Color_value)
    hueF = _swig_new_instance_method(_Base.Color_hueF)
    saturationF = _swig_new_instance_method(_Base.Color_saturationF)
    valueF = _swig_new_instance_method(_Base.Color_valueF)
    getHsv = _swig_new_instance_method(_Base.Color_getHsv)
    setHsv = _swig_new_instance_method(_Base.Color_setHsv)
    getHsvF = _swig_new_instance_method(_Base.Color_getHsvF)
    setHsvF = _swig_new_instance_method(_Base.Color_setHsvF)
    cyan = _swig_new_instance_method(_Base.Color_cyan)
    magenta = _swig_new_instance_method(_Base.Color_magenta)
    yellow = _swig_new_instance_method(_Base.Color_yellow)
    black = _swig_new_instance_method(_Base.Color_black)
    cyanF = _swig_new_instance_method(_Base.Color_cyanF)
    magentaF = _swig_new_instance_method(_Base.Color_magentaF)
    yellowF = _swig_new_instance_method(_Base.Color_yellowF)
    blackF = _swig_new_instance_method(_Base.Color_blackF)
    getCmyk = _swig_new_instance_method(_Base.Color_getCmyk)
    setCmyk = _swig_new_instance_method(_Base.Color_setCmyk)
    getCmykF = _swig_new_instance_method(_Base.Color_getCmykF)
    setCmykF = _swig_new_instance_method(_Base.Color_setCmykF)
    toRgb = _swig_new_instance_method(_Base.Color_toRgb)
    toHsv = _swig_new_instance_method(_Base.Color_toHsv)
    toCmyk = _swig_new_instance_method(_Base.Color_toCmyk)
    convertTo = _swig_new_instance_method(_Base.Color_convertTo)
    fromRgb = _swig_new_static_method(_Base.Color_fromRgb)
    fromRgbF = _swig_new_static_method(_Base.Color_fromRgbF)
    fromHsv = _swig_new_static_method(_Base.Color_fromHsv)
    fromHsvF = _swig_new_static_method(_Base.Color_fromHsvF)
    fromCmyk = _swig_new_static_method(_Base.Color_fromCmyk)
    fromCmykF = _swig_new_static_method(_Base.Color_fromCmykF)
    light = _swig_new_instance_method(_Base.Color_light)
    lighter = _swig_new_instance_method(_Base.Color_lighter)
    dark = _swig_new_instance_method(_Base.Color_dark)
    darker = _swig_new_instance_method(_Base.Color_darker)
    assign = _swig_new_instance_method(_Base.Color_assign)
    __eq__ = _swig_new_instance_method(_Base.Color___eq__)
    __ne__ = _swig_new_instance_method(_Base.Color___ne__)
    __lt__ = _swig_new_instance_method(_Base.Color___lt__)
    getCdwkPalette = _swig_new_static_method(_Base.Color_getCdwkPalette)
    fromCdwkColor = _swig_new_static_method(_Base.Color_fromCdwkColor)
    maximumCdwkColorIntegerNumber = _swig_new_static_method(_Base.Color_maximumCdwkColorIntegerNumber)
    maximumDecimalPartNumber = _swig_new_static_method(_Base.Color_maximumDecimalPartNumber)
    getToolTip = _swig_new_static_method(_Base.Color_getToolTip)
    loadLccColors = _swig_new_static_method(_Base.Color_loadLccColors)
    setLccColor = _swig_new_static_method(_Base.Color_setLccColor)
    setLccColors = _swig_new_static_method(_Base.Color_setLccColors)
    clearLccColors = _swig_new_static_method(_Base.Color_clearLccColors)
    isLcc = _swig_new_instance_method(_Base.Color_isLcc)
    isLccLexocad = _swig_new_instance_method(_Base.Color_isLccLexocad)
    isLccWood = _swig_new_instance_method(_Base.Color_isLccWood)
    isLccUser = _swig_new_instance_method(_Base.Color_isLccUser)
    isMainLcc = _swig_new_instance_method(_Base.Color_isMainLcc)
    isLv = _swig_new_instance_method(_Base.Color_isLv)
    hash = _swig_new_instance_method(_Base.Color_hash)
    toCdwkColor = _swig_new_static_method(_Base.Color_toCdwkColor)
    toCdwkColor256 = _swig_new_static_method(_Base.Color_toCdwkColor256)

    def __init__(self, *args):
        r"""
        __init__(Color self) -> Color
        __init__(Color self, MColor c) -> Color
        __init__(Color self, int r, int g, int b, int a=255) -> Color
        __init__(Color self, std::string const & name) -> Color
        __init__(Color self, char const * name) -> Color
        __init__(Color self, Color rhs) -> Color
        __init__(Color self, Base::Color::Spec spec) -> Color
        __init__(Color self, unsigned int rgb) -> Color
        __init__(Color self, int r, int g, int b, unsigned int integerPart, unsigned int decimalPart) -> Color
        """
        _Base.Color_swiginit(self, _Base.new_Color(*args))
    __swig_destroy__ = _Base.delete_Color
    rgb = _swig_new_instance_method(_Base.Color_rgb)
    rgba = _swig_new_instance_method(_Base.Color_rgba)
    lccLexocadStart = _Base.Color_lccLexocadStart
    
    lccLexocadEnd = _Base.Color_lccLexocadEnd
    
    lccWoodStart = _Base.Color_lccWoodStart
    
    lccWoodEnd = _Base.Color_lccWoodEnd
    
    lccArchitectureStart = _Base.Color_lccArchitectureStart
    
    lccArchitectureWindowsDoorsStart = _Base.Color_lccArchitectureWindowsDoorsStart
    
    lccArchitectureSubElementsStart = _Base.Color_lccArchitectureSubElementsStart
    
    lccArchitectureEnd = _Base.Color_lccArchitectureEnd
    
    lccUserStart = _Base.Color_lccUserStart
    
    lccUserEnd = _Base.Color_lccUserEnd
    
    lvStart = _Base.Color_lvStart
    
    lvEnd = _Base.Color_lvEnd
    

# Register Color in _Base:
_Base.Color_swigregister(Color)
Color_colorNames = _Base.Color_colorNames
Color_fromRgb = _Base.Color_fromRgb
Color_fromRgbF = _Base.Color_fromRgbF
Color_fromHsv = _Base.Color_fromHsv
Color_fromHsvF = _Base.Color_fromHsvF
Color_fromCmyk = _Base.Color_fromCmyk
Color_fromCmykF = _Base.Color_fromCmykF
Color_getCdwkPalette = _Base.Color_getCdwkPalette
Color_fromCdwkColor = _Base.Color_fromCdwkColor
Color_maximumCdwkColorIntegerNumber = _Base.Color_maximumCdwkColorIntegerNumber
Color_maximumDecimalPartNumber = _Base.Color_maximumDecimalPartNumber
Color_getToolTip = _Base.Color_getToolTip
Color_loadLccColors = _Base.Color_loadLccColors
Color_setLccColor = _Base.Color_setLccColor
Color_setLccColors = _Base.Color_setLccColors
Color_clearLccColors = _Base.Color_clearLccColors
Color_toCdwkColor = _Base.Color_toCdwkColor
Color_toCdwkColor256 = _Base.Color_toCdwkColor256

class Double(object):
    r"""Proxy of C++ Base::Double class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(Double self) -> Double
        __init__(Double self, double d) -> Double
        """
        _Base.Double_swiginit(self, _Base.new_Double(*args))
    value = property(_Base.Double_value_get, _Base.Double_value_set, doc=r"""value : double""")
    __swig_destroy__ = _Base.delete_Double

# Register Double in _Base:
_Base.Double_swigregister(Double)
END_OF_LOOP = _Base.END_OF_LOOP

END_OF_FACE = _Base.END_OF_FACE

FormworkType_PANEL = _Base.FormworkType_PANEL

FormworkType_INNERCORNER = _Base.FormworkType_INNERCORNER

FormworkType_OUTERCORNER = _Base.FormworkType_OUTERCORNER

FillingType_NOFILLING = _Base.FillingType_NOFILLING

FillingType_WINDOW = _Base.FillingType_WINDOW

FillingType_DOOR = _Base.FillingType_DOOR

FillingType_BASICWINDOW = _Base.FillingType_BASICWINDOW

FillingType_BASICDOOR = _Base.FillingType_BASICDOOR

OpeningType_WALL = _Base.OpeningType_WALL

OpeningType_RECTANGLE = _Base.OpeningType_RECTANGLE

OpeningType_TRAPEZOID = _Base.OpeningType_TRAPEZOID

OpeningType_ARCHED = _Base.OpeningType_ARCHED

OpeningType_OCTAGON = _Base.OpeningType_OCTAGON

OpeningType_TRIANGLE = _Base.OpeningType_TRIANGLE

OpeningType_CIRCLE_WIN = _Base.OpeningType_CIRCLE_WIN

OpeningType_ELLIPSE_WIN = _Base.OpeningType_ELLIPSE_WIN

OpeningType_SEMICIRCLE = _Base.OpeningType_SEMICIRCLE

OpeningType_FRENCHWINDOW = _Base.OpeningType_FRENCHWINDOW

OpeningType_DOOR = _Base.OpeningType_DOOR

OpeningType_GARAGEDOOR = _Base.OpeningType_GARAGEDOOR

OpeningType_FLOOR = _Base.OpeningType_FLOOR

OpeningType_ROOF = _Base.OpeningType_ROOF

OpeningType_GENERAL = _Base.OpeningType_GENERAL

OpeningType_TYPE_FOR_COPY = _Base.OpeningType_TYPE_FOR_COPY

OpeningType_ARCHDOOR = _Base.OpeningType_ARCHDOOR

OpeningType_ARCHTOP = _Base.OpeningType_ARCHTOP

OpeningType_PENTAGON = _Base.OpeningType_PENTAGON

OpeningType_QUARTERCIRCLE = _Base.OpeningType_QUARTERCIRCLE

OpeningType_TRANSOMDOOR = _Base.OpeningType_TRANSOMDOOR

OpeningType_NOTDEFINED = _Base.OpeningType_NOTDEFINED

PurposeGroup_DOOR = _Base.PurposeGroup_DOOR

PurposeGroup_GARAGE = _Base.PurposeGroup_GARAGE

PurposeGroup_FRENCHWINDOW = _Base.PurposeGroup_FRENCHWINDOW

PurposeGroup_ARCHDOOR = _Base.PurposeGroup_ARCHDOOR

PurposeGroup_TRANSOMDOOR = _Base.PurposeGroup_TRANSOMDOOR

PurposeGroup_NOTDEFINED = _Base.PurposeGroup_NOTDEFINED

DoorTypeOperationEnum_SINGLE_SWING_LEFT = _Base.DoorTypeOperationEnum_SINGLE_SWING_LEFT

DoorTypeOperationEnum_SINGLE_SWING_RIGHT = _Base.DoorTypeOperationEnum_SINGLE_SWING_RIGHT

DoorTypeOperationEnum_DOUBLE_DOOR_SINGLE_SWING = _Base.DoorTypeOperationEnum_DOUBLE_DOOR_SINGLE_SWING

DoorTypeOperationEnum_DOUBLE_DOOR_SINGLE_SWING_OPPOSITE_LEFT = _Base.DoorTypeOperationEnum_DOUBLE_DOOR_SINGLE_SWING_OPPOSITE_LEFT

DoorTypeOperationEnum_DOUBLE_DOOR_SINGLE_SWING_OPPOSITE_RIGHT = _Base.DoorTypeOperationEnum_DOUBLE_DOOR_SINGLE_SWING_OPPOSITE_RIGHT

DoorTypeOperationEnum_DOUBLE_SWING_LEFT = _Base.DoorTypeOperationEnum_DOUBLE_SWING_LEFT

DoorTypeOperationEnum_DOUBLE_SWING_RIGHT = _Base.DoorTypeOperationEnum_DOUBLE_SWING_RIGHT

DoorTypeOperationEnum_DOUBLE_DOOR_DOUBLE_SWING = _Base.DoorTypeOperationEnum_DOUBLE_DOOR_DOUBLE_SWING

DoorTypeOperationEnum_SLIDING_TO_LEFT = _Base.DoorTypeOperationEnum_SLIDING_TO_LEFT

DoorTypeOperationEnum_SLIDING_TO_RIGHT = _Base.DoorTypeOperationEnum_SLIDING_TO_RIGHT

DoorTypeOperationEnum_DOUBLE_DOOR_SLIDING = _Base.DoorTypeOperationEnum_DOUBLE_DOOR_SLIDING

DoorTypeOperationEnum_FOLDING_TO_LEFT = _Base.DoorTypeOperationEnum_FOLDING_TO_LEFT

DoorTypeOperationEnum_FOLDING_TO_RIGHT = _Base.DoorTypeOperationEnum_FOLDING_TO_RIGHT

DoorTypeOperationEnum_DOUBLE_DOOR_FOLDING = _Base.DoorTypeOperationEnum_DOUBLE_DOOR_FOLDING

DoorTypeOperationEnum_REVOLVING = _Base.DoorTypeOperationEnum_REVOLVING

DoorTypeOperationEnum_ROLLINGUP = _Base.DoorTypeOperationEnum_ROLLINGUP

DoorTypeOperationEnum_SWING_FIXED_LEFT = _Base.DoorTypeOperationEnum_SWING_FIXED_LEFT

DoorTypeOperationEnum_SWING_FIXED_RIGHT = _Base.DoorTypeOperationEnum_SWING_FIXED_RIGHT

DoorTypeOperationEnum_USERDEFINED = _Base.DoorTypeOperationEnum_USERDEFINED

DoorTypeOperationEnum_NOTDEFINED = _Base.DoorTypeOperationEnum_NOTDEFINED

DoorTypeOperationEnum_TRIPLE_DOOR_SWING_RIGHT = _Base.DoorTypeOperationEnum_TRIPLE_DOOR_SWING_RIGHT

DoorTypeOperationEnum_TRIPLE_DOOR_SWING_LEFT = _Base.DoorTypeOperationEnum_TRIPLE_DOOR_SWING_LEFT

DoorTypeOperationEnum_TRIPLE_DOOR_TRIPLE_SWING_RIGHT = _Base.DoorTypeOperationEnum_TRIPLE_DOOR_TRIPLE_SWING_RIGHT

DoorTypeOperationEnum_TRIPLE_DOOR_TRIPLE_SWING_LEFT = _Base.DoorTypeOperationEnum_TRIPLE_DOOR_TRIPLE_SWING_LEFT

Divider_NONE = _Base.Divider_NONE

Divider_VERTICAL = _Base.Divider_VERTICAL

Divider_CROSS = _Base.Divider_CROSS

Divider_HORIZONTAL = _Base.Divider_HORIZONTAL

Divider_TWOVERTICAL = _Base.Divider_TWOVERTICAL

SplitStatus_PLANE = _Base.SplitStatus_PLANE

SplitStatus_HORIZONTAL = _Base.SplitStatus_HORIZONTAL

SplitStatus_VERTICAL_X = _Base.SplitStatus_VERTICAL_X

SplitStatus_VERTICAL_Y = _Base.SplitStatus_VERTICAL_Y

SplitStatus_VIEWER_PERPENDICULAR_2P = _Base.SplitStatus_VIEWER_PERPENDICULAR_2P

SplitStatus_TWO_SURFACES = _Base.SplitStatus_TWO_SURFACES

SplitStatus_MESH_SPLIT = _Base.SplitStatus_MESH_SPLIT

SplitStatus_PLANE_3P = _Base.SplitStatus_PLANE_3P

SplitStatus_VERTICAL_LINE = _Base.SplitStatus_VERTICAL_LINE

SplitStatus_VERTICAL_FACE_FOR_TERRAIN = _Base.SplitStatus_VERTICAL_FACE_FOR_TERRAIN

SplitStatus_PROJECT_VERTICAL_LINE = _Base.SplitStatus_PROJECT_VERTICAL_LINE

SplitStatus_LINE_ON_MESH = _Base.SplitStatus_LINE_ON_MESH

SplitStatus_CUT_AND_FILL_MESH = _Base.SplitStatus_CUT_AND_FILL_MESH

SplitStatus_CUT_BIM_ACC_LINE = _Base.SplitStatus_CUT_BIM_ACC_LINE

SplitStatus_CUT_BY_RECTANGLE = _Base.SplitStatus_CUT_BY_RECTANGLE

SplitStatus_CUT_BY_CONTOUR = _Base.SplitStatus_CUT_BY_CONTOUR

SplitStatus_BOOLEAN_CUT = _Base.SplitStatus_BOOLEAN_CUT

SplitStatus_PARAMETRIC_CUT = _Base.SplitStatus_PARAMETRIC_CUT

SplitStatus_CUT_IN_TWO = _Base.SplitStatus_CUT_IN_TWO

SplitStatus_CUT_TERRAIN = _Base.SplitStatus_CUT_TERRAIN

SplitStatus_CUT_BY_SURFACESS_ACC_COLOR = _Base.SplitStatus_CUT_BY_SURFACESS_ACC_COLOR

class AbstractProducer(object):
    r"""Proxy of C++ Base::AbstractProducer class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Base.delete_AbstractProducer
    Produce = _swig_new_instance_method(_Base.AbstractProducer_Produce)

# Register AbstractProducer in _Base:
_Base.AbstractProducer_swigregister(AbstractProducer)
class Factory2(object):
    r"""Proxy of C++ Base::Factory2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    AddProducer = _swig_new_instance_method(_Base.Factory2_AddProducer)
    CanProduce = _swig_new_instance_method(_Base.Factory2_CanProduce)

# Register Factory2 in _Base:
_Base.Factory2_swigregister(Factory2)
class ScriptFactorySingleton(Factory2):
    r"""Proxy of C++ Base::ScriptFactorySingleton class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    Instance = _swig_new_static_method(_Base.ScriptFactorySingleton_Instance)
    Destruct = _swig_new_static_method(_Base.ScriptFactorySingleton_Destruct)
    ProduceScript = _swig_new_instance_method(_Base.ScriptFactorySingleton_ProduceScript)
    __swig_destroy__ = _Base.delete_ScriptFactorySingleton

# Register ScriptFactorySingleton in _Base:
_Base.ScriptFactorySingleton_swigregister(ScriptFactorySingleton)
ScriptFactorySingleton_Instance = _Base.ScriptFactorySingleton_Instance
ScriptFactorySingleton_Destruct = _Base.ScriptFactorySingleton_Destruct

ScriptFactory = _Base.ScriptFactory
class ScriptProducer(AbstractProducer):
    r"""Proxy of C++ Base::ScriptProducer class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name, script):
        r"""__init__(ScriptProducer self, char const * name, char const * script) -> ScriptProducer"""
        _Base.ScriptProducer_swiginit(self, _Base.new_ScriptProducer(name, script))
    __swig_destroy__ = _Base.delete_ScriptProducer

# Register ScriptProducer in _Base:
_Base.ScriptProducer_swigregister(ScriptProducer)
class Int(object):
    r"""Proxy of C++ Base::Int class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    value = property(_Base.Int_value_get, _Base.Int_value_set, doc=r"""value : int""")

    def __init__(self, *args):
        r"""
        __init__(Int self, int x) -> Int
        __init__(Int self, Int x) -> Int
        __init__(Int self) -> Int
        """
        _Base.Int_swiginit(self, _Base.new_Int(*args))
    __swig_destroy__ = _Base.delete_Int
    assign = _swig_new_instance_method(_Base.Int_assign)

# Register Int in _Base:
_Base.Int_swigregister(Int)
class MessageEvent(object):
    r"""Proxy of C++ Base::MessageEvent class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, message, data):
        r"""__init__(MessageEvent self, QString message, void * data) -> MessageEvent"""
        _Base.MessageEvent_swiginit(self, _Base.new_MessageEvent(message, data))
    _message = property(_Base.MessageEvent__message_get, _Base.MessageEvent__message_set, doc=r"""_message : QString""")
    _data = property(_Base.MessageEvent__data_get, _Base.MessageEvent__data_set, doc=r"""_data : p.void""")
    __swig_destroy__ = _Base.delete_MessageEvent

# Register MessageEvent in _Base:
_Base.MessageEvent_swigregister(MessageEvent)
cvar = _Base.cvar
MessageEventType = cvar.MessageEventType

class MessageInterface(object):
    r"""Proxy of C++ Base::MessageInterface class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    yes = _Base.MessageInterface_yes
    
    no = _Base.MessageInterface_no
    
    cancel = _Base.MessageInterface_cancel
    
    showMessage = _swig_new_instance_method(_Base.MessageInterface_showMessage)
    postMessage = _swig_new_instance_method(_Base.MessageInterface_postMessage)
    showMessageBoxInformation = _swig_new_instance_method(_Base.MessageInterface_showMessageBoxInformation)
    showMessageBoxWarning = _swig_new_instance_method(_Base.MessageInterface_showMessageBoxWarning)
    showMessageBoxError = _swig_new_instance_method(_Base.MessageInterface_showMessageBoxError)
    showMessageBoxQuestionYesNo = _swig_new_instance_method(_Base.MessageInterface_showMessageBoxQuestionYesNo)
    showMessageBoxQuestionYesNoCancel = _swig_new_instance_method(_Base.MessageInterface_showMessageBoxQuestionYesNoCancel)
    showMessageBoxQuestion = _swig_new_instance_method(_Base.MessageInterface_showMessageBoxQuestion)
    setMessageReciever = _swig_new_instance_method(_Base.MessageInterface_setMessageReciever)
    getMessageReciever = _swig_new_instance_method(_Base.MessageInterface_getMessageReciever)
    setPostMessageReciever = _swig_new_instance_method(_Base.MessageInterface_setPostMessageReciever)
    debugMessage = _swig_new_instance_method(_Base.MessageInterface_debugMessage)
    getDoubleDialog = _swig_new_instance_method(_Base.MessageInterface_getDoubleDialog)
    getIntDialog = _swig_new_instance_method(_Base.MessageInterface_getIntDialog)
    getTextDialog = _swig_new_instance_method(_Base.MessageInterface_getTextDialog)
    getItem = _swig_new_instance_method(_Base.MessageInterface_getItem)
    __swig_destroy__ = _Base.delete_MessageInterface

# Register MessageInterface in _Base:
_Base.MessageInterface_swigregister(MessageInterface)
class MessageBase(MessageInterface):
    r"""Proxy of C++ Base::MessageBase class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    instance = _swig_new_static_method(_Base.MessageBase_instance)
    showMessageBoxInformation = _swig_new_instance_method(_Base.MessageBase_showMessageBoxInformation)
    showMessageBoxWarning = _swig_new_instance_method(_Base.MessageBase_showMessageBoxWarning)
    showMessageBoxError = _swig_new_instance_method(_Base.MessageBase_showMessageBoxError)
    showMessageBoxQuestionYesNo = _swig_new_instance_method(_Base.MessageBase_showMessageBoxQuestionYesNo)
    showMessageBoxQuestionYesNoCancel = _swig_new_instance_method(_Base.MessageBase_showMessageBoxQuestionYesNoCancel)
    showMessageBoxQuestion = _swig_new_instance_method(_Base.MessageBase_showMessageBoxQuestion)
    getDoubleDialog = _swig_new_instance_method(_Base.MessageBase_getDoubleDialog)
    getIntDialog = _swig_new_instance_method(_Base.MessageBase_getIntDialog)
    getTextDialog = _swig_new_instance_method(_Base.MessageBase_getTextDialog)
    getItem = _swig_new_instance_method(_Base.MessageBase_getItem)
    __swig_destroy__ = _Base.delete_MessageBase

# Register MessageBase in _Base:
_Base.MessageBase_swigregister(MessageBase)
MessageBase_instance = _Base.MessageBase_instance

Message = _Base.Message
class String(object):
    r"""Proxy of C++ Base::String class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(String self) -> String
        __init__(String self, std::wstring const & s) -> String
        __init__(String self, QString const & s) -> String
        __init__(String self, wchar_t const * s) -> String
        __init__(String self, String s) -> String
        """
        _Base.String_swiginit(self, _Base.new_String(*args))
    __eq__ = _swig_new_instance_method(_Base.String___eq__)
    __ne__ = _swig_new_instance_method(_Base.String___ne__)
    __lt__ = _swig_new_instance_method(_Base.String___lt__)
    __gt__ = _swig_new_instance_method(_Base.String___gt__)
    assign = _swig_new_instance_method(_Base.String_assign)
    __add__ = _swig_new_instance_method(_Base.String___add__)
    __iadd__ = _swig_new_instance_method(_Base.String___iadd__)
    size = _swig_new_instance_method(_Base.String_size)
    lenght = _swig_new_instance_method(_Base.String_lenght)
    empty = _swig_new_instance_method(_Base.String_empty)
    substr = _swig_new_instance_method(_Base.String_substr)
    toWString = _swig_new_instance_method(_Base.String_toWString)
    getWString = _swig_new_instance_method(_Base.String_getWString)
    c_str = _swig_new_instance_method(_Base.String_c_str)
    isEqual = _swig_new_instance_method(_Base.String_isEqual)
    startsWith = _swig_new_instance_method(_Base.String_startsWith)
    contains = _swig_new_instance_method(_Base.String_contains)
    clear = _swig_new_instance_method(_Base.String_clear)
    __swig_destroy__ = _Base.delete_String

# Register String in _Base:
_Base.String_swigregister(String)
left_stream = _Base.left_stream
class StringTool(object):
    r"""Proxy of C++ Base::StringTool class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    toUpper = _swig_new_static_method(_Base.StringTool_toUpper)
    toLower = _swig_new_static_method(_Base.StringTool_toLower)
    trimLeft = _swig_new_static_method(_Base.StringTool_trimLeft)
    trimRight = _swig_new_static_method(_Base.StringTool_trimRight)
    trim = _swig_new_static_method(_Base.StringTool_trim)
    replace = _swig_new_static_method(_Base.StringTool_replace)
    replaceInPlace = _swig_new_static_method(_Base.StringTool_replaceInPlace)
    isEmpty = _swig_new_static_method(_Base.StringTool_isEmpty)
    toBool = _swig_new_static_method(_Base.StringTool_toBool)
    toDouble = _swig_new_static_method(_Base.StringTool_toDouble)
    toFloat = _swig_new_static_method(_Base.StringTool_toFloat)
    toUInt8 = _swig_new_static_method(_Base.StringTool_toUInt8)
    toUInt32 = _swig_new_static_method(_Base.StringTool_toUInt32)
    toUInt64 = _swig_new_static_method(_Base.StringTool_toUInt64)
    toInt = _swig_new_static_method(_Base.StringTool_toInt)
    toChar = _swig_new_static_method(_Base.StringTool_toChar)
    toUtf16 = _swig_new_static_method(_Base.StringTool_toUtf16)
    toUtf8 = _swig_new_static_method(_Base.StringTool_toUtf8)
    toWString = _swig_new_static_method(_Base.StringTool_toWString)
    toStlString = _swig_new_static_method(_Base.StringTool_toStlString)
    toLegal = _swig_new_static_method(_Base.StringTool_toLegal)
    createGuidString = _swig_new_static_method(_Base.StringTool_createGuidString)
    toUuid = _swig_new_static_method(_Base.StringTool_toUuid)
    toGUID = _swig_new_static_method(_Base.StringTool_toGUID)
    toBase64String = _swig_new_static_method(_Base.StringTool_toBase64String)
    isValidIfcBase64String = _swig_new_static_method(_Base.StringTool_isValidIfcBase64String)
    toQString = _swig_new_static_method(_Base.StringTool_toQString)
    toString = _swig_new_static_method(_Base.StringTool_toString)
    toMultiByteString = _swig_new_static_method(_Base.StringTool_toMultiByteString)
    cleanNumber = _swig_new_static_method(_Base.StringTool_cleanNumber)
    encodeForXML = _swig_new_static_method(_Base.StringTool_encodeForXML)
    decodeFromXML = _swig_new_static_method(_Base.StringTool_decodeFromXML)
    lexocadLineBreakMark = property(_Base.StringTool_lexocadLineBreakMark_get, _Base.StringTool_lexocadLineBreakMark_set, doc=r"""lexocadLineBreakMark : Base::String""")

    def __init__(self):
        r"""__init__(StringTool self) -> StringTool"""
        _Base.StringTool_swiginit(self, _Base.new_StringTool())
    __swig_destroy__ = _Base.delete_StringTool

# Register StringTool in _Base:
_Base.StringTool_swigregister(StringTool)
StringTool_toUpper = _Base.StringTool_toUpper
StringTool_toLower = _Base.StringTool_toLower
StringTool_trimLeft = _Base.StringTool_trimLeft
StringTool_trimRight = _Base.StringTool_trimRight
StringTool_trim = _Base.StringTool_trim
StringTool_replace = _Base.StringTool_replace
StringTool_replaceInPlace = _Base.StringTool_replaceInPlace
StringTool_isEmpty = _Base.StringTool_isEmpty
StringTool_toBool = _Base.StringTool_toBool
StringTool_toDouble = _Base.StringTool_toDouble
StringTool_toFloat = _Base.StringTool_toFloat
StringTool_toUInt8 = _Base.StringTool_toUInt8
StringTool_toUInt32 = _Base.StringTool_toUInt32
StringTool_toUInt64 = _Base.StringTool_toUInt64
StringTool_toInt = _Base.StringTool_toInt
StringTool_toChar = _Base.StringTool_toChar
StringTool_toUtf16 = _Base.StringTool_toUtf16
StringTool_toUtf8 = _Base.StringTool_toUtf8
StringTool_toWString = _Base.StringTool_toWString
StringTool_toStlString = _Base.StringTool_toStlString
StringTool_toLegal = _Base.StringTool_toLegal
StringTool_createGuidString = _Base.StringTool_createGuidString
StringTool_toUuid = _Base.StringTool_toUuid
StringTool_toGUID = _Base.StringTool_toGUID
StringTool_toBase64String = _Base.StringTool_toBase64String
StringTool_isValidIfcBase64String = _Base.StringTool_isValidIfcBase64String
StringTool_toQString = _Base.StringTool_toQString
StringTool_toString = _Base.StringTool_toString
StringTool_toMultiByteString = _Base.StringTool_toMultiByteString
StringTool_cleanNumber = _Base.StringTool_cleanNumber
StringTool_encodeForXML = _Base.StringTool_encodeForXML
StringTool_decodeFromXML = _Base.StringTool_decodeFromXML

class Type(object):
    r"""Proxy of C++ Base::Type class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(Type self, Type type) -> Type
        __init__(Type self) -> Type
        """
        _Base.Type_swiginit(self, _Base.new_Type(*args))
    __swig_destroy__ = _Base.delete_Type
    createInstance = _swig_new_instance_method(_Base.Type_createInstance)
    createInstanceByName = _swig_new_static_method(_Base.Type_createInstanceByName)
    fromName = _swig_new_static_method(_Base.Type_fromName)
    getParent = _swig_new_instance_method(_Base.Type_getParent)
    getChildren = _swig_new_instance_method(_Base.Type_getChildren)
    getAllChildren = _swig_new_instance_method(_Base.Type_getAllChildren)
    isDerivedFrom = _swig_new_instance_method(_Base.Type_isDerivedFrom)
    getAllDerivedFrom = _swig_new_static_method(_Base.Type_getAllDerivedFrom)
    getHierarchyAsString = _swig_new_static_method(_Base.Type_getHierarchyAsString)
    getNumTypes = _swig_new_static_method(_Base.Type_getNumTypes)
    createType = _swig_new_static_method(_Base.Type_createType)
    getKey = _swig_new_instance_method(_Base.Type_getKey)
    isBad = _swig_new_instance_method(_Base.Type_isBad)
    getName = _swig_new_instance_method(_Base.Type_getName)
    assign = _swig_new_instance_method(_Base.Type_assign)
    __eq__ = _swig_new_instance_method(_Base.Type___eq__)
    __ne__ = _swig_new_instance_method(_Base.Type___ne__)
    __lt__ = _swig_new_instance_method(_Base.Type___lt__)
    __le__ = _swig_new_instance_method(_Base.Type___le__)
    __ge__ = _swig_new_instance_method(_Base.Type___ge__)
    __gt__ = _swig_new_instance_method(_Base.Type___gt__)
    badType = _swig_new_static_method(_Base.Type_badType)
    init = _swig_new_static_method(_Base.Type_init)

# Register Type in _Base:
_Base.Type_swigregister(Type)
Type_createInstanceByName = _Base.Type_createInstanceByName
Type_fromName = _Base.Type_fromName
Type_getAllDerivedFrom = _Base.Type_getAllDerivedFrom
Type_getHierarchyAsString = _Base.Type_getHierarchyAsString
Type_getNumTypes = _Base.Type_getNumTypes
Type_createType = _Base.Type_createType
Type_badType = _Base.Type_badType
Type_init = _Base.Type_init

class BaseClass(object):
    r"""Proxy of C++ Base::BaseClass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getClassTypeId = _swig_new_static_method(_Base.BaseClass_getClassTypeId)
    getTypeId = _swig_new_instance_method(_Base.BaseClass_getTypeId)
    init = _swig_new_static_method(_Base.BaseClass_init)
    create = _swig_new_static_method(_Base.BaseClass_create)
    setIfcNameAndID = _swig_new_static_method(_Base.BaseClass_setIfcNameAndID)
    ____deadVal = property(_Base.BaseClass_____deadVal_get, _Base.BaseClass_____deadVal_set, doc=r"""____deadVal : long""")
    isDerivedFrom = _swig_new_instance_method(_Base.BaseClass_isDerivedFrom)
    __deref__ = _swig_new_instance_method(_Base.BaseClass___deref__)

    def __init__(self):
        r"""__init__(BaseClass self) -> BaseClass"""
        _Base.BaseClass_swiginit(self, _Base.new_BaseClass())
    __swig_destroy__ = _Base.delete_BaseClass

# Register BaseClass in _Base:
_Base.BaseClass_swigregister(BaseClass)
BaseClass_getClassTypeId = _Base.BaseClass_getClassTypeId
BaseClass_init = _Base.BaseClass_init
BaseClass_create = _Base.BaseClass_create
BaseClass_setIfcNameAndID = _Base.BaseClass_setIfcNameAndID

class PersistenceVersion(object):
    r"""Proxy of C++ Base::PersistenceVersion class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    number = property(_Base.PersistenceVersion_number_get, _Base.PersistenceVersion_number_set, doc=r"""number : int""")
    documentVersionMajor = property(_Base.PersistenceVersion_documentVersionMajor_get, _Base.PersistenceVersion_documentVersionMajor_set, doc=r"""documentVersionMajor : int""")
    documentVersionMinor = property(_Base.PersistenceVersion_documentVersionMinor_get, _Base.PersistenceVersion_documentVersionMinor_set, doc=r"""documentVersionMinor : int""")

    def __init__(self):
        r"""__init__(PersistenceVersion self) -> PersistenceVersion"""
        _Base.PersistenceVersion_swiginit(self, _Base.new_PersistenceVersion())
    __swig_destroy__ = _Base.delete_PersistenceVersion

# Register PersistenceVersion in _Base:
_Base.PersistenceVersion_swigregister(PersistenceVersion)
class Persistence(BaseClass):
    r"""Proxy of C++ Base::Persistence class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getClassTypeId = _swig_new_static_method(_Base.Persistence_getClassTypeId)
    getTypeId = _swig_new_instance_method(_Base.Persistence_getTypeId)
    setIfcNameAndID = _swig_new_static_method(_Base.Persistence_setIfcNameAndID)
    init = _swig_new_static_method(_Base.Persistence_init)
    create = _swig_new_static_method(_Base.Persistence_create)
    save = _swig_new_instance_method(_Base.Persistence_save)
    restore = _swig_new_instance_method(_Base.Persistence_restore)
    saveDocFile = _swig_new_instance_method(_Base.Persistence_saveDocFile)
    restoreDocFile = _swig_new_instance_method(_Base.Persistence_restoreDocFile)
    mustBeSaved = _swig_new_instance_method(_Base.Persistence_mustBeSaved)
    createSQL = _swig_new_instance_method(_Base.Persistence_createSQL)
    encodeAttribute = _swig_new_static_method(_Base.Persistence_encodeAttribute)

    def __init__(self):
        r"""__init__(Persistence self) -> Persistence"""
        if self.__class__ == Persistence:
            _self = None
        else:
            _self = self
        _Base.Persistence_swiginit(self, _Base.new_Persistence(_self, ))
    __swig_destroy__ = _Base.delete_Persistence
    def __disown__(self):
        self.this.disown()
        _Base.disown_Persistence(self)
        return weakref.proxy(self)

# Register Persistence in _Base:
_Base.Persistence_swigregister(Persistence)
Persistence_getClassTypeId = _Base.Persistence_getClassTypeId
Persistence_setIfcNameAndID = _Base.Persistence_setIfcNameAndID
Persistence_init = _Base.Persistence_init
Persistence_create = _Base.Persistence_create
Persistence_encodeAttribute = _Base.Persistence_encodeAttribute

class CTranslator(object):
    r"""Proxy of C++ CTranslator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    ENGLISH = _Base.CTranslator_ENGLISH
    
    GERMAN = _Base.CTranslator_GERMAN
    
    FRENCH = _Base.CTranslator_FRENCH
    
    SPANISH = _Base.CTranslator_SPANISH
    
    PORTUGUESE = _Base.CTranslator_PORTUGUESE
    
    ROMANIAN = _Base.CTranslator_ROMANIAN
    
    HUNGARIAN = _Base.CTranslator_HUNGARIAN
    
    RUSSIAN = _Base.CTranslator_RUSSIAN
    
    POLISH = _Base.CTranslator_POLISH
    
    ITALIAN = _Base.CTranslator_ITALIAN
    
    CZECH = _Base.CTranslator_CZECH
    
    UKRAINE = _Base.CTranslator_UKRAINE
    
    get = _swig_new_static_method(_Base.CTranslator_get)
    getInLanguage = _swig_new_static_method(_Base.CTranslator_getInLanguage)
    getSpecial = _swig_new_static_method(_Base.CTranslator_getSpecial)
    getByEnglish = _swig_new_static_method(_Base.CTranslator_getByEnglish)
    getInAllLanguages = _swig_new_static_method(_Base.CTranslator_getInAllLanguages)
    setLanguage = _swig_new_static_method(_Base.CTranslator_setLanguage)
    getLanguage = _swig_new_static_method(_Base.CTranslator_getLanguage)
    getLanguageAsString = _swig_new_static_method(_Base.CTranslator_getLanguageAsString)
    setLanguageFromString = _swig_new_static_method(_Base.CTranslator_setLanguageFromString)
    getLanguageTranslatorId = _swig_new_static_method(_Base.CTranslator_getLanguageTranslatorId)
    getLanguageAsTranslatedString = _swig_new_static_method(_Base.CTranslator_getLanguageAsTranslatedString)
    readCustomTranslationsTable = _swig_new_static_method(_Base.CTranslator_readCustomTranslationsTable)
    translate = _swig_new_static_method(_Base.CTranslator_translate)
    showMessageId = _swig_new_static_method(_Base.CTranslator_showMessageId)
    messageIdVisible = _swig_new_static_method(_Base.CTranslator_messageIdVisible)
    getCdwkStringFromLanguage = _swig_new_static_method(_Base.CTranslator_getCdwkStringFromLanguage)
    getLanguageFromCdwkString = _swig_new_static_method(_Base.CTranslator_getLanguageFromCdwkString)
    getQLocale = _swig_new_static_method(_Base.CTranslator_getQLocale)
    getTranslatorDirPath = _swig_new_static_method(_Base.CTranslator_getTranslatorDirPath)
    isHtml = _swig_new_static_method(_Base.CTranslator_isHtml)
    __swig_destroy__ = _Base.delete_CTranslator

# Register CTranslator in _Base:
_Base.CTranslator_swigregister(CTranslator)
CTranslator_get = _Base.CTranslator_get
CTranslator_getInLanguage = _Base.CTranslator_getInLanguage
CTranslator_getSpecial = _Base.CTranslator_getSpecial
CTranslator_getByEnglish = _Base.CTranslator_getByEnglish
CTranslator_getInAllLanguages = _Base.CTranslator_getInAllLanguages
CTranslator_setLanguage = _Base.CTranslator_setLanguage
CTranslator_getLanguage = _Base.CTranslator_getLanguage
CTranslator_getLanguageAsString = _Base.CTranslator_getLanguageAsString
CTranslator_setLanguageFromString = _Base.CTranslator_setLanguageFromString
CTranslator_getLanguageTranslatorId = _Base.CTranslator_getLanguageTranslatorId
CTranslator_getLanguageAsTranslatedString = _Base.CTranslator_getLanguageAsTranslatedString
CTranslator_readCustomTranslationsTable = _Base.CTranslator_readCustomTranslationsTable
CTranslator_translate = _Base.CTranslator_translate
CTranslator_showMessageId = _Base.CTranslator_showMessageId
CTranslator_messageIdVisible = _Base.CTranslator_messageIdVisible
CTranslator_getCdwkStringFromLanguage = _Base.CTranslator_getCdwkStringFromLanguage
CTranslator_getLanguageFromCdwkString = _Base.CTranslator_getLanguageFromCdwkString
CTranslator_getQLocale = _Base.CTranslator_getQLocale
CTranslator_getTranslatorDirPath = _Base.CTranslator_getTranslatorDirPath
CTranslator_isHtml = _Base.CTranslator_isHtml

class PTranslator(object):
    r"""Proxy of C++ PTranslator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    get = _swig_new_static_method(_Base.PTranslator_get)
    getSpecial = _swig_new_static_method(_Base.PTranslator_getSpecial)
    getInAllLanguages = _swig_new_static_method(_Base.PTranslator_getInAllLanguages)
    setLanguage = _swig_new_static_method(_Base.PTranslator_setLanguage)
    getLanguage = _swig_new_static_method(_Base.PTranslator_getLanguage)
    getLanguageAsString = _swig_new_static_method(_Base.PTranslator_getLanguageAsString)
    setLanguageFromString = _swig_new_static_method(_Base.PTranslator_setLanguageFromString)
    readCustomTranslationsTable = _swig_new_static_method(_Base.PTranslator_readCustomTranslationsTable)
    translate = _swig_new_static_method(_Base.PTranslator_translate)
    showMessageId = _swig_new_static_method(_Base.PTranslator_showMessageId)
    showCodeId = _swig_new_static_method(_Base.PTranslator_showCodeId)
    getCdwkStringFromLanguage = _swig_new_static_method(_Base.PTranslator_getCdwkStringFromLanguage)
    getLanguageFromCdwkString = _swig_new_static_method(_Base.PTranslator_getLanguageFromCdwkString)
    isHtml = _swig_new_static_method(_Base.PTranslator_isHtml)
    __swig_destroy__ = _Base.delete_PTranslator

# Register PTranslator in _Base:
_Base.PTranslator_swigregister(PTranslator)
PTranslator_get = _Base.PTranslator_get
PTranslator_getSpecial = _Base.PTranslator_getSpecial
PTranslator_getInAllLanguages = _Base.PTranslator_getInAllLanguages
PTranslator_setLanguage = _Base.PTranslator_setLanguage
PTranslator_getLanguage = _Base.PTranslator_getLanguage
PTranslator_getLanguageAsString = _Base.PTranslator_getLanguageAsString
PTranslator_setLanguageFromString = _Base.PTranslator_setLanguageFromString
PTranslator_readCustomTranslationsTable = _Base.PTranslator_readCustomTranslationsTable
PTranslator_translate = _Base.PTranslator_translate
PTranslator_showMessageId = _Base.PTranslator_showMessageId
PTranslator_showCodeId = _Base.PTranslator_showCodeId
PTranslator_getCdwkStringFromLanguage = _Base.PTranslator_getCdwkStringFromLanguage
PTranslator_getLanguageFromCdwkString = _Base.PTranslator_getLanguageFromCdwkString
PTranslator_isHtml = _Base.PTranslator_isHtml

class list_CString(object):
    r"""Proxy of C++ std::list< std::string > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_Base.list_CString_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_Base.list_CString___nonzero__)
    __bool__ = _swig_new_instance_method(_Base.list_CString___bool__)
    __len__ = _swig_new_instance_method(_Base.list_CString___len__)
    __getslice__ = _swig_new_instance_method(_Base.list_CString___getslice__)
    __setslice__ = _swig_new_instance_method(_Base.list_CString___setslice__)
    __delslice__ = _swig_new_instance_method(_Base.list_CString___delslice__)
    __delitem__ = _swig_new_instance_method(_Base.list_CString___delitem__)
    __getitem__ = _swig_new_instance_method(_Base.list_CString___getitem__)
    __setitem__ = _swig_new_instance_method(_Base.list_CString___setitem__)
    pop = _swig_new_instance_method(_Base.list_CString_pop)
    append = _swig_new_instance_method(_Base.list_CString_append)
    empty = _swig_new_instance_method(_Base.list_CString_empty)
    size = _swig_new_instance_method(_Base.list_CString_size)
    swap = _swig_new_instance_method(_Base.list_CString_swap)
    begin = _swig_new_instance_method(_Base.list_CString_begin)
    end = _swig_new_instance_method(_Base.list_CString_end)
    rbegin = _swig_new_instance_method(_Base.list_CString_rbegin)
    rend = _swig_new_instance_method(_Base.list_CString_rend)
    clear = _swig_new_instance_method(_Base.list_CString_clear)
    get_allocator = _swig_new_instance_method(_Base.list_CString_get_allocator)
    pop_back = _swig_new_instance_method(_Base.list_CString_pop_back)
    erase = _swig_new_instance_method(_Base.list_CString_erase)

    def __init__(self, *args):
        r"""
        __init__(list_CString self) -> list_CString
        __init__(list_CString self, list_CString other) -> list_CString
        __init__(list_CString self, std::list< std::string >::size_type size) -> list_CString
        __init__(list_CString self, std::list< std::string >::size_type size, std::list< std::string >::value_type const & value) -> list_CString
        """
        _Base.list_CString_swiginit(self, _Base.new_list_CString(*args))
    push_back = _swig_new_instance_method(_Base.list_CString_push_back)
    front = _swig_new_instance_method(_Base.list_CString_front)
    back = _swig_new_instance_method(_Base.list_CString_back)
    assign = _swig_new_instance_method(_Base.list_CString_assign)
    resize = _swig_new_instance_method(_Base.list_CString_resize)
    insert = _swig_new_instance_method(_Base.list_CString_insert)
    pop_front = _swig_new_instance_method(_Base.list_CString_pop_front)
    push_front = _swig_new_instance_method(_Base.list_CString_push_front)
    reverse = _swig_new_instance_method(_Base.list_CString_reverse)
    __swig_destroy__ = _Base.delete_list_CString

# Register list_CString in _Base:
_Base.list_CString_swigregister(list_CString)
class vector_double(object):
    r"""Proxy of C++ std::vector< double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_Base.vector_double_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_Base.vector_double___nonzero__)
    __bool__ = _swig_new_instance_method(_Base.vector_double___bool__)
    __len__ = _swig_new_instance_method(_Base.vector_double___len__)
    __getslice__ = _swig_new_instance_method(_Base.vector_double___getslice__)
    __setslice__ = _swig_new_instance_method(_Base.vector_double___setslice__)
    __delslice__ = _swig_new_instance_method(_Base.vector_double___delslice__)
    __delitem__ = _swig_new_instance_method(_Base.vector_double___delitem__)
    __getitem__ = _swig_new_instance_method(_Base.vector_double___getitem__)
    __setitem__ = _swig_new_instance_method(_Base.vector_double___setitem__)
    pop = _swig_new_instance_method(_Base.vector_double_pop)
    append = _swig_new_instance_method(_Base.vector_double_append)
    empty = _swig_new_instance_method(_Base.vector_double_empty)
    size = _swig_new_instance_method(_Base.vector_double_size)
    swap = _swig_new_instance_method(_Base.vector_double_swap)
    begin = _swig_new_instance_method(_Base.vector_double_begin)
    end = _swig_new_instance_method(_Base.vector_double_end)
    rbegin = _swig_new_instance_method(_Base.vector_double_rbegin)
    rend = _swig_new_instance_method(_Base.vector_double_rend)
    clear = _swig_new_instance_method(_Base.vector_double_clear)
    get_allocator = _swig_new_instance_method(_Base.vector_double_get_allocator)
    pop_back = _swig_new_instance_method(_Base.vector_double_pop_back)
    erase = _swig_new_instance_method(_Base.vector_double_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_double self) -> vector_double
        __init__(vector_double self, vector_double other) -> vector_double
        __init__(vector_double self, std::vector< double >::size_type size) -> vector_double
        __init__(vector_double self, std::vector< double >::size_type size, std::vector< double >::value_type const & value) -> vector_double
        """
        _Base.vector_double_swiginit(self, _Base.new_vector_double(*args))
    push_back = _swig_new_instance_method(_Base.vector_double_push_back)
    front = _swig_new_instance_method(_Base.vector_double_front)
    back = _swig_new_instance_method(_Base.vector_double_back)
    assign = _swig_new_instance_method(_Base.vector_double_assign)
    resize = _swig_new_instance_method(_Base.vector_double_resize)
    insert = _swig_new_instance_method(_Base.vector_double_insert)
    reserve = _swig_new_instance_method(_Base.vector_double_reserve)
    capacity = _swig_new_instance_method(_Base.vector_double_capacity)
    __swig_destroy__ = _Base.delete_vector_double

# Register vector_double in _Base:
_Base.vector_double_swigregister(vector_double)
class vector_int(object):
    r"""Proxy of C++ std::vector< int > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_Base.vector_int_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_Base.vector_int___nonzero__)
    __bool__ = _swig_new_instance_method(_Base.vector_int___bool__)
    __len__ = _swig_new_instance_method(_Base.vector_int___len__)
    __getslice__ = _swig_new_instance_method(_Base.vector_int___getslice__)
    __setslice__ = _swig_new_instance_method(_Base.vector_int___setslice__)
    __delslice__ = _swig_new_instance_method(_Base.vector_int___delslice__)
    __delitem__ = _swig_new_instance_method(_Base.vector_int___delitem__)
    __getitem__ = _swig_new_instance_method(_Base.vector_int___getitem__)
    __setitem__ = _swig_new_instance_method(_Base.vector_int___setitem__)
    pop = _swig_new_instance_method(_Base.vector_int_pop)
    append = _swig_new_instance_method(_Base.vector_int_append)
    empty = _swig_new_instance_method(_Base.vector_int_empty)
    size = _swig_new_instance_method(_Base.vector_int_size)
    swap = _swig_new_instance_method(_Base.vector_int_swap)
    begin = _swig_new_instance_method(_Base.vector_int_begin)
    end = _swig_new_instance_method(_Base.vector_int_end)
    rbegin = _swig_new_instance_method(_Base.vector_int_rbegin)
    rend = _swig_new_instance_method(_Base.vector_int_rend)
    clear = _swig_new_instance_method(_Base.vector_int_clear)
    get_allocator = _swig_new_instance_method(_Base.vector_int_get_allocator)
    pop_back = _swig_new_instance_method(_Base.vector_int_pop_back)
    erase = _swig_new_instance_method(_Base.vector_int_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_int self) -> vector_int
        __init__(vector_int self, vector_int other) -> vector_int
        __init__(vector_int self, std::vector< int >::size_type size) -> vector_int
        __init__(vector_int self, std::vector< int >::size_type size, std::vector< int >::value_type const & value) -> vector_int
        """
        _Base.vector_int_swiginit(self, _Base.new_vector_int(*args))
    push_back = _swig_new_instance_method(_Base.vector_int_push_back)
    front = _swig_new_instance_method(_Base.vector_int_front)
    back = _swig_new_instance_method(_Base.vector_int_back)
    assign = _swig_new_instance_method(_Base.vector_int_assign)
    resize = _swig_new_instance_method(_Base.vector_int_resize)
    insert = _swig_new_instance_method(_Base.vector_int_insert)
    reserve = _swig_new_instance_method(_Base.vector_int_reserve)
    capacity = _swig_new_instance_method(_Base.vector_int_capacity)
    __swig_destroy__ = _Base.delete_vector_int

# Register vector_int in _Base:
_Base.vector_int_swigregister(vector_int)
class vector_CString(object):
    r"""Proxy of C++ std::vector< std::string > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_Base.vector_CString_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_Base.vector_CString___nonzero__)
    __bool__ = _swig_new_instance_method(_Base.vector_CString___bool__)
    __len__ = _swig_new_instance_method(_Base.vector_CString___len__)
    __getslice__ = _swig_new_instance_method(_Base.vector_CString___getslice__)
    __setslice__ = _swig_new_instance_method(_Base.vector_CString___setslice__)
    __delslice__ = _swig_new_instance_method(_Base.vector_CString___delslice__)
    __delitem__ = _swig_new_instance_method(_Base.vector_CString___delitem__)
    __getitem__ = _swig_new_instance_method(_Base.vector_CString___getitem__)
    __setitem__ = _swig_new_instance_method(_Base.vector_CString___setitem__)
    pop = _swig_new_instance_method(_Base.vector_CString_pop)
    append = _swig_new_instance_method(_Base.vector_CString_append)
    empty = _swig_new_instance_method(_Base.vector_CString_empty)
    size = _swig_new_instance_method(_Base.vector_CString_size)
    swap = _swig_new_instance_method(_Base.vector_CString_swap)
    begin = _swig_new_instance_method(_Base.vector_CString_begin)
    end = _swig_new_instance_method(_Base.vector_CString_end)
    rbegin = _swig_new_instance_method(_Base.vector_CString_rbegin)
    rend = _swig_new_instance_method(_Base.vector_CString_rend)
    clear = _swig_new_instance_method(_Base.vector_CString_clear)
    get_allocator = _swig_new_instance_method(_Base.vector_CString_get_allocator)
    pop_back = _swig_new_instance_method(_Base.vector_CString_pop_back)
    erase = _swig_new_instance_method(_Base.vector_CString_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_CString self) -> vector_CString
        __init__(vector_CString self, vector_CString other) -> vector_CString
        __init__(vector_CString self, std::vector< std::string >::size_type size) -> vector_CString
        __init__(vector_CString self, std::vector< std::string >::size_type size, std::vector< std::string >::value_type const & value) -> vector_CString
        """
        _Base.vector_CString_swiginit(self, _Base.new_vector_CString(*args))
    push_back = _swig_new_instance_method(_Base.vector_CString_push_back)
    front = _swig_new_instance_method(_Base.vector_CString_front)
    back = _swig_new_instance_method(_Base.vector_CString_back)
    assign = _swig_new_instance_method(_Base.vector_CString_assign)
    resize = _swig_new_instance_method(_Base.vector_CString_resize)
    insert = _swig_new_instance_method(_Base.vector_CString_insert)
    reserve = _swig_new_instance_method(_Base.vector_CString_reserve)
    capacity = _swig_new_instance_method(_Base.vector_CString_capacity)
    __swig_destroy__ = _Base.delete_vector_CString

# Register vector_CString in _Base:
_Base.vector_CString_swigregister(vector_CString)
class vector_GlobalId(object):
    r"""Proxy of C++ std::vector< Base::GlobalId > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_Base.vector_GlobalId_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_Base.vector_GlobalId___nonzero__)
    __bool__ = _swig_new_instance_method(_Base.vector_GlobalId___bool__)
    __len__ = _swig_new_instance_method(_Base.vector_GlobalId___len__)
    __getslice__ = _swig_new_instance_method(_Base.vector_GlobalId___getslice__)
    __setslice__ = _swig_new_instance_method(_Base.vector_GlobalId___setslice__)
    __delslice__ = _swig_new_instance_method(_Base.vector_GlobalId___delslice__)
    __delitem__ = _swig_new_instance_method(_Base.vector_GlobalId___delitem__)
    __getitem__ = _swig_new_instance_method(_Base.vector_GlobalId___getitem__)
    __setitem__ = _swig_new_instance_method(_Base.vector_GlobalId___setitem__)
    pop = _swig_new_instance_method(_Base.vector_GlobalId_pop)
    append = _swig_new_instance_method(_Base.vector_GlobalId_append)
    empty = _swig_new_instance_method(_Base.vector_GlobalId_empty)
    size = _swig_new_instance_method(_Base.vector_GlobalId_size)
    swap = _swig_new_instance_method(_Base.vector_GlobalId_swap)
    begin = _swig_new_instance_method(_Base.vector_GlobalId_begin)
    end = _swig_new_instance_method(_Base.vector_GlobalId_end)
    rbegin = _swig_new_instance_method(_Base.vector_GlobalId_rbegin)
    rend = _swig_new_instance_method(_Base.vector_GlobalId_rend)
    clear = _swig_new_instance_method(_Base.vector_GlobalId_clear)
    get_allocator = _swig_new_instance_method(_Base.vector_GlobalId_get_allocator)
    pop_back = _swig_new_instance_method(_Base.vector_GlobalId_pop_back)
    erase = _swig_new_instance_method(_Base.vector_GlobalId_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_GlobalId self) -> vector_GlobalId
        __init__(vector_GlobalId self, vector_GlobalId other) -> vector_GlobalId
        __init__(vector_GlobalId self, std::vector< Base::GlobalId >::size_type size) -> vector_GlobalId
        __init__(vector_GlobalId self, std::vector< Base::GlobalId >::size_type size, GlobalId value) -> vector_GlobalId
        """
        _Base.vector_GlobalId_swiginit(self, _Base.new_vector_GlobalId(*args))
    push_back = _swig_new_instance_method(_Base.vector_GlobalId_push_back)
    front = _swig_new_instance_method(_Base.vector_GlobalId_front)
    back = _swig_new_instance_method(_Base.vector_GlobalId_back)
    assign = _swig_new_instance_method(_Base.vector_GlobalId_assign)
    resize = _swig_new_instance_method(_Base.vector_GlobalId_resize)
    insert = _swig_new_instance_method(_Base.vector_GlobalId_insert)
    reserve = _swig_new_instance_method(_Base.vector_GlobalId_reserve)
    capacity = _swig_new_instance_method(_Base.vector_GlobalId_capacity)
    __swig_destroy__ = _Base.delete_vector_GlobalId

# Register vector_GlobalId in _Base:
_Base.vector_GlobalId_swigregister(vector_GlobalId)
class vector_Color(object):
    r"""Proxy of C++ std::vector< Base::Color > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_Base.vector_Color_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_Base.vector_Color___nonzero__)
    __bool__ = _swig_new_instance_method(_Base.vector_Color___bool__)
    __len__ = _swig_new_instance_method(_Base.vector_Color___len__)
    __getslice__ = _swig_new_instance_method(_Base.vector_Color___getslice__)
    __setslice__ = _swig_new_instance_method(_Base.vector_Color___setslice__)
    __delslice__ = _swig_new_instance_method(_Base.vector_Color___delslice__)
    __delitem__ = _swig_new_instance_method(_Base.vector_Color___delitem__)
    __getitem__ = _swig_new_instance_method(_Base.vector_Color___getitem__)
    __setitem__ = _swig_new_instance_method(_Base.vector_Color___setitem__)
    pop = _swig_new_instance_method(_Base.vector_Color_pop)
    append = _swig_new_instance_method(_Base.vector_Color_append)
    empty = _swig_new_instance_method(_Base.vector_Color_empty)
    size = _swig_new_instance_method(_Base.vector_Color_size)
    swap = _swig_new_instance_method(_Base.vector_Color_swap)
    begin = _swig_new_instance_method(_Base.vector_Color_begin)
    end = _swig_new_instance_method(_Base.vector_Color_end)
    rbegin = _swig_new_instance_method(_Base.vector_Color_rbegin)
    rend = _swig_new_instance_method(_Base.vector_Color_rend)
    clear = _swig_new_instance_method(_Base.vector_Color_clear)
    get_allocator = _swig_new_instance_method(_Base.vector_Color_get_allocator)
    pop_back = _swig_new_instance_method(_Base.vector_Color_pop_back)
    erase = _swig_new_instance_method(_Base.vector_Color_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_Color self) -> vector_Color
        __init__(vector_Color self, vector_Color other) -> vector_Color
        __init__(vector_Color self, std::vector< Base::Color >::size_type size) -> vector_Color
        __init__(vector_Color self, std::vector< Base::Color >::size_type size, Color value) -> vector_Color
        """
        _Base.vector_Color_swiginit(self, _Base.new_vector_Color(*args))
    push_back = _swig_new_instance_method(_Base.vector_Color_push_back)
    front = _swig_new_instance_method(_Base.vector_Color_front)
    back = _swig_new_instance_method(_Base.vector_Color_back)
    assign = _swig_new_instance_method(_Base.vector_Color_assign)
    resize = _swig_new_instance_method(_Base.vector_Color_resize)
    insert = _swig_new_instance_method(_Base.vector_Color_insert)
    reserve = _swig_new_instance_method(_Base.vector_Color_reserve)
    capacity = _swig_new_instance_method(_Base.vector_Color_capacity)
    __swig_destroy__ = _Base.delete_vector_Color

# Register vector_Color in _Base:
_Base.vector_Color_swigregister(vector_Color)
class vector_String(object):
    r"""Proxy of C++ std::vector< Base::String > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_Base.vector_String_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_Base.vector_String___nonzero__)
    __bool__ = _swig_new_instance_method(_Base.vector_String___bool__)
    __len__ = _swig_new_instance_method(_Base.vector_String___len__)
    __getslice__ = _swig_new_instance_method(_Base.vector_String___getslice__)
    __setslice__ = _swig_new_instance_method(_Base.vector_String___setslice__)
    __delslice__ = _swig_new_instance_method(_Base.vector_String___delslice__)
    __delitem__ = _swig_new_instance_method(_Base.vector_String___delitem__)
    __getitem__ = _swig_new_instance_method(_Base.vector_String___getitem__)
    __setitem__ = _swig_new_instance_method(_Base.vector_String___setitem__)
    pop = _swig_new_instance_method(_Base.vector_String_pop)
    append = _swig_new_instance_method(_Base.vector_String_append)
    empty = _swig_new_instance_method(_Base.vector_String_empty)
    size = _swig_new_instance_method(_Base.vector_String_size)
    swap = _swig_new_instance_method(_Base.vector_String_swap)
    begin = _swig_new_instance_method(_Base.vector_String_begin)
    end = _swig_new_instance_method(_Base.vector_String_end)
    rbegin = _swig_new_instance_method(_Base.vector_String_rbegin)
    rend = _swig_new_instance_method(_Base.vector_String_rend)
    clear = _swig_new_instance_method(_Base.vector_String_clear)
    get_allocator = _swig_new_instance_method(_Base.vector_String_get_allocator)
    pop_back = _swig_new_instance_method(_Base.vector_String_pop_back)
    erase = _swig_new_instance_method(_Base.vector_String_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_String self) -> vector_String
        __init__(vector_String self, vector_String other) -> vector_String
        __init__(vector_String self, std::vector< Base::String >::size_type size) -> vector_String
        __init__(vector_String self, std::vector< Base::String >::size_type size, String value) -> vector_String
        """
        _Base.vector_String_swiginit(self, _Base.new_vector_String(*args))
    push_back = _swig_new_instance_method(_Base.vector_String_push_back)
    front = _swig_new_instance_method(_Base.vector_String_front)
    back = _swig_new_instance_method(_Base.vector_String_back)
    assign = _swig_new_instance_method(_Base.vector_String_assign)
    resize = _swig_new_instance_method(_Base.vector_String_resize)
    insert = _swig_new_instance_method(_Base.vector_String_insert)
    reserve = _swig_new_instance_method(_Base.vector_String_reserve)
    capacity = _swig_new_instance_method(_Base.vector_String_capacity)
    __swig_destroy__ = _Base.delete_vector_String

# Register vector_String in _Base:
_Base.vector_String_swigregister(vector_String)

