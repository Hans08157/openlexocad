# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _Core
else:
    import _Core

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _Core.SWIG_PyInstanceMethod_New
_swig_new_static_method = _Core.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

class SwigPyIterator(object):
    r"""Proxy of C++ swig::SwigPyIterator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Core.delete_SwigPyIterator
    value = _swig_new_instance_method(_Core.SwigPyIterator_value)
    incr = _swig_new_instance_method(_Core.SwigPyIterator_incr)
    decr = _swig_new_instance_method(_Core.SwigPyIterator_decr)
    distance = _swig_new_instance_method(_Core.SwigPyIterator_distance)
    equal = _swig_new_instance_method(_Core.SwigPyIterator_equal)
    copy = _swig_new_instance_method(_Core.SwigPyIterator_copy)
    next = _swig_new_instance_method(_Core.SwigPyIterator_next)
    __next__ = _swig_new_instance_method(_Core.SwigPyIterator___next__)
    previous = _swig_new_instance_method(_Core.SwigPyIterator_previous)
    advance = _swig_new_instance_method(_Core.SwigPyIterator_advance)
    __eq__ = _swig_new_instance_method(_Core.SwigPyIterator___eq__)
    __ne__ = _swig_new_instance_method(_Core.SwigPyIterator___ne__)
    __iadd__ = _swig_new_instance_method(_Core.SwigPyIterator___iadd__)
    __isub__ = _swig_new_instance_method(_Core.SwigPyIterator___isub__)
    __add__ = _swig_new_instance_method(_Core.SwigPyIterator___add__)
    __sub__ = _swig_new_instance_method(_Core.SwigPyIterator___sub__)
    def __iter__(self):
        return self

# Register SwigPyIterator in _Core:
_Core.SwigPyIterator_swigregister(SwigPyIterator)
SHARED_PTR_DISOWN = _Core.SHARED_PTR_DISOWN

class intP(object):
    r"""Proxy of C++ intP class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(intP self) -> intP"""
        _Core.intP_swiginit(self, _Core.new_intP())
    __swig_destroy__ = _Core.delete_intP
    assign = _swig_new_instance_method(_Core.intP_assign)
    value = _swig_new_instance_method(_Core.intP_value)
    cast = _swig_new_instance_method(_Core.intP_cast)
    frompointer = _swig_new_static_method(_Core.intP_frompointer)

# Register intP in _Core:
_Core.intP_swigregister(intP)
intP_frompointer = _Core.intP_frompointer

class doubleP(object):
    r"""Proxy of C++ doubleP class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(doubleP self) -> doubleP"""
        _Core.doubleP_swiginit(self, _Core.new_doubleP())
    __swig_destroy__ = _Core.delete_doubleP
    assign = _swig_new_instance_method(_Core.doubleP_assign)
    value = _swig_new_instance_method(_Core.doubleP_value)
    cast = _swig_new_instance_method(_Core.doubleP_cast)
    frompointer = _swig_new_static_method(_Core.doubleP_frompointer)

# Register doubleP in _Core:
_Core.doubleP_swigregister(doubleP)
doubleP_frompointer = _Core.doubleP_frompointer

class boolP(object):
    r"""Proxy of C++ boolP class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(boolP self) -> boolP"""
        _Core.boolP_swiginit(self, _Core.new_boolP())
    __swig_destroy__ = _Core.delete_boolP
    assign = _swig_new_instance_method(_Core.boolP_assign)
    value = _swig_new_instance_method(_Core.boolP_value)
    cast = _swig_new_instance_method(_Core.boolP_cast)
    frompointer = _swig_new_static_method(_Core.boolP_frompointer)

# Register boolP in _Core:
_Core.boolP_swigregister(boolP)
boolP_frompointer = _Core.boolP_frompointer

import Base
import Geom
import Topo
import Draw
class SubjectCoreDocChanges(object):
    r"""Proxy of C++ Base::Subject< Core::DocChanges > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(SubjectCoreDocChanges self) -> SubjectCoreDocChanges"""
        _Core.SubjectCoreDocChanges_swiginit(self, _Core.new_SubjectCoreDocChanges())
    __swig_destroy__ = _Core.delete_SubjectCoreDocChanges
    attach = _swig_new_instance_method(_Core.SubjectCoreDocChanges_attach)
    detach = _swig_new_instance_method(_Core.SubjectCoreDocChanges_detach)
    detachAll = _swig_new_instance_method(_Core.SubjectCoreDocChanges_detachAll)
    notify_internal = _swig_new_instance_method(_Core.SubjectCoreDocChanges_notify_internal)
    notify = _swig_new_instance_method(_Core.SubjectCoreDocChanges_notify)
    get = _swig_new_instance_method(_Core.SubjectCoreDocChanges_get)
    subject_name = _swig_new_instance_method(_Core.SubjectCoreDocChanges_subject_name)
    resetObserverTime = _swig_new_instance_method(_Core.SubjectCoreDocChanges_resetObserverTime)
    getObserverTime = _swig_new_instance_method(_Core.SubjectCoreDocChanges_getObserverTime)

# Register SubjectCoreDocChanges in _Core:
_Core.SubjectCoreDocChanges_swigregister(SubjectCoreDocChanges)
class Base_Subject_Core_AppChanges(object):
    r"""Proxy of C++ Base::Subject< Core::AppChanges > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Base_Subject_Core_AppChanges self) -> Base_Subject_Core_AppChanges"""
        _Core.Base_Subject_Core_AppChanges_swiginit(self, _Core.new_Base_Subject_Core_AppChanges())
    __swig_destroy__ = _Core.delete_Base_Subject_Core_AppChanges
    attach = _swig_new_instance_method(_Core.Base_Subject_Core_AppChanges_attach)
    detach = _swig_new_instance_method(_Core.Base_Subject_Core_AppChanges_detach)
    detachAll = _swig_new_instance_method(_Core.Base_Subject_Core_AppChanges_detachAll)
    notify_internal = _swig_new_instance_method(_Core.Base_Subject_Core_AppChanges_notify_internal)
    notify = _swig_new_instance_method(_Core.Base_Subject_Core_AppChanges_notify)
    get = _swig_new_instance_method(_Core.Base_Subject_Core_AppChanges_get)
    subject_name = _swig_new_instance_method(_Core.Base_Subject_Core_AppChanges_subject_name)
    resetObserverTime = _swig_new_instance_method(_Core.Base_Subject_Core_AppChanges_resetObserverTime)
    getObserverTime = _swig_new_instance_method(_Core.Base_Subject_Core_AppChanges_getObserverTime)

# Register Base_Subject_Core_AppChanges in _Core:
_Core.Base_Subject_Core_AppChanges_swigregister(Base_Subject_Core_AppChanges)
getLastImportedFilePath = _Core.getLastImportedFilePath
getCurrentScriptFilePath = _Core.getCurrentScriptFilePath
getCurrentScriptId = _Core.getCurrentScriptId
class AppChanges(object):
    r"""Proxy of C++ Core::AppChanges class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    NewDocument = _Core.AppChanges_NewDocument
    
    CloseDocument = _Core.AppChanges_CloseDocument
    
    SetActiveDocument = _Core.AppChanges_SetActiveDocument
    
    Why = property(_Core.AppChanges_Why_get, _Core.AppChanges_Why_set, doc=r"""Why : enum Core::AppChanges::why""")
    __eq__ = _swig_new_instance_method(_Core.AppChanges___eq__)
    Doc = property(_Core.AppChanges_Doc_get, _Core.AppChanges_Doc_set, doc=r"""Doc : p.Core::CoreDocument""")
    CreateGui = property(_Core.AppChanges_CreateGui_get, _Core.AppChanges_CreateGui_set, doc=r"""CreateGui : bool""")
    SetAsActiveDocument = property(_Core.AppChanges_SetAsActiveDocument_get, _Core.AppChanges_SetAsActiveDocument_set, doc=r"""SetAsActiveDocument : bool""")

    def __init__(self):
        r"""__init__(AppChanges self) -> AppChanges"""
        _Core.AppChanges_swiginit(self, _Core.new_AppChanges())
    __swig_destroy__ = _Core.delete_AppChanges

# Register AppChanges in _Core:
_Core.AppChanges_swigregister(AppChanges)
class LoadedDll(object):
    r"""Proxy of C++ Core::LoadedDll class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Core.delete_LoadedDll
    getInfo = _swig_new_instance_method(_Core.LoadedDll_getInfo)
    init = _swig_new_instance_method(_Core.LoadedDll_init)
    release = _swig_new_instance_method(_Core.LoadedDll_release)

# Register LoadedDll in _Core:
_Core.LoadedDll_swigregister(LoadedDll)
class PartAcis(LoadedDll):
    r"""Proxy of C++ Core::PartAcis class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Core.delete_PartAcis
    create_PartGeometry = _swig_new_instance_method(_Core.PartAcis_create_PartGeometry)

# Register PartAcis in _Core:
_Core.PartAcis_swigregister(PartAcis)
class CoreApplication(Base_Subject_Core_AppChanges):
    r"""Proxy of C++ Core::CoreApplication class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, argc, argv):
        r"""__init__(CoreApplication self, int argc, char ** argv) -> CoreApplication"""
        _Core.CoreApplication_swiginit(self, _Core.new_CoreApplication(argc, argv))
    __swig_destroy__ = _Core.delete_CoreApplication
    instance = _swig_new_static_method(_Core.CoreApplication_instance)
    destroy = _swig_new_static_method(_Core.CoreApplication_destroy)
    reset = _swig_new_static_method(_Core.CoreApplication_reset)
    getApplicationName = _swig_new_instance_method(_Core.CoreApplication_getApplicationName)
    setApplicationName = _swig_new_instance_method(_Core.CoreApplication_setApplicationName)
    newCoreDocument = _swig_new_instance_method(_Core.CoreApplication_newCoreDocument)
    newDocument = _swig_new_instance_method(_Core.CoreApplication_newDocument)
    openCoreDocument = _swig_new_instance_method(_Core.CoreApplication_openCoreDocument)
    openDocument = _swig_new_instance_method(_Core.CoreApplication_openDocument)
    getActiveDocument = _swig_new_instance_method(_Core.CoreApplication_getActiveDocument)
    setActiveDocument = _swig_new_instance_method(_Core.CoreApplication_setActiveDocument)
    getDocumentByName = _swig_new_instance_method(_Core.CoreApplication_getDocumentByName)
    getDocuments = _swig_new_instance_method(_Core.CoreApplication_getDocuments)
    getApplicationPath = _swig_new_instance_method(_Core.CoreApplication_getApplicationPath)
    getTmpDirectory = _swig_new_instance_method(_Core.CoreApplication_getTmpDirectory)
    setModulePreferenceValue = _swig_new_instance_method(_Core.CoreApplication_setModulePreferenceValue)
    getModulePreferenceValue = _swig_new_instance_method(_Core.CoreApplication_getModulePreferenceValue)
    registerCommandObserver = _swig_new_instance_method(_Core.CoreApplication_registerCommandObserver)
    unregisterCommandObserver = _swig_new_instance_method(_Core.CoreApplication_unregisterCommandObserver)
    getCommandObserver = _swig_new_instance_method(_Core.CoreApplication_getCommandObserver)
    add_TransactionObserver = _swig_new_instance_method(_Core.CoreApplication_add_TransactionObserver)
    remove_TransactionObserver = _swig_new_instance_method(_Core.CoreApplication_remove_TransactionObserver)
    getTransactionObservers = _swig_new_instance_method(_Core.CoreApplication_getTransactionObservers)
    notifyObject = _swig_new_instance_method(_Core.CoreApplication_notifyObject)
    notifyDocumentCreated = _swig_new_instance_method(_Core.CoreApplication_notifyDocumentCreated)
    notifyDocumentDeleted = _swig_new_instance_method(_Core.CoreApplication_notifyDocumentDeleted)
    notifyDocumentRenamed = _swig_new_instance_method(_Core.CoreApplication_notifyDocumentRenamed)
    notifyDocumentOpened = _swig_new_instance_method(_Core.CoreApplication_notifyDocumentOpened)
    notifyDocumentClosed = _swig_new_instance_method(_Core.CoreApplication_notifyDocumentClosed)
    notifyDocumentSaved = _swig_new_instance_method(_Core.CoreApplication_notifyDocumentSaved)
    notifyDocumentFinishedRead = _swig_new_instance_method(_Core.CoreApplication_notifyDocumentFinishedRead)
    notifyDocumentChanged = _swig_new_instance_method(_Core.CoreApplication_notifyDocumentChanged)
    notifyDocumentSetActive = _swig_new_instance_method(_Core.CoreApplication_notifyDocumentSetActive)
    notifyObjectCreated = _swig_new_instance_method(_Core.CoreApplication_notifyObjectCreated)
    notifyObjectDeleted = _swig_new_instance_method(_Core.CoreApplication_notifyObjectDeleted)
    notifyObjectAdded = _swig_new_instance_method(_Core.CoreApplication_notifyObjectAdded)
    notifyObjectChanged = _swig_new_instance_method(_Core.CoreApplication_notifyObjectChanged)
    notifyObjectHasError = _swig_new_instance_method(_Core.CoreApplication_notifyObjectHasError)
    notifyPropertyCreate = _swig_new_instance_method(_Core.CoreApplication_notifyPropertyCreate)
    notifyPropertyChanged = _swig_new_instance_method(_Core.CoreApplication_notifyPropertyChanged)
    notifyPropertyDeleted = _swig_new_instance_method(_Core.CoreApplication_notifyPropertyDeleted)
    notifyRecomputeSuccess = _swig_new_instance_method(_Core.CoreApplication_notifyRecomputeSuccess)
    notifyRecomputeFailed = _swig_new_instance_method(_Core.CoreApplication_notifyRecomputeFailed)
    notifyApp = _swig_new_instance_method(_Core.CoreApplication_notifyApp)
    notifyCmdObservers = _swig_new_instance_method(_Core.CoreApplication_notifyCmdObservers)
    closeDocument = _swig_new_instance_method(_Core.CoreApplication_closeDocument)
    isDocumentValid = _swig_new_instance_method(_Core.CoreApplication_isDocumentValid)
    onClose = _swig_new_instance_method(_Core.CoreApplication_onClose)
    closeApplication = _swig_new_instance_method(_Core.CoreApplication_closeApplication)
    getUniqueDocumentName = _swig_new_instance_method(_Core.CoreApplication_getUniqueDocumentName)
    getOpenDocuments = _swig_new_instance_method(_Core.CoreApplication_getOpenDocuments)
    initPython = _swig_new_instance_method(_Core.CoreApplication_initPython)
    finalizePython = _swig_new_instance_method(_Core.CoreApplication_finalizePython)
    runPythonString = _swig_new_instance_method(_Core.CoreApplication_runPythonString)
    runPythonScript = _swig_new_instance_method(_Core.CoreApplication_runPythonScript)
    isClosing = _swig_new_instance_method(_Core.CoreApplication_isClosing)
    hasGui = _swig_new_instance_method(_Core.CoreApplication_hasGui)
    sethasGui = _swig_new_instance_method(_Core.CoreApplication_sethasGui)
    getVersionYear = _swig_new_static_method(_Core.CoreApplication_getVersionYear)
    getBuildDateTime = _swig_new_static_method(_Core.CoreApplication_getBuildDateTime)
    getDocumentVersion = _swig_new_static_method(_Core.CoreApplication_getDocumentVersion)
    getDocumentVersionAsInteger = _swig_new_static_method(_Core.CoreApplication_getDocumentVersionAsInteger)
    getRefCount = _swig_new_static_method(_Core.CoreApplication_getRefCount)
    ref = _swig_new_instance_method(_Core.CoreApplication_ref)
    unref = _swig_new_instance_method(_Core.CoreApplication_unref)
    loadDllByName = _swig_new_instance_method(_Core.CoreApplication_loadDllByName)
    setCommandFactory = _swig_new_instance_method(_Core.CoreApplication_setCommandFactory)
    getCommandFactory = _swig_new_instance_method(_Core.CoreApplication_getCommandFactory)
    createCommand = _swig_new_instance_method(_Core.CoreApplication_createCommand)
    setCreateCommandFunction = _swig_new_instance_method(_Core.CoreApplication_setCreateCommandFunction)
    setActiveTransaction = _swig_new_instance_method(_Core.CoreApplication_setActiveTransaction)
    getActiveTransaction = _swig_new_instance_method(_Core.CoreApplication_getActiveTransaction)
    closeActiveTransaction = _swig_new_instance_method(_Core.CoreApplication_closeActiveTransaction)

# Register CoreApplication in _Core:
_Core.CoreApplication_swigregister(CoreApplication)
CoreApplication_instance = _Core.CoreApplication_instance
CoreApplication_destroy = _Core.CoreApplication_destroy
CoreApplication_reset = _Core.CoreApplication_reset
CoreApplication_getVersionYear = _Core.CoreApplication_getVersionYear
CoreApplication_getBuildDateTime = _Core.CoreApplication_getBuildDateTime
CoreApplication_getDocumentVersion = _Core.CoreApplication_getDocumentVersion
CoreApplication_getDocumentVersionAsInteger = _Core.CoreApplication_getDocumentVersionAsInteger
CoreApplication_getRefCount = _Core.CoreApplication_getRefCount

class CoreDocumentTool(object):
    r"""Proxy of C++ Core::CoreDocumentTool class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getLockFileName = _swig_new_static_method(_Core.CoreDocumentTool_getLockFileName)
    createLockFile = _swig_new_static_method(_Core.CoreDocumentTool_createLockFile)
    deleteLockFile = _swig_new_static_method(_Core.CoreDocumentTool_deleteLockFile)
    readLockFile = _swig_new_static_method(_Core.CoreDocumentTool_readLockFile)
    isTutorial = _swig_new_static_method(_Core.CoreDocumentTool_isTutorial)
    isInExeDir = _swig_new_static_method(_Core.CoreDocumentTool_isInExeDir)
    getAppVersionFromDocument = _swig_new_static_method(_Core.CoreDocumentTool_getAppVersionFromDocument)
    replaceInAllLinks = _swig_new_static_method(_Core.CoreDocumentTool_replaceInAllLinks)

    def __init__(self):
        r"""__init__(CoreDocumentTool self) -> CoreDocumentTool"""
        _Core.CoreDocumentTool_swiginit(self, _Core.new_CoreDocumentTool())
    __swig_destroy__ = _Core.delete_CoreDocumentTool

# Register CoreDocumentTool in _Core:
_Core.CoreDocumentTool_swigregister(CoreDocumentTool)
CoreDocumentTool_getLockFileName = _Core.CoreDocumentTool_getLockFileName
CoreDocumentTool_createLockFile = _Core.CoreDocumentTool_createLockFile
CoreDocumentTool_deleteLockFile = _Core.CoreDocumentTool_deleteLockFile
CoreDocumentTool_readLockFile = _Core.CoreDocumentTool_readLockFile
CoreDocumentTool_isTutorial = _Core.CoreDocumentTool_isTutorial
CoreDocumentTool_isInExeDir = _Core.CoreDocumentTool_isInExeDir
CoreDocumentTool_getAppVersionFromDocument = _Core.CoreDocumentTool_getAppVersionFromDocument
CoreDocumentTool_replaceInAllLinks = _Core.CoreDocumentTool_replaceInAllLinks

class DbgInfo(object):
    r"""Proxy of C++ Core::DbgInfo class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(DbgInfo self) -> DbgInfo"""
        _Core.DbgInfo_swiginit(self, _Core.new_DbgInfo())
    __swig_destroy__ = _Core.delete_DbgInfo
    dbginfo_md5 = property(_Core.DbgInfo_dbginfo_md5_get, _Core.DbgInfo_dbginfo_md5_set, doc=r"""dbginfo_md5 : MD5""")
    name = property(_Core.DbgInfo_name_get, _Core.DbgInfo_name_set, doc=r"""name : Base::String""")
    value = property(_Core.DbgInfo_value_get, _Core.DbgInfo_value_set, doc=r"""value : Base::String""")
    type = property(_Core.DbgInfo_type_get, _Core.DbgInfo_type_set, doc=r"""type : Base::String""")
    addChild = _swig_new_instance_method(_Core.DbgInfo_addChild)
    getChildren = _swig_new_instance_method(_Core.DbgInfo_getChildren)
    createMD5 = _swig_new_instance_method(_Core.DbgInfo_createMD5)

# Register DbgInfo in _Core:
_Core.DbgInfo_swigregister(DbgInfo)
class DbgInfoLink(DbgInfo):
    r"""Proxy of C++ Core::DbgInfoLink class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _Core.delete_DbgInfoLink
    object = property(_Core.DbgInfoLink_object_get, _Core.DbgInfoLink_object_set, doc=r"""object : p.q(const).Core::DocObject""")

    def __init__(self):
        r"""__init__(DbgInfoLink self) -> DbgInfoLink"""
        _Core.DbgInfoLink_swiginit(self, _Core.new_DbgInfoLink())

# Register DbgInfoLink in _Core:
_Core.DbgInfoLink_swigregister(DbgInfoLink)
class DbgInfoShape(DbgInfo):
    r"""Proxy of C++ Core::DbgInfoShape class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _Core.delete_DbgInfoShape
    shape = property(_Core.DbgInfoShape_shape_get, _Core.DbgInfoShape_shape_set, doc=r"""shape : std::shared_ptr<(q(const).Topo::Shape)>""")

    def __init__(self):
        r"""__init__(DbgInfoShape self) -> DbgInfoShape"""
        _Core.DbgInfoShape_swiginit(self, _Core.new_DbgInfoShape())

# Register DbgInfoShape in _Core:
_Core.DbgInfoShape_swigregister(DbgInfoShape)
P_NO_MODIFICATION = _Core.P_NO_MODIFICATION

P_MODIFY_PLACEMENT = _Core.P_MODIFY_PLACEMENT

P_MODIFY_LINK = _Core.P_MODIFY_LINK

P_MODIFY_VISIBLITY = _Core.P_MODIFY_VISIBLITY

P_MODIFY_SHAPE = _Core.P_MODIFY_SHAPE

P_MODIFY_APPEARANCE = _Core.P_MODIFY_APPEARANCE

P_MODIFY_BACKLINK = _Core.P_MODIFY_BACKLINK

P_MODIFY_DATA = _Core.P_MODIFY_DATA

P_MODIFY_DATA_NOPLACEMENT = _Core.P_MODIFY_DATA_NOPLACEMENT

P_MODIFY_DRAWSTYLE = _Core.P_MODIFY_DRAWSTYLE

class PropertyFactory(object):
    r"""Proxy of C++ Core::PropertyFactory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    registry = property(_Core.PropertyFactory_registry_get, _Core.PropertyFactory_registry_set, doc=r"""registry : std::map<(std::string,p.Core::PropertyFactory,std::less<(std::string)>,std::allocator<(std::pair<(q(const).std::string,p.Core::PropertyFactory)>)>)>""")
    __swig_destroy__ = _Core.delete_PropertyFactory

# Register PropertyFactory in _Core:
_Core.PropertyFactory_swigregister(PropertyFactory)
cvar = _Core.cvar

class Property(Base.Persistence):
    r"""Proxy of C++ Core::Property class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    getClassTypeId = _swig_new_static_method(_Core.Property_getClassTypeId)
    setIfcNameAndID = _swig_new_static_method(_Core.Property_setIfcNameAndID)
    init = _swig_new_static_method(_Core.Property_init)
    create = _swig_new_static_method(_Core.Property_create)
    New = _Core.Property_New
    
    Valid = _Core.Property_Valid
    
    Updated = _Core.Property_Updated
    
    Touched = _Core.Property_Touched
    
    Immutable = _Core.Property_Immutable
    
    ReadOnly = _Core.Property_ReadOnly
    
    Hidden = _Core.Property_Hidden
    
    Transient = _Core.Property_Transient
    
    MaterialEdit = _Core.Property_MaterialEdit
    
    NoMaterialListEdit = _Core.Property_NoMaterialListEdit
    
    Output = _Core.Property_Output
    
    LockDynamic = _Core.Property_LockDynamic
    
    NoModify = _Core.Property_NoModify
    
    PartialTrigger = _Core.Property_PartialTrigger
    
    NoRecompute = _Core.Property_NoRecompute
    
    Single = _Core.Property_Single
    
    Ordered = _Core.Property_Ordered
    
    EvalOnRestore = _Core.Property_EvalOnRestore
    
    PropStaticBegin = _Core.Property_PropStaticBegin
    
    PropDynamic = _Core.Property_PropDynamic
    
    PropNoPersist = _Core.Property_PropNoPersist
    
    PropNoRecompute = _Core.Property_PropNoRecompute
    
    PropReadOnly = _Core.Property_PropReadOnly
    
    PropTransient = _Core.Property_PropTransient
    
    PropHidden = _Core.Property_PropHidden
    
    PropOutput = _Core.Property_PropOutput
    
    PropStaticEnd = _Core.Property_PropStaticEnd
    
    User1 = _Core.Property_User1
    
    User2 = _Core.Property_User2
    
    User3 = _Core.Property_User3
    
    User4 = _Core.Property_User4
    
    __swig_destroy__ = _Core.delete_Property
    getName = _swig_new_instance_method(_Core.Property_getName)
    getContainer = _swig_new_instance_method(_Core.Property_getContainer)
    setContainer = _swig_new_instance_method(_Core.Property_setContainer)
    addToContainer = _swig_new_instance_method(_Core.Property_addToContainer)
    getVariant = _swig_new_instance_method(_Core.Property_getVariant)
    setValueFromVariant = _swig_new_instance_method(_Core.Property_setValueFromVariant)
    copy = _swig_new_instance_method(_Core.Property_copy)
    paste = _swig_new_instance_method(_Core.Property_paste)
    setKeyValue = _swig_new_instance_method(_Core.Property_setKeyValue)
    getKeyValueMap = _swig_new_instance_method(_Core.Property_getKeyValueMap)
    getVariantFromKey = _swig_new_instance_method(_Core.Property_getVariantFromKey)
    getKeys = _swig_new_instance_method(_Core.Property_getKeys)
    copyValue = _swig_new_instance_method(_Core.Property_copyValue)
    deepCopy = _swig_new_instance_method(_Core.Property_deepCopy)
    enableNotify = _swig_new_instance_method(_Core.Property_enableNotify)
    isNotifyEnabled = _swig_new_instance_method(_Core.Property_isNotifyEnabled)
    touch = _swig_new_instance_method(_Core.Property_touch)
    setWillChangeStatusOnChange = _swig_new_instance_method(_Core.Property_setWillChangeStatusOnChange)
    getTransactionNumber = _swig_new_instance_method(_Core.Property_getTransactionNumber)
    isUpdated = _swig_new_instance_method(_Core.Property_isUpdated)
    getPropertyKind = _swig_new_instance_method(_Core.Property_getPropertyKind)
    setPropertyKind = _swig_new_instance_method(_Core.Property_setPropertyKind)
    hasValue = _swig_new_instance_method(_Core.Property_hasValue)
    isOptional = _swig_new_instance_method(_Core.Property_isOptional)
    setHasValue = _swig_new_instance_method(_Core.Property_setHasValue)
    isEqual = _swig_new_instance_method(_Core.Property_isEqual)
    isLink = _swig_new_instance_method(_Core.Property_isLink)
    getDbgInfo = _swig_new_instance_method(_Core.Property_getDbgInfo)
    getExStatus = _swig_new_instance_method(_Core.Property_getExStatus)
    testExStatus = _swig_new_instance_method(_Core.Property_testExStatus)
    setExStatus = _swig_new_instance_method(_Core.Property_setExStatus)
    setExStatusValue = _swig_new_instance_method(_Core.Property_setExStatusValue)
    setStatus = _swig_new_instance_method(_Core.Property_setStatus)
    getStatus = _swig_new_instance_method(_Core.Property_getStatus)
    isDefaultValue = _swig_new_instance_method(_Core.Property_isDefaultValue)
    setDefaultValue = _swig_new_instance_method(_Core.Property_setDefaultValue)
    registerProperties = _swig_new_static_method(_Core.Property_registerProperties)
    getRegisteredProperties = _swig_new_static_method(_Core.Property_getRegisteredProperties)
    getXMLPropertyAttributeName = _swig_new_static_method(_Core.Property_getXMLPropertyAttributeName)
    getXMLPropertyAttributeValue = _swig_new_static_method(_Core.Property_getXMLPropertyAttributeValue)
    accept = _swig_new_instance_method(_Core.Property_accept)
    getType = _swig_new_instance_method(_Core.Property_getType)

# Register Property in _Core:
_Core.Property_swigregister(Property)
Property_getClassTypeId = _Core.Property_getClassTypeId
Property_setIfcNameAndID = _Core.Property_setIfcNameAndID
Property_init = _Core.Property_init
Property_create = _Core.Property_create
Property_registerProperties = _Core.Property_registerProperties
Property_getRegisteredProperties = _Core.Property_getRegisteredProperties
Property_getXMLPropertyAttributeName = _Core.Property_getXMLPropertyAttributeName
Property_getXMLPropertyAttributeValue = _Core.Property_getXMLPropertyAttributeValue

class Exception(object):
    r"""Proxy of C++ Base::Exception class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(Exception self, char const * sMessage, char const * detail) -> Exception
        __init__(Exception self) -> Exception
        __init__(Exception self, Exception inst) -> Exception
        """
        _Core.Exception_swiginit(self, _Core.new_Exception(*args))
    __swig_destroy__ = _Core.delete_Exception
    assign = _swig_new_instance_method(_Core.Exception_assign)
    what = _swig_new_instance_method(_Core.Exception_what)
    detail = _swig_new_instance_method(_Core.Exception_detail)
    ReportException = _swig_new_instance_method(_Core.Exception_ReportException)
    SetMessage = _swig_new_instance_method(_Core.Exception_SetMessage)
    getFile = _swig_new_instance_method(_Core.Exception_getFile)
    getLine = _swig_new_instance_method(_Core.Exception_getLine)
    getFunction = _swig_new_instance_method(_Core.Exception_getFunction)
    getTranslatable = _swig_new_instance_method(_Core.Exception_getTranslatable)
    getReported = _swig_new_instance_method(_Core.Exception_getReported)
    setDebugInformation = _swig_new_instance_method(_Core.Exception_setDebugInformation)
    setTranslatable = _swig_new_instance_method(_Core.Exception_setTranslatable)
    setReported = _swig_new_instance_method(_Core.Exception_setReported)

# Register Exception in _Core:
_Core.Exception_swigregister(Exception)
class AbortException(Exception):
    r"""Proxy of C++ Base::AbortException class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(AbortException self, char const * sMessage) -> AbortException
        __init__(AbortException self) -> AbortException
        __init__(AbortException self, AbortException inst) -> AbortException
        """
        _Core.AbortException_swiginit(self, _Core.new_AbortException(*args))
    __swig_destroy__ = _Core.delete_AbortException

# Register AbortException in _Core:
_Core.AbortException_swigregister(AbortException)
class MemoryException(Exception):
    r"""Proxy of C++ Base::MemoryException class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(MemoryException self) -> MemoryException
        __init__(MemoryException self, MemoryException inst) -> MemoryException
        """
        _Core.MemoryException_swiginit(self, _Core.new_MemoryException(*args))
    __swig_destroy__ = _Core.delete_MemoryException

# Register MemoryException in _Core:
_Core.MemoryException_swigregister(MemoryException)
class ConstructionError(Exception):
    r"""Proxy of C++ Base::ConstructionError class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ConstructionError self, char const * sMessage) -> ConstructionError
        __init__(ConstructionError self) -> ConstructionError
        __init__(ConstructionError self, ConstructionError inst) -> ConstructionError
        """
        _Core.ConstructionError_swiginit(self, _Core.new_ConstructionError(*args))
    __swig_destroy__ = _Core.delete_ConstructionError

# Register ConstructionError in _Core:
_Core.ConstructionError_swigregister(ConstructionError)
class FailedNotDone(Exception):
    r"""Proxy of C++ Base::FailedNotDone class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(FailedNotDone self, char const * sMessage) -> FailedNotDone
        __init__(FailedNotDone self) -> FailedNotDone
        __init__(FailedNotDone self, FailedNotDone inst) -> FailedNotDone
        """
        _Core.FailedNotDone_swiginit(self, _Core.new_FailedNotDone(*args))
    __swig_destroy__ = _Core.delete_FailedNotDone

# Register FailedNotDone in _Core:
_Core.FailedNotDone_swigregister(FailedNotDone)
class ItemNotFound(Exception):
    r"""Proxy of C++ Base::ItemNotFound class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ItemNotFound self, char const * sMessage) -> ItemNotFound
        __init__(ItemNotFound self) -> ItemNotFound
        __init__(ItemNotFound self, ItemNotFound inst) -> ItemNotFound
        """
        _Core.ItemNotFound_swiginit(self, _Core.new_ItemNotFound(*args))
    __swig_destroy__ = _Core.delete_ItemNotFound

# Register ItemNotFound in _Core:
_Core.ItemNotFound_swigregister(ItemNotFound)
class OutOfRange(Exception):
    r"""Proxy of C++ Base::OutOfRange class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(OutOfRange self, char const * sMessage) -> OutOfRange
        __init__(OutOfRange self) -> OutOfRange
        __init__(OutOfRange self, OutOfRange inst) -> OutOfRange
        """
        _Core.OutOfRange_swiginit(self, _Core.new_OutOfRange(*args))
    __swig_destroy__ = _Core.delete_OutOfRange

# Register OutOfRange in _Core:
_Core.OutOfRange_swigregister(OutOfRange)
class NotaNumber(Exception):
    r"""Proxy of C++ Base::NotaNumber class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(NotaNumber self, char const * sMessage) -> NotaNumber
        __init__(NotaNumber self) -> NotaNumber
        __init__(NotaNumber self, NotaNumber inst) -> NotaNumber
        """
        _Core.NotaNumber_swiginit(self, _Core.new_NotaNumber(*args))
    __swig_destroy__ = _Core.delete_NotaNumber

# Register NotaNumber in _Core:
_Core.NotaNumber_swigregister(NotaNumber)
class FileException(Exception):
    r"""Proxy of C++ Base::FileException class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(FileException self, char const * sMessage) -> FileException
        __init__(FileException self) -> FileException
        __init__(FileException self, FileException inst) -> FileException
        """
        _Core.FileException_swiginit(self, _Core.new_FileException(*args))
    __swig_destroy__ = _Core.delete_FileException

# Register FileException in _Core:
_Core.FileException_swigregister(FileException)
class VectorWithNullMagnitude(Exception):
    r"""Proxy of C++ Base::VectorWithNullMagnitude class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(VectorWithNullMagnitude self, char const * sMessage) -> VectorWithNullMagnitude
        __init__(VectorWithNullMagnitude self) -> VectorWithNullMagnitude
        __init__(VectorWithNullMagnitude self, VectorWithNullMagnitude inst) -> VectorWithNullMagnitude
        """
        _Core.VectorWithNullMagnitude_swiginit(self, _Core.new_VectorWithNullMagnitude(*args))
    __swig_destroy__ = _Core.delete_VectorWithNullMagnitude

# Register VectorWithNullMagnitude in _Core:
_Core.VectorWithNullMagnitude_swigregister(VectorWithNullMagnitude)
class BadArguments(Exception):
    r"""Proxy of C++ Base::BadArguments class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(BadArguments self, char const * sMessage) -> BadArguments
        __init__(BadArguments self) -> BadArguments
        __init__(BadArguments self, BadArguments inst) -> BadArguments
        """
        _Core.BadArguments_swiginit(self, _Core.new_BadArguments(*args))
    __swig_destroy__ = _Core.delete_BadArguments

# Register BadArguments in _Core:
_Core.BadArguments_swigregister(BadArguments)
class GuidInUseException(Exception):
    r"""Proxy of C++ Base::GuidInUseException class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(GuidInUseException self) -> GuidInUseException
        __init__(GuidInUseException self, char const * sMessage) -> GuidInUseException
        """
        _Core.GuidInUseException_swiginit(self, _Core.new_GuidInUseException(*args))
    __swig_destroy__ = _Core.delete_GuidInUseException

# Register GuidInUseException in _Core:
_Core.GuidInUseException_swigregister(GuidInUseException)
class RuntimeError(Exception):
    r"""Proxy of C++ Base::RuntimeError class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(RuntimeError self) -> RuntimeError
        __init__(RuntimeError self, char const * sMessage) -> RuntimeError
        __init__(RuntimeError self, std::string const & sMessage) -> RuntimeError
        """
        _Core.RuntimeError_swiginit(self, _Core.new_RuntimeError(*args))
    __swig_destroy__ = _Core.delete_RuntimeError

# Register RuntimeError in _Core:
_Core.RuntimeError_swigregister(RuntimeError)
class ValueError(Exception):
    r"""Proxy of C++ Base::ValueError class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ValueError self) -> ValueError
        __init__(ValueError self, char const * sMessage) -> ValueError
        __init__(ValueError self, std::string const & sMessage) -> ValueError
        """
        _Core.ValueError_swiginit(self, _Core.new_ValueError(*args))
    __swig_destroy__ = _Core.delete_ValueError

# Register ValueError in _Core:
_Core.ValueError_swigregister(ValueError)
class CADKernelError(Exception):
    r"""Proxy of C++ Base::CADKernelError class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(CADKernelError self) -> CADKernelError
        __init__(CADKernelError self, char const * sMessage) -> CADKernelError
        __init__(CADKernelError self, std::string const & sMessage) -> CADKernelError
        """
        _Core.CADKernelError_swiginit(self, _Core.new_CADKernelError(*args))
    __swig_destroy__ = _Core.delete_CADKernelError

# Register CADKernelError in _Core:
_Core.CADKernelError_swigregister(CADKernelError)
class TypeError(Exception):
    r"""Proxy of C++ Base::TypeError class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TypeError self) -> TypeError
        __init__(TypeError self, char const * sMessage) -> TypeError
        __init__(TypeError self, std::string const & sMessage) -> TypeError
        """
        _Core.TypeError_swiginit(self, _Core.new_TypeError(*args))
    __swig_destroy__ = _Core.delete_TypeError

# Register TypeError in _Core:
_Core.TypeError_swigregister(TypeError)
class NotImplementedError(Exception):
    r"""Proxy of C++ Base::NotImplementedError class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(NotImplementedError self) -> NotImplementedError
        __init__(NotImplementedError self, char const * sMessage) -> NotImplementedError
        __init__(NotImplementedError self, std::string const & sMessage) -> NotImplementedError
        """
        _Core.NotImplementedError_swiginit(self, _Core.new_NotImplementedError(*args))
    __swig_destroy__ = _Core.delete_NotImplementedError

# Register NotImplementedError in _Core:
_Core.NotImplementedError_swigregister(NotImplementedError)
class DivisionByZeroError(Exception):
    r"""Proxy of C++ Base::DivisionByZeroError class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(DivisionByZeroError self) -> DivisionByZeroError
        __init__(DivisionByZeroError self, char const * sMessage) -> DivisionByZeroError
        __init__(DivisionByZeroError self, std::string const & sMessage) -> DivisionByZeroError
        """
        _Core.DivisionByZeroError_swiginit(self, _Core.new_DivisionByZeroError(*args))
    __swig_destroy__ = _Core.delete_DivisionByZeroError

# Register DivisionByZeroError in _Core:
_Core.DivisionByZeroError_swigregister(DivisionByZeroError)
class PropertyGUID(Property):
    r"""Proxy of C++ Core::PropertyGUID class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getClassTypeId = _swig_new_static_method(_Core.PropertyGUID_getClassTypeId)
    setIfcNameAndID = _swig_new_static_method(_Core.PropertyGUID_setIfcNameAndID)
    init = _swig_new_static_method(_Core.PropertyGUID_init)
    create = _swig_new_static_method(_Core.PropertyGUID_create)
    setValue = _swig_new_instance_method(_Core.PropertyGUID_setValue)
    createAndSetGUID = _swig_new_instance_method(_Core.PropertyGUID_createAndSetGUID)
    getValue = _swig_new_instance_method(_Core.PropertyGUID_getValue)
    getData1 = _swig_new_instance_method(_Core.PropertyGUID_getData1)
    getData2 = _swig_new_instance_method(_Core.PropertyGUID_getData2)
    getData3 = _swig_new_instance_method(_Core.PropertyGUID_getData3)
    getData4 = _swig_new_instance_method(_Core.PropertyGUID_getData4)
    toUuid = _swig_new_instance_method(_Core.PropertyGUID_toUuid)
    toBase64String = _swig_new_instance_method(_Core.PropertyGUID_toBase64String)
    toString = _swig_new_instance_method(_Core.PropertyGUID_toString)

    def __init__(self):
        r"""__init__(PropertyGUID self) -> PropertyGUID"""
        _Core.PropertyGUID_swiginit(self, _Core.new_PropertyGUID())
    __swig_destroy__ = _Core.delete_PropertyGUID

# Register PropertyGUID in _Core:
_Core.PropertyGUID_swigregister(PropertyGUID)
PropertyGUID_getClassTypeId = _Core.PropertyGUID_getClassTypeId
PropertyGUID_setIfcNameAndID = _Core.PropertyGUID_setIfcNameAndID
PropertyGUID_init = _Core.PropertyGUID_init
PropertyGUID_create = _Core.PropertyGUID_create

class PropertyGUID_Factory(PropertyFactory):
    r"""Proxy of C++ Core::PropertyGUID_Factory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(PropertyGUID_Factory self) -> PropertyGUID_Factory"""
        _Core.PropertyGUID_Factory_swiginit(self, _Core.new_PropertyGUID_Factory())
    __swig_destroy__ = _Core.delete_PropertyGUID_Factory

# Register PropertyGUID_Factory in _Core:
_Core.PropertyGUID_Factory_swigregister(PropertyGUID_Factory)
class PropertyAxis1(Property):
    r"""Proxy of C++ Core::PropertyAxis1 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getClassTypeId = _swig_new_static_method(_Core.PropertyAxis1_getClassTypeId)
    setIfcNameAndID = _swig_new_static_method(_Core.PropertyAxis1_setIfcNameAndID)
    init = _swig_new_static_method(_Core.PropertyAxis1_init)
    create = _swig_new_static_method(_Core.PropertyAxis1_create)

    def __init__(self):
        r"""__init__(PropertyAxis1 self) -> PropertyAxis1"""
        _Core.PropertyAxis1_swiginit(self, _Core.new_PropertyAxis1())
    setValue = _swig_new_instance_method(_Core.PropertyAxis1_setValue)
    setLocation = _swig_new_instance_method(_Core.PropertyAxis1_setLocation)
    setDirection = _swig_new_instance_method(_Core.PropertyAxis1_setDirection)
    getValue = _swig_new_instance_method(_Core.PropertyAxis1_getValue)
    __swig_destroy__ = _Core.delete_PropertyAxis1

# Register PropertyAxis1 in _Core:
_Core.PropertyAxis1_swigregister(PropertyAxis1)
PropertyAxis1_getClassTypeId = _Core.PropertyAxis1_getClassTypeId
PropertyAxis1_setIfcNameAndID = _Core.PropertyAxis1_setIfcNameAndID
PropertyAxis1_init = _Core.PropertyAxis1_init
PropertyAxis1_create = _Core.PropertyAxis1_create

class PropertyAxis2D(Property):
    r"""Proxy of C++ Core::PropertyAxis2D class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getClassTypeId = _swig_new_static_method(_Core.PropertyAxis2D_getClassTypeId)
    setIfcNameAndID = _swig_new_static_method(_Core.PropertyAxis2D_setIfcNameAndID)
    init = _swig_new_static_method(_Core.PropertyAxis2D_init)
    create = _swig_new_static_method(_Core.PropertyAxis2D_create)

    def __init__(self):
        r"""__init__(PropertyAxis2D self) -> PropertyAxis2D"""
        _Core.PropertyAxis2D_swiginit(self, _Core.new_PropertyAxis2D())
    setValue = _swig_new_instance_method(_Core.PropertyAxis2D_setValue)
    getValue = _swig_new_instance_method(_Core.PropertyAxis2D_getValue)
    __swig_destroy__ = _Core.delete_PropertyAxis2D

# Register PropertyAxis2D in _Core:
_Core.PropertyAxis2D_swigregister(PropertyAxis2D)
PropertyAxis2D_getClassTypeId = _Core.PropertyAxis2D_getClassTypeId
PropertyAxis2D_setIfcNameAndID = _Core.PropertyAxis2D_setIfcNameAndID
PropertyAxis2D_init = _Core.PropertyAxis2D_init
PropertyAxis2D_create = _Core.PropertyAxis2D_create

class PropertyAxis1_Factory(PropertyFactory):
    r"""Proxy of C++ Core::PropertyAxis1_Factory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(PropertyAxis1_Factory self) -> PropertyAxis1_Factory"""
        _Core.PropertyAxis1_Factory_swiginit(self, _Core.new_PropertyAxis1_Factory())
    __swig_destroy__ = _Core.delete_PropertyAxis1_Factory

# Register PropertyAxis1_Factory in _Core:
_Core.PropertyAxis1_Factory_swigregister(PropertyAxis1_Factory)
class PropertyAxis2D_Factory(PropertyFactory):
    r"""Proxy of C++ Core::PropertyAxis2D_Factory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(PropertyAxis2D_Factory self) -> PropertyAxis2D_Factory"""
        _Core.PropertyAxis2D_Factory_swiginit(self, _Core.new_PropertyAxis2D_Factory())
    __swig_destroy__ = _Core.delete_PropertyAxis2D_Factory

# Register PropertyAxis2D_Factory in _Core:
_Core.PropertyAxis2D_Factory_swigregister(PropertyAxis2D_Factory)
class PropertyAxis2(Property):
    r"""Proxy of C++ Core::PropertyAxis2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getClassTypeId = _swig_new_static_method(_Core.PropertyAxis2_getClassTypeId)
    setIfcNameAndID = _swig_new_static_method(_Core.PropertyAxis2_setIfcNameAndID)
    init = _swig_new_static_method(_Core.PropertyAxis2_init)
    create = _swig_new_static_method(_Core.PropertyAxis2_create)

    def __init__(self):
        r"""__init__(PropertyAxis2 self) -> PropertyAxis2"""
        _Core.PropertyAxis2_swiginit(self, _Core.new_PropertyAxis2())
    setValue = _swig_new_instance_method(_Core.PropertyAxis2_setValue)
    setLocation = _swig_new_instance_method(_Core.PropertyAxis2_setLocation)
    setDirection = _swig_new_instance_method(_Core.PropertyAxis2_setDirection)
    setXDirecetion = _swig_new_instance_method(_Core.PropertyAxis2_setXDirecetion)
    setYDirecetion = _swig_new_instance_method(_Core.PropertyAxis2_setYDirecetion)
    getValue = _swig_new_instance_method(_Core.PropertyAxis2_getValue)
    isIdentity = _swig_new_instance_method(_Core.PropertyAxis2_isIdentity)
    __swig_destroy__ = _Core.delete_PropertyAxis2

# Register PropertyAxis2 in _Core:
_Core.PropertyAxis2_swigregister(PropertyAxis2)
PropertyAxis2_getClassTypeId = _Core.PropertyAxis2_getClassTypeId
PropertyAxis2_setIfcNameAndID = _Core.PropertyAxis2_setIfcNameAndID
PropertyAxis2_init = _Core.PropertyAxis2_init
PropertyAxis2_create = _Core.PropertyAxis2_create

class PropertyAxis22D(Property):
    r"""Proxy of C++ Core::PropertyAxis22D class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getClassTypeId = _swig_new_static_method(_Core.PropertyAxis22D_getClassTypeId)
    setIfcNameAndID = _swig_new_static_method(_Core.PropertyAxis22D_setIfcNameAndID)
    init = _swig_new_static_method(_Core.PropertyAxis22D_init)
    create = _swig_new_static_method(_Core.PropertyAxis22D_create)

    def __init__(self):
        r"""__init__(PropertyAxis22D self) -> PropertyAxis22D"""
        _Core.PropertyAxis22D_swiginit(self, _Core.new_PropertyAxis22D())
    __swig_destroy__ = _Core.delete_PropertyAxis22D
    setValue = _swig_new_instance_method(_Core.PropertyAxis22D_setValue)
    getValue = _swig_new_instance_method(_Core.PropertyAxis22D_getValue)
    getAxis2 = _swig_new_instance_method(_Core.PropertyAxis22D_getAxis2)

# Register PropertyAxis22D in _Core:
_Core.PropertyAxis22D_swigregister(PropertyAxis22D)
PropertyAxis22D_getClassTypeId = _Core.PropertyAxis22D_getClassTypeId
PropertyAxis22D_setIfcNameAndID = _Core.PropertyAxis22D_setIfcNameAndID
PropertyAxis22D_init = _Core.PropertyAxis22D_init
PropertyAxis22D_create = _Core.PropertyAxis22D_create

class PropertyAxis2List(Property):
    r"""Proxy of C++ Core::PropertyAxis2List class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getClassTypeId = _swig_new_static_method(_Core.PropertyAxis2List_getClassTypeId)
    setIfcNameAndID = _swig_new_static_method(_Core.PropertyAxis2List_setIfcNameAndID)
    init = _swig_new_static_method(_Core.PropertyAxis2List_init)
    create = _swig_new_static_method(_Core.PropertyAxis2List_create)

    def __init__(self):
        r"""__init__(PropertyAxis2List self) -> PropertyAxis2List"""
        _Core.PropertyAxis2List_swiginit(self, _Core.new_PropertyAxis2List())
    setValue = _swig_new_instance_method(_Core.PropertyAxis2List_setValue)
    addAx2 = _swig_new_instance_method(_Core.PropertyAxis2List_addAx2)
    setEmpty = _swig_new_instance_method(_Core.PropertyAxis2List_setEmpty)
    isEmpty = _swig_new_instance_method(_Core.PropertyAxis2List_isEmpty)
    getValue = _swig_new_instance_method(_Core.PropertyAxis2List_getValue)
    __swig_destroy__ = _Core.delete_PropertyAxis2List

# Register PropertyAxis2List in _Core:
_Core.PropertyAxis2List_swigregister(PropertyAxis2List)
PropertyAxis2List_getClassTypeId = _Core.PropertyAxis2List_getClassTypeId
PropertyAxis2List_setIfcNameAndID = _Core.PropertyAxis2List_setIfcNameAndID
PropertyAxis2List_init = _Core.PropertyAxis2List_init
PropertyAxis2List_create = _Core.PropertyAxis2List_create

class PropertyAxis2_Factory(PropertyFactory):
    r"""Proxy of C++ Core::PropertyAxis2_Factory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(PropertyAxis2_Factory self) -> PropertyAxis2_Factory"""
        _Core.PropertyAxis2_Factory_swiginit(self, _Core.new_PropertyAxis2_Factory())
    __swig_destroy__ = _Core.delete_PropertyAxis2_Factory

# Register PropertyAxis2_Factory in _Core:
_Core.PropertyAxis2_Factory_swigregister(PropertyAxis2_Factory)
class PropertyAxis22D_Factory(PropertyFactory):
    r"""Proxy of C++ Core::PropertyAxis22D_Factory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(PropertyAxis22D_Factory self) -> PropertyAxis22D_Factory"""
        _Core.PropertyAxis22D_Factory_swiginit(self, _Core.new_PropertyAxis22D_Factory())
    __swig_destroy__ = _Core.delete_PropertyAxis22D_Factory

# Register PropertyAxis22D_Factory in _Core:
_Core.PropertyAxis22D_Factory_swigregister(PropertyAxis22D_Factory)
class PropertyAxis2List_Factory(PropertyFactory):
    r"""Proxy of C++ Core::PropertyAxis2List_Factory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(PropertyAxis2List_Factory self) -> PropertyAxis2List_Factory"""
        _Core.PropertyAxis2List_Factory_swiginit(self, _Core.new_PropertyAxis2List_Factory())
    __swig_destroy__ = _Core.delete_PropertyAxis2List_Factory

# Register PropertyAxis2List_Factory in _Core:
_Core.PropertyAxis2List_Factory_swigregister(PropertyAxis2List_Factory)
class PropertyBackLinkBase(object):
    r"""Proxy of C++ Core::PropertyBackLinkBase class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getClassTypeId = _swig_new_static_method(_Core.PropertyBackLinkBase_getClassTypeId)
    getTypeId = _swig_new_instance_method(_Core.PropertyBackLinkBase_getTypeId)
    setIfcNameAndID = _swig_new_static_method(_Core.PropertyBackLinkBase_setIfcNameAndID)
    init = _swig_new_static_method(_Core.PropertyBackLinkBase_init)
    create = _swig_new_static_method(_Core.PropertyBackLinkBase_create)

    def __init__(self):
        r"""__init__(PropertyBackLinkBase self) -> PropertyBackLinkBase"""
        _Core.PropertyBackLinkBase_swiginit(self, _Core.new_PropertyBackLinkBase())
    setValue = _swig_new_instance_method(_Core.PropertyBackLinkBase_setValue)
    setValueFromVariant = _swig_new_instance_method(_Core.PropertyBackLinkBase_setValueFromVariant)
    copyValue = _swig_new_instance_method(_Core.PropertyBackLinkBase_copyValue)
    getValue = _swig_new_instance_method(_Core.PropertyBackLinkBase_getValue)
    getVariant = _swig_new_instance_method(_Core.PropertyBackLinkBase_getVariant)
    save = _swig_new_instance_method(_Core.PropertyBackLinkBase_save)
    restore = _swig_new_instance_method(_Core.PropertyBackLinkBase_restore)
    isEqual = _swig_new_instance_method(_Core.PropertyBackLinkBase_isEqual)
    getDbgInfo = _swig_new_instance_method(_Core.PropertyBackLinkBase_getDbgInfo)
    getPropertyKind = _swig_new_instance_method(_Core.PropertyBackLinkBase_getPropertyKind)
    copy = _swig_new_instance_method(_Core.PropertyBackLinkBase_copy)
    paste = _swig_new_instance_method(_Core.PropertyBackLinkBase_paste)
    removeLink = _swig_new_instance_method(_Core.PropertyBackLinkBase_removeLink)
    addLink = _swig_new_instance_method(_Core.PropertyBackLinkBase_addLink)
    deepCopy = _swig_new_instance_method(_Core.PropertyBackLinkBase_deepCopy)
    getLinks = _swig_new_instance_method(_Core.PropertyBackLinkBase_getLinks)
    __swig_destroy__ = _Core.delete_PropertyBackLinkBase

# Register PropertyBackLinkBase in _Core:
_Core.PropertyBackLinkBase_swigregister(PropertyBackLinkBase)
PropertyBackLinkBase_getClassTypeId = _Core.PropertyBackLinkBase_getClassTypeId
PropertyBackLinkBase_setIfcNameAndID = _Core.PropertyBackLinkBase_setIfcNameAndID
PropertyBackLinkBase_init = _Core.PropertyBackLinkBase_init
PropertyBackLinkBase_create = _Core.PropertyBackLinkBase_create

class PropertyBackLinkSetBase(object):
    r"""Proxy of C++ Core::PropertyBackLinkSetBase class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getClassTypeId = _swig_new_static_method(_Core.PropertyBackLinkSetBase_getClassTypeId)
    getTypeId = _swig_new_instance_method(_Core.PropertyBackLinkSetBase_getTypeId)
    setIfcNameAndID = _swig_new_static_method(_Core.PropertyBackLinkSetBase_setIfcNameAndID)
    init = _swig_new_static_method(_Core.PropertyBackLinkSetBase_init)
    create = _swig_new_static_method(_Core.PropertyBackLinkSetBase_create)

    def __init__(self):
        r"""__init__(PropertyBackLinkSetBase self) -> PropertyBackLinkSetBase"""
        _Core.PropertyBackLinkSetBase_swiginit(self, _Core.new_PropertyBackLinkSetBase())
    __swig_destroy__ = _Core.delete_PropertyBackLinkSetBase
    setValue = _swig_new_instance_method(_Core.PropertyBackLinkSetBase_setValue)
    setValueFromVariant = _swig_new_instance_method(_Core.PropertyBackLinkSetBase_setValueFromVariant)
    copyValue = _swig_new_instance_method(_Core.PropertyBackLinkSetBase_copyValue)
    getValue = _swig_new_instance_method(_Core.PropertyBackLinkSetBase_getValue)
    addLink = _swig_new_instance_method(_Core.PropertyBackLinkSetBase_addLink)
    addLinks = _swig_new_instance_method(_Core.PropertyBackLinkSetBase_addLinks)
    removeLink = _swig_new_instance_method(_Core.PropertyBackLinkSetBase_removeLink)
    setEmpty = _swig_new_instance_method(_Core.PropertyBackLinkSetBase_setEmpty)
    hasLink = _swig_new_instance_method(_Core.PropertyBackLinkSetBase_hasLink)
    isEmpty = _swig_new_instance_method(_Core.PropertyBackLinkSetBase_isEmpty)
    getSize = _swig_new_instance_method(_Core.PropertyBackLinkSetBase_getSize)
    getVariant = _swig_new_instance_method(_Core.PropertyBackLinkSetBase_getVariant)
    save = _swig_new_instance_method(_Core.PropertyBackLinkSetBase_save)
    restore = _swig_new_instance_method(_Core.PropertyBackLinkSetBase_restore)
    isEqual = _swig_new_instance_method(_Core.PropertyBackLinkSetBase_isEqual)
    getDbgInfo = _swig_new_instance_method(_Core.PropertyBackLinkSetBase_getDbgInfo)
    getPropertyKind = _swig_new_instance_method(_Core.PropertyBackLinkSetBase_getPropertyKind)
    copy = _swig_new_instance_method(_Core.PropertyBackLinkSetBase_copy)
    paste = _swig_new_instance_method(_Core.PropertyBackLinkSetBase_paste)
    deepCopy = _swig_new_instance_method(_Core.PropertyBackLinkSetBase_deepCopy)
    getLinks = _swig_new_instance_method(_Core.PropertyBackLinkSetBase_getLinks)

# Register PropertyBackLinkSetBase in _Core:
_Core.PropertyBackLinkSetBase_swigregister(PropertyBackLinkSetBase)
PropertyBackLinkSetBase_getClassTypeId = _Core.PropertyBackLinkSetBase_getClassTypeId
PropertyBackLinkSetBase_setIfcNameAndID = _Core.PropertyBackLinkSetBase_setIfcNameAndID
PropertyBackLinkSetBase_init = _Core.PropertyBackLinkSetBase_init
PropertyBackLinkSetBase_create = _Core.PropertyBackLinkSetBase_create

class PropertyBackLinkBase_Factory(PropertyFactory):
    r"""Proxy of C++ Core::PropertyBackLinkBase_Factory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(PropertyBackLinkBase_Factory self) -> PropertyBackLinkBase_Factory"""
        _Core.PropertyBackLinkBase_Factory_swiginit(self, _Core.new_PropertyBackLinkBase_Factory())
    __swig_destroy__ = _Core.delete_PropertyBackLinkBase_Factory

# Register PropertyBackLinkBase_Factory in _Core:
_Core.PropertyBackLinkBase_Factory_swigregister(PropertyBackLinkBase_Factory)
class PropertyBackLinkSetBase_Factory(PropertyFactory):
    r"""Proxy of C++ Core::PropertyBackLinkSetBase_Factory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(PropertyBackLinkSetBase_Factory self) -> PropertyBackLinkSetBase_Factory"""
        _Core.PropertyBackLinkSetBase_Factory_swiginit(self, _Core.new_PropertyBackLinkSetBase_Factory())
    __swig_destroy__ = _Core.delete_PropertyBackLinkSetBase_Factory

# Register PropertyBackLinkSetBase_Factory in _Core:
_Core.PropertyBackLinkSetBase_Factory_swigregister(PropertyBackLinkSetBase_Factory)
class PropertyBackLinkSet_SaveV27AsBackLink_Factory(PropertyFactory):
    r"""Proxy of C++ Core::PropertyBackLinkSet_SaveV27AsBackLink_Factory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(PropertyBackLinkSet_SaveV27AsBackLink_Factory self) -> PropertyBackLinkSet_SaveV27AsBackLink_Factory"""
        _Core.PropertyBackLinkSet_SaveV27AsBackLink_Factory_swiginit(self, _Core.new_PropertyBackLinkSet_SaveV27AsBackLink_Factory())
    __swig_destroy__ = _Core.delete_PropertyBackLinkSet_SaveV27AsBackLink_Factory

# Register PropertyBackLinkSet_SaveV27AsBackLink_Factory in _Core:
_Core.PropertyBackLinkSet_SaveV27AsBackLink_Factory_swigregister(PropertyBackLinkSet_SaveV27AsBackLink_Factory)
class PropertyBoolean(Property):
    r"""Proxy of C++ Core::PropertyBoolean class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getClassTypeId = _swig_new_static_method(_Core.PropertyBoolean_getClassTypeId)
    setIfcNameAndID = _swig_new_static_method(_Core.PropertyBoolean_setIfcNameAndID)
    init = _swig_new_static_method(_Core.PropertyBoolean_init)
    create = _swig_new_static_method(_Core.PropertyBoolean_create)
    setValue = _swig_new_instance_method(_Core.PropertyBoolean_setValue)
    getValue = _swig_new_instance_method(_Core.PropertyBoolean_getValue)

    def __init__(self):
        r"""__init__(PropertyBoolean self) -> PropertyBoolean"""
        _Core.PropertyBoolean_swiginit(self, _Core.new_PropertyBoolean())
    __swig_destroy__ = _Core.delete_PropertyBoolean

# Register PropertyBoolean in _Core:
_Core.PropertyBoolean_swigregister(PropertyBoolean)
PropertyBoolean_getClassTypeId = _Core.PropertyBoolean_getClassTypeId
PropertyBoolean_setIfcNameAndID = _Core.PropertyBoolean_setIfcNameAndID
PropertyBoolean_init = _Core.PropertyBoolean_init
PropertyBoolean_create = _Core.PropertyBoolean_create

class PropertyLogical_Factory(PropertyFactory):
    r"""Proxy of C++ Core::PropertyLogical_Factory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(PropertyLogical_Factory self) -> PropertyLogical_Factory"""
        _Core.PropertyLogical_Factory_swiginit(self, _Core.new_PropertyLogical_Factory())
    __swig_destroy__ = _Core.delete_PropertyLogical_Factory

# Register PropertyLogical_Factory in _Core:
_Core.PropertyLogical_Factory_swigregister(PropertyLogical_Factory)
class PropertyBrepData(Property):
    r"""Proxy of C++ Core::PropertyBrepData class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getClassTypeId = _swig_new_static_method(_Core.PropertyBrepData_getClassTypeId)
    setIfcNameAndID = _swig_new_static_method(_Core.PropertyBrepData_setIfcNameAndID)
    init = _swig_new_static_method(_Core.PropertyBrepData_init)
    create = _swig_new_static_method(_Core.PropertyBrepData_create)

    def __init__(self):
        r"""__init__(PropertyBrepData self) -> PropertyBrepData"""
        _Core.PropertyBrepData_swiginit(self, _Core.new_PropertyBrepData())
    setValue = _swig_new_instance_method(_Core.PropertyBrepData_setValue)
    getValue = _swig_new_instance_method(_Core.PropertyBrepData_getValue)
    setEmpty = _swig_new_instance_method(_Core.PropertyBrepData_setEmpty)
    __swig_destroy__ = _Core.delete_PropertyBrepData

# Register PropertyBrepData in _Core:
_Core.PropertyBrepData_swigregister(PropertyBrepData)
PropertyBrepData_getClassTypeId = _Core.PropertyBrepData_getClassTypeId
PropertyBrepData_setIfcNameAndID = _Core.PropertyBrepData_setIfcNameAndID
PropertyBrepData_init = _Core.PropertyBrepData_init
PropertyBrepData_create = _Core.PropertyBrepData_create

class PropertyBrepDataOpt(PropertyBrepData):
    r"""Proxy of C++ Core::PropertyBrepDataOpt class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getClassTypeId = _swig_new_static_method(_Core.PropertyBrepDataOpt_getClassTypeId)
    setIfcNameAndID = _swig_new_static_method(_Core.PropertyBrepDataOpt_setIfcNameAndID)
    init = _swig_new_static_method(_Core.PropertyBrepDataOpt_init)
    create = _swig_new_static_method(_Core.PropertyBrepDataOpt_create)

    def __init__(self):
        r"""__init__(PropertyBrepDataOpt self) -> PropertyBrepDataOpt"""
        _Core.PropertyBrepDataOpt_swiginit(self, _Core.new_PropertyBrepDataOpt())
    __swig_destroy__ = _Core.delete_PropertyBrepDataOpt

# Register PropertyBrepDataOpt in _Core:
_Core.PropertyBrepDataOpt_swigregister(PropertyBrepDataOpt)
PropertyBrepDataOpt_getClassTypeId = _Core.PropertyBrepDataOpt_getClassTypeId
PropertyBrepDataOpt_setIfcNameAndID = _Core.PropertyBrepDataOpt_setIfcNameAndID
PropertyBrepDataOpt_init = _Core.PropertyBrepDataOpt_init
PropertyBrepDataOpt_create = _Core.PropertyBrepDataOpt_create

class PropertyBrepDataSet(Property):
    r"""Proxy of C++ Core::PropertyBrepDataSet class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getClassTypeId = _swig_new_static_method(_Core.PropertyBrepDataSet_getClassTypeId)
    setIfcNameAndID = _swig_new_static_method(_Core.PropertyBrepDataSet_setIfcNameAndID)
    init = _swig_new_static_method(_Core.PropertyBrepDataSet_init)
    create = _swig_new_static_method(_Core.PropertyBrepDataSet_create)

    def __init__(self):
        r"""__init__(PropertyBrepDataSet self) -> PropertyBrepDataSet"""
        _Core.PropertyBrepDataSet_swiginit(self, _Core.new_PropertyBrepDataSet())
    __swig_destroy__ = _Core.delete_PropertyBrepDataSet
    setValue = _swig_new_instance_method(_Core.PropertyBrepDataSet_setValue)
    addBrepData = _swig_new_instance_method(_Core.PropertyBrepDataSet_addBrepData)
    getValue = _swig_new_instance_method(_Core.PropertyBrepDataSet_getValue)
    setEmpty = _swig_new_instance_method(_Core.PropertyBrepDataSet_setEmpty)

# Register PropertyBrepDataSet in _Core:
_Core.PropertyBrepDataSet_swigregister(PropertyBrepDataSet)
PropertyBrepDataSet_getClassTypeId = _Core.PropertyBrepDataSet_getClassTypeId
PropertyBrepDataSet_setIfcNameAndID = _Core.PropertyBrepDataSet_setIfcNameAndID
PropertyBrepDataSet_init = _Core.PropertyBrepDataSet_init
PropertyBrepDataSet_create = _Core.PropertyBrepDataSet_create

class PropertyBrepDataSetOpt(PropertyBrepDataSet):
    r"""Proxy of C++ Core::PropertyBrepDataSetOpt class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getClassTypeId = _swig_new_static_method(_Core.PropertyBrepDataSetOpt_getClassTypeId)
    setIfcNameAndID = _swig_new_static_method(_Core.PropertyBrepDataSetOpt_setIfcNameAndID)
    init = _swig_new_static_method(_Core.PropertyBrepDataSetOpt_init)
    create = _swig_new_static_method(_Core.PropertyBrepDataSetOpt_create)

    def __init__(self):
        r"""__init__(PropertyBrepDataSetOpt self) -> PropertyBrepDataSetOpt"""
        _Core.PropertyBrepDataSetOpt_swiginit(self, _Core.new_PropertyBrepDataSetOpt())
    __swig_destroy__ = _Core.delete_PropertyBrepDataSetOpt

# Register PropertyBrepDataSetOpt in _Core:
_Core.PropertyBrepDataSetOpt_swigregister(PropertyBrepDataSetOpt)
PropertyBrepDataSetOpt_getClassTypeId = _Core.PropertyBrepDataSetOpt_getClassTypeId
PropertyBrepDataSetOpt_setIfcNameAndID = _Core.PropertyBrepDataSetOpt_setIfcNameAndID
PropertyBrepDataSetOpt_init = _Core.PropertyBrepDataSetOpt_init
PropertyBrepDataSetOpt_create = _Core.PropertyBrepDataSetOpt_create

class PropertyBrepData_Factory(PropertyFactory):
    r"""Proxy of C++ Core::PropertyBrepData_Factory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(PropertyBrepData_Factory self) -> PropertyBrepData_Factory"""
        _Core.PropertyBrepData_Factory_swiginit(self, _Core.new_PropertyBrepData_Factory())
    __swig_destroy__ = _Core.delete_PropertyBrepData_Factory

# Register PropertyBrepData_Factory in _Core:
_Core.PropertyBrepData_Factory_swigregister(PropertyBrepData_Factory)
class PropertyBrepDataSet_Factory(PropertyFactory):
    r"""Proxy of C++ Core::PropertyBrepDataSet_Factory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(PropertyBrepDataSet_Factory self) -> PropertyBrepDataSet_Factory"""
        _Core.PropertyBrepDataSet_Factory_swiginit(self, _Core.new_PropertyBrepDataSet_Factory())
    __swig_destroy__ = _Core.delete_PropertyBrepDataSet_Factory

# Register PropertyBrepDataSet_Factory in _Core:
_Core.PropertyBrepDataSet_Factory_swigregister(PropertyBrepDataSet_Factory)
class PropertyBrush(Property):
    r"""Proxy of C++ Core::PropertyBrush class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getClassTypeId = _swig_new_static_method(_Core.PropertyBrush_getClassTypeId)
    setIfcNameAndID = _swig_new_static_method(_Core.PropertyBrush_setIfcNameAndID)
    init = _swig_new_static_method(_Core.PropertyBrush_init)
    create = _swig_new_static_method(_Core.PropertyBrush_create)

    def __init__(self):
        r"""__init__(PropertyBrush self) -> PropertyBrush"""
        _Core.PropertyBrush_swiginit(self, _Core.new_PropertyBrush())
    __swig_destroy__ = _Core.delete_PropertyBrush
    setValue = _swig_new_instance_method(_Core.PropertyBrush_setValue)
    getValue = _swig_new_instance_method(_Core.PropertyBrush_getValue)

# Register PropertyBrush in _Core:
_Core.PropertyBrush_swigregister(PropertyBrush)
PropertyBrush_getClassTypeId = _Core.PropertyBrush_getClassTypeId
PropertyBrush_setIfcNameAndID = _Core.PropertyBrush_setIfcNameAndID
PropertyBrush_init = _Core.PropertyBrush_init
PropertyBrush_create = _Core.PropertyBrush_create

class PropertyBrush_Factory(PropertyFactory):
    r"""Proxy of C++ Core::PropertyBrush_Factory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(PropertyBrush_Factory self) -> PropertyBrush_Factory"""
        _Core.PropertyBrush_Factory_swiginit(self, _Core.new_PropertyBrush_Factory())
    __swig_destroy__ = _Core.delete_PropertyBrush_Factory

# Register PropertyBrush_Factory in _Core:
_Core.PropertyBrush_Factory_swigregister(PropertyBrush_Factory)
class PropertyColor(Property):
    r"""Proxy of C++ Core::PropertyColor class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getClassTypeId = _swig_new_static_method(_Core.PropertyColor_getClassTypeId)
    setIfcNameAndID = _swig_new_static_method(_Core.PropertyColor_setIfcNameAndID)
    init = _swig_new_static_method(_Core.PropertyColor_init)
    create = _swig_new_static_method(_Core.PropertyColor_create)
    setValue = _swig_new_instance_method(_Core.PropertyColor_setValue)
    getValue = _swig_new_instance_method(_Core.PropertyColor_getValue)

    def __init__(self):
        r"""__init__(PropertyColor self) -> PropertyColor"""
        _Core.PropertyColor_swiginit(self, _Core.new_PropertyColor())
    __swig_destroy__ = _Core.delete_PropertyColor

# Register PropertyColor in _Core:
_Core.PropertyColor_swigregister(PropertyColor)
PropertyColor_getClassTypeId = _Core.PropertyColor_getClassTypeId
PropertyColor_setIfcNameAndID = _Core.PropertyColor_setIfcNameAndID
PropertyColor_init = _Core.PropertyColor_init
PropertyColor_create = _Core.PropertyColor_create

class PropertyColorList(Property):
    r"""Proxy of C++ Core::PropertyColorList class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getClassTypeId = _swig_new_static_method(_Core.PropertyColorList_getClassTypeId)
    setIfcNameAndID = _swig_new_static_method(_Core.PropertyColorList_setIfcNameAndID)
    init = _swig_new_static_method(_Core.PropertyColorList_init)
    create = _swig_new_static_method(_Core.PropertyColorList_create)
    setValue = _swig_new_instance_method(_Core.PropertyColorList_setValue)
    addColor = _swig_new_instance_method(_Core.PropertyColorList_addColor)
    setEmpty = _swig_new_instance_method(_Core.PropertyColorList_setEmpty)
    isEmpty = _swig_new_instance_method(_Core.PropertyColorList_isEmpty)
    getValue = _swig_new_instance_method(_Core.PropertyColorList_getValue)

    def __init__(self):
        r"""__init__(PropertyColorList self) -> PropertyColorList"""
        _Core.PropertyColorList_swiginit(self, _Core.new_PropertyColorList())
    __swig_destroy__ = _Core.delete_PropertyColorList

# Register PropertyColorList in _Core:
_Core.PropertyColorList_swigregister(PropertyColorList)
PropertyColorList_getClassTypeId = _Core.PropertyColorList_getClassTypeId
PropertyColorList_setIfcNameAndID = _Core.PropertyColorList_setIfcNameAndID
PropertyColorList_init = _Core.PropertyColorList_init
PropertyColorList_create = _Core.PropertyColorList_create

class PropertyColorOpt(PropertyColor):
    r"""Proxy of C++ Core::PropertyColorOpt class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getClassTypeId = _swig_new_static_method(_Core.PropertyColorOpt_getClassTypeId)
    setIfcNameAndID = _swig_new_static_method(_Core.PropertyColorOpt_setIfcNameAndID)
    init = _swig_new_static_method(_Core.PropertyColorOpt_init)
    create = _swig_new_static_method(_Core.PropertyColorOpt_create)

    def __init__(self):
        r"""__init__(PropertyColorOpt self) -> PropertyColorOpt"""
        _Core.PropertyColorOpt_swiginit(self, _Core.new_PropertyColorOpt())
    __swig_destroy__ = _Core.delete_PropertyColorOpt

# Register PropertyColorOpt in _Core:
_Core.PropertyColorOpt_swigregister(PropertyColorOpt)
PropertyColorOpt_getClassTypeId = _Core.PropertyColorOpt_getClassTypeId
PropertyColorOpt_setIfcNameAndID = _Core.PropertyColorOpt_setIfcNameAndID
PropertyColorOpt_init = _Core.PropertyColorOpt_init
PropertyColorOpt_create = _Core.PropertyColorOpt_create

class PropertyColor_Factory(PropertyFactory):
    r"""Proxy of C++ Core::PropertyColor_Factory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(PropertyColor_Factory self) -> PropertyColor_Factory"""
        _Core.PropertyColor_Factory_swiginit(self, _Core.new_PropertyColor_Factory())
    __swig_destroy__ = _Core.delete_PropertyColor_Factory

# Register PropertyColor_Factory in _Core:
_Core.PropertyColor_Factory_swigregister(PropertyColor_Factory)
class PropertyColorOpt_Factory(PropertyFactory):
    r"""Proxy of C++ Core::PropertyColorOpt_Factory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(PropertyColorOpt_Factory self) -> PropertyColorOpt_Factory"""
        _Core.PropertyColorOpt_Factory_swiginit(self, _Core.new_PropertyColorOpt_Factory())
    __swig_destroy__ = _Core.delete_PropertyColorOpt_Factory

# Register PropertyColorOpt_Factory in _Core:
_Core.PropertyColorOpt_Factory_swigregister(PropertyColorOpt_Factory)
class PropertyColorList_Factory(PropertyFactory):
    r"""Proxy of C++ Core::PropertyColorList_Factory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(PropertyColorList_Factory self) -> PropertyColorList_Factory"""
        _Core.PropertyColorList_Factory_swiginit(self, _Core.new_PropertyColorList_Factory())
    __swig_destroy__ = _Core.delete_PropertyColorList_Factory

# Register PropertyColorList_Factory in _Core:
_Core.PropertyColorList_Factory_swigregister(PropertyColorList_Factory)
class PropertyCompoundPlaneAngle(Property):
    r"""Proxy of C++ Core::PropertyCompoundPlaneAngle class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getClassTypeId = _swig_new_static_method(_Core.PropertyCompoundPlaneAngle_getClassTypeId)
    setIfcNameAndID = _swig_new_static_method(_Core.PropertyCompoundPlaneAngle_setIfcNameAndID)
    init = _swig_new_static_method(_Core.PropertyCompoundPlaneAngle_init)
    create = _swig_new_static_method(_Core.PropertyCompoundPlaneAngle_create)
    setValue = _swig_new_instance_method(_Core.PropertyCompoundPlaneAngle_setValue)
    getValue = _swig_new_instance_method(_Core.PropertyCompoundPlaneAngle_getValue)

    def __init__(self):
        r"""__init__(PropertyCompoundPlaneAngle self) -> PropertyCompoundPlaneAngle"""
        _Core.PropertyCompoundPlaneAngle_swiginit(self, _Core.new_PropertyCompoundPlaneAngle())
    __swig_destroy__ = _Core.delete_PropertyCompoundPlaneAngle

# Register PropertyCompoundPlaneAngle in _Core:
_Core.PropertyCompoundPlaneAngle_swigregister(PropertyCompoundPlaneAngle)
PropertyCompoundPlaneAngle_getClassTypeId = _Core.PropertyCompoundPlaneAngle_getClassTypeId
PropertyCompoundPlaneAngle_setIfcNameAndID = _Core.PropertyCompoundPlaneAngle_setIfcNameAndID
PropertyCompoundPlaneAngle_init = _Core.PropertyCompoundPlaneAngle_init
PropertyCompoundPlaneAngle_create = _Core.PropertyCompoundPlaneAngle_create

class PropertyCompoundPlaneAngle_Factory(PropertyFactory):
    r"""Proxy of C++ Core::PropertyCompoundPlaneAngle_Factory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(PropertyCompoundPlaneAngle_Factory self) -> PropertyCompoundPlaneAngle_Factory"""
        _Core.PropertyCompoundPlaneAngle_Factory_swiginit(self, _Core.new_PropertyCompoundPlaneAngle_Factory())
    __swig_destroy__ = _Core.delete_PropertyCompoundPlaneAngle_Factory

# Register PropertyCompoundPlaneAngle_Factory in _Core:
_Core.PropertyCompoundPlaneAngle_Factory_swigregister(PropertyCompoundPlaneAngle_Factory)
class PropertyCompoundPlaneAngleOpt(PropertyCompoundPlaneAngle):
    r"""Proxy of C++ Core::PropertyCompoundPlaneAngleOpt class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getClassTypeId = _swig_new_static_method(_Core.PropertyCompoundPlaneAngleOpt_getClassTypeId)
    setIfcNameAndID = _swig_new_static_method(_Core.PropertyCompoundPlaneAngleOpt_setIfcNameAndID)
    init = _swig_new_static_method(_Core.PropertyCompoundPlaneAngleOpt_init)
    create = _swig_new_static_method(_Core.PropertyCompoundPlaneAngleOpt_create)

    def __init__(self):
        r"""__init__(PropertyCompoundPlaneAngleOpt self) -> PropertyCompoundPlaneAngleOpt"""
        _Core.PropertyCompoundPlaneAngleOpt_swiginit(self, _Core.new_PropertyCompoundPlaneAngleOpt())
    __swig_destroy__ = _Core.delete_PropertyCompoundPlaneAngleOpt

# Register PropertyCompoundPlaneAngleOpt in _Core:
_Core.PropertyCompoundPlaneAngleOpt_swigregister(PropertyCompoundPlaneAngleOpt)
PropertyCompoundPlaneAngleOpt_getClassTypeId = _Core.PropertyCompoundPlaneAngleOpt_getClassTypeId
PropertyCompoundPlaneAngleOpt_setIfcNameAndID = _Core.PropertyCompoundPlaneAngleOpt_setIfcNameAndID
PropertyCompoundPlaneAngleOpt_init = _Core.PropertyCompoundPlaneAngleOpt_init
PropertyCompoundPlaneAngleOpt_create = _Core.PropertyCompoundPlaneAngleOpt_create

class PropertyDirection(Property):
    r"""Proxy of C++ Core::PropertyDirection class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getClassTypeId = _swig_new_static_method(_Core.PropertyDirection_getClassTypeId)
    setIfcNameAndID = _swig_new_static_method(_Core.PropertyDirection_setIfcNameAndID)
    init = _swig_new_static_method(_Core.PropertyDirection_init)
    create = _swig_new_static_method(_Core.PropertyDirection_create)
    setValue = _swig_new_instance_method(_Core.PropertyDirection_setValue)
    getValue = _swig_new_instance_method(_Core.PropertyDirection_getValue)

    def __init__(self):
        r"""__init__(PropertyDirection self) -> PropertyDirection"""
        _Core.PropertyDirection_swiginit(self, _Core.new_PropertyDirection())
    __swig_destroy__ = _Core.delete_PropertyDirection

# Register PropertyDirection in _Core:
_Core.PropertyDirection_swigregister(PropertyDirection)
PropertyDirection_getClassTypeId = _Core.PropertyDirection_getClassTypeId
PropertyDirection_setIfcNameAndID = _Core.PropertyDirection_setIfcNameAndID
PropertyDirection_init = _Core.PropertyDirection_init
PropertyDirection_create = _Core.PropertyDirection_create

class PropertyDirection2d(Property):
    r"""Proxy of C++ Core::PropertyDirection2d class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getClassTypeId = _swig_new_static_method(_Core.PropertyDirection2d_getClassTypeId)
    setIfcNameAndID = _swig_new_static_method(_Core.PropertyDirection2d_setIfcNameAndID)
    init = _swig_new_static_method(_Core.PropertyDirection2d_init)
    create = _swig_new_static_method(_Core.PropertyDirection2d_create)
    setValue = _swig_new_instance_method(_Core.PropertyDirection2d_setValue)
    getValue = _swig_new_instance_method(_Core.PropertyDirection2d_getValue)

    def __init__(self):
        r"""__init__(PropertyDirection2d self) -> PropertyDirection2d"""
        _Core.PropertyDirection2d_swiginit(self, _Core.new_PropertyDirection2d())
    __swig_destroy__ = _Core.delete_PropertyDirection2d

# Register PropertyDirection2d in _Core:
_Core.PropertyDirection2d_swigregister(PropertyDirection2d)
PropertyDirection2d_getClassTypeId = _Core.PropertyDirection2d_getClassTypeId
PropertyDirection2d_setIfcNameAndID = _Core.PropertyDirection2d_setIfcNameAndID
PropertyDirection2d_init = _Core.PropertyDirection2d_init
PropertyDirection2d_create = _Core.PropertyDirection2d_create

class PropertyDirection_Factory(PropertyFactory):
    r"""Proxy of C++ Core::PropertyDirection_Factory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(PropertyDirection_Factory self) -> PropertyDirection_Factory"""
        _Core.PropertyDirection_Factory_swiginit(self, _Core.new_PropertyDirection_Factory())
    __swig_destroy__ = _Core.delete_PropertyDirection_Factory

# Register PropertyDirection_Factory in _Core:
_Core.PropertyDirection_Factory_swigregister(PropertyDirection_Factory)
class PropertyDirection2d_Factory(PropertyFactory):
    r"""Proxy of C++ Core::PropertyDirection2d_Factory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(PropertyDirection2d_Factory self) -> PropertyDirection2d_Factory"""
        _Core.PropertyDirection2d_Factory_swiginit(self, _Core.new_PropertyDirection2d_Factory())
    __swig_destroy__ = _Core.delete_PropertyDirection2d_Factory

# Register PropertyDirection2d_Factory in _Core:
_Core.PropertyDirection2d_Factory_swigregister(PropertyDirection2d_Factory)
class PropertyDrawStyle(Property):
    r"""Proxy of C++ Core::PropertyDrawStyle class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getClassTypeId = _swig_new_static_method(_Core.PropertyDrawStyle_getClassTypeId)
    setIfcNameAndID = _swig_new_static_method(_Core.PropertyDrawStyle_setIfcNameAndID)
    init = _swig_new_static_method(_Core.PropertyDrawStyle_init)
    create = _swig_new_static_method(_Core.PropertyDrawStyle_create)
    setValue = _swig_new_instance_method(_Core.PropertyDrawStyle_setValue)
    getValue = _swig_new_instance_method(_Core.PropertyDrawStyle_getValue)

    def __init__(self):
        r"""__init__(PropertyDrawStyle self) -> PropertyDrawStyle"""
        _Core.PropertyDrawStyle_swiginit(self, _Core.new_PropertyDrawStyle())
    __swig_destroy__ = _Core.delete_PropertyDrawStyle

# Register PropertyDrawStyle in _Core:
_Core.PropertyDrawStyle_swigregister(PropertyDrawStyle)
PropertyDrawStyle_getClassTypeId = _Core.PropertyDrawStyle_getClassTypeId
PropertyDrawStyle_setIfcNameAndID = _Core.PropertyDrawStyle_setIfcNameAndID
PropertyDrawStyle_init = _Core.PropertyDrawStyle_init
PropertyDrawStyle_create = _Core.PropertyDrawStyle_create

class PropertyDrawStyle_Factory(PropertyFactory):
    r"""Proxy of C++ Core::PropertyDrawStyle_Factory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(PropertyDrawStyle_Factory self) -> PropertyDrawStyle_Factory"""
        _Core.PropertyDrawStyle_Factory_swiginit(self, _Core.new_PropertyDrawStyle_Factory())
    __swig_destroy__ = _Core.delete_PropertyDrawStyle_Factory

# Register PropertyDrawStyle_Factory in _Core:
_Core.PropertyDrawStyle_Factory_swigregister(PropertyDrawStyle_Factory)
class PropertyArrowheads(Property):
    r"""Proxy of C++ Core::PropertyArrowheads class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getClassTypeId = _swig_new_static_method(_Core.PropertyArrowheads_getClassTypeId)
    setIfcNameAndID = _swig_new_static_method(_Core.PropertyArrowheads_setIfcNameAndID)
    init = _swig_new_static_method(_Core.PropertyArrowheads_init)
    create = _swig_new_static_method(_Core.PropertyArrowheads_create)
    setValue = _swig_new_instance_method(_Core.PropertyArrowheads_setValue)
    getValue = _swig_new_instance_method(_Core.PropertyArrowheads_getValue)

    def __init__(self):
        r"""__init__(PropertyArrowheads self) -> PropertyArrowheads"""
        _Core.PropertyArrowheads_swiginit(self, _Core.new_PropertyArrowheads())
    __swig_destroy__ = _Core.delete_PropertyArrowheads

# Register PropertyArrowheads in _Core:
_Core.PropertyArrowheads_swigregister(PropertyArrowheads)
PropertyArrowheads_getClassTypeId = _Core.PropertyArrowheads_getClassTypeId
PropertyArrowheads_setIfcNameAndID = _Core.PropertyArrowheads_setIfcNameAndID
PropertyArrowheads_init = _Core.PropertyArrowheads_init
PropertyArrowheads_create = _Core.PropertyArrowheads_create

class PropertyArrowheads_Factory(PropertyFactory):
    r"""Proxy of C++ Core::PropertyArrowheads_Factory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(PropertyArrowheads_Factory self) -> PropertyArrowheads_Factory"""
        _Core.PropertyArrowheads_Factory_swiginit(self, _Core.new_PropertyArrowheads_Factory())
    __swig_destroy__ = _Core.delete_PropertyArrowheads_Factory

# Register PropertyArrowheads_Factory in _Core:
_Core.PropertyArrowheads_Factory_swigregister(PropertyArrowheads_Factory)
class PropertyEmbeddedFile(Property):
    r"""Proxy of C++ Core::PropertyEmbeddedFile class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getClassTypeId = _swig_new_static_method(_Core.PropertyEmbeddedFile_getClassTypeId)
    setIfcNameAndID = _swig_new_static_method(_Core.PropertyEmbeddedFile_setIfcNameAndID)
    init = _swig_new_static_method(_Core.PropertyEmbeddedFile_init)
    create = _swig_new_static_method(_Core.PropertyEmbeddedFile_create)

    def __init__(self):
        r"""__init__(PropertyEmbeddedFile self) -> PropertyEmbeddedFile"""
        _Core.PropertyEmbeddedFile_swiginit(self, _Core.new_PropertyEmbeddedFile())
    __swig_destroy__ = _Core.delete_PropertyEmbeddedFile
    setValue = _swig_new_instance_method(_Core.PropertyEmbeddedFile_setValue)
    setFilename = _swig_new_instance_method(_Core.PropertyEmbeddedFile_setFilename)
    getValue = _swig_new_instance_method(_Core.PropertyEmbeddedFile_getValue)
    hasContent = _swig_new_instance_method(_Core.PropertyEmbeddedFile_hasContent)
    getFileName = _swig_new_instance_method(_Core.PropertyEmbeddedFile_getFileName)
    getContent = _swig_new_instance_method(_Core.PropertyEmbeddedFile_getContent)
    isSaveInLine = _swig_new_instance_method(_Core.PropertyEmbeddedFile_isSaveInLine)

# Register PropertyEmbeddedFile in _Core:
_Core.PropertyEmbeddedFile_swigregister(PropertyEmbeddedFile)
PropertyEmbeddedFile_getClassTypeId = _Core.PropertyEmbeddedFile_getClassTypeId
PropertyEmbeddedFile_setIfcNameAndID = _Core.PropertyEmbeddedFile_setIfcNameAndID
PropertyEmbeddedFile_init = _Core.PropertyEmbeddedFile_init
PropertyEmbeddedFile_create = _Core.PropertyEmbeddedFile_create

class PropertyEmbeddedFile_Factory(PropertyFactory):
    r"""Proxy of C++ Core::PropertyEmbeddedFile_Factory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(PropertyEmbeddedFile_Factory self) -> PropertyEmbeddedFile_Factory"""
        _Core.PropertyEmbeddedFile_Factory_swiginit(self, _Core.new_PropertyEmbeddedFile_Factory())
    __swig_destroy__ = _Core.delete_PropertyEmbeddedFile_Factory

# Register PropertyEmbeddedFile_Factory in _Core:
_Core.PropertyEmbeddedFile_Factory_swigregister(PropertyEmbeddedFile_Factory)
class PropertyFace(Property):
    r"""Proxy of C++ Core::PropertyFace class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    getClassTypeId = _swig_new_static_method(_Core.PropertyFace_getClassTypeId)
    setIfcNameAndID = _swig_new_static_method(_Core.PropertyFace_setIfcNameAndID)
    init = _swig_new_static_method(_Core.PropertyFace_init)
    create = _swig_new_static_method(_Core.PropertyFace_create)
    setValue = _swig_new_instance_method(_Core.PropertyFace_setValue)
    getValue = _swig_new_instance_method(_Core.PropertyFace_getValue)
    __swig_destroy__ = _Core.delete_PropertyFace

# Register PropertyFace in _Core:
_Core.PropertyFace_swigregister(PropertyFace)
PropertyFace_getClassTypeId = _Core.PropertyFace_getClassTypeId
PropertyFace_setIfcNameAndID = _Core.PropertyFace_setIfcNameAndID
PropertyFace_init = _Core.PropertyFace_init
PropertyFace_create = _Core.PropertyFace_create

class PropertyFile(Property):
    r"""Proxy of C++ Core::PropertyFile class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getClassTypeId = _swig_new_static_method(_Core.PropertyFile_getClassTypeId)
    setIfcNameAndID = _swig_new_static_method(_Core.PropertyFile_setIfcNameAndID)
    init = _swig_new_static_method(_Core.PropertyFile_init)
    create = _swig_new_static_method(_Core.PropertyFile_create)
    setValue = _swig_new_instance_method(_Core.PropertyFile_setValue)
    getValue = _swig_new_instance_method(_Core.PropertyFile_getValue)

    def __init__(self):
        r"""__init__(PropertyFile self) -> PropertyFile"""
        _Core.PropertyFile_swiginit(self, _Core.new_PropertyFile())
    __swig_destroy__ = _Core.delete_PropertyFile

# Register PropertyFile in _Core:
_Core.PropertyFile_swigregister(PropertyFile)
PropertyFile_getClassTypeId = _Core.PropertyFile_getClassTypeId
PropertyFile_setIfcNameAndID = _Core.PropertyFile_setIfcNameAndID
PropertyFile_init = _Core.PropertyFile_init
PropertyFile_create = _Core.PropertyFile_create

class PropertyFile_Factory(PropertyFactory):
    r"""Proxy of C++ Core::PropertyFile_Factory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(PropertyFile_Factory self) -> PropertyFile_Factory"""
        _Core.PropertyFile_Factory_swiginit(self, _Core.new_PropertyFile_Factory())
    __swig_destroy__ = _Core.delete_PropertyFile_Factory

# Register PropertyFile_Factory in _Core:
_Core.PropertyFile_Factory_swigregister(PropertyFile_Factory)
class PropertyFont(Property):
    r"""Proxy of C++ Core::PropertyFont class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getClassTypeId = _swig_new_static_method(_Core.PropertyFont_getClassTypeId)
    setIfcNameAndID = _swig_new_static_method(_Core.PropertyFont_setIfcNameAndID)
    init = _swig_new_static_method(_Core.PropertyFont_init)
    create = _swig_new_static_method(_Core.PropertyFont_create)

    def __init__(self, *args):
        r"""
        __init__(PropertyFont self) -> PropertyFont
        __init__(PropertyFont self, PropertyFont o) -> PropertyFont
        """
        _Core.PropertyFont_swiginit(self, _Core.new_PropertyFont(*args))
    __swig_destroy__ = _Core.delete_PropertyFont
    assign = _swig_new_instance_method(_Core.PropertyFont_assign)
    setValue = _swig_new_instance_method(_Core.PropertyFont_setValue)
    getValue = _swig_new_instance_method(_Core.PropertyFont_getValue)

# Register PropertyFont in _Core:
_Core.PropertyFont_swigregister(PropertyFont)
PropertyFont_getClassTypeId = _Core.PropertyFont_getClassTypeId
PropertyFont_setIfcNameAndID = _Core.PropertyFont_setIfcNameAndID
PropertyFont_init = _Core.PropertyFont_init
PropertyFont_create = _Core.PropertyFont_create

class PropertyFont_Factory(PropertyFactory):
    r"""Proxy of C++ Core::PropertyFont_Factory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(PropertyFont_Factory self) -> PropertyFont_Factory"""
        _Core.PropertyFont_Factory_swiginit(self, _Core.new_PropertyFont_Factory())
    __swig_destroy__ = _Core.delete_PropertyFont_Factory

# Register PropertyFont_Factory in _Core:
_Core.PropertyFont_Factory_swigregister(PropertyFont_Factory)
class PropertyInteger(Property):
    r"""Proxy of C++ Core::PropertyInteger class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getClassTypeId = _swig_new_static_method(_Core.PropertyInteger_getClassTypeId)
    setIfcNameAndID = _swig_new_static_method(_Core.PropertyInteger_setIfcNameAndID)
    init = _swig_new_static_method(_Core.PropertyInteger_init)
    create = _swig_new_static_method(_Core.PropertyInteger_create)
    setValue = _swig_new_instance_method(_Core.PropertyInteger_setValue)
    getValue = _swig_new_instance_method(_Core.PropertyInteger_getValue)

    def __init__(self):
        r"""__init__(PropertyInteger self) -> PropertyInteger"""
        _Core.PropertyInteger_swiginit(self, _Core.new_PropertyInteger())
    __swig_destroy__ = _Core.delete_PropertyInteger

# Register PropertyInteger in _Core:
_Core.PropertyInteger_swigregister(PropertyInteger)
PropertyInteger_getClassTypeId = _Core.PropertyInteger_getClassTypeId
PropertyInteger_setIfcNameAndID = _Core.PropertyInteger_setIfcNameAndID
PropertyInteger_init = _Core.PropertyInteger_init
PropertyInteger_create = _Core.PropertyInteger_create

class PropertyLong(Property):
    r"""Proxy of C++ Core::PropertyLong class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getClassTypeId = _swig_new_static_method(_Core.PropertyLong_getClassTypeId)
    setIfcNameAndID = _swig_new_static_method(_Core.PropertyLong_setIfcNameAndID)
    init = _swig_new_static_method(_Core.PropertyLong_init)
    create = _swig_new_static_method(_Core.PropertyLong_create)
    setValue = _swig_new_instance_method(_Core.PropertyLong_setValue)
    getValue = _swig_new_instance_method(_Core.PropertyLong_getValue)

    def __init__(self):
        r"""__init__(PropertyLong self) -> PropertyLong"""
        _Core.PropertyLong_swiginit(self, _Core.new_PropertyLong())
    __swig_destroy__ = _Core.delete_PropertyLong

# Register PropertyLong in _Core:
_Core.PropertyLong_swigregister(PropertyLong)
PropertyLong_getClassTypeId = _Core.PropertyLong_getClassTypeId
PropertyLong_setIfcNameAndID = _Core.PropertyLong_setIfcNameAndID
PropertyLong_init = _Core.PropertyLong_init
PropertyLong_create = _Core.PropertyLong_create

class PropertyUInt64(Property):
    r"""Proxy of C++ Core::PropertyUInt64 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getClassTypeId = _swig_new_static_method(_Core.PropertyUInt64_getClassTypeId)
    setIfcNameAndID = _swig_new_static_method(_Core.PropertyUInt64_setIfcNameAndID)
    init = _swig_new_static_method(_Core.PropertyUInt64_init)
    create = _swig_new_static_method(_Core.PropertyUInt64_create)
    setValue = _swig_new_instance_method(_Core.PropertyUInt64_setValue)
    getValue = _swig_new_instance_method(_Core.PropertyUInt64_getValue)
    getBitset = _swig_new_instance_method(_Core.PropertyUInt64_getBitset)

    def __init__(self):
        r"""__init__(PropertyUInt64 self) -> PropertyUInt64"""
        _Core.PropertyUInt64_swiginit(self, _Core.new_PropertyUInt64())
    __swig_destroy__ = _Core.delete_PropertyUInt64

# Register PropertyUInt64 in _Core:
_Core.PropertyUInt64_swigregister(PropertyUInt64)
PropertyUInt64_getClassTypeId = _Core.PropertyUInt64_getClassTypeId
PropertyUInt64_setIfcNameAndID = _Core.PropertyUInt64_setIfcNameAndID
PropertyUInt64_init = _Core.PropertyUInt64_init
PropertyUInt64_create = _Core.PropertyUInt64_create

class PropertyUInt32(Property):
    r"""Proxy of C++ Core::PropertyUInt32 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getClassTypeId = _swig_new_static_method(_Core.PropertyUInt32_getClassTypeId)
    setIfcNameAndID = _swig_new_static_method(_Core.PropertyUInt32_setIfcNameAndID)
    init = _swig_new_static_method(_Core.PropertyUInt32_init)
    create = _swig_new_static_method(_Core.PropertyUInt32_create)
    setValue = _swig_new_instance_method(_Core.PropertyUInt32_setValue)
    getValue = _swig_new_instance_method(_Core.PropertyUInt32_getValue)
    getBitset = _swig_new_instance_method(_Core.PropertyUInt32_getBitset)

    def __init__(self):
        r"""__init__(PropertyUInt32 self) -> PropertyUInt32"""
        _Core.PropertyUInt32_swiginit(self, _Core.new_PropertyUInt32())
    __swig_destroy__ = _Core.delete_PropertyUInt32

# Register PropertyUInt32 in _Core:
_Core.PropertyUInt32_swigregister(PropertyUInt32)
PropertyUInt32_getClassTypeId = _Core.PropertyUInt32_getClassTypeId
PropertyUInt32_setIfcNameAndID = _Core.PropertyUInt32_setIfcNameAndID
PropertyUInt32_init = _Core.PropertyUInt32_init
PropertyUInt32_create = _Core.PropertyUInt32_create

class PropertyUInt8(Property):
    r"""Proxy of C++ Core::PropertyUInt8 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getClassTypeId = _swig_new_static_method(_Core.PropertyUInt8_getClassTypeId)
    setIfcNameAndID = _swig_new_static_method(_Core.PropertyUInt8_setIfcNameAndID)
    init = _swig_new_static_method(_Core.PropertyUInt8_init)
    create = _swig_new_static_method(_Core.PropertyUInt8_create)
    setValue = _swig_new_instance_method(_Core.PropertyUInt8_setValue)
    getValue = _swig_new_instance_method(_Core.PropertyUInt8_getValue)

    def __init__(self):
        r"""__init__(PropertyUInt8 self) -> PropertyUInt8"""
        _Core.PropertyUInt8_swiginit(self, _Core.new_PropertyUInt8())
    __swig_destroy__ = _Core.delete_PropertyUInt8

# Register PropertyUInt8 in _Core:
_Core.PropertyUInt8_swigregister(PropertyUInt8)
PropertyUInt8_getClassTypeId = _Core.PropertyUInt8_getClassTypeId
PropertyUInt8_setIfcNameAndID = _Core.PropertyUInt8_setIfcNameAndID
PropertyUInt8_init = _Core.PropertyUInt8_init
PropertyUInt8_create = _Core.PropertyUInt8_create

class PropertyNumberOfDecimals(PropertyInteger):
    r"""Proxy of C++ Core::PropertyNumberOfDecimals class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getClassTypeId = _swig_new_static_method(_Core.PropertyNumberOfDecimals_getClassTypeId)
    setIfcNameAndID = _swig_new_static_method(_Core.PropertyNumberOfDecimals_setIfcNameAndID)
    init = _swig_new_static_method(_Core.PropertyNumberOfDecimals_init)
    create = _swig_new_static_method(_Core.PropertyNumberOfDecimals_create)

    def __init__(self):
        r"""__init__(PropertyNumberOfDecimals self) -> PropertyNumberOfDecimals"""
        _Core.PropertyNumberOfDecimals_swiginit(self, _Core.new_PropertyNumberOfDecimals())
    __swig_destroy__ = _Core.delete_PropertyNumberOfDecimals

# Register PropertyNumberOfDecimals in _Core:
_Core.PropertyNumberOfDecimals_swigregister(PropertyNumberOfDecimals)
PropertyNumberOfDecimals_getClassTypeId = _Core.PropertyNumberOfDecimals_getClassTypeId
PropertyNumberOfDecimals_setIfcNameAndID = _Core.PropertyNumberOfDecimals_setIfcNameAndID
PropertyNumberOfDecimals_init = _Core.PropertyNumberOfDecimals_init
PropertyNumberOfDecimals_create = _Core.PropertyNumberOfDecimals_create

class PropertyIndex(PropertyInteger):
    r"""Proxy of C++ Core::PropertyIndex class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getClassTypeId = _swig_new_static_method(_Core.PropertyIndex_getClassTypeId)
    setIfcNameAndID = _swig_new_static_method(_Core.PropertyIndex_setIfcNameAndID)
    init = _swig_new_static_method(_Core.PropertyIndex_init)
    create = _swig_new_static_method(_Core.PropertyIndex_create)

    def __init__(self):
        r"""__init__(PropertyIndex self) -> PropertyIndex"""
        _Core.PropertyIndex_swiginit(self, _Core.new_PropertyIndex())
    __swig_destroy__ = _Core.delete_PropertyIndex

# Register PropertyIndex in _Core:
_Core.PropertyIndex_swigregister(PropertyIndex)
PropertyIndex_getClassTypeId = _Core.PropertyIndex_getClassTypeId
PropertyIndex_setIfcNameAndID = _Core.PropertyIndex_setIfcNameAndID
PropertyIndex_init = _Core.PropertyIndex_init
PropertyIndex_create = _Core.PropertyIndex_create

class PropertyCountMeasure(PropertyInteger):
    r"""Proxy of C++ Core::PropertyCountMeasure class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getClassTypeId = _swig_new_static_method(_Core.PropertyCountMeasure_getClassTypeId)
    setIfcNameAndID = _swig_new_static_method(_Core.PropertyCountMeasure_setIfcNameAndID)
    init = _swig_new_static_method(_Core.PropertyCountMeasure_init)
    create = _swig_new_static_method(_Core.PropertyCountMeasure_create)

    def __init__(self):
        r"""__init__(PropertyCountMeasure self) -> PropertyCountMeasure"""
        _Core.PropertyCountMeasure_swiginit(self, _Core.new_PropertyCountMeasure())
    __swig_destroy__ = _Core.delete_PropertyCountMeasure

# Register PropertyCountMeasure in _Core:
_Core.PropertyCountMeasure_swigregister(PropertyCountMeasure)
PropertyCountMeasure_getClassTypeId = _Core.PropertyCountMeasure_getClassTypeId
PropertyCountMeasure_setIfcNameAndID = _Core.PropertyCountMeasure_setIfcNameAndID
PropertyCountMeasure_init = _Core.PropertyCountMeasure_init
PropertyCountMeasure_create = _Core.PropertyCountMeasure_create

class PropertyIndexList(Property):
    r"""Proxy of C++ Core::PropertyIndexList class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getClassTypeId = _swig_new_static_method(_Core.PropertyIndexList_getClassTypeId)
    setIfcNameAndID = _swig_new_static_method(_Core.PropertyIndexList_setIfcNameAndID)
    init = _swig_new_static_method(_Core.PropertyIndexList_init)
    create = _swig_new_static_method(_Core.PropertyIndexList_create)
    setValue = _swig_new_instance_method(_Core.PropertyIndexList_setValue)
    hasIndex = _swig_new_instance_method(_Core.PropertyIndexList_hasIndex)
    addIndex = _swig_new_instance_method(_Core.PropertyIndexList_addIndex)
    removeIndex = _swig_new_instance_method(_Core.PropertyIndexList_removeIndex)
    setEmpty = _swig_new_instance_method(_Core.PropertyIndexList_setEmpty)
    isEmpty = _swig_new_instance_method(_Core.PropertyIndexList_isEmpty)
    getSize = _swig_new_instance_method(_Core.PropertyIndexList_getSize)
    getValue = _swig_new_instance_method(_Core.PropertyIndexList_getValue)

    def __init__(self):
        r"""__init__(PropertyIndexList self) -> PropertyIndexList"""
        _Core.PropertyIndexList_swiginit(self, _Core.new_PropertyIndexList())
    __swig_destroy__ = _Core.delete_PropertyIndexList

# Register PropertyIndexList in _Core:
_Core.PropertyIndexList_swigregister(PropertyIndexList)
PropertyIndexList_getClassTypeId = _Core.PropertyIndexList_getClassTypeId
PropertyIndexList_setIfcNameAndID = _Core.PropertyIndexList_setIfcNameAndID
PropertyIndexList_init = _Core.PropertyIndexList_init
PropertyIndexList_create = _Core.PropertyIndexList_create

class PropertyListIndexList(Property):
    r"""Proxy of C++ Core::PropertyListIndexList class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getClassTypeId = _swig_new_static_method(_Core.PropertyListIndexList_getClassTypeId)
    setIfcNameAndID = _swig_new_static_method(_Core.PropertyListIndexList_setIfcNameAndID)
    init = _swig_new_static_method(_Core.PropertyListIndexList_init)
    create = _swig_new_static_method(_Core.PropertyListIndexList_create)
    setValue = _swig_new_instance_method(_Core.PropertyListIndexList_setValue)
    setEmpty = _swig_new_instance_method(_Core.PropertyListIndexList_setEmpty)
    isEmpty = _swig_new_instance_method(_Core.PropertyListIndexList_isEmpty)
    getValue = _swig_new_instance_method(_Core.PropertyListIndexList_getValue)
    save = _swig_new_instance_method(_Core.PropertyListIndexList_save)

    def __init__(self):
        r"""__init__(PropertyListIndexList self) -> PropertyListIndexList"""
        _Core.PropertyListIndexList_swiginit(self, _Core.new_PropertyListIndexList())
    __swig_destroy__ = _Core.delete_PropertyListIndexList

# Register PropertyListIndexList in _Core:
_Core.PropertyListIndexList_swigregister(PropertyListIndexList)
PropertyListIndexList_getClassTypeId = _Core.PropertyListIndexList_getClassTypeId
PropertyListIndexList_setIfcNameAndID = _Core.PropertyListIndexList_setIfcNameAndID
PropertyListIndexList_init = _Core.PropertyListIndexList_init
PropertyListIndexList_create = _Core.PropertyListIndexList_create

class PropertyEnum(PropertyIndex):
    r"""Proxy of C++ Core::PropertyEnum class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getClassTypeId = _swig_new_static_method(_Core.PropertyEnum_getClassTypeId)
    setIfcNameAndID = _swig_new_static_method(_Core.PropertyEnum_setIfcNameAndID)
    init = _swig_new_static_method(_Core.PropertyEnum_init)
    create = _swig_new_static_method(_Core.PropertyEnum_create)
    setEnums = _swig_new_instance_method(_Core.PropertyEnum_setEnums)
    setValue = _swig_new_instance_method(_Core.PropertyEnum_setValue)
    getValueAsString = _swig_new_instance_method(_Core.PropertyEnum_getValueAsString)
    getEnumVector = _swig_new_instance_method(_Core.PropertyEnum_getEnumVector)
    getEnums = _swig_new_instance_method(_Core.PropertyEnum_getEnums)

    def __init__(self):
        r"""__init__(PropertyEnum self) -> PropertyEnum"""
        _Core.PropertyEnum_swiginit(self, _Core.new_PropertyEnum())
    __swig_destroy__ = _Core.delete_PropertyEnum

# Register PropertyEnum in _Core:
_Core.PropertyEnum_swigregister(PropertyEnum)
PropertyEnum_getClassTypeId = _Core.PropertyEnum_getClassTypeId
PropertyEnum_setIfcNameAndID = _Core.PropertyEnum_setIfcNameAndID
PropertyEnum_init = _Core.PropertyEnum_init
PropertyEnum_create = _Core.PropertyEnum_create

class PropertyUInt8List(Property):
    r"""Proxy of C++ Core::PropertyUInt8List class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getClassTypeId = _swig_new_static_method(_Core.PropertyUInt8List_getClassTypeId)
    setIfcNameAndID = _swig_new_static_method(_Core.PropertyUInt8List_setIfcNameAndID)
    init = _swig_new_static_method(_Core.PropertyUInt8List_init)
    create = _swig_new_static_method(_Core.PropertyUInt8List_create)
    setValue = _swig_new_instance_method(_Core.PropertyUInt8List_setValue)
    setEmpty = _swig_new_instance_method(_Core.PropertyUInt8List_setEmpty)
    isEmpty = _swig_new_instance_method(_Core.PropertyUInt8List_isEmpty)
    getValue = _swig_new_instance_method(_Core.PropertyUInt8List_getValue)

    def __init__(self):
        r"""__init__(PropertyUInt8List self) -> PropertyUInt8List"""
        _Core.PropertyUInt8List_swiginit(self, _Core.new_PropertyUInt8List())
    __swig_destroy__ = _Core.delete_PropertyUInt8List

# Register PropertyUInt8List in _Core:
_Core.PropertyUInt8List_swigregister(PropertyUInt8List)
PropertyUInt8List_getClassTypeId = _Core.PropertyUInt8List_getClassTypeId
PropertyUInt8List_setIfcNameAndID = _Core.PropertyUInt8List_setIfcNameAndID
PropertyUInt8List_init = _Core.PropertyUInt8List_init
PropertyUInt8List_create = _Core.PropertyUInt8List_create

class PropertyInteger_Factory(PropertyFactory):
    r"""Proxy of C++ Core::PropertyInteger_Factory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(PropertyInteger_Factory self) -> PropertyInteger_Factory"""
        _Core.PropertyInteger_Factory_swiginit(self, _Core.new_PropertyInteger_Factory())
    __swig_destroy__ = _Core.delete_PropertyInteger_Factory

# Register PropertyInteger_Factory in _Core:
_Core.PropertyInteger_Factory_swigregister(PropertyInteger_Factory)
class PropertyNumberOfDecimals_Factory(PropertyFactory):
    r"""Proxy of C++ Core::PropertyNumberOfDecimals_Factory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(PropertyNumberOfDecimals_Factory self) -> PropertyNumberOfDecimals_Factory"""
        _Core.PropertyNumberOfDecimals_Factory_swiginit(self, _Core.new_PropertyNumberOfDecimals_Factory())
    __swig_destroy__ = _Core.delete_PropertyNumberOfDecimals_Factory

# Register PropertyNumberOfDecimals_Factory in _Core:
_Core.PropertyNumberOfDecimals_Factory_swigregister(PropertyNumberOfDecimals_Factory)
class PropertyIndex_Factory(PropertyFactory):
    r"""Proxy of C++ Core::PropertyIndex_Factory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(PropertyIndex_Factory self) -> PropertyIndex_Factory"""
        _Core.PropertyIndex_Factory_swiginit(self, _Core.new_PropertyIndex_Factory())
    __swig_destroy__ = _Core.delete_PropertyIndex_Factory

# Register PropertyIndex_Factory in _Core:
_Core.PropertyIndex_Factory_swigregister(PropertyIndex_Factory)
class PropertyIndexList_Factory(PropertyFactory):
    r"""Proxy of C++ Core::PropertyIndexList_Factory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(PropertyIndexList_Factory self) -> PropertyIndexList_Factory"""
        _Core.PropertyIndexList_Factory_swiginit(self, _Core.new_PropertyIndexList_Factory())
    __swig_destroy__ = _Core.delete_PropertyIndexList_Factory

# Register PropertyIndexList_Factory in _Core:
_Core.PropertyIndexList_Factory_swigregister(PropertyIndexList_Factory)
class PropertyListIndexList_Factory(PropertyFactory):
    r"""Proxy of C++ Core::PropertyListIndexList_Factory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(PropertyListIndexList_Factory self) -> PropertyListIndexList_Factory"""
        _Core.PropertyListIndexList_Factory_swiginit(self, _Core.new_PropertyListIndexList_Factory())
    __swig_destroy__ = _Core.delete_PropertyListIndexList_Factory

# Register PropertyListIndexList_Factory in _Core:
_Core.PropertyListIndexList_Factory_swigregister(PropertyListIndexList_Factory)
class PropertyEnum_Factory(PropertyFactory):
    r"""Proxy of C++ Core::PropertyEnum_Factory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(PropertyEnum_Factory self) -> PropertyEnum_Factory"""
        _Core.PropertyEnum_Factory_swiginit(self, _Core.new_PropertyEnum_Factory())
    __swig_destroy__ = _Core.delete_PropertyEnum_Factory

# Register PropertyEnum_Factory in _Core:
_Core.PropertyEnum_Factory_swigregister(PropertyEnum_Factory)
class PropertyCountMeasure_Factory(PropertyFactory):
    r"""Proxy of C++ Core::PropertyCountMeasure_Factory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(PropertyCountMeasure_Factory self) -> PropertyCountMeasure_Factory"""
        _Core.PropertyCountMeasure_Factory_swiginit(self, _Core.new_PropertyCountMeasure_Factory())
    __swig_destroy__ = _Core.delete_PropertyCountMeasure_Factory

# Register PropertyCountMeasure_Factory in _Core:
_Core.PropertyCountMeasure_Factory_swigregister(PropertyCountMeasure_Factory)
class PropertyIntegerOpt(PropertyInteger):
    r"""Proxy of C++ Core::PropertyIntegerOpt class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getClassTypeId = _swig_new_static_method(_Core.PropertyIntegerOpt_getClassTypeId)
    setIfcNameAndID = _swig_new_static_method(_Core.PropertyIntegerOpt_setIfcNameAndID)
    init = _swig_new_static_method(_Core.PropertyIntegerOpt_init)
    create = _swig_new_static_method(_Core.PropertyIntegerOpt_create)

    def __init__(self):
        r"""__init__(PropertyIntegerOpt self) -> PropertyIntegerOpt"""
        _Core.PropertyIntegerOpt_swiginit(self, _Core.new_PropertyIntegerOpt())
    __swig_destroy__ = _Core.delete_PropertyIntegerOpt

# Register PropertyIntegerOpt in _Core:
_Core.PropertyIntegerOpt_swigregister(PropertyIntegerOpt)
PropertyIntegerOpt_getClassTypeId = _Core.PropertyIntegerOpt_getClassTypeId
PropertyIntegerOpt_setIfcNameAndID = _Core.PropertyIntegerOpt_setIfcNameAndID
PropertyIntegerOpt_init = _Core.PropertyIntegerOpt_init
PropertyIntegerOpt_create = _Core.PropertyIntegerOpt_create

class PropertyEnumOpt(PropertyEnum):
    r"""Proxy of C++ Core::PropertyEnumOpt class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getClassTypeId = _swig_new_static_method(_Core.PropertyEnumOpt_getClassTypeId)
    setIfcNameAndID = _swig_new_static_method(_Core.PropertyEnumOpt_setIfcNameAndID)
    init = _swig_new_static_method(_Core.PropertyEnumOpt_init)
    create = _swig_new_static_method(_Core.PropertyEnumOpt_create)

    def __init__(self):
        r"""__init__(PropertyEnumOpt self) -> PropertyEnumOpt"""
        _Core.PropertyEnumOpt_swiginit(self, _Core.new_PropertyEnumOpt())
    __swig_destroy__ = _Core.delete_PropertyEnumOpt

# Register PropertyEnumOpt in _Core:
_Core.PropertyEnumOpt_swigregister(PropertyEnumOpt)
PropertyEnumOpt_getClassTypeId = _Core.PropertyEnumOpt_getClassTypeId
PropertyEnumOpt_setIfcNameAndID = _Core.PropertyEnumOpt_setIfcNameAndID
PropertyEnumOpt_init = _Core.PropertyEnumOpt_init
PropertyEnumOpt_create = _Core.PropertyEnumOpt_create

class PropertyLinkBase(object):
    r"""Proxy of C++ Core::PropertyLinkBase class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getClassTypeId = _swig_new_static_method(_Core.PropertyLinkBase_getClassTypeId)
    getTypeId = _swig_new_instance_method(_Core.PropertyLinkBase_getTypeId)
    setIfcNameAndID = _swig_new_static_method(_Core.PropertyLinkBase_setIfcNameAndID)
    init = _swig_new_static_method(_Core.PropertyLinkBase_init)
    create = _swig_new_static_method(_Core.PropertyLinkBase_create)
    setValue = _swig_new_instance_method(_Core.PropertyLinkBase_setValue)
    setValueFromVariant = _swig_new_instance_method(_Core.PropertyLinkBase_setValueFromVariant)
    setKeyValue = _swig_new_instance_method(_Core.PropertyLinkBase_setKeyValue)
    getKeyValueMap = _swig_new_instance_method(_Core.PropertyLinkBase_getKeyValueMap)
    getValue = _swig_new_instance_method(_Core.PropertyLinkBase_getValue)
    getVariant = _swig_new_instance_method(_Core.PropertyLinkBase_getVariant)
    copyValue = _swig_new_instance_method(_Core.PropertyLinkBase_copyValue)
    deepCopy = _swig_new_instance_method(_Core.PropertyLinkBase_deepCopy)
    createSQL = _swig_new_instance_method(_Core.PropertyLinkBase_createSQL)
    save = _swig_new_instance_method(_Core.PropertyLinkBase_save)
    restore = _swig_new_instance_method(_Core.PropertyLinkBase_restore)
    getPropertyKind = _swig_new_instance_method(_Core.PropertyLinkBase_getPropertyKind)
    isEqual = _swig_new_instance_method(_Core.PropertyLinkBase_isEqual)
    isLink = _swig_new_instance_method(_Core.PropertyLinkBase_isLink)
    getDbgInfo = _swig_new_instance_method(_Core.PropertyLinkBase_getDbgInfo)
    copy = _swig_new_instance_method(_Core.PropertyLinkBase_copy)
    paste = _swig_new_instance_method(_Core.PropertyLinkBase_paste)
    resolveLink = _swig_new_instance_method(_Core.PropertyLinkBase_resolveLink)
    removeLink = _swig_new_instance_method(_Core.PropertyLinkBase_removeLink)
    addLink = _swig_new_instance_method(_Core.PropertyLinkBase_addLink)
    getLinks = _swig_new_instance_method(_Core.PropertyLinkBase_getLinks)

    def __init__(self):
        r"""__init__(PropertyLinkBase self) -> PropertyLinkBase"""
        _Core.PropertyLinkBase_swiginit(self, _Core.new_PropertyLinkBase())
    __swig_destroy__ = _Core.delete_PropertyLinkBase

# Register PropertyLinkBase in _Core:
_Core.PropertyLinkBase_swigregister(PropertyLinkBase)
PropertyLinkBase_getClassTypeId = _Core.PropertyLinkBase_getClassTypeId
PropertyLinkBase_setIfcNameAndID = _Core.PropertyLinkBase_setIfcNameAndID
PropertyLinkBase_init = _Core.PropertyLinkBase_init
PropertyLinkBase_create = _Core.PropertyLinkBase_create

class PropertyLinkListBase(object):
    r"""Proxy of C++ Core::PropertyLinkListBase class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getClassTypeId = _swig_new_static_method(_Core.PropertyLinkListBase_getClassTypeId)
    getTypeId = _swig_new_instance_method(_Core.PropertyLinkListBase_getTypeId)
    setIfcNameAndID = _swig_new_static_method(_Core.PropertyLinkListBase_setIfcNameAndID)
    init = _swig_new_static_method(_Core.PropertyLinkListBase_init)
    create = _swig_new_static_method(_Core.PropertyLinkListBase_create)
    setValue = _swig_new_instance_method(_Core.PropertyLinkListBase_setValue)
    getValue = _swig_new_instance_method(_Core.PropertyLinkListBase_getValue)
    hasLink = _swig_new_instance_method(_Core.PropertyLinkListBase_hasLink)
    insertLink = _swig_new_instance_method(_Core.PropertyLinkListBase_insertLink)
    setEmpty = _swig_new_instance_method(_Core.PropertyLinkListBase_setEmpty)
    isEmpty = _swig_new_instance_method(_Core.PropertyLinkListBase_isEmpty)
    getSize = _swig_new_instance_method(_Core.PropertyLinkListBase_getSize)
    addLink = _swig_new_instance_method(_Core.PropertyLinkListBase_addLink)
    removeLink = _swig_new_instance_method(_Core.PropertyLinkListBase_removeLink)
    getLinks = _swig_new_instance_method(_Core.PropertyLinkListBase_getLinks)
    getVariant = _swig_new_instance_method(_Core.PropertyLinkListBase_getVariant)
    setValueFromVariant = _swig_new_instance_method(_Core.PropertyLinkListBase_setValueFromVariant)
    copy = _swig_new_instance_method(_Core.PropertyLinkListBase_copy)
    paste = _swig_new_instance_method(_Core.PropertyLinkListBase_paste)
    copyValue = _swig_new_instance_method(_Core.PropertyLinkListBase_copyValue)
    deepCopy = _swig_new_instance_method(_Core.PropertyLinkListBase_deepCopy)
    getPropertyKind = _swig_new_instance_method(_Core.PropertyLinkListBase_getPropertyKind)
    isEqual = _swig_new_instance_method(_Core.PropertyLinkListBase_isEqual)
    isLink = _swig_new_instance_method(_Core.PropertyLinkListBase_isLink)
    getDbgInfo = _swig_new_instance_method(_Core.PropertyLinkListBase_getDbgInfo)
    save = _swig_new_instance_method(_Core.PropertyLinkListBase_save)
    restore = _swig_new_instance_method(_Core.PropertyLinkListBase_restore)

    def __init__(self):
        r"""__init__(PropertyLinkListBase self) -> PropertyLinkListBase"""
        _Core.PropertyLinkListBase_swiginit(self, _Core.new_PropertyLinkListBase())
    __swig_destroy__ = _Core.delete_PropertyLinkListBase

# Register PropertyLinkListBase in _Core:
_Core.PropertyLinkListBase_swigregister(PropertyLinkListBase)
PropertyLinkListBase_getClassTypeId = _Core.PropertyLinkListBase_getClassTypeId
PropertyLinkListBase_setIfcNameAndID = _Core.PropertyLinkListBase_setIfcNameAndID
PropertyLinkListBase_init = _Core.PropertyLinkListBase_init
PropertyLinkListBase_create = _Core.PropertyLinkListBase_create

class PropertyLinkSetBase(object):
    r"""Proxy of C++ Core::PropertyLinkSetBase class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getClassTypeId = _swig_new_static_method(_Core.PropertyLinkSetBase_getClassTypeId)
    getTypeId = _swig_new_instance_method(_Core.PropertyLinkSetBase_getTypeId)
    setIfcNameAndID = _swig_new_static_method(_Core.PropertyLinkSetBase_setIfcNameAndID)
    init = _swig_new_static_method(_Core.PropertyLinkSetBase_init)
    create = _swig_new_static_method(_Core.PropertyLinkSetBase_create)
    setValue = _swig_new_instance_method(_Core.PropertyLinkSetBase_setValue)
    setValueFromVariant = _swig_new_instance_method(_Core.PropertyLinkSetBase_setValueFromVariant)
    setKeyValue = _swig_new_instance_method(_Core.PropertyLinkSetBase_setKeyValue)
    getKeyValueMap = _swig_new_instance_method(_Core.PropertyLinkSetBase_getKeyValueMap)
    getValue = _swig_new_instance_method(_Core.PropertyLinkSetBase_getValue)
    getVariant = _swig_new_instance_method(_Core.PropertyLinkSetBase_getVariant)
    copyValue = _swig_new_instance_method(_Core.PropertyLinkSetBase_copyValue)
    deepCopy = _swig_new_instance_method(_Core.PropertyLinkSetBase_deepCopy)
    addLink = _swig_new_instance_method(_Core.PropertyLinkSetBase_addLink)
    addLinks = _swig_new_instance_method(_Core.PropertyLinkSetBase_addLinks)
    removeLink = _swig_new_instance_method(_Core.PropertyLinkSetBase_removeLink)
    hasLink = _swig_new_instance_method(_Core.PropertyLinkSetBase_hasLink)
    setEmpty = _swig_new_instance_method(_Core.PropertyLinkSetBase_setEmpty)
    isEmpty = _swig_new_instance_method(_Core.PropertyLinkSetBase_isEmpty)
    getSize = _swig_new_instance_method(_Core.PropertyLinkSetBase_getSize)
    rehash = _swig_new_instance_method(_Core.PropertyLinkSetBase_rehash)
    save = _swig_new_instance_method(_Core.PropertyLinkSetBase_save)
    restore = _swig_new_instance_method(_Core.PropertyLinkSetBase_restore)
    getPropertyKind = _swig_new_instance_method(_Core.PropertyLinkSetBase_getPropertyKind)
    isEqual = _swig_new_instance_method(_Core.PropertyLinkSetBase_isEqual)
    isLink = _swig_new_instance_method(_Core.PropertyLinkSetBase_isLink)
    getDbgInfo = _swig_new_instance_method(_Core.PropertyLinkSetBase_getDbgInfo)
    copy = _swig_new_instance_method(_Core.PropertyLinkSetBase_copy)
    paste = _swig_new_instance_method(_Core.PropertyLinkSetBase_paste)
    getLinks = _swig_new_instance_method(_Core.PropertyLinkSetBase_getLinks)

    def __init__(self):
        r"""__init__(PropertyLinkSetBase self) -> PropertyLinkSetBase"""
        _Core.PropertyLinkSetBase_swiginit(self, _Core.new_PropertyLinkSetBase())
    __swig_destroy__ = _Core.delete_PropertyLinkSetBase

# Register PropertyLinkSetBase in _Core:
_Core.PropertyLinkSetBase_swigregister(PropertyLinkSetBase)
PropertyLinkSetBase_getClassTypeId = _Core.PropertyLinkSetBase_getClassTypeId
PropertyLinkSetBase_setIfcNameAndID = _Core.PropertyLinkSetBase_setIfcNameAndID
PropertyLinkSetBase_init = _Core.PropertyLinkSetBase_init
PropertyLinkSetBase_create = _Core.PropertyLinkSetBase_create

class PropertyLinkList(PropertyLinkListBase):
    r"""Proxy of C++ Core::PropertyLinkList class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getClassTypeId = _swig_new_static_method(_Core.PropertyLinkList_getClassTypeId)
    setIfcNameAndID = _swig_new_static_method(_Core.PropertyLinkList_setIfcNameAndID)
    init = _swig_new_static_method(_Core.PropertyLinkList_init)
    create = _swig_new_static_method(_Core.PropertyLinkList_create)

    def __init__(self):
        r"""__init__(PropertyLinkList self) -> PropertyLinkList"""
        _Core.PropertyLinkList_swiginit(self, _Core.new_PropertyLinkList())
    __swig_destroy__ = _Core.delete_PropertyLinkList
    setValueFromVariant = _swig_new_instance_method(_Core.PropertyLinkList_setValueFromVariant)
    copyValue = _swig_new_instance_method(_Core.PropertyLinkList_copyValue)
    addLink = _swig_new_instance_method(_Core.PropertyLinkList_addLink)
    removeLink = _swig_new_instance_method(_Core.PropertyLinkList_removeLink)
    getVariant = _swig_new_instance_method(_Core.PropertyLinkList_getVariant)
    restore = _swig_new_instance_method(_Core.PropertyLinkList_restore)
    isEqual = _swig_new_instance_method(_Core.PropertyLinkList_isEqual)

# Register PropertyLinkList in _Core:
_Core.PropertyLinkList_swigregister(PropertyLinkList)
PropertyLinkList_getClassTypeId = _Core.PropertyLinkList_getClassTypeId
PropertyLinkList_setIfcNameAndID = _Core.PropertyLinkList_setIfcNameAndID
PropertyLinkList_init = _Core.PropertyLinkList_init
PropertyLinkList_create = _Core.PropertyLinkList_create

class PropertyLinkBase_Factory(PropertyFactory):
    r"""Proxy of C++ Core::PropertyLinkBase_Factory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(PropertyLinkBase_Factory self) -> PropertyLinkBase_Factory"""
        _Core.PropertyLinkBase_Factory_swiginit(self, _Core.new_PropertyLinkBase_Factory())
    __swig_destroy__ = _Core.delete_PropertyLinkBase_Factory

# Register PropertyLinkBase_Factory in _Core:
_Core.PropertyLinkBase_Factory_swigregister(PropertyLinkBase_Factory)
class PropertyLinkSetBase_Factory(PropertyFactory):
    r"""Proxy of C++ Core::PropertyLinkSetBase_Factory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(PropertyLinkSetBase_Factory self) -> PropertyLinkSetBase_Factory"""
        _Core.PropertyLinkSetBase_Factory_swiginit(self, _Core.new_PropertyLinkSetBase_Factory())
    __swig_destroy__ = _Core.delete_PropertyLinkSetBase_Factory

# Register PropertyLinkSetBase_Factory in _Core:
_Core.PropertyLinkSetBase_Factory_swigregister(PropertyLinkSetBase_Factory)
class PropertyLinkList_Factory(PropertyFactory):
    r"""Proxy of C++ Core::PropertyLinkList_Factory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(PropertyLinkList_Factory self) -> PropertyLinkList_Factory"""
        _Core.PropertyLinkList_Factory_swiginit(self, _Core.new_PropertyLinkList_Factory())
    __swig_destroy__ = _Core.delete_PropertyLinkList_Factory

# Register PropertyLinkList_Factory in _Core:
_Core.PropertyLinkList_Factory_swigregister(PropertyLinkList_Factory)
class PropertyMD5(Property):
    r"""Proxy of C++ Core::PropertyMD5 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getClassTypeId = _swig_new_static_method(_Core.PropertyMD5_getClassTypeId)
    setIfcNameAndID = _swig_new_static_method(_Core.PropertyMD5_setIfcNameAndID)
    init = _swig_new_static_method(_Core.PropertyMD5_init)
    create = _swig_new_static_method(_Core.PropertyMD5_create)
    setValue = _swig_new_instance_method(_Core.PropertyMD5_setValue)
    getValue = _swig_new_instance_method(_Core.PropertyMD5_getValue)

    def __init__(self):
        r"""__init__(PropertyMD5 self) -> PropertyMD5"""
        _Core.PropertyMD5_swiginit(self, _Core.new_PropertyMD5())
    __swig_destroy__ = _Core.delete_PropertyMD5

# Register PropertyMD5 in _Core:
_Core.PropertyMD5_swigregister(PropertyMD5)
PropertyMD5_getClassTypeId = _Core.PropertyMD5_getClassTypeId
PropertyMD5_setIfcNameAndID = _Core.PropertyMD5_setIfcNameAndID
PropertyMD5_init = _Core.PropertyMD5_init
PropertyMD5_create = _Core.PropertyMD5_create

class PropertyMD5_Factory(PropertyFactory):
    r"""Proxy of C++ Core::PropertyMD5_Factory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(PropertyMD5_Factory self) -> PropertyMD5_Factory"""
        _Core.PropertyMD5_Factory_swiginit(self, _Core.new_PropertyMD5_Factory())
    __swig_destroy__ = _Core.delete_PropertyMD5_Factory

# Register PropertyMD5_Factory in _Core:
_Core.PropertyMD5_Factory_swigregister(PropertyMD5_Factory)
class PropertyMesh(Property):
    r"""Proxy of C++ Core::PropertyMesh class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getClassTypeId = _swig_new_static_method(_Core.PropertyMesh_getClassTypeId)
    setIfcNameAndID = _swig_new_static_method(_Core.PropertyMesh_setIfcNameAndID)
    init = _swig_new_static_method(_Core.PropertyMesh_init)
    create = _swig_new_static_method(_Core.PropertyMesh_create)
    setValue = _swig_new_instance_method(_Core.PropertyMesh_setValue)
    getValue = _swig_new_instance_method(_Core.PropertyMesh_getValue)

    def __init__(self):
        r"""__init__(PropertyMesh self) -> PropertyMesh"""
        _Core.PropertyMesh_swiginit(self, _Core.new_PropertyMesh())
    __swig_destroy__ = _Core.delete_PropertyMesh

# Register PropertyMesh in _Core:
_Core.PropertyMesh_swigregister(PropertyMesh)
PropertyMesh_getClassTypeId = _Core.PropertyMesh_getClassTypeId
PropertyMesh_setIfcNameAndID = _Core.PropertyMesh_setIfcNameAndID
PropertyMesh_init = _Core.PropertyMesh_init
PropertyMesh_create = _Core.PropertyMesh_create

class PropertyMesh_Factory(PropertyFactory):
    r"""Proxy of C++ Core::PropertyMesh_Factory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(PropertyMesh_Factory self) -> PropertyMesh_Factory"""
        _Core.PropertyMesh_Factory_swiginit(self, _Core.new_PropertyMesh_Factory())
    __swig_destroy__ = _Core.delete_PropertyMesh_Factory

# Register PropertyMesh_Factory in _Core:
_Core.PropertyMesh_Factory_swigregister(PropertyMesh_Factory)
class PropertyMultiLineText(Property):
    r"""Proxy of C++ Core::PropertyMultiLineText class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getClassTypeId = _swig_new_static_method(_Core.PropertyMultiLineText_getClassTypeId)
    setIfcNameAndID = _swig_new_static_method(_Core.PropertyMultiLineText_setIfcNameAndID)
    init = _swig_new_static_method(_Core.PropertyMultiLineText_init)
    create = _swig_new_static_method(_Core.PropertyMultiLineText_create)
    setValue = _swig_new_instance_method(_Core.PropertyMultiLineText_setValue)
    getValue = _swig_new_instance_method(_Core.PropertyMultiLineText_getValue)

    def __init__(self):
        r"""__init__(PropertyMultiLineText self) -> PropertyMultiLineText"""
        _Core.PropertyMultiLineText_swiginit(self, _Core.new_PropertyMultiLineText())
    __swig_destroy__ = _Core.delete_PropertyMultiLineText

# Register PropertyMultiLineText in _Core:
_Core.PropertyMultiLineText_swigregister(PropertyMultiLineText)
PropertyMultiLineText_getClassTypeId = _Core.PropertyMultiLineText_getClassTypeId
PropertyMultiLineText_setIfcNameAndID = _Core.PropertyMultiLineText_setIfcNameAndID
PropertyMultiLineText_init = _Core.PropertyMultiLineText_init
PropertyMultiLineText_create = _Core.PropertyMultiLineText_create

class PropertyMultiLineTextOpt(PropertyMultiLineText):
    r"""Proxy of C++ Core::PropertyMultiLineTextOpt class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getClassTypeId = _swig_new_static_method(_Core.PropertyMultiLineTextOpt_getClassTypeId)
    setIfcNameAndID = _swig_new_static_method(_Core.PropertyMultiLineTextOpt_setIfcNameAndID)
    init = _swig_new_static_method(_Core.PropertyMultiLineTextOpt_init)
    create = _swig_new_static_method(_Core.PropertyMultiLineTextOpt_create)

    def __init__(self):
        r"""__init__(PropertyMultiLineTextOpt self) -> PropertyMultiLineTextOpt"""
        _Core.PropertyMultiLineTextOpt_swiginit(self, _Core.new_PropertyMultiLineTextOpt())
    __swig_destroy__ = _Core.delete_PropertyMultiLineTextOpt

# Register PropertyMultiLineTextOpt in _Core:
_Core.PropertyMultiLineTextOpt_swigregister(PropertyMultiLineTextOpt)
PropertyMultiLineTextOpt_getClassTypeId = _Core.PropertyMultiLineTextOpt_getClassTypeId
PropertyMultiLineTextOpt_setIfcNameAndID = _Core.PropertyMultiLineTextOpt_setIfcNameAndID
PropertyMultiLineTextOpt_init = _Core.PropertyMultiLineTextOpt_init
PropertyMultiLineTextOpt_create = _Core.PropertyMultiLineTextOpt_create

class PropertyMultiLineText_Factory(PropertyFactory):
    r"""Proxy of C++ Core::PropertyMultiLineText_Factory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(PropertyMultiLineText_Factory self) -> PropertyMultiLineText_Factory"""
        _Core.PropertyMultiLineText_Factory_swiginit(self, _Core.new_PropertyMultiLineText_Factory())
    __swig_destroy__ = _Core.delete_PropertyMultiLineText_Factory

# Register PropertyMultiLineText_Factory in _Core:
_Core.PropertyMultiLineText_Factory_swigregister(PropertyMultiLineText_Factory)
class PropertyPen(Property):
    r"""Proxy of C++ Core::PropertyPen class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getClassTypeId = _swig_new_static_method(_Core.PropertyPen_getClassTypeId)
    setIfcNameAndID = _swig_new_static_method(_Core.PropertyPen_setIfcNameAndID)
    init = _swig_new_static_method(_Core.PropertyPen_init)
    create = _swig_new_static_method(_Core.PropertyPen_create)
    setValue = _swig_new_instance_method(_Core.PropertyPen_setValue)
    getValue = _swig_new_instance_method(_Core.PropertyPen_getValue)

    def __init__(self):
        r"""__init__(PropertyPen self) -> PropertyPen"""
        _Core.PropertyPen_swiginit(self, _Core.new_PropertyPen())
    __swig_destroy__ = _Core.delete_PropertyPen

# Register PropertyPen in _Core:
_Core.PropertyPen_swigregister(PropertyPen)
PropertyPen_getClassTypeId = _Core.PropertyPen_getClassTypeId
PropertyPen_setIfcNameAndID = _Core.PropertyPen_setIfcNameAndID
PropertyPen_init = _Core.PropertyPen_init
PropertyPen_create = _Core.PropertyPen_create

class PropertyPen_Factory(PropertyFactory):
    r"""Proxy of C++ Core::PropertyPen_Factory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(PropertyPen_Factory self) -> PropertyPen_Factory"""
        _Core.PropertyPen_Factory_swiginit(self, _Core.new_PropertyPen_Factory())
    __swig_destroy__ = _Core.delete_PropertyPen_Factory

# Register PropertyPen_Factory in _Core:
_Core.PropertyPen_Factory_swigregister(PropertyPen_Factory)
class PropertyPercent(Property):
    r"""Proxy of C++ Core::PropertyPercent class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getClassTypeId = _swig_new_static_method(_Core.PropertyPercent_getClassTypeId)
    setIfcNameAndID = _swig_new_static_method(_Core.PropertyPercent_setIfcNameAndID)
    init = _swig_new_static_method(_Core.PropertyPercent_init)
    create = _swig_new_static_method(_Core.PropertyPercent_create)
    setValue = _swig_new_instance_method(_Core.PropertyPercent_setValue)
    getValue = _swig_new_instance_method(_Core.PropertyPercent_getValue)

    def __init__(self):
        r"""__init__(PropertyPercent self) -> PropertyPercent"""
        _Core.PropertyPercent_swiginit(self, _Core.new_PropertyPercent())
    __swig_destroy__ = _Core.delete_PropertyPercent

# Register PropertyPercent in _Core:
_Core.PropertyPercent_swigregister(PropertyPercent)
PropertyPercent_getClassTypeId = _Core.PropertyPercent_getClassTypeId
PropertyPercent_setIfcNameAndID = _Core.PropertyPercent_setIfcNameAndID
PropertyPercent_init = _Core.PropertyPercent_init
PropertyPercent_create = _Core.PropertyPercent_create

class PropertyPercent_Factory(PropertyFactory):
    r"""Proxy of C++ Core::PropertyPercent_Factory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(PropertyPercent_Factory self) -> PropertyPercent_Factory"""
        _Core.PropertyPercent_Factory_swiginit(self, _Core.new_PropertyPercent_Factory())
    __swig_destroy__ = _Core.delete_PropertyPercent_Factory

# Register PropertyPercent_Factory in _Core:
_Core.PropertyPercent_Factory_swigregister(PropertyPercent_Factory)
class PropertyPoint(Property):
    r"""Proxy of C++ Core::PropertyPoint class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getClassTypeId = _swig_new_static_method(_Core.PropertyPoint_getClassTypeId)
    setIfcNameAndID = _swig_new_static_method(_Core.PropertyPoint_setIfcNameAndID)
    init = _swig_new_static_method(_Core.PropertyPoint_init)
    create = _swig_new_static_method(_Core.PropertyPoint_create)
    setValue = _swig_new_instance_method(_Core.PropertyPoint_setValue)
    getValue = _swig_new_instance_method(_Core.PropertyPoint_getValue)

    def __init__(self):
        r"""__init__(PropertyPoint self) -> PropertyPoint"""
        _Core.PropertyPoint_swiginit(self, _Core.new_PropertyPoint())
    __swig_destroy__ = _Core.delete_PropertyPoint

# Register PropertyPoint in _Core:
_Core.PropertyPoint_swigregister(PropertyPoint)
PropertyPoint_getClassTypeId = _Core.PropertyPoint_getClassTypeId
PropertyPoint_setIfcNameAndID = _Core.PropertyPoint_setIfcNameAndID
PropertyPoint_init = _Core.PropertyPoint_init
PropertyPoint_create = _Core.PropertyPoint_create

class PropertyPointList(Property):
    r"""Proxy of C++ Core::PropertyPointList class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getClassTypeId = _swig_new_static_method(_Core.PropertyPointList_getClassTypeId)
    setIfcNameAndID = _swig_new_static_method(_Core.PropertyPointList_setIfcNameAndID)
    init = _swig_new_static_method(_Core.PropertyPointList_init)
    create = _swig_new_static_method(_Core.PropertyPointList_create)
    setValue = _swig_new_instance_method(_Core.PropertyPointList_setValue)
    addPoint = _swig_new_instance_method(_Core.PropertyPointList_addPoint)
    setEmpty = _swig_new_instance_method(_Core.PropertyPointList_setEmpty)
    isEmpty = _swig_new_instance_method(_Core.PropertyPointList_isEmpty)
    getValue = _swig_new_instance_method(_Core.PropertyPointList_getValue)
    getSize = _swig_new_instance_method(_Core.PropertyPointList_getSize)
    save_static = _swig_new_static_method(_Core.PropertyPointList_save_static)
    restore_static = _swig_new_static_method(_Core.PropertyPointList_restore_static)

    def __init__(self):
        r"""__init__(PropertyPointList self) -> PropertyPointList"""
        _Core.PropertyPointList_swiginit(self, _Core.new_PropertyPointList())
    __swig_destroy__ = _Core.delete_PropertyPointList

# Register PropertyPointList in _Core:
_Core.PropertyPointList_swigregister(PropertyPointList)
PropertyPointList_getClassTypeId = _Core.PropertyPointList_getClassTypeId
PropertyPointList_setIfcNameAndID = _Core.PropertyPointList_setIfcNameAndID
PropertyPointList_init = _Core.PropertyPointList_init
PropertyPointList_create = _Core.PropertyPointList_create
PropertyPointList_save_static = _Core.PropertyPointList_save_static
PropertyPointList_restore_static = _Core.PropertyPointList_restore_static

class PropertyListPointList(Property):
    r"""Proxy of C++ Core::PropertyListPointList class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getClassTypeId = _swig_new_static_method(_Core.PropertyListPointList_getClassTypeId)
    setIfcNameAndID = _swig_new_static_method(_Core.PropertyListPointList_setIfcNameAndID)
    init = _swig_new_static_method(_Core.PropertyListPointList_init)
    create = _swig_new_static_method(_Core.PropertyListPointList_create)
    setValue = _swig_new_instance_method(_Core.PropertyListPointList_setValue)
    setEmpty = _swig_new_instance_method(_Core.PropertyListPointList_setEmpty)
    isEmpty = _swig_new_instance_method(_Core.PropertyListPointList_isEmpty)
    getValue = _swig_new_instance_method(_Core.PropertyListPointList_getValue)
    save = _swig_new_instance_method(_Core.PropertyListPointList_save)

    def __init__(self):
        r"""__init__(PropertyListPointList self) -> PropertyListPointList"""
        _Core.PropertyListPointList_swiginit(self, _Core.new_PropertyListPointList())
    __swig_destroy__ = _Core.delete_PropertyListPointList

# Register PropertyListPointList in _Core:
_Core.PropertyListPointList_swigregister(PropertyListPointList)
PropertyListPointList_getClassTypeId = _Core.PropertyListPointList_getClassTypeId
PropertyListPointList_setIfcNameAndID = _Core.PropertyListPointList_setIfcNameAndID
PropertyListPointList_init = _Core.PropertyListPointList_init
PropertyListPointList_create = _Core.PropertyListPointList_create

class PropertyPoint2d(Property):
    r"""Proxy of C++ Core::PropertyPoint2d class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getClassTypeId = _swig_new_static_method(_Core.PropertyPoint2d_getClassTypeId)
    setIfcNameAndID = _swig_new_static_method(_Core.PropertyPoint2d_setIfcNameAndID)
    init = _swig_new_static_method(_Core.PropertyPoint2d_init)
    create = _swig_new_static_method(_Core.PropertyPoint2d_create)
    setValue = _swig_new_instance_method(_Core.PropertyPoint2d_setValue)
    getValue = _swig_new_instance_method(_Core.PropertyPoint2d_getValue)

    def __init__(self):
        r"""__init__(PropertyPoint2d self) -> PropertyPoint2d"""
        _Core.PropertyPoint2d_swiginit(self, _Core.new_PropertyPoint2d())
    __swig_destroy__ = _Core.delete_PropertyPoint2d

# Register PropertyPoint2d in _Core:
_Core.PropertyPoint2d_swigregister(PropertyPoint2d)
PropertyPoint2d_getClassTypeId = _Core.PropertyPoint2d_getClassTypeId
PropertyPoint2d_setIfcNameAndID = _Core.PropertyPoint2d_setIfcNameAndID
PropertyPoint2d_init = _Core.PropertyPoint2d_init
PropertyPoint2d_create = _Core.PropertyPoint2d_create

class PropertyPoint2dList(Property):
    r"""Proxy of C++ Core::PropertyPoint2dList class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getClassTypeId = _swig_new_static_method(_Core.PropertyPoint2dList_getClassTypeId)
    setIfcNameAndID = _swig_new_static_method(_Core.PropertyPoint2dList_setIfcNameAndID)
    init = _swig_new_static_method(_Core.PropertyPoint2dList_init)
    create = _swig_new_static_method(_Core.PropertyPoint2dList_create)
    setValue = _swig_new_instance_method(_Core.PropertyPoint2dList_setValue)
    addPoint = _swig_new_instance_method(_Core.PropertyPoint2dList_addPoint)
    setEmpty = _swig_new_instance_method(_Core.PropertyPoint2dList_setEmpty)
    isEmpty = _swig_new_instance_method(_Core.PropertyPoint2dList_isEmpty)
    getValue = _swig_new_instance_method(_Core.PropertyPoint2dList_getValue)

    def __init__(self):
        r"""__init__(PropertyPoint2dList self) -> PropertyPoint2dList"""
        _Core.PropertyPoint2dList_swiginit(self, _Core.new_PropertyPoint2dList())
    __swig_destroy__ = _Core.delete_PropertyPoint2dList

# Register PropertyPoint2dList in _Core:
_Core.PropertyPoint2dList_swigregister(PropertyPoint2dList)
PropertyPoint2dList_getClassTypeId = _Core.PropertyPoint2dList_getClassTypeId
PropertyPoint2dList_setIfcNameAndID = _Core.PropertyPoint2dList_setIfcNameAndID
PropertyPoint2dList_init = _Core.PropertyPoint2dList_init
PropertyPoint2dList_create = _Core.PropertyPoint2dList_create

class PropertyPoint_Factory(PropertyFactory):
    r"""Proxy of C++ Core::PropertyPoint_Factory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(PropertyPoint_Factory self) -> PropertyPoint_Factory"""
        _Core.PropertyPoint_Factory_swiginit(self, _Core.new_PropertyPoint_Factory())
    __swig_destroy__ = _Core.delete_PropertyPoint_Factory

# Register PropertyPoint_Factory in _Core:
_Core.PropertyPoint_Factory_swigregister(PropertyPoint_Factory)
class PropertyPointList_Factory(PropertyFactory):
    r"""Proxy of C++ Core::PropertyPointList_Factory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(PropertyPointList_Factory self) -> PropertyPointList_Factory"""
        _Core.PropertyPointList_Factory_swiginit(self, _Core.new_PropertyPointList_Factory())
    __swig_destroy__ = _Core.delete_PropertyPointList_Factory

# Register PropertyPointList_Factory in _Core:
_Core.PropertyPointList_Factory_swigregister(PropertyPointList_Factory)
class PropertyListPointList_Factory(PropertyFactory):
    r"""Proxy of C++ Core::PropertyListPointList_Factory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(PropertyListPointList_Factory self) -> PropertyListPointList_Factory"""
        _Core.PropertyListPointList_Factory_swiginit(self, _Core.new_PropertyListPointList_Factory())
    __swig_destroy__ = _Core.delete_PropertyListPointList_Factory

# Register PropertyListPointList_Factory in _Core:
_Core.PropertyListPointList_Factory_swigregister(PropertyListPointList_Factory)
class PropertyPoint2d_Factory(PropertyFactory):
    r"""Proxy of C++ Core::PropertyPoint2d_Factory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(PropertyPoint2d_Factory self) -> PropertyPoint2d_Factory"""
        _Core.PropertyPoint2d_Factory_swiginit(self, _Core.new_PropertyPoint2d_Factory())
    __swig_destroy__ = _Core.delete_PropertyPoint2d_Factory

# Register PropertyPoint2d_Factory in _Core:
_Core.PropertyPoint2d_Factory_swigregister(PropertyPoint2d_Factory)
class PropertyPoint2dList_Factory(PropertyFactory):
    r"""Proxy of C++ Core::PropertyPoint2dList_Factory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(PropertyPoint2dList_Factory self) -> PropertyPoint2dList_Factory"""
        _Core.PropertyPoint2dList_Factory_swiginit(self, _Core.new_PropertyPoint2dList_Factory())
    __swig_destroy__ = _Core.delete_PropertyPoint2dList_Factory

# Register PropertyPoint2dList_Factory in _Core:
_Core.PropertyPoint2dList_Factory_swigregister(PropertyPoint2dList_Factory)
class PropertyReal(Property):
    r"""Proxy of C++ Core::PropertyReal class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getClassTypeId = _swig_new_static_method(_Core.PropertyReal_getClassTypeId)
    setIfcNameAndID = _swig_new_static_method(_Core.PropertyReal_setIfcNameAndID)
    init = _swig_new_static_method(_Core.PropertyReal_init)
    create = _swig_new_static_method(_Core.PropertyReal_create)
    setValue = _swig_new_instance_method(_Core.PropertyReal_setValue)
    maybeSetValue = _swig_new_instance_method(_Core.PropertyReal_maybeSetValue)
    getValue = _swig_new_instance_method(_Core.PropertyReal_getValue)

    def __init__(self):
        r"""__init__(PropertyReal self) -> PropertyReal"""
        _Core.PropertyReal_swiginit(self, _Core.new_PropertyReal())
    __swig_destroy__ = _Core.delete_PropertyReal

# Register PropertyReal in _Core:
_Core.PropertyReal_swigregister(PropertyReal)
PropertyReal_getClassTypeId = _Core.PropertyReal_getClassTypeId
PropertyReal_setIfcNameAndID = _Core.PropertyReal_setIfcNameAndID
PropertyReal_init = _Core.PropertyReal_init
PropertyReal_create = _Core.PropertyReal_create

class PropertyRealOpt(PropertyReal):
    r"""Proxy of C++ Core::PropertyRealOpt class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getClassTypeId = _swig_new_static_method(_Core.PropertyRealOpt_getClassTypeId)
    setIfcNameAndID = _swig_new_static_method(_Core.PropertyRealOpt_setIfcNameAndID)
    init = _swig_new_static_method(_Core.PropertyRealOpt_init)
    create = _swig_new_static_method(_Core.PropertyRealOpt_create)

    def __init__(self):
        r"""__init__(PropertyRealOpt self) -> PropertyRealOpt"""
        _Core.PropertyRealOpt_swiginit(self, _Core.new_PropertyRealOpt())
    __swig_destroy__ = _Core.delete_PropertyRealOpt

# Register PropertyRealOpt in _Core:
_Core.PropertyRealOpt_swigregister(PropertyRealOpt)
PropertyRealOpt_getClassTypeId = _Core.PropertyRealOpt_getClassTypeId
PropertyRealOpt_setIfcNameAndID = _Core.PropertyRealOpt_setIfcNameAndID
PropertyRealOpt_init = _Core.PropertyRealOpt_init
PropertyRealOpt_create = _Core.PropertyRealOpt_create

class PropertyRealList(Property):
    r"""Proxy of C++ Core::PropertyRealList class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getClassTypeId = _swig_new_static_method(_Core.PropertyRealList_getClassTypeId)
    setIfcNameAndID = _swig_new_static_method(_Core.PropertyRealList_setIfcNameAndID)
    init = _swig_new_static_method(_Core.PropertyRealList_init)
    create = _swig_new_static_method(_Core.PropertyRealList_create)
    setValue = _swig_new_instance_method(_Core.PropertyRealList_setValue)
    getValue = _swig_new_instance_method(_Core.PropertyRealList_getValue)
    getValueAt = _swig_new_instance_method(_Core.PropertyRealList_getValueAt)
    isEmpty = _swig_new_instance_method(_Core.PropertyRealList_isEmpty)
    getSize = _swig_new_instance_method(_Core.PropertyRealList_getSize)

    def __init__(self):
        r"""__init__(PropertyRealList self) -> PropertyRealList"""
        _Core.PropertyRealList_swiginit(self, _Core.new_PropertyRealList())
    __swig_destroy__ = _Core.delete_PropertyRealList

# Register PropertyRealList in _Core:
_Core.PropertyRealList_swigregister(PropertyRealList)
PropertyRealList_getClassTypeId = _Core.PropertyRealList_getClassTypeId
PropertyRealList_setIfcNameAndID = _Core.PropertyRealList_setIfcNameAndID
PropertyRealList_init = _Core.PropertyRealList_init
PropertyRealList_create = _Core.PropertyRealList_create

class PropertyListRealList(Property):
    r"""Proxy of C++ Core::PropertyListRealList class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getClassTypeId = _swig_new_static_method(_Core.PropertyListRealList_getClassTypeId)
    setIfcNameAndID = _swig_new_static_method(_Core.PropertyListRealList_setIfcNameAndID)
    init = _swig_new_static_method(_Core.PropertyListRealList_init)
    create = _swig_new_static_method(_Core.PropertyListRealList_create)
    setValue = _swig_new_instance_method(_Core.PropertyListRealList_setValue)
    setEmpty = _swig_new_instance_method(_Core.PropertyListRealList_setEmpty)
    isEmpty = _swig_new_instance_method(_Core.PropertyListRealList_isEmpty)
    getValue = _swig_new_instance_method(_Core.PropertyListRealList_getValue)
    save = _swig_new_instance_method(_Core.PropertyListRealList_save)

    def __init__(self):
        r"""__init__(PropertyListRealList self) -> PropertyListRealList"""
        _Core.PropertyListRealList_swiginit(self, _Core.new_PropertyListRealList())
    __swig_destroy__ = _Core.delete_PropertyListRealList

# Register PropertyListRealList in _Core:
_Core.PropertyListRealList_swigregister(PropertyListRealList)
PropertyListRealList_getClassTypeId = _Core.PropertyListRealList_getClassTypeId
PropertyListRealList_setIfcNameAndID = _Core.PropertyListRealList_setIfcNameAndID
PropertyListRealList_init = _Core.PropertyListRealList_init
PropertyListRealList_create = _Core.PropertyListRealList_create

class PropertyLength(PropertyReal):
    r"""Proxy of C++ Core::PropertyLength class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getClassTypeId = _swig_new_static_method(_Core.PropertyLength_getClassTypeId)
    setIfcNameAndID = _swig_new_static_method(_Core.PropertyLength_setIfcNameAndID)
    init = _swig_new_static_method(_Core.PropertyLength_init)
    create = _swig_new_static_method(_Core.PropertyLength_create)

    def __init__(self):
        r"""__init__(PropertyLength self) -> PropertyLength"""
        _Core.PropertyLength_swiginit(self, _Core.new_PropertyLength())
    __swig_destroy__ = _Core.delete_PropertyLength

# Register PropertyLength in _Core:
_Core.PropertyLength_swigregister(PropertyLength)
PropertyLength_getClassTypeId = _Core.PropertyLength_getClassTypeId
PropertyLength_setIfcNameAndID = _Core.PropertyLength_setIfcNameAndID
PropertyLength_init = _Core.PropertyLength_init
PropertyLength_create = _Core.PropertyLength_create

class PropertyLengthMeasure(PropertyReal):
    r"""Proxy of C++ Core::PropertyLengthMeasure class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getClassTypeId = _swig_new_static_method(_Core.PropertyLengthMeasure_getClassTypeId)
    setIfcNameAndID = _swig_new_static_method(_Core.PropertyLengthMeasure_setIfcNameAndID)
    init = _swig_new_static_method(_Core.PropertyLengthMeasure_init)
    create = _swig_new_static_method(_Core.PropertyLengthMeasure_create)

    def __init__(self):
        r"""__init__(PropertyLengthMeasure self) -> PropertyLengthMeasure"""
        _Core.PropertyLengthMeasure_swiginit(self, _Core.new_PropertyLengthMeasure())
    __swig_destroy__ = _Core.delete_PropertyLengthMeasure

# Register PropertyLengthMeasure in _Core:
_Core.PropertyLengthMeasure_swigregister(PropertyLengthMeasure)
PropertyLengthMeasure_getClassTypeId = _Core.PropertyLengthMeasure_getClassTypeId
PropertyLengthMeasure_setIfcNameAndID = _Core.PropertyLengthMeasure_setIfcNameAndID
PropertyLengthMeasure_init = _Core.PropertyLengthMeasure_init
PropertyLengthMeasure_create = _Core.PropertyLengthMeasure_create

class PropertyLengthOpt(PropertyLength):
    r"""Proxy of C++ Core::PropertyLengthOpt class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getClassTypeId = _swig_new_static_method(_Core.PropertyLengthOpt_getClassTypeId)
    setIfcNameAndID = _swig_new_static_method(_Core.PropertyLengthOpt_setIfcNameAndID)
    init = _swig_new_static_method(_Core.PropertyLengthOpt_init)
    create = _swig_new_static_method(_Core.PropertyLengthOpt_create)

    def __init__(self):
        r"""__init__(PropertyLengthOpt self) -> PropertyLengthOpt"""
        _Core.PropertyLengthOpt_swiginit(self, _Core.new_PropertyLengthOpt())
    __swig_destroy__ = _Core.delete_PropertyLengthOpt

# Register PropertyLengthOpt in _Core:
_Core.PropertyLengthOpt_swigregister(PropertyLengthOpt)
PropertyLengthOpt_getClassTypeId = _Core.PropertyLengthOpt_getClassTypeId
PropertyLengthOpt_setIfcNameAndID = _Core.PropertyLengthOpt_setIfcNameAndID
PropertyLengthOpt_init = _Core.PropertyLengthOpt_init
PropertyLengthOpt_create = _Core.PropertyLengthOpt_create

class PropertyPositiveLength(PropertyReal):
    r"""Proxy of C++ Core::PropertyPositiveLength class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getClassTypeId = _swig_new_static_method(_Core.PropertyPositiveLength_getClassTypeId)
    setIfcNameAndID = _swig_new_static_method(_Core.PropertyPositiveLength_setIfcNameAndID)
    init = _swig_new_static_method(_Core.PropertyPositiveLength_init)
    create = _swig_new_static_method(_Core.PropertyPositiveLength_create)

    def __init__(self):
        r"""__init__(PropertyPositiveLength self) -> PropertyPositiveLength"""
        _Core.PropertyPositiveLength_swiginit(self, _Core.new_PropertyPositiveLength())
    __swig_destroy__ = _Core.delete_PropertyPositiveLength

# Register PropertyPositiveLength in _Core:
_Core.PropertyPositiveLength_swigregister(PropertyPositiveLength)
PropertyPositiveLength_getClassTypeId = _Core.PropertyPositiveLength_getClassTypeId
PropertyPositiveLength_setIfcNameAndID = _Core.PropertyPositiveLength_setIfcNameAndID
PropertyPositiveLength_init = _Core.PropertyPositiveLength_init
PropertyPositiveLength_create = _Core.PropertyPositiveLength_create

class PropertyPositiveLengthOpt(PropertyPositiveLength):
    r"""Proxy of C++ Core::PropertyPositiveLengthOpt class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getClassTypeId = _swig_new_static_method(_Core.PropertyPositiveLengthOpt_getClassTypeId)
    setIfcNameAndID = _swig_new_static_method(_Core.PropertyPositiveLengthOpt_setIfcNameAndID)
    init = _swig_new_static_method(_Core.PropertyPositiveLengthOpt_init)
    create = _swig_new_static_method(_Core.PropertyPositiveLengthOpt_create)

    def __init__(self):
        r"""__init__(PropertyPositiveLengthOpt self) -> PropertyPositiveLengthOpt"""
        _Core.PropertyPositiveLengthOpt_swiginit(self, _Core.new_PropertyPositiveLengthOpt())
    __swig_destroy__ = _Core.delete_PropertyPositiveLengthOpt

# Register PropertyPositiveLengthOpt in _Core:
_Core.PropertyPositiveLengthOpt_swigregister(PropertyPositiveLengthOpt)
PropertyPositiveLengthOpt_getClassTypeId = _Core.PropertyPositiveLengthOpt_getClassTypeId
PropertyPositiveLengthOpt_setIfcNameAndID = _Core.PropertyPositiveLengthOpt_setIfcNameAndID
PropertyPositiveLengthOpt_init = _Core.PropertyPositiveLengthOpt_init
PropertyPositiveLengthOpt_create = _Core.PropertyPositiveLengthOpt_create

class PropertyPositiveLengthMeasure(PropertyReal):
    r"""Proxy of C++ Core::PropertyPositiveLengthMeasure class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getClassTypeId = _swig_new_static_method(_Core.PropertyPositiveLengthMeasure_getClassTypeId)
    setIfcNameAndID = _swig_new_static_method(_Core.PropertyPositiveLengthMeasure_setIfcNameAndID)
    init = _swig_new_static_method(_Core.PropertyPositiveLengthMeasure_init)
    create = _swig_new_static_method(_Core.PropertyPositiveLengthMeasure_create)

    def __init__(self):
        r"""__init__(PropertyPositiveLengthMeasure self) -> PropertyPositiveLengthMeasure"""
        _Core.PropertyPositiveLengthMeasure_swiginit(self, _Core.new_PropertyPositiveLengthMeasure())
    __swig_destroy__ = _Core.delete_PropertyPositiveLengthMeasure

# Register PropertyPositiveLengthMeasure in _Core:
_Core.PropertyPositiveLengthMeasure_swigregister(PropertyPositiveLengthMeasure)
PropertyPositiveLengthMeasure_getClassTypeId = _Core.PropertyPositiveLengthMeasure_getClassTypeId
PropertyPositiveLengthMeasure_setIfcNameAndID = _Core.PropertyPositiveLengthMeasure_setIfcNameAndID
PropertyPositiveLengthMeasure_init = _Core.PropertyPositiveLengthMeasure_init
PropertyPositiveLengthMeasure_create = _Core.PropertyPositiveLengthMeasure_create

class PropertyPlaneAngle(PropertyReal):
    r"""Proxy of C++ Core::PropertyPlaneAngle class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getClassTypeId = _swig_new_static_method(_Core.PropertyPlaneAngle_getClassTypeId)
    setIfcNameAndID = _swig_new_static_method(_Core.PropertyPlaneAngle_setIfcNameAndID)
    init = _swig_new_static_method(_Core.PropertyPlaneAngle_init)
    create = _swig_new_static_method(_Core.PropertyPlaneAngle_create)

    def __init__(self):
        r"""__init__(PropertyPlaneAngle self) -> PropertyPlaneAngle"""
        _Core.PropertyPlaneAngle_swiginit(self, _Core.new_PropertyPlaneAngle())
    __swig_destroy__ = _Core.delete_PropertyPlaneAngle

# Register PropertyPlaneAngle in _Core:
_Core.PropertyPlaneAngle_swigregister(PropertyPlaneAngle)
PropertyPlaneAngle_getClassTypeId = _Core.PropertyPlaneAngle_getClassTypeId
PropertyPlaneAngle_setIfcNameAndID = _Core.PropertyPlaneAngle_setIfcNameAndID
PropertyPlaneAngle_init = _Core.PropertyPlaneAngle_init
PropertyPlaneAngle_create = _Core.PropertyPlaneAngle_create

class PropertyPlaneAngleOpt(PropertyPlaneAngle):
    r"""Proxy of C++ Core::PropertyPlaneAngleOpt class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getClassTypeId = _swig_new_static_method(_Core.PropertyPlaneAngleOpt_getClassTypeId)
    setIfcNameAndID = _swig_new_static_method(_Core.PropertyPlaneAngleOpt_setIfcNameAndID)
    init = _swig_new_static_method(_Core.PropertyPlaneAngleOpt_init)
    create = _swig_new_static_method(_Core.PropertyPlaneAngleOpt_create)

    def __init__(self):
        r"""__init__(PropertyPlaneAngleOpt self) -> PropertyPlaneAngleOpt"""
        _Core.PropertyPlaneAngleOpt_swiginit(self, _Core.new_PropertyPlaneAngleOpt())
    __swig_destroy__ = _Core.delete_PropertyPlaneAngleOpt

# Register PropertyPlaneAngleOpt in _Core:
_Core.PropertyPlaneAngleOpt_swigregister(PropertyPlaneAngleOpt)
PropertyPlaneAngleOpt_getClassTypeId = _Core.PropertyPlaneAngleOpt_getClassTypeId
PropertyPlaneAngleOpt_setIfcNameAndID = _Core.PropertyPlaneAngleOpt_setIfcNameAndID
PropertyPlaneAngleOpt_init = _Core.PropertyPlaneAngleOpt_init
PropertyPlaneAngleOpt_create = _Core.PropertyPlaneAngleOpt_create

class PropertyPositivePlaneAngle(PropertyReal):
    r"""Proxy of C++ Core::PropertyPositivePlaneAngle class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getClassTypeId = _swig_new_static_method(_Core.PropertyPositivePlaneAngle_getClassTypeId)
    setIfcNameAndID = _swig_new_static_method(_Core.PropertyPositivePlaneAngle_setIfcNameAndID)
    init = _swig_new_static_method(_Core.PropertyPositivePlaneAngle_init)
    create = _swig_new_static_method(_Core.PropertyPositivePlaneAngle_create)

    def __init__(self):
        r"""__init__(PropertyPositivePlaneAngle self) -> PropertyPositivePlaneAngle"""
        _Core.PropertyPositivePlaneAngle_swiginit(self, _Core.new_PropertyPositivePlaneAngle())
    __swig_destroy__ = _Core.delete_PropertyPositivePlaneAngle

# Register PropertyPositivePlaneAngle in _Core:
_Core.PropertyPositivePlaneAngle_swigregister(PropertyPositivePlaneAngle)
PropertyPositivePlaneAngle_getClassTypeId = _Core.PropertyPositivePlaneAngle_getClassTypeId
PropertyPositivePlaneAngle_setIfcNameAndID = _Core.PropertyPositivePlaneAngle_setIfcNameAndID
PropertyPositivePlaneAngle_init = _Core.PropertyPositivePlaneAngle_init
PropertyPositivePlaneAngle_create = _Core.PropertyPositivePlaneAngle_create

class PropertyPositivePlaneAngleOpt(PropertyPositivePlaneAngle):
    r"""Proxy of C++ Core::PropertyPositivePlaneAngleOpt class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getClassTypeId = _swig_new_static_method(_Core.PropertyPositivePlaneAngleOpt_getClassTypeId)
    setIfcNameAndID = _swig_new_static_method(_Core.PropertyPositivePlaneAngleOpt_setIfcNameAndID)
    init = _swig_new_static_method(_Core.PropertyPositivePlaneAngleOpt_init)
    create = _swig_new_static_method(_Core.PropertyPositivePlaneAngleOpt_create)

    def __init__(self):
        r"""__init__(PropertyPositivePlaneAngleOpt self) -> PropertyPositivePlaneAngleOpt"""
        _Core.PropertyPositivePlaneAngleOpt_swiginit(self, _Core.new_PropertyPositivePlaneAngleOpt())
    __swig_destroy__ = _Core.delete_PropertyPositivePlaneAngleOpt

# Register PropertyPositivePlaneAngleOpt in _Core:
_Core.PropertyPositivePlaneAngleOpt_swigregister(PropertyPositivePlaneAngleOpt)
PropertyPositivePlaneAngleOpt_getClassTypeId = _Core.PropertyPositivePlaneAngleOpt_getClassTypeId
PropertyPositivePlaneAngleOpt_setIfcNameAndID = _Core.PropertyPositivePlaneAngleOpt_setIfcNameAndID
PropertyPositivePlaneAngleOpt_init = _Core.PropertyPositivePlaneAngleOpt_init
PropertyPositivePlaneAngleOpt_create = _Core.PropertyPositivePlaneAngleOpt_create

class PropertyRatio(PropertyReal):
    r"""Proxy of C++ Core::PropertyRatio class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getClassTypeId = _swig_new_static_method(_Core.PropertyRatio_getClassTypeId)
    setIfcNameAndID = _swig_new_static_method(_Core.PropertyRatio_setIfcNameAndID)
    init = _swig_new_static_method(_Core.PropertyRatio_init)
    create = _swig_new_static_method(_Core.PropertyRatio_create)

    def __init__(self):
        r"""__init__(PropertyRatio self) -> PropertyRatio"""
        _Core.PropertyRatio_swiginit(self, _Core.new_PropertyRatio())
    __swig_destroy__ = _Core.delete_PropertyRatio

# Register PropertyRatio in _Core:
_Core.PropertyRatio_swigregister(PropertyRatio)
PropertyRatio_getClassTypeId = _Core.PropertyRatio_getClassTypeId
PropertyRatio_setIfcNameAndID = _Core.PropertyRatio_setIfcNameAndID
PropertyRatio_init = _Core.PropertyRatio_init
PropertyRatio_create = _Core.PropertyRatio_create

class PropertyRatioMeasure(PropertyReal):
    r"""Proxy of C++ Core::PropertyRatioMeasure class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getClassTypeId = _swig_new_static_method(_Core.PropertyRatioMeasure_getClassTypeId)
    setIfcNameAndID = _swig_new_static_method(_Core.PropertyRatioMeasure_setIfcNameAndID)
    init = _swig_new_static_method(_Core.PropertyRatioMeasure_init)
    create = _swig_new_static_method(_Core.PropertyRatioMeasure_create)

    def __init__(self):
        r"""__init__(PropertyRatioMeasure self) -> PropertyRatioMeasure"""
        _Core.PropertyRatioMeasure_swiginit(self, _Core.new_PropertyRatioMeasure())
    __swig_destroy__ = _Core.delete_PropertyRatioMeasure

# Register PropertyRatioMeasure in _Core:
_Core.PropertyRatioMeasure_swigregister(PropertyRatioMeasure)
PropertyRatioMeasure_getClassTypeId = _Core.PropertyRatioMeasure_getClassTypeId
PropertyRatioMeasure_setIfcNameAndID = _Core.PropertyRatioMeasure_setIfcNameAndID
PropertyRatioMeasure_init = _Core.PropertyRatioMeasure_init
PropertyRatioMeasure_create = _Core.PropertyRatioMeasure_create

class PropertyPositiveRatioMeasure(PropertyRatioMeasure):
    r"""Proxy of C++ Core::PropertyPositiveRatioMeasure class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getClassTypeId = _swig_new_static_method(_Core.PropertyPositiveRatioMeasure_getClassTypeId)
    setIfcNameAndID = _swig_new_static_method(_Core.PropertyPositiveRatioMeasure_setIfcNameAndID)
    init = _swig_new_static_method(_Core.PropertyPositiveRatioMeasure_init)
    create = _swig_new_static_method(_Core.PropertyPositiveRatioMeasure_create)

    def __init__(self):
        r"""__init__(PropertyPositiveRatioMeasure self) -> PropertyPositiveRatioMeasure"""
        _Core.PropertyPositiveRatioMeasure_swiginit(self, _Core.new_PropertyPositiveRatioMeasure())
    __swig_destroy__ = _Core.delete_PropertyPositiveRatioMeasure

# Register PropertyPositiveRatioMeasure in _Core:
_Core.PropertyPositiveRatioMeasure_swigregister(PropertyPositiveRatioMeasure)
PropertyPositiveRatioMeasure_getClassTypeId = _Core.PropertyPositiveRatioMeasure_getClassTypeId
PropertyPositiveRatioMeasure_setIfcNameAndID = _Core.PropertyPositiveRatioMeasure_setIfcNameAndID
PropertyPositiveRatioMeasure_init = _Core.PropertyPositiveRatioMeasure_init
PropertyPositiveRatioMeasure_create = _Core.PropertyPositiveRatioMeasure_create

class PropertyPositiveRatio(PropertyReal):
    r"""Proxy of C++ Core::PropertyPositiveRatio class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getClassTypeId = _swig_new_static_method(_Core.PropertyPositiveRatio_getClassTypeId)
    setIfcNameAndID = _swig_new_static_method(_Core.PropertyPositiveRatio_setIfcNameAndID)
    init = _swig_new_static_method(_Core.PropertyPositiveRatio_init)
    create = _swig_new_static_method(_Core.PropertyPositiveRatio_create)

    def __init__(self):
        r"""__init__(PropertyPositiveRatio self) -> PropertyPositiveRatio"""
        _Core.PropertyPositiveRatio_swiginit(self, _Core.new_PropertyPositiveRatio())
    __swig_destroy__ = _Core.delete_PropertyPositiveRatio

# Register PropertyPositiveRatio in _Core:
_Core.PropertyPositiveRatio_swigregister(PropertyPositiveRatio)
PropertyPositiveRatio_getClassTypeId = _Core.PropertyPositiveRatio_getClassTypeId
PropertyPositiveRatio_setIfcNameAndID = _Core.PropertyPositiveRatio_setIfcNameAndID
PropertyPositiveRatio_init = _Core.PropertyPositiveRatio_init
PropertyPositiveRatio_create = _Core.PropertyPositiveRatio_create

class PropertyNormalisedRatio(PropertyReal):
    r"""Proxy of C++ Core::PropertyNormalisedRatio class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getClassTypeId = _swig_new_static_method(_Core.PropertyNormalisedRatio_getClassTypeId)
    setIfcNameAndID = _swig_new_static_method(_Core.PropertyNormalisedRatio_setIfcNameAndID)
    init = _swig_new_static_method(_Core.PropertyNormalisedRatio_init)
    create = _swig_new_static_method(_Core.PropertyNormalisedRatio_create)

    def __init__(self):
        r"""__init__(PropertyNormalisedRatio self) -> PropertyNormalisedRatio"""
        _Core.PropertyNormalisedRatio_swiginit(self, _Core.new_PropertyNormalisedRatio())
    __swig_destroy__ = _Core.delete_PropertyNormalisedRatio

# Register PropertyNormalisedRatio in _Core:
_Core.PropertyNormalisedRatio_swigregister(PropertyNormalisedRatio)
PropertyNormalisedRatio_getClassTypeId = _Core.PropertyNormalisedRatio_getClassTypeId
PropertyNormalisedRatio_setIfcNameAndID = _Core.PropertyNormalisedRatio_setIfcNameAndID
PropertyNormalisedRatio_init = _Core.PropertyNormalisedRatio_init
PropertyNormalisedRatio_create = _Core.PropertyNormalisedRatio_create

class PropertyNormalisedRatioOpt(PropertyNormalisedRatio):
    r"""Proxy of C++ Core::PropertyNormalisedRatioOpt class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getClassTypeId = _swig_new_static_method(_Core.PropertyNormalisedRatioOpt_getClassTypeId)
    setIfcNameAndID = _swig_new_static_method(_Core.PropertyNormalisedRatioOpt_setIfcNameAndID)
    init = _swig_new_static_method(_Core.PropertyNormalisedRatioOpt_init)
    create = _swig_new_static_method(_Core.PropertyNormalisedRatioOpt_create)

    def __init__(self):
        r"""__init__(PropertyNormalisedRatioOpt self) -> PropertyNormalisedRatioOpt"""
        _Core.PropertyNormalisedRatioOpt_swiginit(self, _Core.new_PropertyNormalisedRatioOpt())
    __swig_destroy__ = _Core.delete_PropertyNormalisedRatioOpt

# Register PropertyNormalisedRatioOpt in _Core:
_Core.PropertyNormalisedRatioOpt_swigregister(PropertyNormalisedRatioOpt)
PropertyNormalisedRatioOpt_getClassTypeId = _Core.PropertyNormalisedRatioOpt_getClassTypeId
PropertyNormalisedRatioOpt_setIfcNameAndID = _Core.PropertyNormalisedRatioOpt_setIfcNameAndID
PropertyNormalisedRatioOpt_init = _Core.PropertyNormalisedRatioOpt_init
PropertyNormalisedRatioOpt_create = _Core.PropertyNormalisedRatioOpt_create

class PropertyDynamicViscosity(PropertyReal):
    r"""Proxy of C++ Core::PropertyDynamicViscosity class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getClassTypeId = _swig_new_static_method(_Core.PropertyDynamicViscosity_getClassTypeId)
    setIfcNameAndID = _swig_new_static_method(_Core.PropertyDynamicViscosity_setIfcNameAndID)
    init = _swig_new_static_method(_Core.PropertyDynamicViscosity_init)
    create = _swig_new_static_method(_Core.PropertyDynamicViscosity_create)

    def __init__(self):
        r"""__init__(PropertyDynamicViscosity self) -> PropertyDynamicViscosity"""
        _Core.PropertyDynamicViscosity_swiginit(self, _Core.new_PropertyDynamicViscosity())
    __swig_destroy__ = _Core.delete_PropertyDynamicViscosity

# Register PropertyDynamicViscosity in _Core:
_Core.PropertyDynamicViscosity_swigregister(PropertyDynamicViscosity)
PropertyDynamicViscosity_getClassTypeId = _Core.PropertyDynamicViscosity_getClassTypeId
PropertyDynamicViscosity_setIfcNameAndID = _Core.PropertyDynamicViscosity_setIfcNameAndID
PropertyDynamicViscosity_init = _Core.PropertyDynamicViscosity_init
PropertyDynamicViscosity_create = _Core.PropertyDynamicViscosity_create

class PropertyModulusOfElasticity(PropertyReal):
    r"""Proxy of C++ Core::PropertyModulusOfElasticity class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getClassTypeId = _swig_new_static_method(_Core.PropertyModulusOfElasticity_getClassTypeId)
    setIfcNameAndID = _swig_new_static_method(_Core.PropertyModulusOfElasticity_setIfcNameAndID)
    init = _swig_new_static_method(_Core.PropertyModulusOfElasticity_init)
    create = _swig_new_static_method(_Core.PropertyModulusOfElasticity_create)

    def __init__(self):
        r"""__init__(PropertyModulusOfElasticity self) -> PropertyModulusOfElasticity"""
        _Core.PropertyModulusOfElasticity_swiginit(self, _Core.new_PropertyModulusOfElasticity())
    __swig_destroy__ = _Core.delete_PropertyModulusOfElasticity

# Register PropertyModulusOfElasticity in _Core:
_Core.PropertyModulusOfElasticity_swigregister(PropertyModulusOfElasticity)
PropertyModulusOfElasticity_getClassTypeId = _Core.PropertyModulusOfElasticity_getClassTypeId
PropertyModulusOfElasticity_setIfcNameAndID = _Core.PropertyModulusOfElasticity_setIfcNameAndID
PropertyModulusOfElasticity_init = _Core.PropertyModulusOfElasticity_init
PropertyModulusOfElasticity_create = _Core.PropertyModulusOfElasticity_create

class PropertyThermalExpansionCoefficient(PropertyReal):
    r"""Proxy of C++ Core::PropertyThermalExpansionCoefficient class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getClassTypeId = _swig_new_static_method(_Core.PropertyThermalExpansionCoefficient_getClassTypeId)
    setIfcNameAndID = _swig_new_static_method(_Core.PropertyThermalExpansionCoefficient_setIfcNameAndID)
    init = _swig_new_static_method(_Core.PropertyThermalExpansionCoefficient_init)
    create = _swig_new_static_method(_Core.PropertyThermalExpansionCoefficient_create)

    def __init__(self):
        r"""__init__(PropertyThermalExpansionCoefficient self) -> PropertyThermalExpansionCoefficient"""
        _Core.PropertyThermalExpansionCoefficient_swiginit(self, _Core.new_PropertyThermalExpansionCoefficient())
    __swig_destroy__ = _Core.delete_PropertyThermalExpansionCoefficient

# Register PropertyThermalExpansionCoefficient in _Core:
_Core.PropertyThermalExpansionCoefficient_swigregister(PropertyThermalExpansionCoefficient)
PropertyThermalExpansionCoefficient_getClassTypeId = _Core.PropertyThermalExpansionCoefficient_getClassTypeId
PropertyThermalExpansionCoefficient_setIfcNameAndID = _Core.PropertyThermalExpansionCoefficient_setIfcNameAndID
PropertyThermalExpansionCoefficient_init = _Core.PropertyThermalExpansionCoefficient_init
PropertyThermalExpansionCoefficient_create = _Core.PropertyThermalExpansionCoefficient_create

class PropertyPressure(PropertyReal):
    r"""Proxy of C++ Core::PropertyPressure class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getClassTypeId = _swig_new_static_method(_Core.PropertyPressure_getClassTypeId)
    setIfcNameAndID = _swig_new_static_method(_Core.PropertyPressure_setIfcNameAndID)
    init = _swig_new_static_method(_Core.PropertyPressure_init)
    create = _swig_new_static_method(_Core.PropertyPressure_create)

    def __init__(self):
        r"""__init__(PropertyPressure self) -> PropertyPressure"""
        _Core.PropertyPressure_swiginit(self, _Core.new_PropertyPressure())
    __swig_destroy__ = _Core.delete_PropertyPressure

# Register PropertyPressure in _Core:
_Core.PropertyPressure_swigregister(PropertyPressure)
PropertyPressure_getClassTypeId = _Core.PropertyPressure_getClassTypeId
PropertyPressure_setIfcNameAndID = _Core.PropertyPressure_setIfcNameAndID
PropertyPressure_init = _Core.PropertyPressure_init
PropertyPressure_create = _Core.PropertyPressure_create

class PropertyThermodynamicTemperature(PropertyReal):
    r"""Proxy of C++ Core::PropertyThermodynamicTemperature class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getClassTypeId = _swig_new_static_method(_Core.PropertyThermodynamicTemperature_getClassTypeId)
    setIfcNameAndID = _swig_new_static_method(_Core.PropertyThermodynamicTemperature_setIfcNameAndID)
    init = _swig_new_static_method(_Core.PropertyThermodynamicTemperature_init)
    create = _swig_new_static_method(_Core.PropertyThermodynamicTemperature_create)

    def __init__(self):
        r"""__init__(PropertyThermodynamicTemperature self) -> PropertyThermodynamicTemperature"""
        _Core.PropertyThermodynamicTemperature_swiginit(self, _Core.new_PropertyThermodynamicTemperature())
    __swig_destroy__ = _Core.delete_PropertyThermodynamicTemperature

# Register PropertyThermodynamicTemperature in _Core:
_Core.PropertyThermodynamicTemperature_swigregister(PropertyThermodynamicTemperature)
PropertyThermodynamicTemperature_getClassTypeId = _Core.PropertyThermodynamicTemperature_getClassTypeId
PropertyThermodynamicTemperature_setIfcNameAndID = _Core.PropertyThermodynamicTemperature_setIfcNameAndID
PropertyThermodynamicTemperature_init = _Core.PropertyThermodynamicTemperature_init
PropertyThermodynamicTemperature_create = _Core.PropertyThermodynamicTemperature_create

class PropertySpecificHeatCapacity(PropertyReal):
    r"""Proxy of C++ Core::PropertySpecificHeatCapacity class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getClassTypeId = _swig_new_static_method(_Core.PropertySpecificHeatCapacity_getClassTypeId)
    setIfcNameAndID = _swig_new_static_method(_Core.PropertySpecificHeatCapacity_setIfcNameAndID)
    init = _swig_new_static_method(_Core.PropertySpecificHeatCapacity_init)
    create = _swig_new_static_method(_Core.PropertySpecificHeatCapacity_create)

    def __init__(self):
        r"""__init__(PropertySpecificHeatCapacity self) -> PropertySpecificHeatCapacity"""
        _Core.PropertySpecificHeatCapacity_swiginit(self, _Core.new_PropertySpecificHeatCapacity())
    __swig_destroy__ = _Core.delete_PropertySpecificHeatCapacity

# Register PropertySpecificHeatCapacity in _Core:
_Core.PropertySpecificHeatCapacity_swigregister(PropertySpecificHeatCapacity)
PropertySpecificHeatCapacity_getClassTypeId = _Core.PropertySpecificHeatCapacity_getClassTypeId
PropertySpecificHeatCapacity_setIfcNameAndID = _Core.PropertySpecificHeatCapacity_setIfcNameAndID
PropertySpecificHeatCapacity_init = _Core.PropertySpecificHeatCapacity_init
PropertySpecificHeatCapacity_create = _Core.PropertySpecificHeatCapacity_create

class PropertyThermalConductivity(PropertyReal):
    r"""Proxy of C++ Core::PropertyThermalConductivity class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getClassTypeId = _swig_new_static_method(_Core.PropertyThermalConductivity_getClassTypeId)
    setIfcNameAndID = _swig_new_static_method(_Core.PropertyThermalConductivity_setIfcNameAndID)
    init = _swig_new_static_method(_Core.PropertyThermalConductivity_init)
    create = _swig_new_static_method(_Core.PropertyThermalConductivity_create)

    def __init__(self):
        r"""__init__(PropertyThermalConductivity self) -> PropertyThermalConductivity"""
        _Core.PropertyThermalConductivity_swiginit(self, _Core.new_PropertyThermalConductivity())
    __swig_destroy__ = _Core.delete_PropertyThermalConductivity

# Register PropertyThermalConductivity in _Core:
_Core.PropertyThermalConductivity_swigregister(PropertyThermalConductivity)
PropertyThermalConductivity_getClassTypeId = _Core.PropertyThermalConductivity_getClassTypeId
PropertyThermalConductivity_setIfcNameAndID = _Core.PropertyThermalConductivity_setIfcNameAndID
PropertyThermalConductivity_init = _Core.PropertyThermalConductivity_init
PropertyThermalConductivity_create = _Core.PropertyThermalConductivity_create

class PropertyIsothermalMoistureCapacity(PropertyReal):
    r"""Proxy of C++ Core::PropertyIsothermalMoistureCapacity class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getClassTypeId = _swig_new_static_method(_Core.PropertyIsothermalMoistureCapacity_getClassTypeId)
    setIfcNameAndID = _swig_new_static_method(_Core.PropertyIsothermalMoistureCapacity_setIfcNameAndID)
    init = _swig_new_static_method(_Core.PropertyIsothermalMoistureCapacity_init)
    create = _swig_new_static_method(_Core.PropertyIsothermalMoistureCapacity_create)

    def __init__(self):
        r"""__init__(PropertyIsothermalMoistureCapacity self) -> PropertyIsothermalMoistureCapacity"""
        _Core.PropertyIsothermalMoistureCapacity_swiginit(self, _Core.new_PropertyIsothermalMoistureCapacity())
    __swig_destroy__ = _Core.delete_PropertyIsothermalMoistureCapacity

# Register PropertyIsothermalMoistureCapacity in _Core:
_Core.PropertyIsothermalMoistureCapacity_swigregister(PropertyIsothermalMoistureCapacity)
PropertyIsothermalMoistureCapacity_getClassTypeId = _Core.PropertyIsothermalMoistureCapacity_getClassTypeId
PropertyIsothermalMoistureCapacity_setIfcNameAndID = _Core.PropertyIsothermalMoistureCapacity_setIfcNameAndID
PropertyIsothermalMoistureCapacity_init = _Core.PropertyIsothermalMoistureCapacity_init
PropertyIsothermalMoistureCapacity_create = _Core.PropertyIsothermalMoistureCapacity_create

class PropertyVaporPermeability(PropertyReal):
    r"""Proxy of C++ Core::PropertyVaporPermeability class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getClassTypeId = _swig_new_static_method(_Core.PropertyVaporPermeability_getClassTypeId)
    setIfcNameAndID = _swig_new_static_method(_Core.PropertyVaporPermeability_setIfcNameAndID)
    init = _swig_new_static_method(_Core.PropertyVaporPermeability_init)
    create = _swig_new_static_method(_Core.PropertyVaporPermeability_create)

    def __init__(self):
        r"""__init__(PropertyVaporPermeability self) -> PropertyVaporPermeability"""
        _Core.PropertyVaporPermeability_swiginit(self, _Core.new_PropertyVaporPermeability())
    __swig_destroy__ = _Core.delete_PropertyVaporPermeability

# Register PropertyVaporPermeability in _Core:
_Core.PropertyVaporPermeability_swigregister(PropertyVaporPermeability)
PropertyVaporPermeability_getClassTypeId = _Core.PropertyVaporPermeability_getClassTypeId
PropertyVaporPermeability_setIfcNameAndID = _Core.PropertyVaporPermeability_setIfcNameAndID
PropertyVaporPermeability_init = _Core.PropertyVaporPermeability_init
PropertyVaporPermeability_create = _Core.PropertyVaporPermeability_create

class PropertyMoistureDiffusivity(PropertyReal):
    r"""Proxy of C++ Core::PropertyMoistureDiffusivity class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getClassTypeId = _swig_new_static_method(_Core.PropertyMoistureDiffusivity_getClassTypeId)
    setIfcNameAndID = _swig_new_static_method(_Core.PropertyMoistureDiffusivity_setIfcNameAndID)
    init = _swig_new_static_method(_Core.PropertyMoistureDiffusivity_init)
    create = _swig_new_static_method(_Core.PropertyMoistureDiffusivity_create)

    def __init__(self):
        r"""__init__(PropertyMoistureDiffusivity self) -> PropertyMoistureDiffusivity"""
        _Core.PropertyMoistureDiffusivity_swiginit(self, _Core.new_PropertyMoistureDiffusivity())
    __swig_destroy__ = _Core.delete_PropertyMoistureDiffusivity

# Register PropertyMoistureDiffusivity in _Core:
_Core.PropertyMoistureDiffusivity_swigregister(PropertyMoistureDiffusivity)
PropertyMoistureDiffusivity_getClassTypeId = _Core.PropertyMoistureDiffusivity_getClassTypeId
PropertyMoistureDiffusivity_setIfcNameAndID = _Core.PropertyMoistureDiffusivity_setIfcNameAndID
PropertyMoistureDiffusivity_init = _Core.PropertyMoistureDiffusivity_init
PropertyMoistureDiffusivity_create = _Core.PropertyMoistureDiffusivity_create

class PropertyMolecularWeight(PropertyReal):
    r"""Proxy of C++ Core::PropertyMolecularWeight class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getClassTypeId = _swig_new_static_method(_Core.PropertyMolecularWeight_getClassTypeId)
    setIfcNameAndID = _swig_new_static_method(_Core.PropertyMolecularWeight_setIfcNameAndID)
    init = _swig_new_static_method(_Core.PropertyMolecularWeight_init)
    create = _swig_new_static_method(_Core.PropertyMolecularWeight_create)

    def __init__(self):
        r"""__init__(PropertyMolecularWeight self) -> PropertyMolecularWeight"""
        _Core.PropertyMolecularWeight_swiginit(self, _Core.new_PropertyMolecularWeight())
    __swig_destroy__ = _Core.delete_PropertyMolecularWeight

# Register PropertyMolecularWeight in _Core:
_Core.PropertyMolecularWeight_swigregister(PropertyMolecularWeight)
PropertyMolecularWeight_getClassTypeId = _Core.PropertyMolecularWeight_getClassTypeId
PropertyMolecularWeight_setIfcNameAndID = _Core.PropertyMolecularWeight_setIfcNameAndID
PropertyMolecularWeight_init = _Core.PropertyMolecularWeight_init
PropertyMolecularWeight_create = _Core.PropertyMolecularWeight_create

class PropertyMassDensity(PropertyReal):
    r"""Proxy of C++ Core::PropertyMassDensity class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getClassTypeId = _swig_new_static_method(_Core.PropertyMassDensity_getClassTypeId)
    setIfcNameAndID = _swig_new_static_method(_Core.PropertyMassDensity_setIfcNameAndID)
    init = _swig_new_static_method(_Core.PropertyMassDensity_init)
    create = _swig_new_static_method(_Core.PropertyMassDensity_create)

    def __init__(self):
        r"""__init__(PropertyMassDensity self) -> PropertyMassDensity"""
        _Core.PropertyMassDensity_swiginit(self, _Core.new_PropertyMassDensity())
    __swig_destroy__ = _Core.delete_PropertyMassDensity

# Register PropertyMassDensity in _Core:
_Core.PropertyMassDensity_swigregister(PropertyMassDensity)
PropertyMassDensity_getClassTypeId = _Core.PropertyMassDensity_getClassTypeId
PropertyMassDensity_setIfcNameAndID = _Core.PropertyMassDensity_setIfcNameAndID
PropertyMassDensity_init = _Core.PropertyMassDensity_init
PropertyMassDensity_create = _Core.PropertyMassDensity_create

class PropertyIonConcentration(PropertyReal):
    r"""Proxy of C++ Core::PropertyIonConcentration class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getClassTypeId = _swig_new_static_method(_Core.PropertyIonConcentration_getClassTypeId)
    setIfcNameAndID = _swig_new_static_method(_Core.PropertyIonConcentration_setIfcNameAndID)
    init = _swig_new_static_method(_Core.PropertyIonConcentration_init)
    create = _swig_new_static_method(_Core.PropertyIonConcentration_create)

    def __init__(self):
        r"""__init__(PropertyIonConcentration self) -> PropertyIonConcentration"""
        _Core.PropertyIonConcentration_swiginit(self, _Core.new_PropertyIonConcentration())
    __swig_destroy__ = _Core.delete_PropertyIonConcentration

# Register PropertyIonConcentration in _Core:
_Core.PropertyIonConcentration_swigregister(PropertyIonConcentration)
PropertyIonConcentration_getClassTypeId = _Core.PropertyIonConcentration_getClassTypeId
PropertyIonConcentration_setIfcNameAndID = _Core.PropertyIonConcentration_setIfcNameAndID
PropertyIonConcentration_init = _Core.PropertyIonConcentration_init
PropertyIonConcentration_create = _Core.PropertyIonConcentration_create

class PropertyPHMeasure(PropertyReal):
    r"""Proxy of C++ Core::PropertyPHMeasure class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getClassTypeId = _swig_new_static_method(_Core.PropertyPHMeasure_getClassTypeId)
    setIfcNameAndID = _swig_new_static_method(_Core.PropertyPHMeasure_setIfcNameAndID)
    init = _swig_new_static_method(_Core.PropertyPHMeasure_init)
    create = _swig_new_static_method(_Core.PropertyPHMeasure_create)

    def __init__(self):
        r"""__init__(PropertyPHMeasure self) -> PropertyPHMeasure"""
        _Core.PropertyPHMeasure_swiginit(self, _Core.new_PropertyPHMeasure())
    __swig_destroy__ = _Core.delete_PropertyPHMeasure

# Register PropertyPHMeasure in _Core:
_Core.PropertyPHMeasure_swigregister(PropertyPHMeasure)
PropertyPHMeasure_getClassTypeId = _Core.PropertyPHMeasure_getClassTypeId
PropertyPHMeasure_setIfcNameAndID = _Core.PropertyPHMeasure_setIfcNameAndID
PropertyPHMeasure_init = _Core.PropertyPHMeasure_init
PropertyPHMeasure_create = _Core.PropertyPHMeasure_create

class PropertyHeatingValue(PropertyReal):
    r"""Proxy of C++ Core::PropertyHeatingValue class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getClassTypeId = _swig_new_static_method(_Core.PropertyHeatingValue_getClassTypeId)
    setIfcNameAndID = _swig_new_static_method(_Core.PropertyHeatingValue_setIfcNameAndID)
    init = _swig_new_static_method(_Core.PropertyHeatingValue_init)
    create = _swig_new_static_method(_Core.PropertyHeatingValue_create)

    def __init__(self):
        r"""__init__(PropertyHeatingValue self) -> PropertyHeatingValue"""
        _Core.PropertyHeatingValue_swiginit(self, _Core.new_PropertyHeatingValue())
    __swig_destroy__ = _Core.delete_PropertyHeatingValue

# Register PropertyHeatingValue in _Core:
_Core.PropertyHeatingValue_swigregister(PropertyHeatingValue)
PropertyHeatingValue_getClassTypeId = _Core.PropertyHeatingValue_getClassTypeId
PropertyHeatingValue_setIfcNameAndID = _Core.PropertyHeatingValue_setIfcNameAndID
PropertyHeatingValue_init = _Core.PropertyHeatingValue_init
PropertyHeatingValue_create = _Core.PropertyHeatingValue_create

class PropertyThermalTransmittance(PropertyReal):
    r"""Proxy of C++ Core::PropertyThermalTransmittance class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getClassTypeId = _swig_new_static_method(_Core.PropertyThermalTransmittance_getClassTypeId)
    setIfcNameAndID = _swig_new_static_method(_Core.PropertyThermalTransmittance_setIfcNameAndID)
    init = _swig_new_static_method(_Core.PropertyThermalTransmittance_init)
    create = _swig_new_static_method(_Core.PropertyThermalTransmittance_create)

    def __init__(self):
        r"""__init__(PropertyThermalTransmittance self) -> PropertyThermalTransmittance"""
        _Core.PropertyThermalTransmittance_swiginit(self, _Core.new_PropertyThermalTransmittance())
    __swig_destroy__ = _Core.delete_PropertyThermalTransmittance

# Register PropertyThermalTransmittance in _Core:
_Core.PropertyThermalTransmittance_swigregister(PropertyThermalTransmittance)
PropertyThermalTransmittance_getClassTypeId = _Core.PropertyThermalTransmittance_getClassTypeId
PropertyThermalTransmittance_setIfcNameAndID = _Core.PropertyThermalTransmittance_setIfcNameAndID
PropertyThermalTransmittance_init = _Core.PropertyThermalTransmittance_init
PropertyThermalTransmittance_create = _Core.PropertyThermalTransmittance_create

class PropertyThermalTransmittanceMeasure(PropertyReal):
    r"""Proxy of C++ Core::PropertyThermalTransmittanceMeasure class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getClassTypeId = _swig_new_static_method(_Core.PropertyThermalTransmittanceMeasure_getClassTypeId)
    setIfcNameAndID = _swig_new_static_method(_Core.PropertyThermalTransmittanceMeasure_setIfcNameAndID)
    init = _swig_new_static_method(_Core.PropertyThermalTransmittanceMeasure_init)
    create = _swig_new_static_method(_Core.PropertyThermalTransmittanceMeasure_create)

    def __init__(self):
        r"""__init__(PropertyThermalTransmittanceMeasure self) -> PropertyThermalTransmittanceMeasure"""
        _Core.PropertyThermalTransmittanceMeasure_swiginit(self, _Core.new_PropertyThermalTransmittanceMeasure())
    __swig_destroy__ = _Core.delete_PropertyThermalTransmittanceMeasure

# Register PropertyThermalTransmittanceMeasure in _Core:
_Core.PropertyThermalTransmittanceMeasure_swigregister(PropertyThermalTransmittanceMeasure)
PropertyThermalTransmittanceMeasure_getClassTypeId = _Core.PropertyThermalTransmittanceMeasure_getClassTypeId
PropertyThermalTransmittanceMeasure_setIfcNameAndID = _Core.PropertyThermalTransmittanceMeasure_setIfcNameAndID
PropertyThermalTransmittanceMeasure_init = _Core.PropertyThermalTransmittanceMeasure_init
PropertyThermalTransmittanceMeasure_create = _Core.PropertyThermalTransmittanceMeasure_create

class PropertyVolumetricFlowRateMeasure(PropertyReal):
    r"""Proxy of C++ Core::PropertyVolumetricFlowRateMeasure class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getClassTypeId = _swig_new_static_method(_Core.PropertyVolumetricFlowRateMeasure_getClassTypeId)
    setIfcNameAndID = _swig_new_static_method(_Core.PropertyVolumetricFlowRateMeasure_setIfcNameAndID)
    init = _swig_new_static_method(_Core.PropertyVolumetricFlowRateMeasure_init)
    create = _swig_new_static_method(_Core.PropertyVolumetricFlowRateMeasure_create)

    def __init__(self):
        r"""__init__(PropertyVolumetricFlowRateMeasure self) -> PropertyVolumetricFlowRateMeasure"""
        _Core.PropertyVolumetricFlowRateMeasure_swiginit(self, _Core.new_PropertyVolumetricFlowRateMeasure())
    __swig_destroy__ = _Core.delete_PropertyVolumetricFlowRateMeasure

# Register PropertyVolumetricFlowRateMeasure in _Core:
_Core.PropertyVolumetricFlowRateMeasure_swigregister(PropertyVolumetricFlowRateMeasure)
PropertyVolumetricFlowRateMeasure_getClassTypeId = _Core.PropertyVolumetricFlowRateMeasure_getClassTypeId
PropertyVolumetricFlowRateMeasure_setIfcNameAndID = _Core.PropertyVolumetricFlowRateMeasure_setIfcNameAndID
PropertyVolumetricFlowRateMeasure_init = _Core.PropertyVolumetricFlowRateMeasure_init
PropertyVolumetricFlowRateMeasure_create = _Core.PropertyVolumetricFlowRateMeasure_create

class PropertyReal_Factory(PropertyFactory):
    r"""Proxy of C++ Core::PropertyReal_Factory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(PropertyReal_Factory self) -> PropertyReal_Factory"""
        _Core.PropertyReal_Factory_swiginit(self, _Core.new_PropertyReal_Factory())
    __swig_destroy__ = _Core.delete_PropertyReal_Factory

# Register PropertyReal_Factory in _Core:
_Core.PropertyReal_Factory_swigregister(PropertyReal_Factory)
class PropertyRealOpt_Factory(PropertyFactory):
    r"""Proxy of C++ Core::PropertyRealOpt_Factory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(PropertyRealOpt_Factory self) -> PropertyRealOpt_Factory"""
        _Core.PropertyRealOpt_Factory_swiginit(self, _Core.new_PropertyRealOpt_Factory())
    __swig_destroy__ = _Core.delete_PropertyRealOpt_Factory

# Register PropertyRealOpt_Factory in _Core:
_Core.PropertyRealOpt_Factory_swigregister(PropertyRealOpt_Factory)
class PropertyRealList_Factory(PropertyFactory):
    r"""Proxy of C++ Core::PropertyRealList_Factory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(PropertyRealList_Factory self) -> PropertyRealList_Factory"""
        _Core.PropertyRealList_Factory_swiginit(self, _Core.new_PropertyRealList_Factory())
    __swig_destroy__ = _Core.delete_PropertyRealList_Factory

# Register PropertyRealList_Factory in _Core:
_Core.PropertyRealList_Factory_swigregister(PropertyRealList_Factory)
class PropertyListRealList_Factory(PropertyFactory):
    r"""Proxy of C++ Core::PropertyListRealList_Factory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(PropertyListRealList_Factory self) -> PropertyListRealList_Factory"""
        _Core.PropertyListRealList_Factory_swiginit(self, _Core.new_PropertyListRealList_Factory())
    __swig_destroy__ = _Core.delete_PropertyListRealList_Factory

# Register PropertyListRealList_Factory in _Core:
_Core.PropertyListRealList_Factory_swigregister(PropertyListRealList_Factory)
class PropertyLength_Factory(PropertyFactory):
    r"""Proxy of C++ Core::PropertyLength_Factory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(PropertyLength_Factory self) -> PropertyLength_Factory"""
        _Core.PropertyLength_Factory_swiginit(self, _Core.new_PropertyLength_Factory())
    __swig_destroy__ = _Core.delete_PropertyLength_Factory

# Register PropertyLength_Factory in _Core:
_Core.PropertyLength_Factory_swigregister(PropertyLength_Factory)
class PropertyLengthMeasure_Factory(PropertyFactory):
    r"""Proxy of C++ Core::PropertyLengthMeasure_Factory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(PropertyLengthMeasure_Factory self) -> PropertyLengthMeasure_Factory"""
        _Core.PropertyLengthMeasure_Factory_swiginit(self, _Core.new_PropertyLengthMeasure_Factory())
    __swig_destroy__ = _Core.delete_PropertyLengthMeasure_Factory

# Register PropertyLengthMeasure_Factory in _Core:
_Core.PropertyLengthMeasure_Factory_swigregister(PropertyLengthMeasure_Factory)
class PropertyPositiveLength_Factory(PropertyFactory):
    r"""Proxy of C++ Core::PropertyPositiveLength_Factory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(PropertyPositiveLength_Factory self) -> PropertyPositiveLength_Factory"""
        _Core.PropertyPositiveLength_Factory_swiginit(self, _Core.new_PropertyPositiveLength_Factory())
    __swig_destroy__ = _Core.delete_PropertyPositiveLength_Factory

# Register PropertyPositiveLength_Factory in _Core:
_Core.PropertyPositiveLength_Factory_swigregister(PropertyPositiveLength_Factory)
class PropertyLengthOpt_Factory(PropertyFactory):
    r"""Proxy of C++ Core::PropertyLengthOpt_Factory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(PropertyLengthOpt_Factory self) -> PropertyLengthOpt_Factory"""
        _Core.PropertyLengthOpt_Factory_swiginit(self, _Core.new_PropertyLengthOpt_Factory())
    __swig_destroy__ = _Core.delete_PropertyLengthOpt_Factory

# Register PropertyLengthOpt_Factory in _Core:
_Core.PropertyLengthOpt_Factory_swigregister(PropertyLengthOpt_Factory)
class PropertyPlaneAngle_Factory(PropertyFactory):
    r"""Proxy of C++ Core::PropertyPlaneAngle_Factory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(PropertyPlaneAngle_Factory self) -> PropertyPlaneAngle_Factory"""
        _Core.PropertyPlaneAngle_Factory_swiginit(self, _Core.new_PropertyPlaneAngle_Factory())
    __swig_destroy__ = _Core.delete_PropertyPlaneAngle_Factory

# Register PropertyPlaneAngle_Factory in _Core:
_Core.PropertyPlaneAngle_Factory_swigregister(PropertyPlaneAngle_Factory)
class PropertyPositivePlaneAngle_Factory(PropertyFactory):
    r"""Proxy of C++ Core::PropertyPositivePlaneAngle_Factory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(PropertyPositivePlaneAngle_Factory self) -> PropertyPositivePlaneAngle_Factory"""
        _Core.PropertyPositivePlaneAngle_Factory_swiginit(self, _Core.new_PropertyPositivePlaneAngle_Factory())
    __swig_destroy__ = _Core.delete_PropertyPositivePlaneAngle_Factory

# Register PropertyPositivePlaneAngle_Factory in _Core:
_Core.PropertyPositivePlaneAngle_Factory_swigregister(PropertyPositivePlaneAngle_Factory)
class PropertyRatio_Factory(PropertyFactory):
    r"""Proxy of C++ Core::PropertyRatio_Factory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(PropertyRatio_Factory self) -> PropertyRatio_Factory"""
        _Core.PropertyRatio_Factory_swiginit(self, _Core.new_PropertyRatio_Factory())
    __swig_destroy__ = _Core.delete_PropertyRatio_Factory

# Register PropertyRatio_Factory in _Core:
_Core.PropertyRatio_Factory_swigregister(PropertyRatio_Factory)
class PropertyPositiveRatio_Factory(PropertyFactory):
    r"""Proxy of C++ Core::PropertyPositiveRatio_Factory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(PropertyPositiveRatio_Factory self) -> PropertyPositiveRatio_Factory"""
        _Core.PropertyPositiveRatio_Factory_swiginit(self, _Core.new_PropertyPositiveRatio_Factory())
    __swig_destroy__ = _Core.delete_PropertyPositiveRatio_Factory

# Register PropertyPositiveRatio_Factory in _Core:
_Core.PropertyPositiveRatio_Factory_swigregister(PropertyPositiveRatio_Factory)
class PropertyRatioMeasure_Factory(PropertyFactory):
    r"""Proxy of C++ Core::PropertyRatioMeasure_Factory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(PropertyRatioMeasure_Factory self) -> PropertyRatioMeasure_Factory"""
        _Core.PropertyRatioMeasure_Factory_swiginit(self, _Core.new_PropertyRatioMeasure_Factory())
    __swig_destroy__ = _Core.delete_PropertyRatioMeasure_Factory

# Register PropertyRatioMeasure_Factory in _Core:
_Core.PropertyRatioMeasure_Factory_swigregister(PropertyRatioMeasure_Factory)
class PropertyPositiveRatioMeasure_Factory(PropertyFactory):
    r"""Proxy of C++ Core::PropertyPositiveRatioMeasure_Factory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(PropertyPositiveRatioMeasure_Factory self) -> PropertyPositiveRatioMeasure_Factory"""
        _Core.PropertyPositiveRatioMeasure_Factory_swiginit(self, _Core.new_PropertyPositiveRatioMeasure_Factory())
    __swig_destroy__ = _Core.delete_PropertyPositiveRatioMeasure_Factory

# Register PropertyPositiveRatioMeasure_Factory in _Core:
_Core.PropertyPositiveRatioMeasure_Factory_swigregister(PropertyPositiveRatioMeasure_Factory)
class PropertyNormalisedRatio_Factory(PropertyFactory):
    r"""Proxy of C++ Core::PropertyNormalisedRatio_Factory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(PropertyNormalisedRatio_Factory self) -> PropertyNormalisedRatio_Factory"""
        _Core.PropertyNormalisedRatio_Factory_swiginit(self, _Core.new_PropertyNormalisedRatio_Factory())
    __swig_destroy__ = _Core.delete_PropertyNormalisedRatio_Factory

# Register PropertyNormalisedRatio_Factory in _Core:
_Core.PropertyNormalisedRatio_Factory_swigregister(PropertyNormalisedRatio_Factory)
class PropertyDynamicViscosity_Factory(PropertyFactory):
    r"""Proxy of C++ Core::PropertyDynamicViscosity_Factory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(PropertyDynamicViscosity_Factory self) -> PropertyDynamicViscosity_Factory"""
        _Core.PropertyDynamicViscosity_Factory_swiginit(self, _Core.new_PropertyDynamicViscosity_Factory())
    __swig_destroy__ = _Core.delete_PropertyDynamicViscosity_Factory

# Register PropertyDynamicViscosity_Factory in _Core:
_Core.PropertyDynamicViscosity_Factory_swigregister(PropertyDynamicViscosity_Factory)
class PropertyModulusOfElasticity_Factory(PropertyFactory):
    r"""Proxy of C++ Core::PropertyModulusOfElasticity_Factory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(PropertyModulusOfElasticity_Factory self) -> PropertyModulusOfElasticity_Factory"""
        _Core.PropertyModulusOfElasticity_Factory_swiginit(self, _Core.new_PropertyModulusOfElasticity_Factory())
    __swig_destroy__ = _Core.delete_PropertyModulusOfElasticity_Factory

# Register PropertyModulusOfElasticity_Factory in _Core:
_Core.PropertyModulusOfElasticity_Factory_swigregister(PropertyModulusOfElasticity_Factory)
class PropertyThermalExpansionCoefficient_Factory(PropertyFactory):
    r"""Proxy of C++ Core::PropertyThermalExpansionCoefficient_Factory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(PropertyThermalExpansionCoefficient_Factory self) -> PropertyThermalExpansionCoefficient_Factory"""
        _Core.PropertyThermalExpansionCoefficient_Factory_swiginit(self, _Core.new_PropertyThermalExpansionCoefficient_Factory())
    __swig_destroy__ = _Core.delete_PropertyThermalExpansionCoefficient_Factory

# Register PropertyThermalExpansionCoefficient_Factory in _Core:
_Core.PropertyThermalExpansionCoefficient_Factory_swigregister(PropertyThermalExpansionCoefficient_Factory)
class PropertyPressure_Factory(PropertyFactory):
    r"""Proxy of C++ Core::PropertyPressure_Factory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(PropertyPressure_Factory self) -> PropertyPressure_Factory"""
        _Core.PropertyPressure_Factory_swiginit(self, _Core.new_PropertyPressure_Factory())
    __swig_destroy__ = _Core.delete_PropertyPressure_Factory

# Register PropertyPressure_Factory in _Core:
_Core.PropertyPressure_Factory_swigregister(PropertyPressure_Factory)
class PropertyThermodynamicTemperature_Factory(PropertyFactory):
    r"""Proxy of C++ Core::PropertyThermodynamicTemperature_Factory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(PropertyThermodynamicTemperature_Factory self) -> PropertyThermodynamicTemperature_Factory"""
        _Core.PropertyThermodynamicTemperature_Factory_swiginit(self, _Core.new_PropertyThermodynamicTemperature_Factory())
    __swig_destroy__ = _Core.delete_PropertyThermodynamicTemperature_Factory

# Register PropertyThermodynamicTemperature_Factory in _Core:
_Core.PropertyThermodynamicTemperature_Factory_swigregister(PropertyThermodynamicTemperature_Factory)
class PropertySpecificHeatCapacity_Factory(PropertyFactory):
    r"""Proxy of C++ Core::PropertySpecificHeatCapacity_Factory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(PropertySpecificHeatCapacity_Factory self) -> PropertySpecificHeatCapacity_Factory"""
        _Core.PropertySpecificHeatCapacity_Factory_swiginit(self, _Core.new_PropertySpecificHeatCapacity_Factory())
    __swig_destroy__ = _Core.delete_PropertySpecificHeatCapacity_Factory

# Register PropertySpecificHeatCapacity_Factory in _Core:
_Core.PropertySpecificHeatCapacity_Factory_swigregister(PropertySpecificHeatCapacity_Factory)
class PropertyThermalConductivity_Factory(PropertyFactory):
    r"""Proxy of C++ Core::PropertyThermalConductivity_Factory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(PropertyThermalConductivity_Factory self) -> PropertyThermalConductivity_Factory"""
        _Core.PropertyThermalConductivity_Factory_swiginit(self, _Core.new_PropertyThermalConductivity_Factory())
    __swig_destroy__ = _Core.delete_PropertyThermalConductivity_Factory

# Register PropertyThermalConductivity_Factory in _Core:
_Core.PropertyThermalConductivity_Factory_swigregister(PropertyThermalConductivity_Factory)
class PropertyIsothermalMoistureCapacity_Factory(PropertyFactory):
    r"""Proxy of C++ Core::PropertyIsothermalMoistureCapacity_Factory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(PropertyIsothermalMoistureCapacity_Factory self) -> PropertyIsothermalMoistureCapacity_Factory"""
        _Core.PropertyIsothermalMoistureCapacity_Factory_swiginit(self, _Core.new_PropertyIsothermalMoistureCapacity_Factory())
    __swig_destroy__ = _Core.delete_PropertyIsothermalMoistureCapacity_Factory

# Register PropertyIsothermalMoistureCapacity_Factory in _Core:
_Core.PropertyIsothermalMoistureCapacity_Factory_swigregister(PropertyIsothermalMoistureCapacity_Factory)
class PropertyVaporPermeability_Factory(PropertyFactory):
    r"""Proxy of C++ Core::PropertyVaporPermeability_Factory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(PropertyVaporPermeability_Factory self) -> PropertyVaporPermeability_Factory"""
        _Core.PropertyVaporPermeability_Factory_swiginit(self, _Core.new_PropertyVaporPermeability_Factory())
    __swig_destroy__ = _Core.delete_PropertyVaporPermeability_Factory

# Register PropertyVaporPermeability_Factory in _Core:
_Core.PropertyVaporPermeability_Factory_swigregister(PropertyVaporPermeability_Factory)
class PropertyMoistureDiffusivity_Factory(PropertyFactory):
    r"""Proxy of C++ Core::PropertyMoistureDiffusivity_Factory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(PropertyMoistureDiffusivity_Factory self) -> PropertyMoistureDiffusivity_Factory"""
        _Core.PropertyMoistureDiffusivity_Factory_swiginit(self, _Core.new_PropertyMoistureDiffusivity_Factory())
    __swig_destroy__ = _Core.delete_PropertyMoistureDiffusivity_Factory

# Register PropertyMoistureDiffusivity_Factory in _Core:
_Core.PropertyMoistureDiffusivity_Factory_swigregister(PropertyMoistureDiffusivity_Factory)
class PropertyMolecularWeight_Factory(PropertyFactory):
    r"""Proxy of C++ Core::PropertyMolecularWeight_Factory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(PropertyMolecularWeight_Factory self) -> PropertyMolecularWeight_Factory"""
        _Core.PropertyMolecularWeight_Factory_swiginit(self, _Core.new_PropertyMolecularWeight_Factory())
    __swig_destroy__ = _Core.delete_PropertyMolecularWeight_Factory

# Register PropertyMolecularWeight_Factory in _Core:
_Core.PropertyMolecularWeight_Factory_swigregister(PropertyMolecularWeight_Factory)
class PropertyMassDensity_Factory(PropertyFactory):
    r"""Proxy of C++ Core::PropertyMassDensity_Factory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(PropertyMassDensity_Factory self) -> PropertyMassDensity_Factory"""
        _Core.PropertyMassDensity_Factory_swiginit(self, _Core.new_PropertyMassDensity_Factory())
    __swig_destroy__ = _Core.delete_PropertyMassDensity_Factory

# Register PropertyMassDensity_Factory in _Core:
_Core.PropertyMassDensity_Factory_swigregister(PropertyMassDensity_Factory)
class PropertyIonConcentration_Factory(PropertyFactory):
    r"""Proxy of C++ Core::PropertyIonConcentration_Factory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(PropertyIonConcentration_Factory self) -> PropertyIonConcentration_Factory"""
        _Core.PropertyIonConcentration_Factory_swiginit(self, _Core.new_PropertyIonConcentration_Factory())
    __swig_destroy__ = _Core.delete_PropertyIonConcentration_Factory

# Register PropertyIonConcentration_Factory in _Core:
_Core.PropertyIonConcentration_Factory_swigregister(PropertyIonConcentration_Factory)
class PropertyPHMeasure_Factory(PropertyFactory):
    r"""Proxy of C++ Core::PropertyPHMeasure_Factory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(PropertyPHMeasure_Factory self) -> PropertyPHMeasure_Factory"""
        _Core.PropertyPHMeasure_Factory_swiginit(self, _Core.new_PropertyPHMeasure_Factory())
    __swig_destroy__ = _Core.delete_PropertyPHMeasure_Factory

# Register PropertyPHMeasure_Factory in _Core:
_Core.PropertyPHMeasure_Factory_swigregister(PropertyPHMeasure_Factory)
class PropertyHeatingValue_Factory(PropertyFactory):
    r"""Proxy of C++ Core::PropertyHeatingValue_Factory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(PropertyHeatingValue_Factory self) -> PropertyHeatingValue_Factory"""
        _Core.PropertyHeatingValue_Factory_swiginit(self, _Core.new_PropertyHeatingValue_Factory())
    __swig_destroy__ = _Core.delete_PropertyHeatingValue_Factory

# Register PropertyHeatingValue_Factory in _Core:
_Core.PropertyHeatingValue_Factory_swigregister(PropertyHeatingValue_Factory)
class PropertyThermalTransmittance_Factory(PropertyFactory):
    r"""Proxy of C++ Core::PropertyThermalTransmittance_Factory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(PropertyThermalTransmittance_Factory self) -> PropertyThermalTransmittance_Factory"""
        _Core.PropertyThermalTransmittance_Factory_swiginit(self, _Core.new_PropertyThermalTransmittance_Factory())
    __swig_destroy__ = _Core.delete_PropertyThermalTransmittance_Factory

# Register PropertyThermalTransmittance_Factory in _Core:
_Core.PropertyThermalTransmittance_Factory_swigregister(PropertyThermalTransmittance_Factory)
class PropertyThermalTransmittanceMeasure_Factory(PropertyFactory):
    r"""Proxy of C++ Core::PropertyThermalTransmittanceMeasure_Factory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(PropertyThermalTransmittanceMeasure_Factory self) -> PropertyThermalTransmittanceMeasure_Factory"""
        _Core.PropertyThermalTransmittanceMeasure_Factory_swiginit(self, _Core.new_PropertyThermalTransmittanceMeasure_Factory())
    __swig_destroy__ = _Core.delete_PropertyThermalTransmittanceMeasure_Factory

# Register PropertyThermalTransmittanceMeasure_Factory in _Core:
_Core.PropertyThermalTransmittanceMeasure_Factory_swigregister(PropertyThermalTransmittanceMeasure_Factory)
class PropertyVolumetricFlowRateMeasure_Factory(PropertyFactory):
    r"""Proxy of C++ Core::PropertyVolumetricFlowRateMeasure_Factory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(PropertyVolumetricFlowRateMeasure_Factory self) -> PropertyVolumetricFlowRateMeasure_Factory"""
        _Core.PropertyVolumetricFlowRateMeasure_Factory_swiginit(self, _Core.new_PropertyVolumetricFlowRateMeasure_Factory())
    __swig_destroy__ = _Core.delete_PropertyVolumetricFlowRateMeasure_Factory

# Register PropertyVolumetricFlowRateMeasure_Factory in _Core:
_Core.PropertyVolumetricFlowRateMeasure_Factory_swigregister(PropertyVolumetricFlowRateMeasure_Factory)
class PropertyPositiveLengthMeasure_Factory(PropertyFactory):
    r"""Proxy of C++ Core::PropertyPositiveLengthMeasure_Factory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(PropertyPositiveLengthMeasure_Factory self) -> PropertyPositiveLengthMeasure_Factory"""
        _Core.PropertyPositiveLengthMeasure_Factory_swiginit(self, _Core.new_PropertyPositiveLengthMeasure_Factory())
    __swig_destroy__ = _Core.delete_PropertyPositiveLengthMeasure_Factory

# Register PropertyPositiveLengthMeasure_Factory in _Core:
_Core.PropertyPositiveLengthMeasure_Factory_swigregister(PropertyPositiveLengthMeasure_Factory)
class PropertyRelaxation(Property):
    r"""Proxy of C++ Core::PropertyRelaxation class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getClassTypeId = _swig_new_static_method(_Core.PropertyRelaxation_getClassTypeId)
    setIfcNameAndID = _swig_new_static_method(_Core.PropertyRelaxation_setIfcNameAndID)
    init = _swig_new_static_method(_Core.PropertyRelaxation_init)
    create = _swig_new_static_method(_Core.PropertyRelaxation_create)
    setValue = _swig_new_instance_method(_Core.PropertyRelaxation_setValue)
    getValue = _swig_new_instance_method(_Core.PropertyRelaxation_getValue)

    def __init__(self):
        r"""__init__(PropertyRelaxation self) -> PropertyRelaxation"""
        _Core.PropertyRelaxation_swiginit(self, _Core.new_PropertyRelaxation())
    __swig_destroy__ = _Core.delete_PropertyRelaxation

# Register PropertyRelaxation in _Core:
_Core.PropertyRelaxation_swigregister(PropertyRelaxation)
PropertyRelaxation_getClassTypeId = _Core.PropertyRelaxation_getClassTypeId
PropertyRelaxation_setIfcNameAndID = _Core.PropertyRelaxation_setIfcNameAndID
PropertyRelaxation_init = _Core.PropertyRelaxation_init
PropertyRelaxation_create = _Core.PropertyRelaxation_create

class PropertyRelaxationSet(Property):
    r"""Proxy of C++ Core::PropertyRelaxationSet class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getClassTypeId = _swig_new_static_method(_Core.PropertyRelaxationSet_getClassTypeId)
    setIfcNameAndID = _swig_new_static_method(_Core.PropertyRelaxationSet_setIfcNameAndID)
    init = _swig_new_static_method(_Core.PropertyRelaxationSet_init)
    create = _swig_new_static_method(_Core.PropertyRelaxationSet_create)
    setValue = _swig_new_instance_method(_Core.PropertyRelaxationSet_setValue)
    insert = _swig_new_instance_method(_Core.PropertyRelaxationSet_insert)
    getValue = _swig_new_instance_method(_Core.PropertyRelaxationSet_getValue)

    def __init__(self):
        r"""__init__(PropertyRelaxationSet self) -> PropertyRelaxationSet"""
        _Core.PropertyRelaxationSet_swiginit(self, _Core.new_PropertyRelaxationSet())
    __swig_destroy__ = _Core.delete_PropertyRelaxationSet

# Register PropertyRelaxationSet in _Core:
_Core.PropertyRelaxationSet_swigregister(PropertyRelaxationSet)
PropertyRelaxationSet_getClassTypeId = _Core.PropertyRelaxationSet_getClassTypeId
PropertyRelaxationSet_setIfcNameAndID = _Core.PropertyRelaxationSet_setIfcNameAndID
PropertyRelaxationSet_init = _Core.PropertyRelaxationSet_init
PropertyRelaxationSet_create = _Core.PropertyRelaxationSet_create

class PropertyRelaxation_Factory(PropertyFactory):
    r"""Proxy of C++ Core::PropertyRelaxation_Factory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(PropertyRelaxation_Factory self) -> PropertyRelaxation_Factory"""
        _Core.PropertyRelaxation_Factory_swiginit(self, _Core.new_PropertyRelaxation_Factory())
    __swig_destroy__ = _Core.delete_PropertyRelaxation_Factory

# Register PropertyRelaxation_Factory in _Core:
_Core.PropertyRelaxation_Factory_swigregister(PropertyRelaxation_Factory)
class PropertyRelaxationSet_Factory(PropertyFactory):
    r"""Proxy of C++ Core::PropertyRelaxationSet_Factory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(PropertyRelaxationSet_Factory self) -> PropertyRelaxationSet_Factory"""
        _Core.PropertyRelaxationSet_Factory_swiginit(self, _Core.new_PropertyRelaxationSet_Factory())
    __swig_destroy__ = _Core.delete_PropertyRelaxationSet_Factory

# Register PropertyRelaxationSet_Factory in _Core:
_Core.PropertyRelaxationSet_Factory_swigregister(PropertyRelaxationSet_Factory)
class PropertyString(Property):
    r"""Proxy of C++ Core::PropertyString class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getClassTypeId = _swig_new_static_method(_Core.PropertyString_getClassTypeId)
    setIfcNameAndID = _swig_new_static_method(_Core.PropertyString_setIfcNameAndID)
    init = _swig_new_static_method(_Core.PropertyString_init)
    create = _swig_new_static_method(_Core.PropertyString_create)
    setValue = _swig_new_instance_method(_Core.PropertyString_setValue)
    getValue = _swig_new_instance_method(_Core.PropertyString_getValue)
    isEmpty = _swig_new_instance_method(_Core.PropertyString_isEmpty)
    contains = _swig_new_instance_method(_Core.PropertyString_contains)

    def __init__(self):
        r"""__init__(PropertyString self) -> PropertyString"""
        _Core.PropertyString_swiginit(self, _Core.new_PropertyString())
    __swig_destroy__ = _Core.delete_PropertyString

# Register PropertyString in _Core:
_Core.PropertyString_swigregister(PropertyString)
PropertyString_getClassTypeId = _Core.PropertyString_getClassTypeId
PropertyString_setIfcNameAndID = _Core.PropertyString_setIfcNameAndID
PropertyString_init = _Core.PropertyString_init
PropertyString_create = _Core.PropertyString_create

class PropertyStringOpt(PropertyString):
    r"""Proxy of C++ Core::PropertyStringOpt class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getClassTypeId = _swig_new_static_method(_Core.PropertyStringOpt_getClassTypeId)
    setIfcNameAndID = _swig_new_static_method(_Core.PropertyStringOpt_setIfcNameAndID)
    init = _swig_new_static_method(_Core.PropertyStringOpt_init)
    create = _swig_new_static_method(_Core.PropertyStringOpt_create)

    def __init__(self):
        r"""__init__(PropertyStringOpt self) -> PropertyStringOpt"""
        _Core.PropertyStringOpt_swiginit(self, _Core.new_PropertyStringOpt())
    __swig_destroy__ = _Core.delete_PropertyStringOpt

# Register PropertyStringOpt in _Core:
_Core.PropertyStringOpt_swigregister(PropertyStringOpt)
PropertyStringOpt_getClassTypeId = _Core.PropertyStringOpt_getClassTypeId
PropertyStringOpt_setIfcNameAndID = _Core.PropertyStringOpt_setIfcNameAndID
PropertyStringOpt_init = _Core.PropertyStringOpt_init
PropertyStringOpt_create = _Core.PropertyStringOpt_create

class PropertyString_Factory(PropertyFactory):
    r"""Proxy of C++ Core::PropertyString_Factory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(PropertyString_Factory self) -> PropertyString_Factory"""
        _Core.PropertyString_Factory_swiginit(self, _Core.new_PropertyString_Factory())
    __swig_destroy__ = _Core.delete_PropertyString_Factory

# Register PropertyString_Factory in _Core:
_Core.PropertyString_Factory_swigregister(PropertyString_Factory)
class PropertyString2DoubleMap(Property):
    r"""Proxy of C++ Core::PropertyString2DoubleMap class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getClassTypeId = _swig_new_static_method(_Core.PropertyString2DoubleMap_getClassTypeId)
    setIfcNameAndID = _swig_new_static_method(_Core.PropertyString2DoubleMap_setIfcNameAndID)
    init = _swig_new_static_method(_Core.PropertyString2DoubleMap_init)
    create = _swig_new_static_method(_Core.PropertyString2DoubleMap_create)
    setValue = _swig_new_instance_method(_Core.PropertyString2DoubleMap_setValue)
    getValue = _swig_new_instance_method(_Core.PropertyString2DoubleMap_getValue)
    value = _swig_new_instance_method(_Core.PropertyString2DoubleMap_value)
    contains = _swig_new_instance_method(_Core.PropertyString2DoubleMap_contains)
    clear = _swig_new_instance_method(_Core.PropertyString2DoubleMap_clear)
    erase = _swig_new_instance_method(_Core.PropertyString2DoubleMap_erase)
    insert = _swig_new_instance_method(_Core.PropertyString2DoubleMap_insert)
    empty = _swig_new_instance_method(_Core.PropertyString2DoubleMap_empty)
    size = _swig_new_instance_method(_Core.PropertyString2DoubleMap_size)

    def __init__(self):
        r"""__init__(PropertyString2DoubleMap self) -> PropertyString2DoubleMap"""
        _Core.PropertyString2DoubleMap_swiginit(self, _Core.new_PropertyString2DoubleMap())
    __swig_destroy__ = _Core.delete_PropertyString2DoubleMap

# Register PropertyString2DoubleMap in _Core:
_Core.PropertyString2DoubleMap_swigregister(PropertyString2DoubleMap)
PropertyString2DoubleMap_getClassTypeId = _Core.PropertyString2DoubleMap_getClassTypeId
PropertyString2DoubleMap_setIfcNameAndID = _Core.PropertyString2DoubleMap_setIfcNameAndID
PropertyString2DoubleMap_init = _Core.PropertyString2DoubleMap_init
PropertyString2DoubleMap_create = _Core.PropertyString2DoubleMap_create

class PropertyString2DoubleMapOpt(PropertyString2DoubleMap):
    r"""Proxy of C++ Core::PropertyString2DoubleMapOpt class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getClassTypeId = _swig_new_static_method(_Core.PropertyString2DoubleMapOpt_getClassTypeId)
    setIfcNameAndID = _swig_new_static_method(_Core.PropertyString2DoubleMapOpt_setIfcNameAndID)
    init = _swig_new_static_method(_Core.PropertyString2DoubleMapOpt_init)
    create = _swig_new_static_method(_Core.PropertyString2DoubleMapOpt_create)

    def __init__(self):
        r"""__init__(PropertyString2DoubleMapOpt self) -> PropertyString2DoubleMapOpt"""
        _Core.PropertyString2DoubleMapOpt_swiginit(self, _Core.new_PropertyString2DoubleMapOpt())
    __swig_destroy__ = _Core.delete_PropertyString2DoubleMapOpt

# Register PropertyString2DoubleMapOpt in _Core:
_Core.PropertyString2DoubleMapOpt_swigregister(PropertyString2DoubleMapOpt)
PropertyString2DoubleMapOpt_getClassTypeId = _Core.PropertyString2DoubleMapOpt_getClassTypeId
PropertyString2DoubleMapOpt_setIfcNameAndID = _Core.PropertyString2DoubleMapOpt_setIfcNameAndID
PropertyString2DoubleMapOpt_init = _Core.PropertyString2DoubleMapOpt_init
PropertyString2DoubleMapOpt_create = _Core.PropertyString2DoubleMapOpt_create

class PropertyString2DoubleMap_Factory(PropertyFactory):
    r"""Proxy of C++ Core::PropertyString2DoubleMap_Factory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(PropertyString2DoubleMap_Factory self) -> PropertyString2DoubleMap_Factory"""
        _Core.PropertyString2DoubleMap_Factory_swiginit(self, _Core.new_PropertyString2DoubleMap_Factory())
    __swig_destroy__ = _Core.delete_PropertyString2DoubleMap_Factory

# Register PropertyString2DoubleMap_Factory in _Core:
_Core.PropertyString2DoubleMap_Factory_swigregister(PropertyString2DoubleMap_Factory)
class PropertyText(PropertyString):
    r"""Proxy of C++ Core::PropertyText class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getClassTypeId = _swig_new_static_method(_Core.PropertyText_getClassTypeId)
    setIfcNameAndID = _swig_new_static_method(_Core.PropertyText_setIfcNameAndID)
    init = _swig_new_static_method(_Core.PropertyText_init)
    create = _swig_new_static_method(_Core.PropertyText_create)

    def __init__(self):
        r"""__init__(PropertyText self) -> PropertyText"""
        _Core.PropertyText_swiginit(self, _Core.new_PropertyText())
    __swig_destroy__ = _Core.delete_PropertyText

# Register PropertyText in _Core:
_Core.PropertyText_swigregister(PropertyText)
PropertyText_getClassTypeId = _Core.PropertyText_getClassTypeId
PropertyText_setIfcNameAndID = _Core.PropertyText_setIfcNameAndID
PropertyText_init = _Core.PropertyText_init
PropertyText_create = _Core.PropertyText_create

class PropertyTextOpt(PropertyText):
    r"""Proxy of C++ Core::PropertyTextOpt class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getClassTypeId = _swig_new_static_method(_Core.PropertyTextOpt_getClassTypeId)
    setIfcNameAndID = _swig_new_static_method(_Core.PropertyTextOpt_setIfcNameAndID)
    init = _swig_new_static_method(_Core.PropertyTextOpt_init)
    create = _swig_new_static_method(_Core.PropertyTextOpt_create)

    def __init__(self):
        r"""__init__(PropertyTextOpt self) -> PropertyTextOpt"""
        _Core.PropertyTextOpt_swiginit(self, _Core.new_PropertyTextOpt())
    __swig_destroy__ = _Core.delete_PropertyTextOpt

# Register PropertyTextOpt in _Core:
_Core.PropertyTextOpt_swigregister(PropertyTextOpt)
PropertyTextOpt_getClassTypeId = _Core.PropertyTextOpt_getClassTypeId
PropertyTextOpt_setIfcNameAndID = _Core.PropertyTextOpt_setIfcNameAndID
PropertyTextOpt_init = _Core.PropertyTextOpt_init
PropertyTextOpt_create = _Core.PropertyTextOpt_create

class PropertyText_Factory(PropertyFactory):
    r"""Proxy of C++ Core::PropertyText_Factory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(PropertyText_Factory self) -> PropertyText_Factory"""
        _Core.PropertyText_Factory_swiginit(self, _Core.new_PropertyText_Factory())
    __swig_destroy__ = _Core.delete_PropertyText_Factory

# Register PropertyText_Factory in _Core:
_Core.PropertyText_Factory_swigregister(PropertyText_Factory)
class PropertyTextList(Property):
    r"""Proxy of C++ Core::PropertyTextList class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getClassTypeId = _swig_new_static_method(_Core.PropertyTextList_getClassTypeId)
    setIfcNameAndID = _swig_new_static_method(_Core.PropertyTextList_setIfcNameAndID)
    init = _swig_new_static_method(_Core.PropertyTextList_init)
    create = _swig_new_static_method(_Core.PropertyTextList_create)
    setValue = _swig_new_instance_method(_Core.PropertyTextList_setValue)
    setValueAt = _swig_new_instance_method(_Core.PropertyTextList_setValueAt)
    addText = _swig_new_instance_method(_Core.PropertyTextList_addText)
    removeText = _swig_new_instance_method(_Core.PropertyTextList_removeText)
    contains = _swig_new_instance_method(_Core.PropertyTextList_contains)
    setEmpty = _swig_new_instance_method(_Core.PropertyTextList_setEmpty)
    isEmpty = _swig_new_instance_method(_Core.PropertyTextList_isEmpty)
    getSize = _swig_new_instance_method(_Core.PropertyTextList_getSize)
    getValue = _swig_new_instance_method(_Core.PropertyTextList_getValue)
    getValueAt = _swig_new_instance_method(_Core.PropertyTextList_getValueAt)
    join = _swig_new_instance_method(_Core.PropertyTextList_join)

    def __init__(self):
        r"""__init__(PropertyTextList self) -> PropertyTextList"""
        _Core.PropertyTextList_swiginit(self, _Core.new_PropertyTextList())
    __swig_destroy__ = _Core.delete_PropertyTextList

# Register PropertyTextList in _Core:
_Core.PropertyTextList_swigregister(PropertyTextList)
PropertyTextList_getClassTypeId = _Core.PropertyTextList_getClassTypeId
PropertyTextList_setIfcNameAndID = _Core.PropertyTextList_setIfcNameAndID
PropertyTextList_init = _Core.PropertyTextList_init
PropertyTextList_create = _Core.PropertyTextList_create

class PropertyTextListOpt(PropertyTextList):
    r"""Proxy of C++ Core::PropertyTextListOpt class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getClassTypeId = _swig_new_static_method(_Core.PropertyTextListOpt_getClassTypeId)
    setIfcNameAndID = _swig_new_static_method(_Core.PropertyTextListOpt_setIfcNameAndID)
    init = _swig_new_static_method(_Core.PropertyTextListOpt_init)
    create = _swig_new_static_method(_Core.PropertyTextListOpt_create)

    def __init__(self):
        r"""__init__(PropertyTextListOpt self) -> PropertyTextListOpt"""
        _Core.PropertyTextListOpt_swiginit(self, _Core.new_PropertyTextListOpt())
    __swig_destroy__ = _Core.delete_PropertyTextListOpt

# Register PropertyTextListOpt in _Core:
_Core.PropertyTextListOpt_swigregister(PropertyTextListOpt)
PropertyTextListOpt_getClassTypeId = _Core.PropertyTextListOpt_getClassTypeId
PropertyTextListOpt_setIfcNameAndID = _Core.PropertyTextListOpt_setIfcNameAndID
PropertyTextListOpt_init = _Core.PropertyTextListOpt_init
PropertyTextListOpt_create = _Core.PropertyTextListOpt_create

class PropertyTextList_Factory(PropertyFactory):
    r"""Proxy of C++ Core::PropertyTextList_Factory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(PropertyTextList_Factory self) -> PropertyTextList_Factory"""
        _Core.PropertyTextList_Factory_swiginit(self, _Core.new_PropertyTextList_Factory())
    __swig_destroy__ = _Core.delete_PropertyTextList_Factory

# Register PropertyTextList_Factory in _Core:
_Core.PropertyTextList_Factory_swigregister(PropertyTextList_Factory)
class PropertyTextMap(Property):
    r"""Proxy of C++ Core::PropertyTextMap class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getClassTypeId = _swig_new_static_method(_Core.PropertyTextMap_getClassTypeId)
    setIfcNameAndID = _swig_new_static_method(_Core.PropertyTextMap_setIfcNameAndID)
    init = _swig_new_static_method(_Core.PropertyTextMap_init)
    create = _swig_new_static_method(_Core.PropertyTextMap_create)
    setValue = _swig_new_instance_method(_Core.PropertyTextMap_setValue)
    getValue = _swig_new_instance_method(_Core.PropertyTextMap_getValue)
    value = _swig_new_instance_method(_Core.PropertyTextMap_value)
    contains = _swig_new_instance_method(_Core.PropertyTextMap_contains)
    clear = _swig_new_instance_method(_Core.PropertyTextMap_clear)
    erase = _swig_new_instance_method(_Core.PropertyTextMap_erase)
    insert = _swig_new_instance_method(_Core.PropertyTextMap_insert)
    empty = _swig_new_instance_method(_Core.PropertyTextMap_empty)
    size = _swig_new_instance_method(_Core.PropertyTextMap_size)

    def __init__(self):
        r"""__init__(PropertyTextMap self) -> PropertyTextMap"""
        _Core.PropertyTextMap_swiginit(self, _Core.new_PropertyTextMap())
    __swig_destroy__ = _Core.delete_PropertyTextMap

# Register PropertyTextMap in _Core:
_Core.PropertyTextMap_swigregister(PropertyTextMap)
PropertyTextMap_getClassTypeId = _Core.PropertyTextMap_getClassTypeId
PropertyTextMap_setIfcNameAndID = _Core.PropertyTextMap_setIfcNameAndID
PropertyTextMap_init = _Core.PropertyTextMap_init
PropertyTextMap_create = _Core.PropertyTextMap_create

class PropertyTextMapOpt(PropertyTextMap):
    r"""Proxy of C++ Core::PropertyTextMapOpt class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getClassTypeId = _swig_new_static_method(_Core.PropertyTextMapOpt_getClassTypeId)
    setIfcNameAndID = _swig_new_static_method(_Core.PropertyTextMapOpt_setIfcNameAndID)
    init = _swig_new_static_method(_Core.PropertyTextMapOpt_init)
    create = _swig_new_static_method(_Core.PropertyTextMapOpt_create)

    def __init__(self):
        r"""__init__(PropertyTextMapOpt self) -> PropertyTextMapOpt"""
        _Core.PropertyTextMapOpt_swiginit(self, _Core.new_PropertyTextMapOpt())
    __swig_destroy__ = _Core.delete_PropertyTextMapOpt

# Register PropertyTextMapOpt in _Core:
_Core.PropertyTextMapOpt_swigregister(PropertyTextMapOpt)
PropertyTextMapOpt_getClassTypeId = _Core.PropertyTextMapOpt_getClassTypeId
PropertyTextMapOpt_setIfcNameAndID = _Core.PropertyTextMapOpt_setIfcNameAndID
PropertyTextMapOpt_init = _Core.PropertyTextMapOpt_init
PropertyTextMapOpt_create = _Core.PropertyTextMapOpt_create

class PropertyTextMap_Factory(PropertyFactory):
    r"""Proxy of C++ Core::PropertyTextMap_Factory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(PropertyTextMap_Factory self) -> PropertyTextMap_Factory"""
        _Core.PropertyTextMap_Factory_swiginit(self, _Core.new_PropertyTextMap_Factory())
    __swig_destroy__ = _Core.delete_PropertyTextMap_Factory

# Register PropertyTextMap_Factory in _Core:
_Core.PropertyTextMap_Factory_swigregister(PropertyTextMap_Factory)
class PropertyTexture2(Property):
    r"""Proxy of C++ Core::PropertyTexture2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getClassTypeId = _swig_new_static_method(_Core.PropertyTexture2_getClassTypeId)
    setIfcNameAndID = _swig_new_static_method(_Core.PropertyTexture2_setIfcNameAndID)
    init = _swig_new_static_method(_Core.PropertyTexture2_init)
    create = _swig_new_static_method(_Core.PropertyTexture2_create)
    setValue = _swig_new_instance_method(_Core.PropertyTexture2_setValue)
    getValue = _swig_new_instance_method(_Core.PropertyTexture2_getValue)

    def __init__(self):
        r"""__init__(PropertyTexture2 self) -> PropertyTexture2"""
        _Core.PropertyTexture2_swiginit(self, _Core.new_PropertyTexture2())
    __swig_destroy__ = _Core.delete_PropertyTexture2

# Register PropertyTexture2 in _Core:
_Core.PropertyTexture2_swigregister(PropertyTexture2)
PropertyTexture2_getClassTypeId = _Core.PropertyTexture2_getClassTypeId
PropertyTexture2_setIfcNameAndID = _Core.PropertyTexture2_setIfcNameAndID
PropertyTexture2_init = _Core.PropertyTexture2_init
PropertyTexture2_create = _Core.PropertyTexture2_create

class PropertyTexture2Transform(Property):
    r"""Proxy of C++ Core::PropertyTexture2Transform class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getClassTypeId = _swig_new_static_method(_Core.PropertyTexture2Transform_getClassTypeId)
    setIfcNameAndID = _swig_new_static_method(_Core.PropertyTexture2Transform_setIfcNameAndID)
    init = _swig_new_static_method(_Core.PropertyTexture2Transform_init)
    create = _swig_new_static_method(_Core.PropertyTexture2Transform_create)
    setValue = _swig_new_instance_method(_Core.PropertyTexture2Transform_setValue)
    getValue = _swig_new_instance_method(_Core.PropertyTexture2Transform_getValue)
    setCalculateTextureScaleFactor = _swig_new_instance_method(_Core.PropertyTexture2Transform_setCalculateTextureScaleFactor)
    isCalculateTextureScaleFactor = _swig_new_instance_method(_Core.PropertyTexture2Transform_isCalculateTextureScaleFactor)

    def __init__(self):
        r"""__init__(PropertyTexture2Transform self) -> PropertyTexture2Transform"""
        _Core.PropertyTexture2Transform_swiginit(self, _Core.new_PropertyTexture2Transform())
    __swig_destroy__ = _Core.delete_PropertyTexture2Transform

# Register PropertyTexture2Transform in _Core:
_Core.PropertyTexture2Transform_swigregister(PropertyTexture2Transform)
PropertyTexture2Transform_getClassTypeId = _Core.PropertyTexture2Transform_getClassTypeId
PropertyTexture2Transform_setIfcNameAndID = _Core.PropertyTexture2Transform_setIfcNameAndID
PropertyTexture2Transform_init = _Core.PropertyTexture2Transform_init
PropertyTexture2Transform_create = _Core.PropertyTexture2Transform_create

class PropertyTextureCoordinateMapping(Property):
    r"""Proxy of C++ Core::PropertyTextureCoordinateMapping class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getClassTypeId = _swig_new_static_method(_Core.PropertyTextureCoordinateMapping_getClassTypeId)
    setIfcNameAndID = _swig_new_static_method(_Core.PropertyTextureCoordinateMapping_setIfcNameAndID)
    init = _swig_new_static_method(_Core.PropertyTextureCoordinateMapping_init)
    create = _swig_new_static_method(_Core.PropertyTextureCoordinateMapping_create)
    setValue = _swig_new_instance_method(_Core.PropertyTextureCoordinateMapping_setValue)
    getValue = _swig_new_instance_method(_Core.PropertyTextureCoordinateMapping_getValue)

    def __init__(self):
        r"""__init__(PropertyTextureCoordinateMapping self) -> PropertyTextureCoordinateMapping"""
        _Core.PropertyTextureCoordinateMapping_swiginit(self, _Core.new_PropertyTextureCoordinateMapping())
    __swig_destroy__ = _Core.delete_PropertyTextureCoordinateMapping

# Register PropertyTextureCoordinateMapping in _Core:
_Core.PropertyTextureCoordinateMapping_swigregister(PropertyTextureCoordinateMapping)
PropertyTextureCoordinateMapping_getClassTypeId = _Core.PropertyTextureCoordinateMapping_getClassTypeId
PropertyTextureCoordinateMapping_setIfcNameAndID = _Core.PropertyTextureCoordinateMapping_setIfcNameAndID
PropertyTextureCoordinateMapping_init = _Core.PropertyTextureCoordinateMapping_init
PropertyTextureCoordinateMapping_create = _Core.PropertyTextureCoordinateMapping_create

class PropertyTextureCoordinateFunction(Property):
    r"""Proxy of C++ Core::PropertyTextureCoordinateFunction class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getClassTypeId = _swig_new_static_method(_Core.PropertyTextureCoordinateFunction_getClassTypeId)
    setIfcNameAndID = _swig_new_static_method(_Core.PropertyTextureCoordinateFunction_setIfcNameAndID)
    init = _swig_new_static_method(_Core.PropertyTextureCoordinateFunction_init)
    create = _swig_new_static_method(_Core.PropertyTextureCoordinateFunction_create)
    setValue = _swig_new_instance_method(_Core.PropertyTextureCoordinateFunction_setValue)
    getValue = _swig_new_instance_method(_Core.PropertyTextureCoordinateFunction_getValue)

    def __init__(self):
        r"""__init__(PropertyTextureCoordinateFunction self) -> PropertyTextureCoordinateFunction"""
        _Core.PropertyTextureCoordinateFunction_swiginit(self, _Core.new_PropertyTextureCoordinateFunction())
    __swig_destroy__ = _Core.delete_PropertyTextureCoordinateFunction

# Register PropertyTextureCoordinateFunction in _Core:
_Core.PropertyTextureCoordinateFunction_swigregister(PropertyTextureCoordinateFunction)
PropertyTextureCoordinateFunction_getClassTypeId = _Core.PropertyTextureCoordinateFunction_getClassTypeId
PropertyTextureCoordinateFunction_setIfcNameAndID = _Core.PropertyTextureCoordinateFunction_setIfcNameAndID
PropertyTextureCoordinateFunction_init = _Core.PropertyTextureCoordinateFunction_init
PropertyTextureCoordinateFunction_create = _Core.PropertyTextureCoordinateFunction_create

class PropertyTexture2List(Property):
    r"""Proxy of C++ Core::PropertyTexture2List class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getClassTypeId = _swig_new_static_method(_Core.PropertyTexture2List_getClassTypeId)
    setIfcNameAndID = _swig_new_static_method(_Core.PropertyTexture2List_setIfcNameAndID)
    init = _swig_new_static_method(_Core.PropertyTexture2List_init)
    create = _swig_new_static_method(_Core.PropertyTexture2List_create)
    setValue = _swig_new_instance_method(_Core.PropertyTexture2List_setValue)
    addTexture = _swig_new_instance_method(_Core.PropertyTexture2List_addTexture)
    hasTexture = _swig_new_instance_method(_Core.PropertyTexture2List_hasTexture)
    setEmpty = _swig_new_instance_method(_Core.PropertyTexture2List_setEmpty)
    getTextureById = _swig_new_instance_method(_Core.PropertyTexture2List_getTextureById)
    getValue = _swig_new_instance_method(_Core.PropertyTexture2List_getValue)

    def __init__(self):
        r"""__init__(PropertyTexture2List self) -> PropertyTexture2List"""
        _Core.PropertyTexture2List_swiginit(self, _Core.new_PropertyTexture2List())
    __swig_destroy__ = _Core.delete_PropertyTexture2List

# Register PropertyTexture2List in _Core:
_Core.PropertyTexture2List_swigregister(PropertyTexture2List)
PropertyTexture2List_getClassTypeId = _Core.PropertyTexture2List_getClassTypeId
PropertyTexture2List_setIfcNameAndID = _Core.PropertyTexture2List_setIfcNameAndID
PropertyTexture2List_init = _Core.PropertyTexture2List_init
PropertyTexture2List_create = _Core.PropertyTexture2List_create

class PropertyTexture2_Factory(PropertyFactory):
    r"""Proxy of C++ Core::PropertyTexture2_Factory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(PropertyTexture2_Factory self) -> PropertyTexture2_Factory"""
        _Core.PropertyTexture2_Factory_swiginit(self, _Core.new_PropertyTexture2_Factory())
    __swig_destroy__ = _Core.delete_PropertyTexture2_Factory

# Register PropertyTexture2_Factory in _Core:
_Core.PropertyTexture2_Factory_swigregister(PropertyTexture2_Factory)
class PropertyTexture2Transform_Factory(PropertyFactory):
    r"""Proxy of C++ Core::PropertyTexture2Transform_Factory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(PropertyTexture2Transform_Factory self) -> PropertyTexture2Transform_Factory"""
        _Core.PropertyTexture2Transform_Factory_swiginit(self, _Core.new_PropertyTexture2Transform_Factory())
    __swig_destroy__ = _Core.delete_PropertyTexture2Transform_Factory

# Register PropertyTexture2Transform_Factory in _Core:
_Core.PropertyTexture2Transform_Factory_swigregister(PropertyTexture2Transform_Factory)
class PropertyTextureCoordinateMapping_Factory(PropertyFactory):
    r"""Proxy of C++ Core::PropertyTextureCoordinateMapping_Factory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(PropertyTextureCoordinateMapping_Factory self) -> PropertyTextureCoordinateMapping_Factory"""
        _Core.PropertyTextureCoordinateMapping_Factory_swiginit(self, _Core.new_PropertyTextureCoordinateMapping_Factory())
    __swig_destroy__ = _Core.delete_PropertyTextureCoordinateMapping_Factory

# Register PropertyTextureCoordinateMapping_Factory in _Core:
_Core.PropertyTextureCoordinateMapping_Factory_swigregister(PropertyTextureCoordinateMapping_Factory)
class PropertyTextureCoordinateFunction_Factory(PropertyFactory):
    r"""Proxy of C++ Core::PropertyTextureCoordinateFunction_Factory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(PropertyTextureCoordinateFunction_Factory self) -> PropertyTextureCoordinateFunction_Factory"""
        _Core.PropertyTextureCoordinateFunction_Factory_swiginit(self, _Core.new_PropertyTextureCoordinateFunction_Factory())
    __swig_destroy__ = _Core.delete_PropertyTextureCoordinateFunction_Factory

# Register PropertyTextureCoordinateFunction_Factory in _Core:
_Core.PropertyTextureCoordinateFunction_Factory_swigregister(PropertyTextureCoordinateFunction_Factory)
class PropertyTexture2List_Factory(PropertyFactory):
    r"""Proxy of C++ Core::PropertyTexture2List_Factory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(PropertyTexture2List_Factory self) -> PropertyTexture2List_Factory"""
        _Core.PropertyTexture2List_Factory_swiginit(self, _Core.new_PropertyTexture2List_Factory())
    __swig_destroy__ = _Core.delete_PropertyTexture2List_Factory

# Register PropertyTexture2List_Factory in _Core:
_Core.PropertyTexture2List_Factory_swigregister(PropertyTexture2List_Factory)
class PropertyTransform(Property):
    r"""Proxy of C++ Core::PropertyTransform class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getClassTypeId = _swig_new_static_method(_Core.PropertyTransform_getClassTypeId)
    setIfcNameAndID = _swig_new_static_method(_Core.PropertyTransform_setIfcNameAndID)
    init = _swig_new_static_method(_Core.PropertyTransform_init)
    create = _swig_new_static_method(_Core.PropertyTransform_create)
    setValue = _swig_new_instance_method(_Core.PropertyTransform_setValue)
    setIdentity = _swig_new_instance_method(_Core.PropertyTransform_setIdentity)
    getValue = _swig_new_instance_method(_Core.PropertyTransform_getValue)

    def __init__(self):
        r"""__init__(PropertyTransform self) -> PropertyTransform"""
        _Core.PropertyTransform_swiginit(self, _Core.new_PropertyTransform())
    __swig_destroy__ = _Core.delete_PropertyTransform

# Register PropertyTransform in _Core:
_Core.PropertyTransform_swigregister(PropertyTransform)
PropertyTransform_getClassTypeId = _Core.PropertyTransform_getClassTypeId
PropertyTransform_setIfcNameAndID = _Core.PropertyTransform_setIfcNameAndID
PropertyTransform_init = _Core.PropertyTransform_init
PropertyTransform_create = _Core.PropertyTransform_create

class PropertyGTransform(Property):
    r"""Proxy of C++ Core::PropertyGTransform class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getClassTypeId = _swig_new_static_method(_Core.PropertyGTransform_getClassTypeId)
    setIfcNameAndID = _swig_new_static_method(_Core.PropertyGTransform_setIfcNameAndID)
    init = _swig_new_static_method(_Core.PropertyGTransform_init)
    create = _swig_new_static_method(_Core.PropertyGTransform_create)
    setValue = _swig_new_instance_method(_Core.PropertyGTransform_setValue)
    setIdentity = _swig_new_instance_method(_Core.PropertyGTransform_setIdentity)
    getValue = _swig_new_instance_method(_Core.PropertyGTransform_getValue)

    def __init__(self):
        r"""__init__(PropertyGTransform self) -> PropertyGTransform"""
        _Core.PropertyGTransform_swiginit(self, _Core.new_PropertyGTransform())
    __swig_destroy__ = _Core.delete_PropertyGTransform

# Register PropertyGTransform in _Core:
_Core.PropertyGTransform_swigregister(PropertyGTransform)
PropertyGTransform_getClassTypeId = _Core.PropertyGTransform_getClassTypeId
PropertyGTransform_setIfcNameAndID = _Core.PropertyGTransform_setIfcNameAndID
PropertyGTransform_init = _Core.PropertyGTransform_init
PropertyGTransform_create = _Core.PropertyGTransform_create

class PropertyTransform_Factory(PropertyFactory):
    r"""Proxy of C++ Core::PropertyTransform_Factory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(PropertyTransform_Factory self) -> PropertyTransform_Factory"""
        _Core.PropertyTransform_Factory_swiginit(self, _Core.new_PropertyTransform_Factory())
    __swig_destroy__ = _Core.delete_PropertyTransform_Factory

# Register PropertyTransform_Factory in _Core:
_Core.PropertyTransform_Factory_swigregister(PropertyTransform_Factory)
class PropertyGTransform_Factory(PropertyFactory):
    r"""Proxy of C++ Core::PropertyGTransform_Factory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(PropertyGTransform_Factory self) -> PropertyGTransform_Factory"""
        _Core.PropertyGTransform_Factory_swiginit(self, _Core.new_PropertyGTransform_Factory())
    __swig_destroy__ = _Core.delete_PropertyGTransform_Factory

# Register PropertyGTransform_Factory in _Core:
_Core.PropertyGTransform_Factory_swigregister(PropertyGTransform_Factory)
class PropertyUser(Property):
    r"""Proxy of C++ Core::PropertyUser class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getClassTypeId = _swig_new_static_method(_Core.PropertyUser_getClassTypeId)
    setIfcNameAndID = _swig_new_static_method(_Core.PropertyUser_setIfcNameAndID)
    init = _swig_new_static_method(_Core.PropertyUser_init)
    create = _swig_new_static_method(_Core.PropertyUser_create)
    setValue = _swig_new_instance_method(_Core.PropertyUser_setValue)
    getValue = _swig_new_instance_method(_Core.PropertyUser_getValue)
    setTextValue = _swig_new_instance_method(_Core.PropertyUser_setTextValue)
    getTextValue = _swig_new_instance_method(_Core.PropertyUser_getTextValue)

    def __init__(self):
        r"""__init__(PropertyUser self) -> PropertyUser"""
        _Core.PropertyUser_swiginit(self, _Core.new_PropertyUser())
    __swig_destroy__ = _Core.delete_PropertyUser

# Register PropertyUser in _Core:
_Core.PropertyUser_swigregister(PropertyUser)
PropertyUser_getClassTypeId = _Core.PropertyUser_getClassTypeId
PropertyUser_setIfcNameAndID = _Core.PropertyUser_setIfcNameAndID
PropertyUser_init = _Core.PropertyUser_init
PropertyUser_create = _Core.PropertyUser_create

class PropertyUser_Factory(PropertyFactory):
    r"""Proxy of C++ Core::PropertyUser_Factory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(PropertyUser_Factory self) -> PropertyUser_Factory"""
        _Core.PropertyUser_Factory_swiginit(self, _Core.new_PropertyUser_Factory())
    __swig_destroy__ = _Core.delete_PropertyUser_Factory

# Register PropertyUser_Factory in _Core:
_Core.PropertyUser_Factory_swigregister(PropertyUser_Factory)
class PropertyIfc(PropertyUser):
    r"""Proxy of C++ Core::PropertyIfc class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getClassTypeId = _swig_new_static_method(_Core.PropertyIfc_getClassTypeId)
    setIfcNameAndID = _swig_new_static_method(_Core.PropertyIfc_setIfcNameAndID)
    init = _swig_new_static_method(_Core.PropertyIfc_init)
    create = _swig_new_static_method(_Core.PropertyIfc_create)

    def __init__(self):
        r"""__init__(PropertyIfc self) -> PropertyIfc"""
        _Core.PropertyIfc_swiginit(self, _Core.new_PropertyIfc())
    __swig_destroy__ = _Core.delete_PropertyIfc

# Register PropertyIfc in _Core:
_Core.PropertyIfc_swigregister(PropertyIfc)
PropertyIfc_getClassTypeId = _Core.PropertyIfc_getClassTypeId
PropertyIfc_setIfcNameAndID = _Core.PropertyIfc_setIfcNameAndID
PropertyIfc_init = _Core.PropertyIfc_init
PropertyIfc_create = _Core.PropertyIfc_create

class PropertyIfc_Factory(PropertyFactory):
    r"""Proxy of C++ Core::PropertyIfc_Factory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(PropertyIfc_Factory self) -> PropertyIfc_Factory"""
        _Core.PropertyIfc_Factory_swiginit(self, _Core.new_PropertyIfc_Factory())
    __swig_destroy__ = _Core.delete_PropertyIfc_Factory

# Register PropertyIfc_Factory in _Core:
_Core.PropertyIfc_Factory_swigregister(PropertyIfc_Factory)
class PropertyScriptParam(PropertyUser):
    r"""Proxy of C++ Core::PropertyScriptParam class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getClassTypeId = _swig_new_static_method(_Core.PropertyScriptParam_getClassTypeId)
    setIfcNameAndID = _swig_new_static_method(_Core.PropertyScriptParam_setIfcNameAndID)
    init = _swig_new_static_method(_Core.PropertyScriptParam_init)
    create = _swig_new_static_method(_Core.PropertyScriptParam_create)
    onValueChanged = _swig_new_instance_method(_Core.PropertyScriptParam_onValueChanged)

    def __init__(self):
        r"""__init__(PropertyScriptParam self) -> PropertyScriptParam"""
        _Core.PropertyScriptParam_swiginit(self, _Core.new_PropertyScriptParam())
    __swig_destroy__ = _Core.delete_PropertyScriptParam

# Register PropertyScriptParam in _Core:
_Core.PropertyScriptParam_swigregister(PropertyScriptParam)
PropertyScriptParam_getClassTypeId = _Core.PropertyScriptParam_getClassTypeId
PropertyScriptParam_setIfcNameAndID = _Core.PropertyScriptParam_setIfcNameAndID
PropertyScriptParam_init = _Core.PropertyScriptParam_init
PropertyScriptParam_create = _Core.PropertyScriptParam_create

class PropertyScriptParam_Factory(PropertyFactory):
    r"""Proxy of C++ Core::PropertyScriptParam_Factory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(PropertyScriptParam_Factory self) -> PropertyScriptParam_Factory"""
        _Core.PropertyScriptParam_Factory_swiginit(self, _Core.new_PropertyScriptParam_Factory())
    __swig_destroy__ = _Core.delete_PropertyScriptParam_Factory

# Register PropertyScriptParam_Factory in _Core:
_Core.PropertyScriptParam_Factory_swigregister(PropertyScriptParam_Factory)
class PropertyVector(Property):
    r"""Proxy of C++ Core::PropertyVector class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getClassTypeId = _swig_new_static_method(_Core.PropertyVector_getClassTypeId)
    setIfcNameAndID = _swig_new_static_method(_Core.PropertyVector_setIfcNameAndID)
    init = _swig_new_static_method(_Core.PropertyVector_init)
    create = _swig_new_static_method(_Core.PropertyVector_create)
    setValue = _swig_new_instance_method(_Core.PropertyVector_setValue)
    getValue = _swig_new_instance_method(_Core.PropertyVector_getValue)

    def __init__(self):
        r"""__init__(PropertyVector self) -> PropertyVector"""
        _Core.PropertyVector_swiginit(self, _Core.new_PropertyVector())
    __swig_destroy__ = _Core.delete_PropertyVector

# Register PropertyVector in _Core:
_Core.PropertyVector_swigregister(PropertyVector)
PropertyVector_getClassTypeId = _Core.PropertyVector_getClassTypeId
PropertyVector_setIfcNameAndID = _Core.PropertyVector_setIfcNameAndID
PropertyVector_init = _Core.PropertyVector_init
PropertyVector_create = _Core.PropertyVector_create

class PropertyVectorList(Property):
    r"""Proxy of C++ Core::PropertyVectorList class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getClassTypeId = _swig_new_static_method(_Core.PropertyVectorList_getClassTypeId)
    setIfcNameAndID = _swig_new_static_method(_Core.PropertyVectorList_setIfcNameAndID)
    init = _swig_new_static_method(_Core.PropertyVectorList_init)
    create = _swig_new_static_method(_Core.PropertyVectorList_create)
    setValue = _swig_new_instance_method(_Core.PropertyVectorList_setValue)
    addVector = _swig_new_instance_method(_Core.PropertyVectorList_addVector)
    setEmpty = _swig_new_instance_method(_Core.PropertyVectorList_setEmpty)
    isEmpty = _swig_new_instance_method(_Core.PropertyVectorList_isEmpty)
    getValue = _swig_new_instance_method(_Core.PropertyVectorList_getValue)

    def __init__(self):
        r"""__init__(PropertyVectorList self) -> PropertyVectorList"""
        _Core.PropertyVectorList_swiginit(self, _Core.new_PropertyVectorList())
    __swig_destroy__ = _Core.delete_PropertyVectorList

# Register PropertyVectorList in _Core:
_Core.PropertyVectorList_swigregister(PropertyVectorList)
PropertyVectorList_getClassTypeId = _Core.PropertyVectorList_getClassTypeId
PropertyVectorList_setIfcNameAndID = _Core.PropertyVectorList_setIfcNameAndID
PropertyVectorList_init = _Core.PropertyVectorList_init
PropertyVectorList_create = _Core.PropertyVectorList_create

class PropertyListVectorList(Property):
    r"""Proxy of C++ Core::PropertyListVectorList class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getClassTypeId = _swig_new_static_method(_Core.PropertyListVectorList_getClassTypeId)
    setIfcNameAndID = _swig_new_static_method(_Core.PropertyListVectorList_setIfcNameAndID)
    init = _swig_new_static_method(_Core.PropertyListVectorList_init)
    create = _swig_new_static_method(_Core.PropertyListVectorList_create)
    setValue = _swig_new_instance_method(_Core.PropertyListVectorList_setValue)
    setEmpty = _swig_new_instance_method(_Core.PropertyListVectorList_setEmpty)
    isEmpty = _swig_new_instance_method(_Core.PropertyListVectorList_isEmpty)
    getValue = _swig_new_instance_method(_Core.PropertyListVectorList_getValue)
    save = _swig_new_instance_method(_Core.PropertyListVectorList_save)

    def __init__(self):
        r"""__init__(PropertyListVectorList self) -> PropertyListVectorList"""
        _Core.PropertyListVectorList_swiginit(self, _Core.new_PropertyListVectorList())
    __swig_destroy__ = _Core.delete_PropertyListVectorList

# Register PropertyListVectorList in _Core:
_Core.PropertyListVectorList_swigregister(PropertyListVectorList)
PropertyListVectorList_getClassTypeId = _Core.PropertyListVectorList_getClassTypeId
PropertyListVectorList_setIfcNameAndID = _Core.PropertyListVectorList_setIfcNameAndID
PropertyListVectorList_init = _Core.PropertyListVectorList_init
PropertyListVectorList_create = _Core.PropertyListVectorList_create

class PropertyVector_Factory(PropertyFactory):
    r"""Proxy of C++ Core::PropertyVector_Factory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(PropertyVector_Factory self) -> PropertyVector_Factory"""
        _Core.PropertyVector_Factory_swiginit(self, _Core.new_PropertyVector_Factory())
    __swig_destroy__ = _Core.delete_PropertyVector_Factory

# Register PropertyVector_Factory in _Core:
_Core.PropertyVector_Factory_swigregister(PropertyVector_Factory)
class PropertyVectorList_Factory(PropertyFactory):
    r"""Proxy of C++ Core::PropertyVectorList_Factory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(PropertyVectorList_Factory self) -> PropertyVectorList_Factory"""
        _Core.PropertyVectorList_Factory_swiginit(self, _Core.new_PropertyVectorList_Factory())
    __swig_destroy__ = _Core.delete_PropertyVectorList_Factory

# Register PropertyVectorList_Factory in _Core:
_Core.PropertyVectorList_Factory_swigregister(PropertyVectorList_Factory)
class PropertyListVectorList_Factory(PropertyFactory):
    r"""Proxy of C++ Core::PropertyListVectorList_Factory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(PropertyListVectorList_Factory self) -> PropertyListVectorList_Factory"""
        _Core.PropertyListVectorList_Factory_swiginit(self, _Core.new_PropertyListVectorList_Factory())
    __swig_destroy__ = _Core.delete_PropertyListVectorList_Factory

# Register PropertyListVectorList_Factory in _Core:
_Core.PropertyListVectorList_Factory_swigregister(PropertyListVectorList_Factory)
class PropertyVectorOpt(PropertyVector):
    r"""Proxy of C++ Core::PropertyVectorOpt class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getClassTypeId = _swig_new_static_method(_Core.PropertyVectorOpt_getClassTypeId)
    setIfcNameAndID = _swig_new_static_method(_Core.PropertyVectorOpt_setIfcNameAndID)
    init = _swig_new_static_method(_Core.PropertyVectorOpt_init)
    create = _swig_new_static_method(_Core.PropertyVectorOpt_create)

    def __init__(self):
        r"""__init__(PropertyVectorOpt self) -> PropertyVectorOpt"""
        _Core.PropertyVectorOpt_swiginit(self, _Core.new_PropertyVectorOpt())
    __swig_destroy__ = _Core.delete_PropertyVectorOpt

# Register PropertyVectorOpt in _Core:
_Core.PropertyVectorOpt_swigregister(PropertyVectorOpt)
PropertyVectorOpt_getClassTypeId = _Core.PropertyVectorOpt_getClassTypeId
PropertyVectorOpt_setIfcNameAndID = _Core.PropertyVectorOpt_setIfcNameAndID
PropertyVectorOpt_init = _Core.PropertyVectorOpt_init
PropertyVectorOpt_create = _Core.PropertyVectorOpt_create

class FieldData(object):
    r"""Proxy of C++ Core::FieldData class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, arg2):
        r"""__init__(FieldData self, FieldData arg2) -> FieldData"""
        _Core.FieldData_swiginit(self, _Core.new_FieldData(arg2))
    __swig_destroy__ = _Core.delete_FieldData

# Register FieldData in _Core:
_Core.FieldData_swigregister(FieldData)
PropertyName = cvar.PropertyName

Prop_None = _Core.Prop_None

Prop_ReadOnly = _Core.Prop_ReadOnly

Prop_Transient = _Core.Prop_Transient

Prop_Hidden = _Core.Prop_Hidden

Prop_Output = _Core.Prop_Output

Prop_NoRecompute = _Core.Prop_NoRecompute

Prop_NoPersist = _Core.Prop_NoPersist

class LxFieldData(object):
    r"""Proxy of C++ Core::LxFieldData class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(LxFieldData self) -> LxFieldData
        __init__(LxFieldData self, LxFieldData fd) -> LxFieldData
        """
        _Core.LxFieldData_swiginit(self, _Core.new_LxFieldData(*args))
    addField = _swig_new_instance_method(_Core.LxFieldData_addField)
    m_fieldmap = property(_Core.LxFieldData_m_fieldmap_get, _Core.LxFieldData_m_fieldmap_set, doc=r"""m_fieldmap : std::unordered_map<(std::string,ptrdiff_t)>""")
    fieldsAdded = property(_Core.LxFieldData_fieldsAdded_get, _Core.LxFieldData_fieldsAdded_set, doc=r"""fieldsAdded : bool""")
    __swig_destroy__ = _Core.delete_LxFieldData

# Register LxFieldData in _Core:
_Core.LxFieldData_swigregister(LxFieldData)
class PropertyContainer(Base.Persistence):
    r"""Proxy of C++ Core::PropertyContainer class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getClassTypeId = _swig_new_static_method(_Core.PropertyContainer_getClassTypeId)
    getTypeId = _swig_new_instance_method(_Core.PropertyContainer_getTypeId)
    setIfcNameAndID = _swig_new_static_method(_Core.PropertyContainer_setIfcNameAndID)
    init = _swig_new_static_method(_Core.PropertyContainer_init)
    create = _swig_new_static_method(_Core.PropertyContainer_create)
    lx_field_init = _swig_new_static_method(_Core.PropertyContainer_lx_field_init)
    getFieldData = _swig_new_instance_method(_Core.PropertyContainer_getFieldData)
    getParentFieldData = _swig_new_instance_method(_Core.PropertyContainer_getParentFieldData)
    isMutableStatic = _swig_new_static_method(_Core.PropertyContainer_isMutableStatic)
    isMutable = _swig_new_instance_method(_Core.PropertyContainer_isMutable)

    def __init__(self, *args):
        r"""
        __init__(PropertyContainer self) -> PropertyContainer
        __init__(PropertyContainer self, PropertyContainer rhs) -> PropertyContainer
        """
        if self.__class__ == PropertyContainer:
            _self = None
        else:
            _self = self
        _Core.PropertyContainer_swiginit(self, _Core.new_PropertyContainer(_self, *args))
    __swig_destroy__ = _Core.delete_PropertyContainer
    addProperty = _swig_new_instance_method(_Core.PropertyContainer_addProperty)
    addPropertyUser = _swig_new_instance_method(_Core.PropertyContainer_addPropertyUser)
    removeProperty = _swig_new_instance_method(_Core.PropertyContainer_removeProperty)
    removeAllProperties = _swig_new_instance_method(_Core.PropertyContainer_removeAllProperties)
    getPropertyByName = _swig_new_instance_method(_Core.PropertyContainer_getPropertyByName)
    getPropertyName = _swig_new_instance_method(_Core.PropertyContainer_getPropertyName)
    getPropertyMap = _swig_new_instance_method(_Core.PropertyContainer_getPropertyMap)
    getPropertiesAndNameByType = _swig_new_instance_method(_Core.PropertyContainer_getPropertiesAndNameByType)
    getLinkProperties = _swig_new_instance_method(_Core.PropertyContainer_getLinkProperties)
    getPropertiesByType = _swig_new_instance_method(_Core.PropertyContainer_getPropertiesByType)
    getPropertiesByTypes = _swig_new_instance_method(_Core.PropertyContainer_getPropertiesByTypes)
    setPropertyFromVariant = _swig_new_instance_method(_Core.PropertyContainer_setPropertyFromVariant)
    setProperty = _swig_new_instance_method(_Core.PropertyContainer_setProperty)
    onBeforeChange = _swig_new_instance_method(_Core.PropertyContainer_onBeforeChange)
    onChanged = _swig_new_instance_method(_Core.PropertyContainer_onChanged)
    onDeleted = _swig_new_instance_method(_Core.PropertyContainer_onDeleted)
    onNew = _swig_new_instance_method(_Core.PropertyContainer_onNew)
    onPropertyStatusBitsChanged = _swig_new_instance_method(_Core.PropertyContainer_onPropertyStatusBitsChanged)
    save = _swig_new_instance_method(_Core.PropertyContainer_save)
    restore = _swig_new_instance_method(_Core.PropertyContainer_restore)
    enableNotify = _swig_new_instance_method(_Core.PropertyContainer_enableNotify)
    isNotifyEnabled = _swig_new_instance_method(_Core.PropertyContainer_isNotifyEnabled)
    touch = _swig_new_instance_method(_Core.PropertyContainer_touch)
    isDeleted = _swig_new_instance_method(_Core.PropertyContainer_isDeleted)
    isStatusDeleted = _swig_new_instance_method(_Core.PropertyContainer_isStatusDeleted)
    isMarkedForDelete = _swig_new_instance_method(_Core.PropertyContainer_isMarkedForDelete)
    isMarkedForDeleteFinal = _swig_new_instance_method(_Core.PropertyContainer_isMarkedForDeleteFinal)
    isDeletedFinal = _swig_new_instance_method(_Core.PropertyContainer_isDeletedFinal)
    isNew = _swig_new_instance_method(_Core.PropertyContainer_isNew)
    isUpdated = _swig_new_instance_method(_Core.PropertyContainer_isUpdated)
    isValid = _swig_new_instance_method(_Core.PropertyContainer_isValid)
    hasErrors = _swig_new_instance_method(_Core.PropertyContainer_hasErrors)
    setData = _swig_new_instance_method(_Core.PropertyContainer_setData)
    getData = _swig_new_instance_method(_Core.PropertyContainer_getData)
    removeData = _swig_new_instance_method(_Core.PropertyContainer_removeData)
    hasSameValuesAs = _swig_new_instance_method(_Core.PropertyContainer_hasSameValuesAs)
    ensureIntegrity = _swig_new_instance_method(_Core.PropertyContainer_ensureIntegrity)
    integrityMaintained = _swig_new_instance_method(_Core.PropertyContainer_integrityMaintained)
    integrityLost = _swig_new_instance_method(_Core.PropertyContainer_integrityLost)
    checkIntegrity = _swig_new_instance_method(_Core.PropertyContainer_checkIntegrity)
    onChangedDebug = _swig_new_instance_method(_Core.PropertyContainer_onChangedDebug)
    checkAfterOnDeleted = _swig_new_instance_method(_Core.PropertyContainer_checkAfterOnDeleted)
    onBeforeChangeProperty = _swig_new_instance_method(_Core.PropertyContainer_onBeforeChangeProperty)
    onChangedProperty = _swig_new_instance_method(_Core.PropertyContainer_onChangedProperty)
    getPropertyValueMap = _swig_new_instance_method(_Core.PropertyContainer_getPropertyValueMap)
    getKeyValueMap = _swig_new_instance_method(_Core.PropertyContainer_getKeyValueMap)
    setPropertyFromKeyValue = _swig_new_instance_method(_Core.PropertyContainer_setPropertyFromKeyValue)
    getUpdatedProperties = _swig_new_instance_method(_Core.PropertyContainer_getUpdatedProperties)
    setUpdated = _swig_new_instance_method(_Core.PropertyContainer_setUpdated)
    setHasErrors = _swig_new_instance_method(_Core.PropertyContainer_setHasErrors)
    setNew = _swig_new_instance_method(_Core.PropertyContainer_setNew)
    setValid = _swig_new_instance_method(_Core.PropertyContainer_setValid)
    setDeleted = _swig_new_instance_method(_Core.PropertyContainer_setDeleted)
    setMarkedForDelete = _swig_new_instance_method(_Core.PropertyContainer_setMarkedForDelete)
    setMarkedForDeleteFinal = _swig_new_instance_method(_Core.PropertyContainer_setMarkedForDeleteFinal)
    setDeleteFinal = _swig_new_instance_method(_Core.PropertyContainer_setDeleteFinal)
    breakLinks = _swig_new_instance_method(_Core.PropertyContainer_breakLinks)
    getPropertyChangeStatus = _swig_new_instance_method(_Core.PropertyContainer_getPropertyChangeStatus)
    getLastPropertyChangeStatus = _swig_new_instance_method(_Core.PropertyContainer_getLastPropertyChangeStatus)
    setAllPropertiesValid = _swig_new_instance_method(_Core.PropertyContainer_setAllPropertiesValid)
    setPropertyValues = _swig_new_instance_method(_Core.PropertyContainer_setPropertyValues)
    getPropertiesOrdered = _swig_new_instance_method(_Core.PropertyContainer_getPropertiesOrdered)
    check_lx = _swig_new_instance_method(_Core.PropertyContainer_check_lx)
    addDynamicProperty = _swig_new_instance_method(_Core.PropertyContainer_addDynamicProperty)
    removeDynamicProperty = _swig_new_instance_method(_Core.PropertyContainer_removeDynamicProperty)
    getDynamicPropertyNames = _swig_new_instance_method(_Core.PropertyContainer_getDynamicPropertyNames)
    getDynamicPropertyByName = _swig_new_instance_method(_Core.PropertyContainer_getDynamicPropertyByName)
    isRestored = property(_Core.PropertyContainer_isRestored_get, _Core.PropertyContainer_isRestored_set, doc=r"""isRestored : bool""")
    rollBack = _swig_new_instance_method(_Core.PropertyContainer_rollBack)
    saveLastValidPropertyMap = _swig_new_instance_method(_Core.PropertyContainer_saveLastValidPropertyMap)
    getLastValidPropertyMap = _swig_new_instance_method(_Core.PropertyContainer_getLastValidPropertyMap)
    restoreProperty = _swig_new_instance_method(_Core.PropertyContainer_restoreProperty)
    def __disown__(self):
        self.this.disown()
        _Core.disown_PropertyContainer(self)
        return weakref.proxy(self)

# Register PropertyContainer in _Core:
_Core.PropertyContainer_swigregister(PropertyContainer)
PropertyContainer_getClassTypeId = _Core.PropertyContainer_getClassTypeId
PropertyContainer_setIfcNameAndID = _Core.PropertyContainer_setIfcNameAndID
PropertyContainer_init = _Core.PropertyContainer_init
PropertyContainer_create = _Core.PropertyContainer_create
PropertyContainer_lx_field_init = _Core.PropertyContainer_lx_field_init
PropertyContainer_isMutableStatic = _Core.PropertyContainer_isMutableStatic

class PostInitClass(object):
    r"""Proxy of C++ Core::PostInitClass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, p):
        r"""__init__(PostInitClass self, PropertyContainer p) -> PostInitClass"""
        _Core.PostInitClass_swiginit(self, _Core.new_PostInitClass(p))
    __swig_destroy__ = _Core.delete_PostInitClass
    container = property(_Core.PostInitClass_container_get, _Core.PostInitClass_container_set, doc=r"""container : p.Core::PropertyContainer""")

# Register PostInitClass in _Core:
_Core.PostInitClass_swigregister(PostInitClass)
DIR_NAME_INTERNAL_CATALOG = _Core.DIR_NAME_INTERNAL_CATALOG

DIR_NAME_USER_CATALOG = _Core.DIR_NAME_USER_CATALOG

DIR_NAME_WEBGL_GT = _Core.DIR_NAME_WEBGL_GT

DIR_NAME_GEOID = _Core.DIR_NAME_GEOID

DIR_NAME_BCF = _Core.DIR_NAME_BCF

DIR_NAME_CONFIGURATOR = _Core.DIR_NAME_CONFIGURATOR

FILE_NAME_CAMERA_ANIMATION = _Core.FILE_NAME_CAMERA_ANIMATION

class Link(object):
    r"""Proxy of C++ Core::Link class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    isSameAs = _swig_new_instance_method(_Core.Link_isSameAs)

    def __init__(self):
        r"""__init__(Link self) -> Link"""
        _Core.Link_swiginit(self, _Core.new_Link())
    __swig_destroy__ = _Core.delete_Link

# Register Link in _Core:
_Core.Link_swigregister(Link)
class LinkError(object):
    r"""Proxy of C++ Core::LinkError class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    source = property(_Core.LinkError_source_get, _Core.LinkError_source_set, doc=r"""source : p.Core::DocObject""")
    target = property(_Core.LinkError_target_get, _Core.LinkError_target_set, doc=r"""target : p.Core::DocObject""")
    property = property(_Core.LinkError_property_get, _Core.LinkError_property_set, doc=r"""property : p.Core::PropertyLinkBaseBase""")

    def __init__(self):
        r"""__init__(LinkError self) -> LinkError"""
        _Core.LinkError_swiginit(self, _Core.new_LinkError())
    __swig_destroy__ = _Core.delete_LinkError

# Register LinkError in _Core:
_Core.LinkError_swigregister(LinkError)
class LinkStore(object):
    r"""Proxy of C++ Core::LinkStore class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, s, p, t):
        r"""__init__(LinkStore self, DocObject s, Core::PropertyLinkBaseBase * p, DocObject t) -> LinkStore"""
        _Core.LinkStore_swiginit(self, _Core.new_LinkStore(s, p, t))
    source = property(_Core.LinkStore_source_get, _Core.LinkStore_source_set, doc=r"""source : p.Core::DocObject""")
    target = property(_Core.LinkStore_target_get, _Core.LinkStore_target_set, doc=r"""target : p.Core::DocObject""")
    property = property(_Core.LinkStore_property_get, _Core.LinkStore_property_set, doc=r"""property : p.Core::PropertyLinkBaseBase""")
    __swig_destroy__ = _Core.delete_LinkStore

# Register LinkStore in _Core:
_Core.LinkStore_swigregister(LinkStore)
class AttachmentEntry(object):
    r"""Proxy of C++ Core::AttachmentEntry class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    FileName = property(_Core.AttachmentEntry_FileName_get, _Core.AttachmentEntry_FileName_set, doc=r"""FileName : Base::String""")
    FeatName = property(_Core.AttachmentEntry_FeatName_get, _Core.AttachmentEntry_FeatName_set, doc=r"""FeatName : Base::String""")
    Info = property(_Core.AttachmentEntry_Info_get, _Core.AttachmentEntry_Info_set, doc=r"""Info : Base::String""")

    def __init__(self):
        r"""__init__(AttachmentEntry self) -> AttachmentEntry"""
        _Core.AttachmentEntry_swiginit(self, _Core.new_AttachmentEntry())
    __swig_destroy__ = _Core.delete_AttachmentEntry

# Register AttachmentEntry in _Core:
_Core.AttachmentEntry_swigregister(AttachmentEntry)
class DocChanges(object):
    r"""Proxy of C++ Core::DocChanges class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, doc):
        r"""__init__(DocChanges self, CoreDocument doc) -> DocChanges"""
        _Core.DocChanges_swiginit(self, _Core.new_DocChanges(doc))
    RECOMPUTED = _Core.DocChanges_RECOMPUTED
    
    MESSAGE_BY_NAME = _Core.DocChanges_MESSAGE_BY_NAME
    
    MESSAGE_BY_ID = _Core.DocChanges_MESSAGE_BY_ID
    
    Why = property(_Core.DocChanges_Why_get, _Core.DocChanges_Why_set, doc=r"""Why : enum Core::DocChanges::why""")
    mustNotify = _swig_new_instance_method(_Core.DocChanges_mustNotify)
    hasVisibilityChanges = _swig_new_instance_method(_Core.DocChanges_hasVisibilityChanges)
    hasOnlyVisibilityChanges = _swig_new_instance_method(_Core.DocChanges_hasOnlyVisibilityChanges)
    MsgName = property(_Core.DocChanges_MsgName_get, _Core.DocChanges_MsgName_set, doc=r"""MsgName : std::string""")
    MsgId = property(_Core.DocChanges_MsgId_get, _Core.DocChanges_MsgId_set, doc=r"""MsgId : int""")
    Value = property(_Core.DocChanges_Value_get, _Core.DocChanges_Value_set, doc=r"""Value : Core::Variant""")
    Document = property(_Core.DocChanges_Document_get, _Core.DocChanges_Document_set, doc=r"""Document : p.Core::CoreDocument""")
    NewObjects = property(_Core.DocChanges_NewObjects_get, _Core.DocChanges_NewObjects_set, doc=r"""NewObjects : std::vector<(p.Core::DocObject,std::allocator<(p.Core::DocObject)>)>""")
    UpdatedObjects = property(_Core.DocChanges_UpdatedObjects_get, _Core.DocChanges_UpdatedObjects_set, doc=r"""UpdatedObjects : std::vector<(p.Core::DocObject,std::allocator<(p.Core::DocObject)>)>""")
    DeletedObjects = property(_Core.DocChanges_DeletedObjects_get, _Core.DocChanges_DeletedObjects_set, doc=r"""DeletedObjects : std::vector<(p.Core::DocObject,std::allocator<(p.Core::DocObject)>)>""")
    ErroneousObjects = property(_Core.DocChanges_ErroneousObjects_get, _Core.DocChanges_ErroneousObjects_set, doc=r"""ErroneousObjects : std::map<(p.Core::DocObject,std::vector<(std::string,std::allocator<(std::string)>)>,std::less<(p.Core::DocObject)>,std::allocator<(std::pair<(q(const).p.Core::DocObject,std::vector<(std::string,std::allocator<(std::string)>)>)>)>)>""")
    __swig_destroy__ = _Core.delete_DocChanges

# Register DocChanges in _Core:
_Core.DocChanges_swigregister(DocChanges)
RecomputeError = _Core.RecomputeError

Rename = _Core.Rename

NewFile = _Core.NewFile

FileOpened = _Core.FileOpened

BeforeSave = _Core.BeforeSave

AfterSave = _Core.AfterSave

CleanAll = _Core.CleanAll

AddDirectoryPath = _Core.AddDirectoryPath

RecomputeFinished = _Core.RecomputeFinished

ErrorCanNotOpenFile = _Core.ErrorCanNotOpenFile

ChangeToDefaultUser = _Core.ChangeToDefaultUser

GUID_Conflict = _Core.GUID_Conflict

Export = _Core.Export

Import = _Core.Import

SaveStart = _Core.SaveStart

Closing = _Core.Closing

PriceCalculationChanged = _Core.PriceCalculationChanged

PostCheck = _Core.PostCheck

class DocumentState(object):
    r"""Proxy of C++ Core::DocumentState class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(DocumentState self) -> DocumentState
        __init__(DocumentState self, DocumentState rhs) -> DocumentState
        """
        _Core.DocumentState_swiginit(self, _Core.new_DocumentState(*args))
    PropertyErrors = property(_Core.DocumentState_PropertyErrors_get, _Core.DocumentState_PropertyErrors_set, doc=r"""PropertyErrors : std::vector<(std::string,std::allocator<(std::string)>)>""")
    LastErroneousObjects = property(_Core.DocumentState_LastErroneousObjects_get, _Core.DocumentState_LastErroneousObjects_set, doc=r"""LastErroneousObjects : std::map<(p.Core::DocObject,std::vector<(std::string,std::allocator<(std::string)>)>,std::less<(p.Core::DocObject)>,std::allocator<(std::pair<(q(const).p.Core::DocObject,std::vector<(std::string,std::allocator<(std::string)>)>)>)>)>""")
    LastRecomputeTime = property(_Core.DocumentState_LastRecomputeTime_get, _Core.DocumentState_LastRecomputeTime_set, doc=r"""LastRecomputeTime : unsigned long""")
    LastNotifyTime = property(_Core.DocumentState_LastNotifyTime_get, _Core.DocumentState_LastNotifyTime_set, doc=r"""LastNotifyTime : unsigned long""")
    clear = _swig_new_instance_method(_Core.DocumentState_clear)
    __swig_destroy__ = _Core.delete_DocumentState

# Register DocumentState in _Core:
_Core.DocumentState_swigregister(DocumentState)
LEXOCAD_CORE_MSGID = cvar.LEXOCAD_CORE_MSGID

class PropertyLinkDesc(object):
    r"""Proxy of C++ Core::PropertyLinkDesc class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(PropertyLinkDesc self, std::string sourceDocObjectID, std::string sourcePropertyName, Type sourcePropertyTypeID, std::string targetDocObjectID, std::string propertyLinkName) -> PropertyLinkDesc
        __init__(PropertyLinkDesc self, PropertyLinkDesc rhs) -> PropertyLinkDesc
        """
        _Core.PropertyLinkDesc_swiginit(self, _Core.new_PropertyLinkDesc(*args))
    m_SourceDocObjectID = property(_Core.PropertyLinkDesc_m_SourceDocObjectID_get, _Core.PropertyLinkDesc_m_SourceDocObjectID_set, doc=r"""m_SourceDocObjectID : std::string""")
    m_SourcePropertyName = property(_Core.PropertyLinkDesc_m_SourcePropertyName_get, _Core.PropertyLinkDesc_m_SourcePropertyName_set, doc=r"""m_SourcePropertyName : std::string""")
    m_SourcePropertyTypeID = property(_Core.PropertyLinkDesc_m_SourcePropertyTypeID_get, _Core.PropertyLinkDesc_m_SourcePropertyTypeID_set, doc=r"""m_SourcePropertyTypeID : Base::Type""")
    m_TargetDocObjectID = property(_Core.PropertyLinkDesc_m_TargetDocObjectID_get, _Core.PropertyLinkDesc_m_TargetDocObjectID_set, doc=r"""m_TargetDocObjectID : std::string""")
    m_PropertyLinkName = property(_Core.PropertyLinkDesc_m_PropertyLinkName_get, _Core.PropertyLinkDesc_m_PropertyLinkName_set, doc=r"""m_PropertyLinkName : std::string""")
    __swig_destroy__ = _Core.delete_PropertyLinkDesc

# Register PropertyLinkDesc in _Core:
_Core.PropertyLinkDesc_swigregister(PropertyLinkDesc)
class IfcHeader(object):
    r"""Proxy of C++ Core::IfcHeader class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    fileDescriptor = property(_Core.IfcHeader_fileDescriptor_get, _Core.IfcHeader_fileDescriptor_set, doc=r"""fileDescriptor : Core::IfcHeader::FileDescriptor""")
    filename = property(_Core.IfcHeader_filename_get, _Core.IfcHeader_filename_set, doc=r"""filename : Core::IfcHeader::FileName""")
    fileSchema = property(_Core.IfcHeader_fileSchema_get, _Core.IfcHeader_fileSchema_set, doc=r"""fileSchema : Core::IfcHeader::FileSchema""")

    def __init__(self):
        r"""__init__(IfcHeader self) -> IfcHeader"""
        _Core.IfcHeader_swiginit(self, _Core.new_IfcHeader())
    __swig_destroy__ = _Core.delete_IfcHeader

# Register IfcHeader in _Core:
_Core.IfcHeader_swigregister(IfcHeader)
class CoreDocument(PropertyContainer, SubjectCoreDocChanges):
    r"""Proxy of C++ Core::CoreDocument class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    getClassTypeId = _swig_new_static_method(_Core.CoreDocument_getClassTypeId)
    setIfcNameAndID = _swig_new_static_method(_Core.CoreDocument_setIfcNameAndID)
    init = _swig_new_static_method(_Core.CoreDocument_init)
    create = _swig_new_static_method(_Core.CoreDocument_create)
    lx_field_init = _swig_new_static_method(_Core.CoreDocument_lx_field_init)
    SkipRecompute = _Core.CoreDocument_SkipRecompute
    
    KeepTrailingDigits = _Core.CoreDocument_KeepTrailingDigits
    
    Closable = _Core.CoreDocument_Closable
    
    Restoring = _Core.CoreDocument_Restoring
    
    Recomputing = _Core.CoreDocument_Recomputing
    
    PartialRestore = _Core.CoreDocument_PartialRestore
    
    Importing = _Core.CoreDocument_Importing
    
    PartialDoc = _Core.CoreDocument_PartialDoc
    
    AllowPartialRecompute = _Core.CoreDocument_AllowPartialRecompute
    
    TempDoc = _Core.CoreDocument_TempDoc
    
    RestoreError = _Core.CoreDocument_RestoreError
    
    name = property(_Core.CoreDocument_name_get, _Core.CoreDocument_name_set, doc=r"""name : Core::PropertyText""")
    documentVersion = property(_Core.CoreDocument_documentVersion_get, _Core.CoreDocument_documentVersion_set, doc=r"""documentVersion : Core::PropertyText""")
    compatibleInfo = property(_Core.CoreDocument_compatibleInfo_get, _Core.CoreDocument_compatibleInfo_set, doc=r"""compatibleInfo : Core::PropertyText""")
    documentGUID = property(_Core.CoreDocument_documentGUID_get, _Core.CoreDocument_documentGUID_set, doc=r"""documentGUID : Core::PropertyText""")
    documentChanges = property(_Core.CoreDocument_documentChanges_get, _Core.CoreDocument_documentChanges_set, doc=r"""documentChanges : Core::PropertyIndex""")
    documentMaxID = property(_Core.CoreDocument_documentMaxID_get, _Core.CoreDocument_documentMaxID_set, doc=r"""documentMaxID : Core::PropertyIndex""")
    application_mainversion = property(_Core.CoreDocument_application_mainversion_get, _Core.CoreDocument_application_mainversion_set, doc=r"""application_mainversion : Core::PropertyIndex""")
    application_minorversion = property(_Core.CoreDocument_application_minorversion_get, _Core.CoreDocument_application_minorversion_set, doc=r"""application_minorversion : Core::PropertyIndex""")
    documentTypeName = property(_Core.CoreDocument_documentTypeName_get, _Core.CoreDocument_documentTypeName_set, doc=r"""documentTypeName : Core::PropertyText""")
    filename = property(_Core.CoreDocument_filename_get, _Core.CoreDocument_filename_set, doc=r"""filename : Core::PropertyText""")
    createdBy = property(_Core.CoreDocument_createdBy_get, _Core.CoreDocument_createdBy_set, doc=r"""createdBy : Core::PropertyText""")
    creationDate = property(_Core.CoreDocument_creationDate_get, _Core.CoreDocument_creationDate_set, doc=r"""creationDate : Core::PropertyText""")
    lastModifiedBy = property(_Core.CoreDocument_lastModifiedBy_get, _Core.CoreDocument_lastModifiedBy_set, doc=r"""lastModifiedBy : Core::PropertyText""")
    lastModifiedDate = property(_Core.CoreDocument_lastModifiedDate_get, _Core.CoreDocument_lastModifiedDate_set, doc=r"""lastModifiedDate : Core::PropertyText""")
    company = property(_Core.CoreDocument_company_get, _Core.CoreDocument_company_set, doc=r"""company : Core::PropertyText""")
    comment = property(_Core.CoreDocument_comment_get, _Core.CoreDocument_comment_set, doc=r"""comment : Core::PropertyText""")
    projectNumber = property(_Core.CoreDocument_projectNumber_get, _Core.CoreDocument_projectNumber_set, doc=r"""projectNumber : Core::PropertyText""")
    architect = property(_Core.CoreDocument_architect_get, _Core.CoreDocument_architect_set, doc=r"""architect : Core::PropertyText""")
    ifcHeader = property(_Core.CoreDocument_ifcHeader_get, _Core.CoreDocument_ifcHeader_set, doc=r"""ifcHeader : Core::IfcHeader""")
    fileName = property(_Core.CoreDocument_fileName_get, _Core.CoreDocument_fileName_set, doc=r"""fileName : Base::String""")
    getDocumentVersion = _swig_new_instance_method(_Core.CoreDocument_getDocumentVersion)
    addObject = _swig_new_instance_method(_Core.CoreDocument_addObject)
    removeObject = _swig_new_instance_method(_Core.CoreDocument_removeObject)
    removeObjectFinal = _swig_new_instance_method(_Core.CoreDocument_removeObjectFinal)
    removeObjects = _swig_new_instance_method(_Core.CoreDocument_removeObjects)
    onFileOpened = _swig_new_instance_method(_Core.CoreDocument_onFileOpened)
    onBeforeChangeProperty = _swig_new_instance_method(_Core.CoreDocument_onBeforeChangeProperty)
    onChangedProperty = _swig_new_instance_method(_Core.CoreDocument_onChangedProperty)
    onChangedDebug = _swig_new_instance_method(_Core.CoreDocument_onChangedDebug)
    getCopyType = _swig_new_instance_method(_Core.CoreDocument_getCopyType)
    clearCopyType = _swig_new_instance_method(_Core.CoreDocument_clearCopyType)
    copyObject = _swig_new_instance_method(_Core.CoreDocument_copyObject)
    copyToDifferentType = _swig_new_instance_method(_Core.CoreDocument_copyToDifferentType)
    copySharedObject = _swig_new_instance_method(_Core.CoreDocument_copySharedObject)
    getObjects = _swig_new_instance_method(_Core.CoreDocument_getObjects)
    getObjectsConst = _swig_new_instance_method(_Core.CoreDocument_getObjectsConst)
    getObjectsSorted = _swig_new_instance_method(_Core.CoreDocument_getObjectsSorted)
    createObjectFromTypeName = _swig_new_instance_method(_Core.CoreDocument_createObjectFromTypeName)
    createObjectFromType = _swig_new_instance_method(_Core.CoreDocument_createObjectFromType)
    getObjectsByTypeName = _swig_new_instance_method(_Core.CoreDocument_getObjectsByTypeName)
    recompute = _swig_new_instance_method(_Core.CoreDocument_recompute)
    saveAs = _swig_new_instance_method(_Core.CoreDocument_saveAs)
    getTmpDirectory = _swig_new_instance_method(_Core.CoreDocument_getTmpDirectory)
    isActive = _swig_new_instance_method(_Core.CoreDocument_isActive)
    isChanged = _swig_new_instance_method(_Core.CoreDocument_isChanged)
    getObjectByGlobalId = _swig_new_instance_method(_Core.CoreDocument_getObjectByGlobalId)
    getDocXMLAsString = _swig_new_instance_method(_Core.CoreDocument_getDocXMLAsString)
    testStatusBits = _swig_new_instance_method(_Core.CoreDocument_testStatusBits)
    setStatusBits = _swig_new_instance_method(_Core.CoreDocument_setStatusBits)
    setUndoMode = _swig_new_instance_method(_Core.CoreDocument_setUndoMode)
    getUndoMode = _swig_new_instance_method(_Core.CoreDocument_getUndoMode)
    setTransactionMode = _swig_new_instance_method(_Core.CoreDocument_setTransactionMode)
    openTransaction = _swig_new_instance_method(_Core.CoreDocument_openTransaction)
    renameTransaction = _swig_new_instance_method(_Core.CoreDocument_renameTransaction)
    commitTransaction = _swig_new_instance_method(_Core.CoreDocument_commitTransaction)
    abortTransaction = _swig_new_instance_method(_Core.CoreDocument_abortTransaction)
    hasPendingTransaction = _swig_new_instance_method(_Core.CoreDocument_hasPendingTransaction)
    getPendingTransactionName = _swig_new_instance_method(_Core.CoreDocument_getPendingTransactionName)
    getTransactionID = _swig_new_instance_method(_Core.CoreDocument_getTransactionID)
    isTransactionEmpty = _swig_new_instance_method(_Core.CoreDocument_isTransactionEmpty)
    setUndoLimit = _swig_new_instance_method(_Core.CoreDocument_setUndoLimit)
    setMaxUndoStackSize = _swig_new_instance_method(_Core.CoreDocument_setMaxUndoStackSize)
    getMaxUndoStackSize = _swig_new_instance_method(_Core.CoreDocument_getMaxUndoStackSize)
    clearUndos = _swig_new_instance_method(_Core.CoreDocument_clearUndos)
    getAvailableUndos = _swig_new_instance_method(_Core.CoreDocument_getAvailableUndos)
    getAvailableUndoNames = _swig_new_instance_method(_Core.CoreDocument_getAvailableUndoNames)
    undo = _swig_new_instance_method(_Core.CoreDocument_undo)
    getAvailableRedos = _swig_new_instance_method(_Core.CoreDocument_getAvailableRedos)
    getAvailableRedoNames = _swig_new_instance_method(_Core.CoreDocument_getAvailableRedoNames)
    redo = _swig_new_instance_method(_Core.CoreDocument_redo)
    isPerformingTransaction = _swig_new_instance_method(_Core.CoreDocument_isPerformingTransaction)
    getObjectById = _swig_new_instance_method(_Core.CoreDocument_getObjectById)
    getObjectByUserName = _swig_new_instance_method(_Core.CoreDocument_getObjectByUserName)
    setRecommendFileNameForSave = _swig_new_instance_method(_Core.CoreDocument_setRecommendFileNameForSave)
    getObjectsFromTypeMap = _swig_new_instance_method(_Core.CoreDocument_getObjectsFromTypeMap)
    getTypeMap = _swig_new_instance_method(_Core.CoreDocument_getTypeMap)
    addPropertyLinkError = _swig_new_instance_method(_Core.CoreDocument_addPropertyLinkError)
    getDocumentState = _swig_new_instance_method(_Core.CoreDocument_getDocumentState)
    checkObjectLinks = _swig_new_instance_method(_Core.CoreDocument_checkObjectLinks)
    checkDeletedObjectLinks = _swig_new_instance_method(_Core.CoreDocument_checkDeletedObjectLinks)
    getInner = _swig_new_instance_method(_Core.CoreDocument_getInner)
    getOuter = _swig_new_instance_method(_Core.CoreDocument_getOuter)
    getAllLinksByProperties = _swig_new_instance_method(_Core.CoreDocument_getAllLinksByProperties)
    getLinksByProperties = _swig_new_instance_method(_Core.CoreDocument_getLinksByProperties)
    getLinkDescByProperties = _swig_new_instance_method(_Core.CoreDocument_getLinkDescByProperties)
    getBackLinksByProperties = _swig_new_instance_method(_Core.CoreDocument_getBackLinksByProperties)
    removeLinkInProperties = _swig_new_instance_method(_Core.CoreDocument_removeLinkInProperties)
    removeBackLinkInProperties = _swig_new_instance_method(_Core.CoreDocument_removeBackLinkInProperties)
    dumpGraph = _swig_new_instance_method(_Core.CoreDocument_dumpGraph)
    check_graph = _swig_new_instance_method(_Core.CoreDocument_check_graph)
    getLinksToMe = _swig_new_instance_method(_Core.CoreDocument_getLinksToMe)
    getBackLinksToMe = _swig_new_instance_method(_Core.CoreDocument_getBackLinksToMe)
    getLinksFromMe = _swig_new_instance_method(_Core.CoreDocument_getLinksFromMe)
    getBackLinksFromMe = _swig_new_instance_method(_Core.CoreDocument_getBackLinksFromMe)
    maybeSave = _swig_new_instance_method(_Core.CoreDocument_maybeSave)
    getObjectsToSave = _swig_new_instance_method(_Core.CoreDocument_getObjectsToSave)
    getDefaultVersionToSave = _swig_new_static_method(_Core.CoreDocument_getDefaultVersionToSave)
    getPreviousVersionToSave = _swig_new_static_method(_Core.CoreDocument_getPreviousVersionToSave)
    getPreviousVersionToSaveStr = _swig_new_static_method(_Core.CoreDocument_getPreviousVersionToSaveStr)
    isOpened = _swig_new_instance_method(_Core.CoreDocument_isOpened)
    saveFile = _swig_new_instance_method(_Core.CoreDocument_saveFile)
    saveAsFile = _swig_new_instance_method(_Core.CoreDocument_saveAsFile)
    saveCopy = _swig_new_instance_method(_Core.CoreDocument_saveCopy)
    saveAsFileVersion = _swig_new_instance_method(_Core.CoreDocument_saveAsFileVersion)
    setOnSaveChangeToDefaultUser = _swig_new_instance_method(_Core.CoreDocument_setOnSaveChangeToDefaultUser)
    getOnSaveChangeToDefaultUser = _swig_new_instance_method(_Core.CoreDocument_getOnSaveChangeToDefaultUser)
    askAndSetNewFilename = _swig_new_instance_method(_Core.CoreDocument_askAndSetNewFilename)
    setSaveBlocksUntilFinished = _swig_new_instance_method(_Core.CoreDocument_setSaveBlocksUntilFinished)
    getSaveBlocksUntilFinished = _swig_new_instance_method(_Core.CoreDocument_getSaveBlocksUntilFinished)
    addInventorDirectory = _swig_new_instance_method(_Core.CoreDocument_addInventorDirectory)
    createGroundPlate_deprecated = _swig_new_instance_method(_Core.CoreDocument_createGroundPlate_deprecated)
    setGuidPolicy = _swig_new_instance_method(_Core.CoreDocument_setGuidPolicy)
    getGuidPolicy = _swig_new_instance_method(_Core.CoreDocument_getGuidPolicy)
    addReferenceFrom = _swig_new_instance_method(_Core.CoreDocument_addReferenceFrom)
    removeReferenceFrom = _swig_new_instance_method(_Core.CoreDocument_removeReferenceFrom)
    hasReferencesFrom = _swig_new_instance_method(_Core.CoreDocument_hasReferencesFrom)
    getReferences = _swig_new_instance_method(_Core.CoreDocument_getReferences)
    setFullFileName = _swig_new_instance_method(_Core.CoreDocument_setFullFileName)
    restoreGlobalAttachment = _swig_new_instance_method(_Core.CoreDocument_restoreGlobalAttachment)
    addFileToZip = _swig_new_instance_method(_Core.CoreDocument_addFileToZip)
    restoreFileFromZip = _swig_new_instance_method(_Core.CoreDocument_restoreFileFromZip)
    forceBackupOnNextSave = _swig_new_instance_method(_Core.CoreDocument_forceBackupOnNextSave)
    hasErrorObjectsInRecompute = _swig_new_instance_method(_Core.CoreDocument_hasErrorObjectsInRecompute)
    resetHasErrorObjectsInRecompute = _swig_new_instance_method(_Core.CoreDocument_resetHasErrorObjectsInRecompute)
    getRecomputeCount = _swig_new_instance_method(_Core.CoreDocument_getRecomputeCount)
    setChanged = _swig_new_instance_method(_Core.CoreDocument_setChanged)
    getImmutableObjects = _swig_new_instance_method(_Core.CoreDocument_getImmutableObjects)
    addImmutableObjectMaterial = _swig_new_instance_method(_Core.CoreDocument_addImmutableObjectMaterial)
    setImportedIFCFile = _swig_new_instance_method(_Core.CoreDocument_setImportedIFCFile)
    getImportedIFCFile = _swig_new_instance_method(_Core.CoreDocument_getImportedIFCFile)
    getAppVersionFromDocument = _swig_new_static_method(_Core.CoreDocument_getAppVersionFromDocument)
    test_graph = _swig_new_instance_method(_Core.CoreDocument_test_graph)
    onAddLink = _swig_new_instance_method(_Core.CoreDocument_onAddLink)
    onRemoveLink = _swig_new_instance_method(_Core.CoreDocument_onRemoveLink)
    onAddLinks = _swig_new_instance_method(_Core.CoreDocument_onAddLinks)
    onRemoveLinks = _swig_new_instance_method(_Core.CoreDocument_onRemoveLinks)
    onAddBackLink = _swig_new_instance_method(_Core.CoreDocument_onAddBackLink)
    onRemoveBackLink = _swig_new_instance_method(_Core.CoreDocument_onRemoveBackLink)
    onAddBackLinks = _swig_new_instance_method(_Core.CoreDocument_onAddBackLinks)
    onRemoveBackLinks = _swig_new_instance_method(_Core.CoreDocument_onRemoveBackLinks)
    getUniqueObjectIdFromInteger = _swig_new_instance_method(_Core.CoreDocument_getUniqueObjectIdFromInteger)
    breakLinks = _swig_new_instance_method(_Core.CoreDocument_breakLinks)
    getInLinks = _swig_new_instance_method(_Core.CoreDocument_getInLinks)
    getInBackLinks = _swig_new_instance_method(_Core.CoreDocument_getInBackLinks)
    getOutLinks = _swig_new_instance_method(_Core.CoreDocument_getOutLinks)
    getOutBackLinks = _swig_new_instance_method(_Core.CoreDocument_getOutBackLinks)
    checkRelGraph = _swig_new_instance_method(_Core.CoreDocument_checkRelGraph)
    replaceLink = _swig_new_instance_method(_Core.CoreDocument_replaceLink)
    getBackupFileName = _swig_new_instance_method(_Core.CoreDocument_getBackupFileName)
    getBackupFileNameAndWatchDog = _swig_new_instance_method(_Core.CoreDocument_getBackupFileNameAndWatchDog)
    getWatchDogBackupFileName = _swig_new_instance_method(_Core.CoreDocument_getWatchDogBackupFileName)

# Register CoreDocument in _Core:
_Core.CoreDocument_swigregister(CoreDocument)
CoreDocument_getClassTypeId = _Core.CoreDocument_getClassTypeId
CoreDocument_setIfcNameAndID = _Core.CoreDocument_setIfcNameAndID
CoreDocument_init = _Core.CoreDocument_init
CoreDocument_create = _Core.CoreDocument_create
CoreDocument_lx_field_init = _Core.CoreDocument_lx_field_init
CoreDocument_getDefaultVersionToSave = _Core.CoreDocument_getDefaultVersionToSave
CoreDocument_getPreviousVersionToSave = _Core.CoreDocument_getPreviousVersionToSave
CoreDocument_getPreviousVersionToSaveStr = _Core.CoreDocument_getPreviousVersionToSaveStr
CoreDocument_getAppVersionFromDocument = _Core.CoreDocument_getAppVersionFromDocument

class DocumentTimeStampSentinel(object):
    r"""Proxy of C++ Core::DocumentTimeStampSentinel class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, aDoc):
        r"""__init__(DocumentTimeStampSentinel self, CoreDocument aDoc) -> DocumentTimeStampSentinel"""
        _Core.DocumentTimeStampSentinel_swiginit(self, _Core.new_DocumentTimeStampSentinel(aDoc))
    __swig_destroy__ = _Core.delete_DocumentTimeStampSentinel
    mDoc = property(_Core.DocumentTimeStampSentinel_mDoc_get, _Core.DocumentTimeStampSentinel_mDoc_set, doc=r"""mDoc : p.Core::CoreDocument""")
    mOldEnableTimeStamps = property(_Core.DocumentTimeStampSentinel_mOldEnableTimeStamps_get, _Core.DocumentTimeStampSentinel_mOldEnableTimeStamps_set, doc=r"""mOldEnableTimeStamps : bool""")

# Register DocumentTimeStampSentinel in _Core:
_Core.DocumentTimeStampSentinel_swigregister(DocumentTimeStampSentinel)
class DocumentFactory(object):
    r"""Proxy of C++ Core::DocumentFactory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Core.delete_DocumentFactory
    registry = property(_Core.DocumentFactory_registry_get, _Core.DocumentFactory_registry_set, doc=r"""registry : std::map<(std::string,p.Core::DocumentFactory,std::less<(std::string)>,std::allocator<(std::pair<(q(const).std::string,p.Core::DocumentFactory)>)>)>""")

# Register DocumentFactory in _Core:
_Core.DocumentFactory_swigregister(DocumentFactory)
class CoreDocument_Factory(DocumentFactory):
    r"""Proxy of C++ Core::CoreDocument_Factory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(CoreDocument_Factory self) -> CoreDocument_Factory"""
        _Core.CoreDocument_Factory_swiginit(self, _Core.new_CoreDocument_Factory())
    __swig_destroy__ = _Core.delete_CoreDocument_Factory

# Register CoreDocument_Factory in _Core:
_Core.CoreDocument_Factory_swigregister(CoreDocument_Factory)
Touch = _Core.Touch

Error = _Core.Error

New = _Core.New

Recompute = _Core.Recompute

Restore = _Core.Restore

Remove = _Core.Remove

PythonCall = _Core.PythonCall

Destroy = _Core.Destroy

Enforce = _Core.Enforce

Recompute2 = _Core.Recompute2

PartialObject = _Core.PartialObject

PendingRecompute = _Core.PendingRecompute

PendingRemove = _Core.PendingRemove

ObjImporting = _Core.ObjImporting

NoTouch = _Core.NoTouch

GeoExcluded = _Core.GeoExcluded

PendingTransactionUpdate = _Core.PendingTransactionUpdate

Prop_PlacementChanged = _Core.Prop_PlacementChanged

Prop_LinkChanged = _Core.Prop_LinkChanged

Prop_VisibilityChanged = _Core.Prop_VisibilityChanged

Prop_ShapeChanged = _Core.Prop_ShapeChanged

Prop_AppearanceChanged = _Core.Prop_AppearanceChanged

Prop_BackLinkChanged = _Core.Prop_BackLinkChanged

Prop_DataChanged = _Core.Prop_DataChanged

Prop_DataNoPlacementChanged = _Core.Prop_DataNoPlacementChanged

Prop_DrawStyle_Changed = _Core.Prop_DrawStyle_Changed

class DocObject(PropertyContainer):
    r"""Proxy of C++ Core::DocObject class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getClassTypeId = _swig_new_static_method(_Core.DocObject_getClassTypeId)
    getTypeId = _swig_new_instance_method(_Core.DocObject_getTypeId)
    setIfcNameAndID = _swig_new_static_method(_Core.DocObject_setIfcNameAndID)
    init = _swig_new_static_method(_Core.DocObject_init)
    create = _swig_new_static_method(_Core.DocObject_create)
    lx_field_init = _swig_new_static_method(_Core.DocObject_lx_field_init)
    getFieldData = _swig_new_instance_method(_Core.DocObject_getFieldData)
    getParentFieldData = _swig_new_instance_method(_Core.DocObject_getParentFieldData)
    setDocument = _swig_new_instance_method(_Core.DocObject_setDocument)
    getDocument = _swig_new_instance_method(_Core.DocObject_getDocument)
    getId = _swig_new_instance_method(_Core.DocObject_getId)
    onBeforeChange = _swig_new_instance_method(_Core.DocObject_onBeforeChange)
    onChanged = _swig_new_instance_method(_Core.DocObject_onChanged)
    onUndoRedoFinished = _swig_new_instance_method(_Core.DocObject_onUndoRedoFinished)
    isExecutable = _swig_new_instance_method(_Core.DocObject_isExecutable)
    getRefCount = _swig_new_instance_method(_Core.DocObject_getRefCount)
    getViewProviderName = _swig_new_instance_method(_Core.DocObject_getViewProviderName)
    hasLazyViewProvider = _swig_new_instance_method(_Core.DocObject_hasLazyViewProvider)
    attachViewProvider = _swig_new_instance_method(_Core.DocObject_attachViewProvider)
    breakLinks = _swig_new_instance_method(_Core.DocObject_breakLinks)
    getIfcId = _swig_new_instance_method(_Core.DocObject_getIfcId)
    ignoreInGraph = _swig_new_instance_method(_Core.DocObject_ignoreInGraph)
    shallowCopyProperties = _swig_new_instance_method(_Core.DocObject_shallowCopyProperties)
    setNewTimestamp = _swig_new_instance_method(_Core.DocObject_setNewTimestamp)
    setUpdatedTimestamp = _swig_new_instance_method(_Core.DocObject_setUpdatedTimestamp)
    setUpdatedTimestampNoNotify = _swig_new_instance_method(_Core.DocObject_setUpdatedTimestampNoNotify)
    setDeletedTimestamp = _swig_new_instance_method(_Core.DocObject_setDeletedTimestamp)
    setImportedTimestamp = _swig_new_instance_method(_Core.DocObject_setImportedTimestamp)
    getNewTimestamp = _swig_new_instance_method(_Core.DocObject_getNewTimestamp)
    getUpdatedTimestamp = _swig_new_instance_method(_Core.DocObject_getUpdatedTimestamp)
    getDeletedTimestamp = _swig_new_instance_method(_Core.DocObject_getDeletedTimestamp)
    getImportedTimestamp = _swig_new_instance_method(_Core.DocObject_getImportedTimestamp)
    checkAfterOnDeleted = _swig_new_instance_method(_Core.DocObject_checkAfterOnDeleted)
    mustNotify = _swig_new_instance_method(_Core.DocObject_mustNotify)
    hasVisiblityChanged = _swig_new_instance_method(_Core.DocObject_hasVisiblityChanged)
    hasOnlyVisibilityChanged = _swig_new_instance_method(_Core.DocObject_hasOnlyVisibilityChanged)
    resetPropertyStatus = _swig_new_instance_method(_Core.DocObject_resetPropertyStatus)

    def __init__(self):
        r"""__init__(DocObject self) -> DocObject"""
        if self.__class__ == DocObject:
            _self = None
        else:
            _self = self
        _Core.DocObject_swiginit(self, _Core.new_DocObject(_self, ))
    ref = _swig_new_instance_method(_Core.DocObject_ref)
    unref = _swig_new_instance_method(_Core.DocObject_unref)
    setTimeSlot = _swig_new_instance_method(_Core.DocObject_setTimeSlot)
    getTimeSlot = _swig_new_instance_method(_Core.DocObject_getTimeSlot)
    getFilesInTemp = _swig_new_instance_method(_Core.DocObject_getFilesInTemp)
    addFileInTemp = _swig_new_instance_method(_Core.DocObject_addFileInTemp)
    removeFileInTemp = _swig_new_instance_method(_Core.DocObject_removeFileInTemp)
    fixPathToFileInTemp = _swig_new_instance_method(_Core.DocObject_fixPathToFileInTemp)
    replace = _swig_new_instance_method(_Core.DocObject_replace)
    onCreated = _swig_new_instance_method(_Core.DocObject_onCreated)
    initDocObject = _swig_new_instance_method(_Core.DocObject_initDocObject)
    getTypeName = _swig_new_instance_method(_Core.DocObject_getTypeName)
    getTypeCName = _swig_new_instance_method(_Core.DocObject_getTypeCName)
    getDbgInfo = _swig_new_instance_method(_Core.DocObject_getDbgInfo)
    viewProviderDisabled = _swig_new_instance_method(_Core.DocObject_viewProviderDisabled)
    setViewProviderDisabled = _swig_new_instance_method(_Core.DocObject_setViewProviderDisabled)
    isTemporary = _swig_new_instance_method(_Core.DocObject_isTemporary)
    getGlobalId = _swig_new_instance_method(_Core.DocObject_getGlobalId)
    __setId__ = _swig_new_instance_method(_Core.DocObject___setId__)
    __createAndSetGUID__ = _swig_new_instance_method(_Core.DocObject___createAndSetGUID__)
    createSQLColumnNames = _swig_new_instance_method(_Core.DocObject_createSQLColumnNames)
    createSQL = _swig_new_instance_method(_Core.DocObject_createSQL)
    collectDocProperties = _swig_new_instance_method(_Core.DocObject_collectDocProperties)
    overrideTypeForCopyToDifferentType = _swig_new_instance_method(_Core.DocObject_overrideTypeForCopyToDifferentType)
    def __disown__(self):
        self.this.disown()
        _Core.disown_DocObject(self)
        return weakref.proxy(self)
    onBeforeChangeProperty = _swig_new_instance_method(_Core.DocObject_onBeforeChangeProperty)
    onChangedProperty = _swig_new_instance_method(_Core.DocObject_onChangedProperty)
    restoreProperty = _swig_new_instance_method(_Core.DocObject_restoreProperty)

# Register DocObject in _Core:
_Core.DocObject_swigregister(DocObject)
DocObject_getClassTypeId = _Core.DocObject_getClassTypeId
DocObject_setIfcNameAndID = _Core.DocObject_setIfcNameAndID
DocObject_init = _Core.DocObject_init
DocObject_create = _Core.DocObject_create
DocObject_lx_field_init = _Core.DocObject_lx_field_init

class ObjectFactory(object):
    r"""Proxy of C++ Core::ObjectFactory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(ObjectFactory self) -> ObjectFactory"""
        if self.__class__ == ObjectFactory:
            _self = None
        else:
            _self = self
        _Core.ObjectFactory_swiginit(self, _Core.new_ObjectFactory(_self, ))
    __swig_destroy__ = _Core.delete_ObjectFactory
    registry = property(_Core.ObjectFactory_registry_get, _Core.ObjectFactory_registry_set, doc=r"""registry : std::map<(std::string,p.Core::ObjectFactory,std::less<(std::string)>,std::allocator<(std::pair<(q(const).std::string,p.Core::ObjectFactory)>)>)>""")
    registerFactory = _swig_new_static_method(_Core.ObjectFactory_registerFactory)
    isRegistered = _swig_new_static_method(_Core.ObjectFactory_isRegistered)
    createByFactory = _swig_new_instance_method(_Core.ObjectFactory_createByFactory)
    def __disown__(self):
        self.this.disown()
        _Core.disown_ObjectFactory(self)
        return weakref.proxy(self)

# Register ObjectFactory in _Core:
_Core.ObjectFactory_swigregister(ObjectFactory)
ObjectFactory_registerFactory = _Core.ObjectFactory_registerFactory
ObjectFactory_isRegistered = _Core.ObjectFactory_isRegistered

EXECUTE_OK = _Core.EXECUTE_OK

EXECUTE_FAILED = _Core.EXECUTE_FAILED

class ExecuteError(object):
    r"""Proxy of C++ Core::ExecuteError class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(ExecuteError self, DocObject obj, std::string const & m="") -> ExecuteError"""
        _Core.ExecuteError_swiginit(self, _Core.new_ExecuteError(*args))
    obj = property(_Core.ExecuteError_obj_get, _Core.ExecuteError_obj_set, doc=r"""obj : p.Core::DocObject""")
    msg = property(_Core.ExecuteError_msg_get, _Core.ExecuteError_msg_set, doc=r"""msg : std::string""")
    __swig_destroy__ = _Core.delete_ExecuteError

# Register ExecuteError in _Core:
_Core.ExecuteError_swigregister(ExecuteError)
class ExecuteContext(object):
    r"""Proxy of C++ Core::ExecuteContext class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, aMutex):
        r"""__init__(ExecuteContext self, QMutex & aMutex) -> ExecuteContext"""
        _Core.ExecuteContext_swiginit(self, _Core.new_ExecuteContext(aMutex))
    objects_with_errors = property(_Core.ExecuteContext_objects_with_errors_get, _Core.ExecuteContext_objects_with_errors_set, doc=r"""objects_with_errors : std::vector<(Core::ExecuteError,std::allocator<(Core::ExecuteError)>)>""")
    errorMsgPerObject = property(_Core.ExecuteContext_errorMsgPerObject_get, _Core.ExecuteContext_errorMsgPerObject_set, doc=r"""errorMsgPerObject : std::map<(p.Core::DocObject,std::vector<(std::string,std::allocator<(std::string)>)>,std::less<(p.Core::DocObject)>,std::allocator<(std::pair<(q(const).p.Core::DocObject,std::vector<(std::string,std::allocator<(std::string)>)>)>)>)>""")
    throwException_On_Error = property(_Core.ExecuteContext_throwException_On_Error_get, _Core.ExecuteContext_throwException_On_Error_set, doc=r"""throwException_On_Error : bool""")
    checkShape = property(_Core.ExecuteContext_checkShape_get, _Core.ExecuteContext_checkShape_set, doc=r"""checkShape : bool""")
    checkFacetedBrep = property(_Core.ExecuteContext_checkFacetedBrep_get, _Core.ExecuteContext_checkFacetedBrep_set, doc=r"""checkFacetedBrep : bool""")
    checkSliverFaces = property(_Core.ExecuteContext_checkSliverFaces_get, _Core.ExecuteContext_checkSliverFaces_set, doc=r"""checkSliverFaces : bool""")
    printErrorMessage = property(_Core.ExecuteContext_printErrorMessage_get, _Core.ExecuteContext_printErrorMessage_set, doc=r"""printErrorMessage : bool""")
    checkResultFromPolyToAcisConverter = property(_Core.ExecuteContext_checkResultFromPolyToAcisConverter_get, _Core.ExecuteContext_checkResultFromPolyToAcisConverter_set, doc=r"""checkResultFromPolyToAcisConverter : bool""")
    checkLevel = property(_Core.ExecuteContext_checkLevel_get, _Core.ExecuteContext_checkLevel_set, doc=r"""checkLevel : int""")
    _tolerance = property(_Core.ExecuteContext__tolerance_get, _Core.ExecuteContext__tolerance_set, doc=r"""_tolerance : double""")
    __swig_destroy__ = _Core.delete_ExecuteContext

# Register ExecuteContext in _Core:
_Core.ExecuteContext_swigregister(ExecuteContext)
class ExecObject(DocObject):
    r"""Proxy of C++ Core::ExecObject class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getClassTypeId = _swig_new_static_method(_Core.ExecObject_getClassTypeId)
    getTypeId = _swig_new_instance_method(_Core.ExecObject_getTypeId)
    setIfcNameAndID = _swig_new_static_method(_Core.ExecObject_setIfcNameAndID)
    init = _swig_new_static_method(_Core.ExecObject_init)
    create = _swig_new_static_method(_Core.ExecObject_create)
    lx_field_init = _swig_new_static_method(_Core.ExecObject_lx_field_init)
    getFieldData = _swig_new_instance_method(_Core.ExecObject_getFieldData)
    getParentFieldData = _swig_new_instance_method(_Core.ExecObject_getParentFieldData)
    execute = _swig_new_instance_method(_Core.ExecObject_execute)
    isExecutable = _swig_new_instance_method(_Core.ExecObject_isExecutable)
    skipExecution = _swig_new_instance_method(_Core.ExecObject_skipExecution)
    getOrderedLinks = _swig_new_static_method(_Core.ExecObject_getOrderedLinks)
    getLinks = _swig_new_static_method(_Core.ExecObject_getLinks)

    def __init__(self):
        r"""__init__(ExecObject self) -> ExecObject"""
        if self.__class__ == ExecObject:
            _self = None
        else:
            _self = self
        _Core.ExecObject_swiginit(self, _Core.new_ExecObject(_self, ))
    def __disown__(self):
        self.this.disown()
        _Core.disown_ExecObject(self)
        return weakref.proxy(self)
    onBeforeChangeProperty = _swig_new_instance_method(_Core.ExecObject_onBeforeChangeProperty)
    onChangedProperty = _swig_new_instance_method(_Core.ExecObject_onChangedProperty)
    restoreProperty = _swig_new_instance_method(_Core.ExecObject_restoreProperty)
    overrideTypeForCopyToDifferentType = _swig_new_instance_method(_Core.ExecObject_overrideTypeForCopyToDifferentType)

# Register ExecObject in _Core:
_Core.ExecObject_swigregister(ExecObject)
ExecObject_getClassTypeId = _Core.ExecObject_getClassTypeId
ExecObject_setIfcNameAndID = _Core.ExecObject_setIfcNameAndID
ExecObject_init = _Core.ExecObject_init
ExecObject_create = _Core.ExecObject_create
ExecObject_lx_field_init = _Core.ExecObject_lx_field_init
ExecObject_getOrderedLinks = _Core.ExecObject_getOrderedLinks
ExecObject_getLinks = _Core.ExecObject_getLinks

class Geometry(ExecObject):
    r"""Proxy of C++ Core::Geometry class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    getClassTypeId = _swig_new_static_method(_Core.Geometry_getClassTypeId)
    setIfcNameAndID = _swig_new_static_method(_Core.Geometry_setIfcNameAndID)
    init = _swig_new_static_method(_Core.Geometry_init)
    create = _swig_new_static_method(_Core.Geometry_create)
    __swig_destroy__ = _Core.delete_Geometry

# Register Geometry in _Core:
_Core.Geometry_swigregister(Geometry)
Geometry_getClassTypeId = _Core.Geometry_getClassTypeId
Geometry_setIfcNameAndID = _Core.Geometry_setIfcNameAndID
Geometry_init = _Core.Geometry_init
Geometry_create = _Core.Geometry_create

class PropertyValue(object):
    r"""Proxy of C++ Core::PropertyValue class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(PropertyValue self) -> PropertyValue
        __init__(PropertyValue self, std::string const & name, Type t, Variant v) -> PropertyValue
        """
        _Core.PropertyValue_swiginit(self, _Core.new_PropertyValue(*args))
    propertyName = property(_Core.PropertyValue_propertyName_get, _Core.PropertyValue_propertyName_set, doc=r"""propertyName : std::string""")
    propertyType = property(_Core.PropertyValue_propertyType_get, _Core.PropertyValue_propertyType_set, doc=r"""propertyType : Base::Type""")
    value = property(_Core.PropertyValue_value_get, _Core.PropertyValue_value_set, doc=r"""value : Core::Variant""")
    __swig_destroy__ = _Core.delete_PropertyValue

# Register PropertyValue in _Core:
_Core.PropertyValue_swigregister(PropertyValue)
class CStringHasher(object):
    r"""Proxy of C++ Core::CStringHasher class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __call__ = _swig_new_instance_method(_Core.CStringHasher___call__)

    def __init__(self):
        r"""__init__(CStringHasher self) -> CStringHasher"""
        _Core.CStringHasher_swiginit(self, _Core.new_CStringHasher())
    __swig_destroy__ = _Core.delete_CStringHasher

# Register CStringHasher in _Core:
_Core.CStringHasher_swigregister(CStringHasher)
class DynamicProperty(object):
    r"""Proxy of C++ Core::DynamicProperty class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(DynamicProperty self) -> DynamicProperty"""
        _Core.DynamicProperty_swiginit(self, _Core.new_DynamicProperty())
    __swig_destroy__ = _Core.delete_DynamicProperty
    getPropertyList = _swig_new_instance_method(_Core.DynamicProperty_getPropertyList)
    getPropertyMap = _swig_new_instance_method(_Core.DynamicProperty_getPropertyMap)
    getDynamicPropertyByName = _swig_new_instance_method(_Core.DynamicProperty_getDynamicPropertyByName)
    addDynamicProperty = _swig_new_instance_method(_Core.DynamicProperty_addDynamicProperty)
    addProperty = _swig_new_instance_method(_Core.DynamicProperty_addProperty)
    removeDynamicProperty = _swig_new_instance_method(_Core.DynamicProperty_removeDynamicProperty)
    removeProperty = _swig_new_instance_method(_Core.DynamicProperty_removeProperty)
    getDynamicPropertyNames = _swig_new_instance_method(_Core.DynamicProperty_getDynamicPropertyNames)
    getPropertyName = _swig_new_instance_method(_Core.DynamicProperty_getPropertyName)
    getPropertyType = _swig_new_instance_method(_Core.DynamicProperty_getPropertyType)
    getPropertyGroup = _swig_new_instance_method(_Core.DynamicProperty_getPropertyGroup)
    getPropertyDocumentation = _swig_new_instance_method(_Core.DynamicProperty_getPropertyDocumentation)
    clear = _swig_new_instance_method(_Core.DynamicProperty_clear)
    size = _swig_new_instance_method(_Core.DynamicProperty_size)
    save = _swig_new_instance_method(_Core.DynamicProperty_save)
    restore = _swig_new_instance_method(_Core.DynamicProperty_restore)

# Register DynamicProperty in _Core:
_Core.DynamicProperty_swigregister(DynamicProperty)
class UpdateInfo(object):
    r"""Proxy of C++ Core::UpdateInfo class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    server = property(_Core.UpdateInfo_server_get, _Core.UpdateInfo_server_set, doc=r"""server : QString""")
    backup_server = property(_Core.UpdateInfo_backup_server_get, _Core.UpdateInfo_backup_server_set, doc=r"""backup_server : std::vector<(QString,std::allocator<(QString)>)>""")
    login = property(_Core.UpdateInfo_login_get, _Core.UpdateInfo_login_set, doc=r"""login : QString""")
    password = property(_Core.UpdateInfo_password_get, _Core.UpdateInfo_password_set, doc=r"""password : QString""")
    path = property(_Core.UpdateInfo_path_get, _Core.UpdateInfo_path_set, doc=r"""path : QString""")
    fileName = property(_Core.UpdateInfo_fileName_get, _Core.UpdateInfo_fileName_set, doc=r"""fileName : p.q(const).char""")

    def __init__(self):
        r"""__init__(UpdateInfo self) -> UpdateInfo"""
        _Core.UpdateInfo_swiginit(self, _Core.new_UpdateInfo())
    __swig_destroy__ = _Core.delete_UpdateInfo

# Register UpdateInfo in _Core:
_Core.UpdateInfo_swigregister(UpdateInfo)
class WindowSettings(object):
    r"""Proxy of C++ Core::WindowSettings class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    width = property(_Core.WindowSettings_width_get, _Core.WindowSettings_width_set, doc=r"""width : int""")
    height = property(_Core.WindowSettings_height_get, _Core.WindowSettings_height_set, doc=r"""height : int""")
    x = property(_Core.WindowSettings_x_get, _Core.WindowSettings_x_set, doc=r"""x : int""")
    y = property(_Core.WindowSettings_y_get, _Core.WindowSettings_y_set, doc=r"""y : int""")
    fullscreen = property(_Core.WindowSettings_fullscreen_get, _Core.WindowSettings_fullscreen_set, doc=r"""fullscreen : bool""")

    def __init__(self):
        r"""__init__(WindowSettings self) -> WindowSettings"""
        _Core.WindowSettings_swiginit(self, _Core.new_WindowSettings())
    __swig_destroy__ = _Core.delete_WindowSettings

# Register WindowSettings in _Core:
_Core.WindowSettings_swigregister(WindowSettings)
class Settings(object):
    r"""Proxy of C++ Core::Settings class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    STANDARD = _Core.Settings_STANDARD
    
    OPENBUILT = _Core.Settings_OPENBUILT
    
    USER = _Core.Settings_USER
    
    USER_USP = _Core.Settings_USER_USP
    
    INTERNAL = _Core.Settings_INTERNAL
    
    SHOW = _Core.Settings_SHOW
    
    HIDE = _Core.Settings_HIDE
    
    ASK = _Core.Settings_ASK
    
    OLD_MODE = _Core.Settings_OLD_MODE
    
    NEW_MODE = _Core.Settings_NEW_MODE
    
    coarse = _Core.Settings_coarse
    
    medium_coarse = _Core.Settings_medium_coarse
    
    medium_fine = _Core.Settings_medium_fine
    
    fine = _Core.Settings_fine
    
    ownImpl = _Core.Settings_ownImpl
    
    facet_options_visualization = _Core.Settings_facet_options_visualization
    
    facet_options_precise = _Core.Settings_facet_options_precise
    
    facet_options_expert = _Core.Settings_facet_options_expert
    
    facet_global = _Core.Settings_facet_global
    
    ShapeCreationMode_Acis = _Core.Settings_ShapeCreationMode_Acis
    
    ShapeCreationMode_Mesh = _Core.Settings_ShapeCreationMode_Mesh
    
    ShapeCreationMode_Inventor = _Core.Settings_ShapeCreationMode_Inventor
    
    ShapeCreationMode_MeshOnlyForMultiGeo = _Core.Settings_ShapeCreationMode_MeshOnlyForMultiGeo
    
    MarkerResolution_Small = _Core.Settings_MarkerResolution_Small
    
    MarkerResolution_Large = _Core.Settings_MarkerResolution_Large
    
    MarkerResolution_Medium = _Core.Settings_MarkerResolution_Medium
    
    MarkerResolutionPolicy_Auto = _Core.Settings_MarkerResolutionPolicy_Auto
    
    MarkerResolutionPolicy_Manuall = _Core.Settings_MarkerResolutionPolicy_Manuall
    
    registerSettings = _swig_new_instance_method(_Core.Settings_registerSettings)
    unregisterSettings = _swig_new_instance_method(_Core.Settings_unregisterSettings)
    saveWindowSettings = _swig_new_instance_method(_Core.Settings_saveWindowSettings)
    loadWindowSettings = _swig_new_instance_method(_Core.Settings_loadWindowSettings)
    getDefaultIFCShapeCreationMode = _swig_new_instance_method(_Core.Settings_getDefaultIFCShapeCreationMode)
    setDefaultIFCShapeCreationMode = _swig_new_instance_method(_Core.Settings_setDefaultIFCShapeCreationMode)
    getMaximalIFCShapeRepresentationsForInventorImport = _swig_new_instance_method(_Core.Settings_getMaximalIFCShapeRepresentationsForInventorImport)
    saveString = _swig_new_instance_method(_Core.Settings_saveString)
    loadString = _swig_new_instance_method(_Core.Settings_loadString)
    saveDialogGeometry = _swig_new_instance_method(_Core.Settings_saveDialogGeometry)
    loadDialogGeometry = _swig_new_instance_method(_Core.Settings_loadDialogGeometry)
    saveTreeWidgetSettings = _swig_new_instance_method(_Core.Settings_saveTreeWidgetSettings)
    loadTreeWidgetSettings = _swig_new_instance_method(_Core.Settings_loadTreeWidgetSettings)
    saveSplitterSettings = _swig_new_instance_method(_Core.Settings_saveSplitterSettings)
    loadSplitterSettings = _swig_new_instance_method(_Core.Settings_loadSplitterSettings)
    savePieceListDialogSettings = _swig_new_instance_method(_Core.Settings_savePieceListDialogSettings)
    loadPieceListDialogSettings = _swig_new_instance_method(_Core.Settings_loadPieceListDialogSettings)
    saveIfcVersionDialogSettings = _swig_new_instance_method(_Core.Settings_saveIfcVersionDialogSettings)
    loadIfcVersionDialogSettings = _swig_new_instance_method(_Core.Settings_loadIfcVersionDialogSettings)
    saveIfcImportExceptions = _swig_new_instance_method(_Core.Settings_saveIfcImportExceptions)
    loadIfcImportExceptions = _swig_new_instance_method(_Core.Settings_loadIfcImportExceptions)
    saveProxyAuthentication = _swig_new_instance_method(_Core.Settings_saveProxyAuthentication)
    loadProxyAuthentication = _swig_new_instance_method(_Core.Settings_loadProxyAuthentication)
    saveLoadMaterialDlgSettings = _swig_new_instance_method(_Core.Settings_saveLoadMaterialDlgSettings)
    loadLoadMaterialDlgSettings = _swig_new_instance_method(_Core.Settings_loadLoadMaterialDlgSettings)
    saveExtrudedAreaDlgSettings = _swig_new_instance_method(_Core.Settings_saveExtrudedAreaDlgSettings)
    loadExtrudedAreaDlgSettings = _swig_new_instance_method(_Core.Settings_loadExtrudedAreaDlgSettings)
    saveVisibilityDialogSettings = _swig_new_instance_method(_Core.Settings_saveVisibilityDialogSettings)
    loadVisibilityDialogSettings = _swig_new_instance_method(_Core.Settings_loadVisibilityDialogSettings)
    getUserDefFKeys = _swig_new_instance_method(_Core.Settings_getUserDefFKeys)
    saveFKey = _swig_new_instance_method(_Core.Settings_saveFKey)
    loadFKeys = _swig_new_instance_method(_Core.Settings_loadFKeys)
    loadFKey = _swig_new_instance_method(_Core.Settings_loadFKey)
    saveScreenRecorderActive = _swig_new_instance_method(_Core.Settings_saveScreenRecorderActive)
    loadScreenRecorderActive = _swig_new_instance_method(_Core.Settings_loadScreenRecorderActive)
    saveScreenRecorderQualityProfile = _swig_new_instance_method(_Core.Settings_saveScreenRecorderQualityProfile)
    loadScreenRecorderQualityProfile = _swig_new_instance_method(_Core.Settings_loadScreenRecorderQualityProfile)
    saveScreenRecorderWindowSize = _swig_new_instance_method(_Core.Settings_saveScreenRecorderWindowSize)
    loadScreenRecorderWindowSize = _swig_new_instance_method(_Core.Settings_loadScreenRecorderWindowSize)
    saveCameraAnimationViewerSize = _swig_new_instance_method(_Core.Settings_saveCameraAnimationViewerSize)
    loadCameraAnimationViewerSize = _swig_new_instance_method(_Core.Settings_loadCameraAnimationViewerSize)
    saveScreenRecorderAskForVideoFileName = _swig_new_instance_method(_Core.Settings_saveScreenRecorderAskForVideoFileName)
    loadScreenRecorderAskForVideoFileName = _swig_new_instance_method(_Core.Settings_loadScreenRecorderAskForVideoFileName)
    saveScreenRecorderOversize = _swig_new_instance_method(_Core.Settings_saveScreenRecorderOversize)
    loadScreenRecorderOversize = _swig_new_instance_method(_Core.Settings_loadScreenRecorderOversize)
    saveScreenRecorderOversizeSize = _swig_new_instance_method(_Core.Settings_saveScreenRecorderOversizeSize)
    loadScreenRecorderOversizeSize = _swig_new_instance_method(_Core.Settings_loadScreenRecorderOversizeSize)
    saveScreenRecorderShowMenu = _swig_new_instance_method(_Core.Settings_saveScreenRecorderShowMenu)
    loadScreenRecorderShowMenu = _swig_new_instance_method(_Core.Settings_loadScreenRecorderShowMenu)
    saveScreenRecorderShowKeysAndMouse = _swig_new_instance_method(_Core.Settings_saveScreenRecorderShowKeysAndMouse)
    loadScreenRecorderShowKeysAndMouse = _swig_new_instance_method(_Core.Settings_loadScreenRecorderShowKeysAndMouse)
    saveScreenRecorderRecordSound = _swig_new_instance_method(_Core.Settings_saveScreenRecorderRecordSound)
    loadScreenRecorderRecordSound = _swig_new_instance_method(_Core.Settings_loadScreenRecorderRecordSound)
    saveScreenRecorderShowRedRectangle = _swig_new_instance_method(_Core.Settings_saveScreenRecorderShowRedRectangle)
    loadScreenRecorderShowRedRectangle = _swig_new_instance_method(_Core.Settings_loadScreenRecorderShowRedRectangle)
    saveScreenRecorderRecordEvents = _swig_new_instance_method(_Core.Settings_saveScreenRecorderRecordEvents)
    loadScreenRecorderRecordEvents = _swig_new_instance_method(_Core.Settings_loadScreenRecorderRecordEvents)
    saveScreenRecorderPlayEvents = _swig_new_instance_method(_Core.Settings_saveScreenRecorderPlayEvents)
    loadScreenRecorderPlayEvents = _swig_new_instance_method(_Core.Settings_loadScreenRecorderPlayEvents)
    saveWelcomeScreenVisible = _swig_new_instance_method(_Core.Settings_saveWelcomeScreenVisible)
    loadWelcomeScreenVisible = _swig_new_instance_method(_Core.Settings_loadWelcomeScreenVisible)
    saveNotificationDialogVisible = _swig_new_instance_method(_Core.Settings_saveNotificationDialogVisible)
    loadNotificationDialogVisible = _swig_new_instance_method(_Core.Settings_loadNotificationDialogVisible)
    isUserDebugWindowVisible = _swig_new_instance_method(_Core.Settings_isUserDebugWindowVisible)
    setUserDebugWindowVisible = _swig_new_instance_method(_Core.Settings_setUserDebugWindowVisible)
    saveFonts = _swig_new_instance_method(_Core.Settings_saveFonts)
    loadFonts = _swig_new_instance_method(_Core.Settings_loadFonts)
    saveUserSettings = _swig_new_instance_method(_Core.Settings_saveUserSettings)
    loadUserSettings = _swig_new_instance_method(_Core.Settings_loadUserSettings)
    setLastImportedFilePath = _swig_new_instance_method(_Core.Settings_setLastImportedFilePath)
    getLastImportedFilePath = _swig_new_instance_method(_Core.Settings_getLastImportedFilePath)
    setCurrentScriptFilePath = _swig_new_instance_method(_Core.Settings_setCurrentScriptFilePath)
    getCurrentScriptFilePath = _swig_new_instance_method(_Core.Settings_getCurrentScriptFilePath)
    setCurrentScriptId = _swig_new_instance_method(_Core.Settings_setCurrentScriptId)
    getCurrentScriptId = _swig_new_instance_method(_Core.Settings_getCurrentScriptId)
    setCurrentScriptInsertionPoint = _swig_new_instance_method(_Core.Settings_setCurrentScriptInsertionPoint)
    getCurrentScriptInsertionPoint = _swig_new_instance_method(_Core.Settings_getCurrentScriptInsertionPoint)
    setBuildingBlocksDir = _swig_new_instance_method(_Core.Settings_setBuildingBlocksDir)
    getBuildingBlocksDir = _swig_new_instance_method(_Core.Settings_getBuildingBlocksDir)
    setMaterialDir = _swig_new_instance_method(_Core.Settings_setMaterialDir)
    getMaterialDir = _swig_new_instance_method(_Core.Settings_getMaterialDir)
    setIconsDir = _swig_new_instance_method(_Core.Settings_setIconsDir)
    getIconsDir = _swig_new_instance_method(_Core.Settings_getIconsDir)
    saveLanguage = _swig_new_static_method(_Core.Settings_saveLanguage)
    loadLanguage = _swig_new_static_method(_Core.Settings_loadLanguage)
    enable_polgonoffset = _swig_new_instance_method(_Core.Settings_enable_polgonoffset)
    is_polgonoffset_enabled = _swig_new_instance_method(_Core.Settings_is_polgonoffset_enabled)
    getCatalogType = _swig_new_instance_method(_Core.Settings_getCatalogType)
    setCatalogType = _swig_new_instance_method(_Core.Settings_setCatalogType)
    setTest = _swig_new_instance_method(_Core.Settings_setTest)
    test = _swig_new_instance_method(_Core.Settings_test)
    developer = _swig_new_instance_method(_Core.Settings_developer)
    loadLccDataOnStartup = _swig_new_instance_method(_Core.Settings_loadLccDataOnStartup)
    setMacroRecorderActive = _swig_new_instance_method(_Core.Settings_setMacroRecorderActive)
    macroRecorderActive = _swig_new_instance_method(_Core.Settings_macroRecorderActive)
    setRotationStepForPropertyView = _swig_new_instance_method(_Core.Settings_setRotationStepForPropertyView)
    getRotationStepForPropertyView = _swig_new_instance_method(_Core.Settings_getRotationStepForPropertyView)
    saveRecentFiles = _swig_new_instance_method(_Core.Settings_saveRecentFiles)
    loadRecentFiles = _swig_new_instance_method(_Core.Settings_loadRecentFiles)
    getMaxRecentFiles = _swig_new_instance_method(_Core.Settings_getMaxRecentFiles)
    setMaxRecentFiles = _swig_new_instance_method(_Core.Settings_setMaxRecentFiles)
    getUserCatalogDirInCadworkCat = _swig_new_instance_method(_Core.Settings_getUserCatalogDirInCadworkCat)
    getUserCatalogDirInUserProfile = _swig_new_instance_method(_Core.Settings_getUserCatalogDirInUserProfile)
    getUserCatalogDir = _swig_new_instance_method(_Core.Settings_getUserCatalogDir)
    setUserCatalogDir = _swig_new_instance_method(_Core.Settings_setUserCatalogDir)
    getXdeeaExePath = _swig_new_instance_method(_Core.Settings_getXdeeaExePath)
    setXdeeaExePath = _swig_new_instance_method(_Core.Settings_setXdeeaExePath)
    getBackupDir = _swig_new_instance_method(_Core.Settings_getBackupDir)
    getNumberOfBackupFiles = _swig_new_instance_method(_Core.Settings_getNumberOfBackupFiles)
    getStandaloneNumberOfBackupFiles = _swig_new_instance_method(_Core.Settings_getStandaloneNumberOfBackupFiles)
    setNumberOfBackupFiles = _swig_new_instance_method(_Core.Settings_setNumberOfBackupFiles)
    getIntervalOfBackupFiles = _swig_new_instance_method(_Core.Settings_getIntervalOfBackupFiles)
    getStandaloneIntervalOfBackupFiles = _swig_new_instance_method(_Core.Settings_getStandaloneIntervalOfBackupFiles)
    setIntervalOfBackupFiles = _swig_new_instance_method(_Core.Settings_setIntervalOfBackupFiles)
    loadCodeProtectionFlags = _swig_new_instance_method(_Core.Settings_loadCodeProtectionFlags)
    getCodeProtectionFlags = _swig_new_instance_method(_Core.Settings_getCodeProtectionFlags)
    codeProtectionTest = _swig_new_instance_method(_Core.Settings_codeProtectionTest)
    getDisabledCodes = _swig_new_instance_method(_Core.Settings_getDisabledCodes)
    setDisabledCodes = _swig_new_instance_method(_Core.Settings_setDisabledCodes)
    getInstance = _swig_new_static_method(_Core.Settings_getInstance)
    init = _swig_new_instance_method(_Core.Settings_init)
    setSubProductID_Standard = _swig_new_instance_method(_Core.Settings_setSubProductID_Standard)
    setSubProductID_IfcUser = _swig_new_instance_method(_Core.Settings_setSubProductID_IfcUser)
    setSubProductID_Plugin = _swig_new_instance_method(_Core.Settings_setSubProductID_Plugin)
    isSubProductID_Standard = _swig_new_instance_method(_Core.Settings_isSubProductID_Standard)
    isSubProductID_IfcUser = _swig_new_instance_method(_Core.Settings_isSubProductID_IfcUser)
    isSubProductID_Plugin = _swig_new_instance_method(_Core.Settings_isSubProductID_Plugin)
    getSubProductIDAsString = _swig_new_instance_method(_Core.Settings_getSubProductIDAsString)
    getPluginDir = _swig_new_instance_method(_Core.Settings_getPluginDir)
    setPluginDir = _swig_new_instance_method(_Core.Settings_setPluginDir)
    getVersionFromCurrentExeDir = _swig_new_instance_method(_Core.Settings_getVersionFromCurrentExeDir)
    getCadworkDir = _swig_new_instance_method(_Core.Settings_getCadworkDir)
    getCadworkPclibDir = _swig_new_instance_method(_Core.Settings_getCadworkPclibDir)
    getCadworkCat = _swig_new_instance_method(_Core.Settings_getCadworkCat)
    getCadworkExeDir = _swig_new_instance_method(_Core.Settings_getCadworkExeDir)
    getCadworkUserprofile = _swig_new_instance_method(_Core.Settings_getCadworkUserprofile)
    getCadworkUserprofileWithVersion = _swig_new_instance_method(_Core.Settings_getCadworkUserprofileWithVersion)
    getCadworkClipboard = _swig_new_instance_method(_Core.Settings_getCadworkClipboard)
    getCadworkNumberOfBackupFiles = _swig_new_instance_method(_Core.Settings_getCadworkNumberOfBackupFiles)
    setCadworkNumberOfBackupFiles = _swig_new_instance_method(_Core.Settings_setCadworkNumberOfBackupFiles)
    getCadworkIntervalOfBackupFiles = _swig_new_instance_method(_Core.Settings_getCadworkIntervalOfBackupFiles)
    setCadworkIntervalOfBackupFiles = _swig_new_instance_method(_Core.Settings_setCadworkIntervalOfBackupFiles)
    isCadwork3dInstalled = _swig_new_instance_method(_Core.Settings_isCadwork3dInstalled)
    getPath2TestDocuments = _swig_new_instance_method(_Core.Settings_getPath2TestDocuments)
    getBackgroundColor = _swig_new_instance_method(_Core.Settings_getBackgroundColor)
    setBackgroundColor = _swig_new_instance_method(_Core.Settings_setBackgroundColor)
    getGroundPlateColor = _swig_new_instance_method(_Core.Settings_getGroundPlateColor)
    setGroundPlateColor = _swig_new_instance_method(_Core.Settings_setGroundPlateColor)
    setOpenFileDir = _swig_new_instance_method(_Core.Settings_setOpenFileDir)
    getOpenFileDir = _swig_new_instance_method(_Core.Settings_getOpenFileDir)
    getOriginalWorkingDir = _swig_new_instance_method(_Core.Settings_getOriginalWorkingDir)
    setTextureOpenFileDir = _swig_new_instance_method(_Core.Settings_setTextureOpenFileDir)
    getTextureOpenFileDir = _swig_new_instance_method(_Core.Settings_getTextureOpenFileDir)
    setCutOptions = _swig_new_instance_method(_Core.Settings_setCutOptions)
    getCutOptions = _swig_new_instance_method(_Core.Settings_getCutOptions)
    getCodeProtectionInfo = _swig_new_instance_method(_Core.Settings_getCodeProtectionInfo)
    getClientNr = _swig_new_instance_method(_Core.Settings_getClientNr)
    getClientCountry = _swig_new_instance_method(_Core.Settings_getClientCountry)
    getCodeProtectionNodeName = _swig_new_instance_method(_Core.Settings_getCodeProtectionNodeName)
    setModulePreference = _swig_new_instance_method(_Core.Settings_setModulePreference)
    getModulePreference = _swig_new_instance_method(_Core.Settings_getModulePreference)
    setViewAnimation = _swig_new_instance_method(_Core.Settings_setViewAnimation)
    getViewAnimation = _swig_new_instance_method(_Core.Settings_getViewAnimation)
    setShowScaleHandles = _swig_new_instance_method(_Core.Settings_setShowScaleHandles)
    getShowScaleHandles = _swig_new_instance_method(_Core.Settings_getShowScaleHandles)
    setEnableZBufferPDFHack = _swig_new_instance_method(_Core.Settings_setEnableZBufferPDFHack)
    getEnableZBufferPDFHack = _swig_new_instance_method(_Core.Settings_getEnableZBufferPDFHack)
    setTexturesAllFaces = _swig_new_instance_method(_Core.Settings_setTexturesAllFaces)
    getTexturesAllFaces = _swig_new_instance_method(_Core.Settings_getTexturesAllFaces)
    setShowConsole = _swig_new_instance_method(_Core.Settings_setShowConsole)
    getShowConsole = _swig_new_instance_method(_Core.Settings_getShowConsole)
    setWithDebugger = _swig_new_instance_method(_Core.Settings_setWithDebugger)
    getWithDebugger = _swig_new_instance_method(_Core.Settings_getWithDebugger)
    setStyleSheetName = _swig_new_instance_method(_Core.Settings_setStyleSheetName)
    getStyleSheetName = _swig_new_instance_method(_Core.Settings_getStyleSheetName)
    loadStyleSheet = _swig_new_instance_method(_Core.Settings_loadStyleSheet)
    getOpenLxVersionString = _swig_new_instance_method(_Core.Settings_getOpenLxVersionString)
    setOpenLxVersionString = _swig_new_instance_method(_Core.Settings_setOpenLxVersionString)
    canUseAcis = _swig_new_instance_method(_Core.Settings_canUseAcis)
    setForceWoodUser = _swig_new_instance_method(_Core.Settings_setForceWoodUser)
    getForceWoodUser = _swig_new_instance_method(_Core.Settings_getForceWoodUser)
    getWoodUser_OnlyForInit = _swig_new_instance_method(_Core.Settings_getWoodUser_OnlyForInit)
    setWoodUser = _swig_new_instance_method(_Core.Settings_setWoodUser)
    getWoodUser = _swig_new_instance_method(_Core.Settings_getWoodUser)
    setOpenBuiltUser = _swig_new_instance_method(_Core.Settings_setOpenBuiltUser)
    getOpenBuiltUser = _swig_new_instance_method(_Core.Settings_getOpenBuiltUser)
    setIfcUser = _swig_new_instance_method(_Core.Settings_setIfcUser)
    getIfcUser = _swig_new_instance_method(_Core.Settings_getIfcUser)
    setIfcViewerFile = _swig_new_instance_method(_Core.Settings_setIfcViewerFile)
    getIfcViewerFile = _swig_new_instance_method(_Core.Settings_getIfcViewerFile)
    setIfcSaveDiretory = _swig_new_instance_method(_Core.Settings_setIfcSaveDiretory)
    getIfcSaveDiretory = _swig_new_instance_method(_Core.Settings_getIfcSaveDiretory)
    setIfcUseInitFile = _swig_new_instance_method(_Core.Settings_setIfcUseInitFile)
    getIfcUseInitFile = _swig_new_instance_method(_Core.Settings_getIfcUseInitFile)
    getDefaultInitFile = _swig_new_instance_method(_Core.Settings_getDefaultInitFile)
    isImportFromCadWorkBimViewer = _swig_new_instance_method(_Core.Settings_isImportFromCadWorkBimViewer)
    setDebugUser = _swig_new_instance_method(_Core.Settings_setDebugUser)
    getDebugUser = _swig_new_instance_method(_Core.Settings_getDebugUser)
    isConceptionUserByDefault = _swig_new_instance_method(_Core.Settings_isConceptionUserByDefault)
    isConceptionUser = _swig_new_instance_method(_Core.Settings_isConceptionUser)
    setConceptionUser = _swig_new_instance_method(_Core.Settings_setConceptionUser)
    setDownloadPdbFilesAndDebugLinks = _swig_new_instance_method(_Core.Settings_setDownloadPdbFilesAndDebugLinks)
    getDownloadPdbFilesAndDebugLinks = _swig_new_instance_method(_Core.Settings_getDownloadPdbFilesAndDebugLinks)
    setAcisPartEnabled = _swig_new_instance_method(_Core.Settings_setAcisPartEnabled)
    getAcisPartEnabled = _swig_new_instance_method(_Core.Settings_getAcisPartEnabled)
    setLODEnabled = _swig_new_instance_method(_Core.Settings_setLODEnabled)
    getLODEnabled = _swig_new_instance_method(_Core.Settings_getLODEnabled)
    saveIntegratedL2DLayoutState = _swig_new_instance_method(_Core.Settings_saveIntegratedL2DLayoutState)
    loadIntegratedL2DLayoutState = _swig_new_instance_method(_Core.Settings_loadIntegratedL2DLayoutState)
    setShowTextures = _swig_new_instance_method(_Core.Settings_setShowTextures)
    getShowTextures = _swig_new_instance_method(_Core.Settings_getShowTextures)
    setShowImageTextures = _swig_new_instance_method(_Core.Settings_setShowImageTextures)
    getShowImageTextures = _swig_new_instance_method(_Core.Settings_getShowImageTextures)
    setShowComponentTypeTextures = _swig_new_instance_method(_Core.Settings_setShowComponentTypeTextures)
    getShowComponentTypeTextures = _swig_new_instance_method(_Core.Settings_getShowComponentTypeTextures)
    set_HPK_UseRain = _swig_new_instance_method(_Core.Settings_set_HPK_UseRain)
    get_HPK_UseRain = _swig_new_instance_method(_Core.Settings_get_HPK_UseRain)
    setCalculateViewprovider = _swig_new_instance_method(_Core.Settings_setCalculateViewprovider)
    getCalculateViewprovider = _swig_new_instance_method(_Core.Settings_getCalculateViewprovider)
    setAlternativeLookupPath = _swig_new_instance_method(_Core.Settings_setAlternativeLookupPath)
    getAlternativeLookupPath = _swig_new_instance_method(_Core.Settings_getAlternativeLookupPath)
    getLexo2DName = _swig_new_instance_method(_Core.Settings_getLexo2DName)
    setLogLevel = _swig_new_instance_method(_Core.Settings_setLogLevel)
    getLogLevel = _swig_new_instance_method(_Core.Settings_getLogLevel)
    getAcisVersion = _swig_new_instance_method(_Core.Settings_getAcisVersion)
    setAcisVersion = _swig_new_instance_method(_Core.Settings_setAcisVersion)
    setRenderWireframe = _swig_new_instance_method(_Core.Settings_setRenderWireframe)
    getRenderWireframe = _swig_new_instance_method(_Core.Settings_getRenderWireframe)
    setRenderFacets = _swig_new_instance_method(_Core.Settings_setRenderFacets)
    getRenderFacets = _swig_new_instance_method(_Core.Settings_getRenderFacets)
    getSnapMode = _swig_new_instance_method(_Core.Settings_getSnapMode)
    setSnapMode = _swig_new_instance_method(_Core.Settings_setSnapMode)
    setUngroupMode = _swig_new_instance_method(_Core.Settings_setUngroupMode)
    getUngroupMode = _swig_new_instance_method(_Core.Settings_getUngroupMode)
    setMultiGeoUngroupMode = _swig_new_instance_method(_Core.Settings_setMultiGeoUngroupMode)
    getMultiGeoUngroupMode = _swig_new_instance_method(_Core.Settings_getMultiGeoUngroupMode)
    setShaderMultisampling = _swig_new_instance_method(_Core.Settings_setShaderMultisampling)
    getShaderMultisampling = _swig_new_instance_method(_Core.Settings_getShaderMultisampling)
    setAllowMultiViewOnStart = _swig_new_instance_method(_Core.Settings_setAllowMultiViewOnStart)
    getAllowMultiViewOnStart = _swig_new_instance_method(_Core.Settings_getAllowMultiViewOnStart)
    getDebugMessageCounter = _swig_new_instance_method(_Core.Settings_getDebugMessageCounter)
    resetDebugMessageCounter = _swig_new_instance_method(_Core.Settings_resetDebugMessageCounter)
    incrementDebugMessageCounter = _swig_new_instance_method(_Core.Settings_incrementDebugMessageCounter)
    setAcisSaveEntityTextMode = _swig_new_instance_method(_Core.Settings_setAcisSaveEntityTextMode)
    getAcisSaveEntityTextMode = _swig_new_instance_method(_Core.Settings_getAcisSaveEntityTextMode)
    setShapeTessellationQuality = _swig_new_instance_method(_Core.Settings_setShapeTessellationQuality)
    getShapeTessellationQuality = _swig_new_instance_method(_Core.Settings_getShapeTessellationQuality)
    set3dzExportCutOpenings = _swig_new_instance_method(_Core.Settings_set3dzExportCutOpenings)
    get3dzExportCutOpenings = _swig_new_instance_method(_Core.Settings_get3dzExportCutOpenings)
    setShowLayerNumber = _swig_new_instance_method(_Core.Settings_setShowLayerNumber)
    getShowLayerNumber = _swig_new_instance_method(_Core.Settings_getShowLayerNumber)
    setShowComponentTypeNumber = _swig_new_instance_method(_Core.Settings_setShowComponentTypeNumber)
    getShowComponentTypeNumber = _swig_new_instance_method(_Core.Settings_getShowComponentTypeNumber)
    setBeamBothEndsSame = _swig_new_instance_method(_Core.Settings_setBeamBothEndsSame)
    getBeamBothEndsSame = _swig_new_instance_method(_Core.Settings_getBeamBothEndsSame)
    setCadworkStyle = _swig_new_instance_method(_Core.Settings_setCadworkStyle)
    getCadworkStyle = _swig_new_instance_method(_Core.Settings_getCadworkStyle)
    setOSGMode = _swig_new_instance_method(_Core.Settings_setOSGMode)
    getOSGMode = _swig_new_instance_method(_Core.Settings_getOSGMode)
    setCombinedAcisSaveMode = _swig_new_instance_method(_Core.Settings_setCombinedAcisSaveMode)
    getCombinedAcisSaveMode = _swig_new_instance_method(_Core.Settings_getCombinedAcisSaveMode)
    setIFCFastMode = _swig_new_instance_method(_Core.Settings_setIFCFastMode)
    getIFCFastMode = _swig_new_instance_method(_Core.Settings_getIFCFastMode)
    setGlobalViewerScopeWireframeDrawStyle = _swig_new_instance_method(_Core.Settings_setGlobalViewerScopeWireframeDrawStyle)
    getGlobalViewerScopeWireframeDrawStyle = _swig_new_instance_method(_Core.Settings_getGlobalViewerScopeWireframeDrawStyle)
    setUseThreads = _swig_new_instance_method(_Core.Settings_setUseThreads)
    getUseThreads = _swig_new_instance_method(_Core.Settings_getUseThreads)
    setIVExportSelectedFilter = _swig_new_instance_method(_Core.Settings_setIVExportSelectedFilter)
    getIVExportSelectedFilter = _swig_new_instance_method(_Core.Settings_getIVExportSelectedFilter)
    setRunningFromLexocad = _swig_new_instance_method(_Core.Settings_setRunningFromLexocad)
    getRunningFromLexocad = _swig_new_instance_method(_Core.Settings_getRunningFromLexocad)
    setFastRenderMode = _swig_new_instance_method(_Core.Settings_setFastRenderMode)
    getFastRenderMode = _swig_new_instance_method(_Core.Settings_getFastRenderMode)
    getCheckShapesOnRecompute = _swig_new_instance_method(_Core.Settings_getCheckShapesOnRecompute)
    setCheckShapesOnRecompute = _swig_new_instance_method(_Core.Settings_setCheckShapesOnRecompute)
    getCheckSliverFacesOnRecompute = _swig_new_instance_method(_Core.Settings_getCheckSliverFacesOnRecompute)
    setCheckSliverFacesOnRecompute = _swig_new_instance_method(_Core.Settings_setCheckSliverFacesOnRecompute)
    getCheckFacetedBrepOnRecompute = _swig_new_instance_method(_Core.Settings_getCheckFacetedBrepOnRecompute)
    setCheckFacetedBrepOnRecompute = _swig_new_instance_method(_Core.Settings_setCheckFacetedBrepOnRecompute)
    getPointCloudMode = _swig_new_instance_method(_Core.Settings_getPointCloudMode)
    setPointCloudMode = _swig_new_instance_method(_Core.Settings_setPointCloudMode)
    getPointCloudPointPicking = _swig_new_instance_method(_Core.Settings_getPointCloudPointPicking)
    setPointCloudPointPicking = _swig_new_instance_method(_Core.Settings_setPointCloudPointPicking)
    getPointCloudPointSelection = _swig_new_instance_method(_Core.Settings_getPointCloudPointSelection)
    setPointCloudPointSelection = _swig_new_instance_method(_Core.Settings_setPointCloudPointSelection)
    getPointCloudDynamicPointSize = _swig_new_instance_method(_Core.Settings_getPointCloudDynamicPointSize)
    setPointCloudDynamicPointSize = _swig_new_instance_method(_Core.Settings_setPointCloudDynamicPointSize)
    getPointCloudChunkSelectionEnabled = _swig_new_instance_method(_Core.Settings_getPointCloudChunkSelectionEnabled)
    setPointCloudChunkSelectionEnabled = _swig_new_instance_method(_Core.Settings_setPointCloudChunkSelectionEnabled)
    getPointCoarseLOD = _swig_new_instance_method(_Core.Settings_getPointCoarseLOD)
    setPointCoarseLOD = _swig_new_instance_method(_Core.Settings_setPointCoarseLOD)
    setCreateMiniDumpOnCrash = _swig_new_instance_method(_Core.Settings_setCreateMiniDumpOnCrash)
    getCreateMiniDumpOnCrash = _swig_new_instance_method(_Core.Settings_getCreateMiniDumpOnCrash)
    setSoSeparatorCachingEnabled = _swig_new_instance_method(_Core.Settings_setSoSeparatorCachingEnabled)
    getSoSeparatorCachingEnabled = _swig_new_instance_method(_Core.Settings_getSoSeparatorCachingEnabled)
    setSoSeparatorCachingEnabledSpecial = _swig_new_instance_method(_Core.Settings_setSoSeparatorCachingEnabledSpecial)
    getSoSeparatorCachingEnabledSpecial = _swig_new_instance_method(_Core.Settings_getSoSeparatorCachingEnabledSpecial)
    getPointCloudLODenabled = _swig_new_instance_method(_Core.Settings_getPointCloudLODenabled)
    setPointCloudLODenabled = _swig_new_instance_method(_Core.Settings_setPointCloudLODenabled)
    getShowPointCloudInSecondViewer = _swig_new_instance_method(_Core.Settings_getShowPointCloudInSecondViewer)
    setShowPointCloudInSecondViewer = _swig_new_instance_method(_Core.Settings_setShowPointCloudInSecondViewer)
    getSketcherMode = _swig_new_instance_method(_Core.Settings_getSketcherMode)
    setSketcherMode = _swig_new_instance_method(_Core.Settings_setSketcherMode)
    setViewerGeo = _swig_new_instance_method(_Core.Settings_setViewerGeo)
    getViewerGeo = _swig_new_instance_method(_Core.Settings_getViewerGeo)
    setLexocadCode = _swig_new_instance_method(_Core.Settings_setLexocadCode)
    getLexocadCode = _swig_new_instance_method(_Core.Settings_getLexocadCode)
    getStandalone = _swig_new_instance_method(_Core.Settings_getStandalone)
    setStandalone = _swig_new_instance_method(_Core.Settings_setStandalone)
    getStandaloneAppDataPath = _swig_new_instance_method(_Core.Settings_getStandaloneAppDataPath)
    getShowMeshOrientation = _swig_new_instance_method(_Core.Settings_getShowMeshOrientation)
    setShowMeshOrientation = _swig_new_instance_method(_Core.Settings_setShowMeshOrientation)
    setDefaultDoorPreset = _swig_new_instance_method(_Core.Settings_setDefaultDoorPreset)
    getDefaultDoorPreset = _swig_new_instance_method(_Core.Settings_getDefaultDoorPreset)
    setDefaultWindowPreset = _swig_new_instance_method(_Core.Settings_setDefaultWindowPreset)
    getDefaultWindowPreset = _swig_new_instance_method(_Core.Settings_getDefaultWindowPreset)
    setDefaultFrenchWindowPreset = _swig_new_instance_method(_Core.Settings_setDefaultFrenchWindowPreset)
    getDefaultFrenchWindowPreset = _swig_new_instance_method(_Core.Settings_getDefaultFrenchWindowPreset)
    setDefaultGarageDoorPreset = _swig_new_instance_method(_Core.Settings_setDefaultGarageDoorPreset)
    getDefaultGarageDoorPreset = _swig_new_instance_method(_Core.Settings_getDefaultGarageDoorPreset)
    getNewZooming = _swig_new_instance_method(_Core.Settings_getNewZooming)
    setNewZooming = _swig_new_instance_method(_Core.Settings_setNewZooming)
    getCoinShaderMode = _swig_new_instance_method(_Core.Settings_getCoinShaderMode)
    setCoinShaderMode = _swig_new_instance_method(_Core.Settings_setCoinShaderMode)
    getProfiling = _swig_new_instance_method(_Core.Settings_getProfiling)
    setProfiling = _swig_new_instance_method(_Core.Settings_setProfiling)
    getMeshCaching = _swig_new_instance_method(_Core.Settings_getMeshCaching)
    setMeshCaching = _swig_new_instance_method(_Core.Settings_setMeshCaching)
    getAcisMeshMultiThreating = _swig_new_instance_method(_Core.Settings_getAcisMeshMultiThreating)
    setAcisMeshMultiThreating = _swig_new_instance_method(_Core.Settings_setAcisMeshMultiThreating)
    getFastRenderBatchMaxVertexCount = _swig_new_instance_method(_Core.Settings_getFastRenderBatchMaxVertexCount)
    setFastRenderBatchMaxVertexCount = _swig_new_instance_method(_Core.Settings_setFastRenderBatchMaxVertexCount)
    getFastRenderEnableEdges = _swig_new_instance_method(_Core.Settings_getFastRenderEnableEdges)
    setFastRenderEnableEdges = _swig_new_instance_method(_Core.Settings_setFastRenderEnableEdges)
    getSaveRestoreIfcModelWithDocument = _swig_new_instance_method(_Core.Settings_getSaveRestoreIfcModelWithDocument)
    setSaveRestoreIfcModelWithDocument = _swig_new_instance_method(_Core.Settings_setSaveRestoreIfcModelWithDocument)
    getFileSaveCopyWithNewGUIDs = _swig_new_instance_method(_Core.Settings_getFileSaveCopyWithNewGUIDs)
    setFileSaveCopyWithNewGUIDs = _swig_new_instance_method(_Core.Settings_setFileSaveCopyWithNewGUIDs)
    getMaterialViewSmallIcons = _swig_new_instance_method(_Core.Settings_getMaterialViewSmallIcons)
    setMaterialViewSmallIcons = _swig_new_instance_method(_Core.Settings_setMaterialViewSmallIcons)
    getOpenMaterialDlgSmallIcons = _swig_new_instance_method(_Core.Settings_getOpenMaterialDlgSmallIcons)
    setOpenMaterialDlgSmallIcons = _swig_new_instance_method(_Core.Settings_setOpenMaterialDlgSmallIcons)
    getLODMinimalPointCount = _swig_new_instance_method(_Core.Settings_getLODMinimalPointCount)
    setLODMinimalPointCount = _swig_new_instance_method(_Core.Settings_setLODMinimalPointCount)
    setAcisMeshShapeEnabled = _swig_new_instance_method(_Core.Settings_setAcisMeshShapeEnabled)
    getAcisMeshShapeEnabled = _swig_new_instance_method(_Core.Settings_getAcisMeshShapeEnabled)
    setShowPreviewSurfaceForVerticalView = _swig_new_instance_method(_Core.Settings_setShowPreviewSurfaceForVerticalView)
    getShowPreviewSurfaceForVerticalView = _swig_new_instance_method(_Core.Settings_getShowPreviewSurfaceForVerticalView)
    setDeepDebug = _swig_new_instance_method(_Core.Settings_setDeepDebug)
    getDeepDebug = _swig_new_instance_method(_Core.Settings_getDeepDebug)
    setAllowMemoryIsLowMsg = _swig_new_instance_method(_Core.Settings_setAllowMemoryIsLowMsg)
    getAllowMemoryIsLowMsg = _swig_new_instance_method(_Core.Settings_getAllowMemoryIsLowMsg)
    getCadwork3dDir = _swig_new_instance_method(_Core.Settings_getCadwork3dDir)
    getCadwork2dvDir = _swig_new_instance_method(_Core.Settings_getCadwork2dvDir)
    setWallSolveWarning = _swig_new_instance_method(_Core.Settings_setWallSolveWarning)
    getWallSolveWarning = _swig_new_instance_method(_Core.Settings_getWallSolveWarning)
    riSelectedDevice = _swig_new_instance_method(_Core.Settings_riSelectedDevice)
    riSetSelectedDevice = _swig_new_instance_method(_Core.Settings_riSetSelectedDevice)
    isVulkanRenderingEnabled = _swig_new_instance_method(_Core.Settings_isVulkanRenderingEnabled)
    isHoopsRenderingEnabled = _swig_new_instance_method(_Core.Settings_isHoopsRenderingEnabled)
    riTestScene = _swig_new_instance_method(_Core.Settings_riTestScene)
    disabledLog = _swig_new_instance_method(_Core.Settings_disabledLog)
    setNewViewProviderUpdate = _swig_new_instance_method(_Core.Settings_setNewViewProviderUpdate)
    getNewViewProviderUpdate = _swig_new_instance_method(_Core.Settings_getNewViewProviderUpdate)
    setVisibilityIconHas3States = _swig_new_instance_method(_Core.Settings_setVisibilityIconHas3States)
    getVisibilityIconHas3States = _swig_new_instance_method(_Core.Settings_getVisibilityIconHas3States)
    setSaveDialogGeometryInRegistry = _swig_new_instance_method(_Core.Settings_setSaveDialogGeometryInRegistry)
    getSaveDialogGeometryInRegistry = _swig_new_instance_method(_Core.Settings_getSaveDialogGeometryInRegistry)
    getMetalShapeSelectionFlags = _swig_new_instance_method(_Core.Settings_getMetalShapeSelectionFlags)
    setMetalShapeSelectionFlags = _swig_new_instance_method(_Core.Settings_setMetalShapeSelectionFlags)
    isWoodConstructionUser = _swig_new_instance_method(_Core.Settings_isWoodConstructionUser)
    isInternalCadworkUser = _swig_new_instance_method(_Core.Settings_isInternalCadworkUser)
    getMinimalModernOpenGLVersion = _swig_new_instance_method(_Core.Settings_getMinimalModernOpenGLVersion)
    setObjExportUnprotected = _swig_new_instance_method(_Core.Settings_setObjExportUnprotected)
    isObjExportUnprotected = _swig_new_instance_method(_Core.Settings_isObjExportUnprotected)
    getRealLineThicknessMode = _swig_new_instance_method(_Core.Settings_getRealLineThicknessMode)
    setRealLineThicknessMode = _swig_new_instance_method(_Core.Settings_setRealLineThicknessMode)
    getRealLineThicknessModeTrsf = _swig_new_instance_method(_Core.Settings_getRealLineThicknessModeTrsf)
    setRealLineThicknessModeTrsf = _swig_new_instance_method(_Core.Settings_setRealLineThicknessModeTrsf)
    getLxElementTypeIdentifier = _swig_new_instance_method(_Core.Settings_getLxElementTypeIdentifier)
    getDisplayName = _swig_new_instance_method(_Core.Settings_getDisplayName)
    checkResultFromPolyToAcisConverter = _swig_new_instance_method(_Core.Settings_checkResultFromPolyToAcisConverter)
    setCheckResultFromPolyToAcisConverter = _swig_new_instance_method(_Core.Settings_setCheckResultFromPolyToAcisConverter)
    allowQuadroCard = _swig_new_instance_method(_Core.Settings_allowQuadroCard)
    getUpdateInfo = _swig_new_instance_method(_Core.Settings_getUpdateInfo)
    getUpdateInfos = _swig_new_instance_method(_Core.Settings_getUpdateInfos)
    getUpdateSetting = _swig_new_instance_method(_Core.Settings_getUpdateSetting)
    setDrawLocalCoordinateSystem = _swig_new_instance_method(_Core.Settings_setDrawLocalCoordinateSystem)
    getDrawLocalCoordinateSystem = _swig_new_instance_method(_Core.Settings_getDrawLocalCoordinateSystem)
    setConfiguratorDefaultExternalSource = _swig_new_instance_method(_Core.Settings_setConfiguratorDefaultExternalSource)
    getConfiguratorDefaultExternalSource = _swig_new_instance_method(_Core.Settings_getConfiguratorDefaultExternalSource)
    setMarkerResolution = _swig_new_instance_method(_Core.Settings_setMarkerResolution)
    getMarkerResolution = _swig_new_instance_method(_Core.Settings_getMarkerResolution)
    setMarkerResolutionPolicy = _swig_new_instance_method(_Core.Settings_setMarkerResolutionPolicy)
    getMarkerResolutionPolicy = _swig_new_instance_method(_Core.Settings_getMarkerResolutionPolicy)
    getPickRadius = _swig_new_instance_method(_Core.Settings_getPickRadius)
    getPickRadiusVerticesOnly = _swig_new_instance_method(_Core.Settings_getPickRadiusVerticesOnly)
    setPickRadiusVerticesOnly = _swig_new_instance_method(_Core.Settings_setPickRadiusVerticesOnly)
    isPickRadiusVerticesOnly = _swig_new_instance_method(_Core.Settings_isPickRadiusVerticesOnly)
    set4KMointorOrGreater = _swig_new_instance_method(_Core.Settings_set4KMointorOrGreater)
    setHighDPIMonitor = _swig_new_instance_method(_Core.Settings_setHighDPIMonitor)
    setScreenSize = _swig_new_instance_method(_Core.Settings_setScreenSize)
    getLODLevel_MidRes = _swig_new_instance_method(_Core.Settings_getLODLevel_MidRes)
    getLODLevel_LowRes = _swig_new_instance_method(_Core.Settings_getLODLevel_LowRes)
    getLODLevel_VoidRes = _swig_new_instance_method(_Core.Settings_getLODLevel_VoidRes)
    isEdgePointPicking = _swig_new_instance_method(_Core.Settings_isEdgePointPicking)
    setEdgePointPicking = _swig_new_instance_method(_Core.Settings_setEdgePointPicking)
    isGridPointPicking = _swig_new_instance_method(_Core.Settings_isGridPointPicking)
    setGridPointPicking = _swig_new_instance_method(_Core.Settings_setGridPointPicking)
    isMidPointPicking = _swig_new_instance_method(_Core.Settings_isMidPointPicking)
    setMidPointPicking = _swig_new_instance_method(_Core.Settings_setMidPointPicking)
    isIntersectionPointPicking = _swig_new_instance_method(_Core.Settings_isIntersectionPointPicking)
    setIntersectionPointPicking = _swig_new_instance_method(_Core.Settings_setIntersectionPointPicking)
    isUnitTestingEnabled = _swig_new_instance_method(_Core.Settings_isUnitTestingEnabled)
    enableUnitTesting = _swig_new_instance_method(_Core.Settings_enableUnitTesting)
    isDefectLinksCheckBoxEnabled = _swig_new_instance_method(_Core.Settings_isDefectLinksCheckBoxEnabled)
    enableDefectLinksCheckBox = _swig_new_instance_method(_Core.Settings_enableDefectLinksCheckBox)
    isDefectLinksMessageEnabled = _swig_new_instance_method(_Core.Settings_isDefectLinksMessageEnabled)
    enableDefectLinksMessage = _swig_new_instance_method(_Core.Settings_enableDefectLinksMessage)
    getAllowAutoSequencer = _swig_new_instance_method(_Core.Settings_getAllowAutoSequencer)
    setAllowAutoSequencer = _swig_new_instance_method(_Core.Settings_setAllowAutoSequencer)
    getAllowPelicanMultithreading = _swig_new_instance_method(_Core.Settings_getAllowPelicanMultithreading)
    setAllowPelicanMultithreading = _swig_new_instance_method(_Core.Settings_setAllowPelicanMultithreading)
    getCustomBimTeamOrigin = _swig_new_instance_method(_Core.Settings_getCustomBimTeamOrigin)
    setCustomBimTeamOrigin = _swig_new_instance_method(_Core.Settings_setCustomBimTeamOrigin)
    isPublicVersion = _swig_new_static_method(_Core.Settings_isPublicVersion)
    getActiveChannel = _swig_new_instance_method(_Core.Settings_getActiveChannel)
    setActiveChannel = _swig_new_instance_method(_Core.Settings_setActiveChannel)
    hasPreviousVersionToSave = _swig_new_instance_method(_Core.Settings_hasPreviousVersionToSave)
    getPreviousVersionToSave = _swig_new_static_method(_Core.Settings_getPreviousVersionToSave)
    showNewVersionMessage = _swig_new_static_method(_Core.Settings_showNewVersionMessage)
    isInternalUser = _swig_new_instance_method(_Core.Settings_isInternalUser)
    isUpdateCI_Start = _swig_new_static_method(_Core.Settings_isUpdateCI_Start)
    isUpdateConceptionUser = _swig_new_static_method(_Core.Settings_isUpdateConceptionUser)
    isUpdateLexocadUser = _swig_new_static_method(_Core.Settings_isUpdateLexocadUser)
    lexocadIsIncadworkDir = _swig_new_instance_method(_Core.Settings_lexocadIsIncadworkDir)
    get_CI_Start_FilePath = _swig_new_instance_method(_Core.Settings_get_CI_Start_FilePath)
    getShowAlwaysBoundingBoxOnSelection = _swig_new_instance_method(_Core.Settings_getShowAlwaysBoundingBoxOnSelection)
    setShowAlwaysBoundingBoxOnSelection = _swig_new_instance_method(_Core.Settings_setShowAlwaysBoundingBoxOnSelection)
    setSeveralOneVisibilityMode = _swig_new_instance_method(_Core.Settings_setSeveralOneVisibilityMode)
    getSeveralOneVisibilityMode = _swig_new_instance_method(_Core.Settings_getSeveralOneVisibilityMode)
    isCadworkBimViewerEnabled = _swig_new_instance_method(_Core.Settings_isCadworkBimViewerEnabled)
    setCadworkBimViewerEnabled = _swig_new_instance_method(_Core.Settings_setCadworkBimViewerEnabled)
    getSizeForHugeBoundingBox = _swig_new_instance_method(_Core.Settings_getSizeForHugeBoundingBox)
    selectionTimeOutInSeconds = _swig_new_instance_method(_Core.Settings_selectionTimeOutInSeconds)
    setSelectionTimeOutInSeconds = _swig_new_instance_method(_Core.Settings_setSelectionTimeOutInSeconds)
    setDebugViewer = _swig_new_instance_method(_Core.Settings_setDebugViewer)
    isDebugViewer = _swig_new_instance_method(_Core.Settings_isDebugViewer)
    isDebugAnyViewer = _swig_new_instance_method(_Core.Settings_isDebugAnyViewer)
    setDebugReport = _swig_new_instance_method(_Core.Settings_setDebugReport)
    isDebugReport = _swig_new_instance_method(_Core.Settings_isDebugReport)
    setDebugMovie = _swig_new_instance_method(_Core.Settings_setDebugMovie)
    isDebugMovie = _swig_new_instance_method(_Core.Settings_isDebugMovie)
    isBackupMovie = _swig_new_instance_method(_Core.Settings_isBackupMovie)
    setBackupMovie = _swig_new_instance_method(_Core.Settings_setBackupMovie)
    setShowFloorPlanSubElementIn3d = _swig_new_instance_method(_Core.Settings_setShowFloorPlanSubElementIn3d)
    showFloorPlanSubElementIn3d = _swig_new_instance_method(_Core.Settings_showFloorPlanSubElementIn3d)
    isWebLoginEnabled = _swig_new_instance_method(_Core.Settings_isWebLoginEnabled)
    setWebLoginEnabled = _swig_new_instance_method(_Core.Settings_setWebLoginEnabled)
    hasCadworkWebloginRegistryEntry = _swig_new_instance_method(_Core.Settings_hasCadworkWebloginRegistryEntry)
    setOrcreateCadworkWebloginRegistryEntry = _swig_new_instance_method(_Core.Settings_setOrcreateCadworkWebloginRegistryEntry)
    isWebloginInCadworkRegistryEnabled = _swig_new_instance_method(_Core.Settings_isWebloginInCadworkRegistryEnabled)
    setLccButtonVisible = _swig_new_instance_method(_Core.Settings_setLccButtonVisible)
    isLccButtonVisible = _swig_new_instance_method(_Core.Settings_isLccButtonVisible)
    setNewsBell = _swig_new_instance_method(_Core.Settings_setNewsBell)
    getNewsBell = _swig_new_instance_method(_Core.Settings_getNewsBell)
    globalTranslationDraggerEnabled = _swig_new_instance_method(_Core.Settings_globalTranslationDraggerEnabled)
    setGlobalTranslationDraggerEnabled = _swig_new_instance_method(_Core.Settings_setGlobalTranslationDraggerEnabled)
    globalScaleDraggerEnabled = _swig_new_instance_method(_Core.Settings_globalScaleDraggerEnabled)
    setGlobalScaleDraggerEnabled = _swig_new_instance_method(_Core.Settings_setGlobalScaleDraggerEnabled)
    isHideIn2dViewerEnabled = _swig_new_instance_method(_Core.Settings_isHideIn2dViewerEnabled)
    setHideIn2dViewerEnabled = _swig_new_instance_method(_Core.Settings_setHideIn2dViewerEnabled)
    isHideIn3dViewerEnabled = _swig_new_instance_method(_Core.Settings_isHideIn3dViewerEnabled)
    setHideIn3dViewerEnabled = _swig_new_instance_method(_Core.Settings_setHideIn3dViewerEnabled)

# Register Settings in _Core:
_Core.Settings_swigregister(Settings)
Settings_saveLanguage = _Core.Settings_saveLanguage
Settings_loadLanguage = _Core.Settings_loadLanguage
Settings_getInstance = _Core.Settings_getInstance
Settings_isPublicVersion = _Core.Settings_isPublicVersion
Settings_getPreviousVersionToSave = _Core.Settings_getPreviousVersionToSave
Settings_showNewVersionMessage = _Core.Settings_showNewVersionMessage
Settings_isUpdateCI_Start = _Core.Settings_isUpdateCI_Start
Settings_isUpdateConceptionUser = _Core.Settings_isUpdateConceptionUser
Settings_isUpdateLexocadUser = _Core.Settings_isUpdateLexocadUser

class Solvable(object):
    r"""Proxy of C++ Core::Solvable class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Core.delete_Solvable
    solve = _swig_new_instance_method(_Core.Solvable_solve)
    setIsSolvingEnabled = _swig_new_instance_method(_Core.Solvable_setIsSolvingEnabled)
    isSolvingEnabled = _swig_new_instance_method(_Core.Solvable_isSolvingEnabled)
    mustBeSolved = _swig_new_instance_method(_Core.Solvable_mustBeSolved)
    setMustBeSolved = _swig_new_instance_method(_Core.Solvable_setMustBeSolved)

# Register Solvable in _Core:
_Core.Solvable_swigregister(Solvable)
class SysInfo(object):
    r"""Proxy of C++ Core::SysInfo class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getUserName = _swig_new_static_method(_Core.SysInfo_getUserName)
    getComputerName = _swig_new_static_method(_Core.SysInfo_getComputerName)

    def __init__(self):
        r"""__init__(SysInfo self) -> SysInfo"""
        _Core.SysInfo_swiginit(self, _Core.new_SysInfo())
    __swig_destroy__ = _Core.delete_SysInfo

# Register SysInfo in _Core:
_Core.SysInfo_swigregister(SysInfo)
SysInfo_getUserName = _Core.SysInfo_getUserName
SysInfo_getComputerName = _Core.SysInfo_getComputerName

class Variant(object):
    r"""Proxy of C++ Core::Variant class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Undefined = _Core.Variant_Undefined
    
    UInt8 = _Core.Variant_UInt8
    
    UInt8List = _Core.Variant_UInt8List
    
    UInt32 = _Core.Variant_UInt32
    
    UInt64 = _Core.Variant_UInt64
    
    Integer = _Core.Variant_Integer
    
    IntegerList = _Core.Variant_IntegerList
    
    Long = _Core.Variant_Long
    
    Double = _Core.Variant_Double
    
    StdString = _Core.Variant_StdString
    
    String = _Core.Variant_String
    
    Bool = _Core.Variant_Bool
    
    StdStringList = _Core.Variant_StdStringList
    
    StringList = _Core.Variant_StringList
    
    MaterialList = _Core.Variant_MaterialList
    
    Texture2List = _Core.Variant_Texture2List
    
    Color = _Core.Variant_Color
    
    MColor = _Core.Variant_MColor
    
    ColorList = _Core.Variant_ColorList
    
    MColorList = _Core.Variant_MColorList
    
    Texture2 = _Core.Variant_Texture2
    
    Texture2Transform = _Core.Variant_Texture2Transform
    
    TextureCoordinateMapping = _Core.Variant_TextureCoordinateMapping
    
    TextureCoordinateFunction = _Core.Variant_TextureCoordinateFunction
    
    DrawStyle = _Core.Variant_DrawStyle
    
    Arrowheads = _Core.Variant_Arrowheads
    
    Material = _Core.Variant_Material
    
    Object = _Core.Variant_Object
    
    ObjectSet = _Core.Variant_ObjectSet
    
    ObjectVector = _Core.Variant_ObjectVector
    
    Font = _Core.Variant_Font
    
    DateTime = _Core.Variant_DateTime
    
    DateTimeList = _Core.Variant_DateTimeList
    
    SearchSettings = _Core.Variant_SearchSettings
    
    SearchSettingsVector = _Core.Variant_SearchSettingsVector
    
    Axis1 = _Core.Variant_Axis1
    
    Axis2 = _Core.Variant_Axis2
    
    Axis2d = _Core.Variant_Axis2d
    
    Axis22d = _Core.Variant_Axis22d
    
    Placement = _Core.Variant_Placement
    
    Point = _Core.Variant_Point
    
    Point2d = _Core.Variant_Point2d
    
    Vector = _Core.Variant_Vector
    
    Direction = _Core.Variant_Direction
    
    Transform = _Core.Variant_Transform
    
    GTransform = _Core.Variant_GTransform
    
    VectorList = _Core.Variant_VectorList
    
    PointList = _Core.Variant_PointList
    
    Point2dList = _Core.Variant_Point2dList
    
    Axis2List = _Core.Variant_Axis2List
    
    Md5 = _Core.Variant_Md5
    
    BrepData = _Core.Variant_BrepData
    
    BrepDataSet = _Core.Variant_BrepDataSet
    
    Shape = _Core.Variant_Shape
    
    ConstShape = _Core.Variant_ConstShape
    
    RealList = _Core.Variant_RealList
    
    L2D_Placement = _Core.Variant_L2D_Placement
    
    ListPointList = _Core.Variant_ListPointList
    
    CompoundPlaneAngle = _Core.Variant_CompoundPlaneAngle
    
    VariantList = _Core.Variant_VariantList
    
    GUID = _Core.Variant_GUID
    
    ImportData = _Core.Variant_ImportData
    
    IfcEntity = _Core.Variant_IfcEntity
    
    LinkList = _Core.Variant_LinkList
    
    SketcherConstraintList = _Core.Variant_SketcherConstraintList
    
    GeomGeometryList = _Core.Variant_GeomGeometryList
    
    CoreDocument = _Core.Variant_CoreDocument
    
    TypeMap = _Core.Variant_TypeMap
    
    StringMap = _Core.Variant_StringMap
    
    String2DoubleMap = _Core.Variant_String2DoubleMap
    
    String2IntegerSetMap = _Core.Variant_String2IntegerSetMap
    
    ListVectorList = _Core.Variant_ListVectorList
    
    ListIntegerList = _Core.Variant_ListIntegerList
    
    ListRealList = _Core.Variant_ListRealList
    
    StringTable = _Core.Variant_StringTable
    
    KeyValueMap = _Core.Variant_KeyValueMap
    
    User = _Core.Variant_User
    

    def __init__(self, *args):
        r"""
        __init__(Variant self) -> Variant
        __init__(Variant self, Variant _in) -> Variant
        __init__(Variant self, int i) -> Variant
        __init__(Variant self, long i) -> Variant
        __init__(Variant self, uint8_t i) -> Variant
        __init__(Variant self, uint32_t i) -> Variant
        __init__(Variant self, uint64_t i) -> Variant
        __init__(Variant self, double d) -> Variant
        __init__(Variant self, wchar_t const * s) -> Variant
        __init__(Variant self, String s) -> Variant
        __init__(Variant self, bool b) -> Variant
        __init__(Variant self, Color c) -> Variant
        __init__(Variant self, MColor c) -> Variant
        __init__(Variant self, vector_Color cl) -> Variant
        __init__(Variant self, std::vector< Base::MColor,std::allocator< Base::MColor > > const & cl) -> Variant
        __init__(Variant self, OglMaterial m) -> Variant
        __init__(Variant self, Texture2 t) -> Variant
        __init__(Variant self, Texture2Transform ttf) -> Variant
        __init__(Variant self, TextureCoordinateMapping tcm) -> Variant
        __init__(Variant self, TextureCoordinateFunction tcf) -> Variant
        __init__(Variant self, DrawStyle ds) -> Variant
        __init__(Variant self, Arrowheads ah) -> Variant
        __init__(Variant self, list_CString sl) -> Variant
        __init__(Variant self, std::list< Base::String,std::allocator< Base::String > > const & sl) -> Variant
        __init__(Variant self, std::map< int,Draw::OglMaterial,std::less< int >,std::allocator< std::pair< int const,Draw::OglMaterial > > > const & ml) -> Variant
        __init__(Variant self, std::map< int,Draw::Texture2,std::less< int >,std::allocator< std::pair< int const,Draw::Texture2 > > > const & tl) -> Variant
        __init__(Variant self, Ax1 ax1) -> Variant
        __init__(Variant self, Ax2 ax2) -> Variant
        __init__(Variant self, Ax2d ax2d) -> Variant
        __init__(Variant self, Ax22d ax22d) -> Variant
        __init__(Variant self, DocObject o) -> Variant
        __init__(Variant self, std::unordered_set< Core::DocObject *,std::hash< Core::DocObject * >,std::equal_to< Core::DocObject * >,std::allocator< Core::DocObject * > > const & oset) -> Variant
        __init__(Variant self, vector_DocObject objects) -> Variant
        __init__(Variant self, Pnt p) -> Variant
        __init__(Variant self, Pnt2d p) -> Variant
        __init__(Variant self, Vec v) -> Variant
        __init__(Variant self, Dir dir) -> Variant
        __init__(Variant self, Trsf t) -> Variant
        __init__(Variant self, GTrsf t) -> Variant
        __init__(Variant self, vector_int ilist) -> Variant
        __init__(Variant self, std::vector< uint8_t,std::allocator< uint8_t > > const & ilist) -> Variant
        __init__(Variant self, std::list< Geom::Vec,std::allocator< Geom::Vec > > const & vlist) -> Variant
        __init__(Variant self, vector_Pnt plist) -> Variant
        __init__(Variant self, vector_Pnt2d plist) -> Variant
        __init__(Variant self, std::list< Geom::Ax2,std::allocator< Geom::Ax2 > > const & vlist) -> Variant
        __init__(Variant self, MD5 const & v) -> Variant
        __init__(Variant self, pBrepData data) -> Variant
        __init__(Variant self, std::vector< pBrepData,std::allocator< pBrepData > > const & dataSet) -> Variant
        __init__(Variant self, pShape shape) -> Variant
        __init__(Variant self, pConstShape shape) -> Variant
        __init__(Variant self, vector_double value) -> Variant
        __init__(Variant self, std::list< std::list< Geom::Pnt,std::allocator< Geom::Pnt > >,std::allocator< std::list< Geom::Pnt,std::allocator< Geom::Pnt > > > > const & the_list) -> Variant
        __init__(Variant self, std::list< std::list< Geom::Vec,std::allocator< Geom::Vec > >,std::allocator< std::list< Geom::Vec,std::allocator< Geom::Vec > > > > const & the_list) -> Variant
        __init__(Variant self, std::list< std::list< int,std::allocator< int > >,std::allocator< std::list< int,std::allocator< int > > > > const & the_list) -> Variant
        __init__(Variant self, std::list< std::list< double,std::allocator< double > >,std::allocator< std::list< double,std::allocator< double > > > > const & the_list) -> Variant
        __init__(Variant self, CompoundPlaneAngle compangle) -> Variant
        __init__(Variant self, std::vector< Core::Variant,std::allocator< Core::Variant > > const & varList) -> Variant
        __init__(Variant self, GlobalId id) -> Variant
        __init__(Variant self, std::shared_ptr< Core::ImportMessageDataType > const aData) -> Variant
        __init__(Variant self, std::shared_ptr< LxIfcBase::LxIfcEntity > const aEntity) -> Variant
        __init__(Variant self, list_DocObject list) -> Variant
        __init__(Variant self, std::vector< Geom::Geometry *,std::allocator< Geom::Geometry * > > const & aValue) -> Variant
        __init__(Variant self, CoreDocument value) -> Variant
        __init__(Variant self, std::map< Base::Type,Core::DocObject *,std::less< Base::Type >,std::allocator< std::pair< Base::Type const,Core::DocObject * > > > const & typeMap) -> Variant
        __init__(Variant self, std::map< Base::String,Base::String,std::less< Base::String >,std::allocator< std::pair< Base::String const,Base::String > > > const & stringMap) -> Variant
        __init__(Variant self, std::map< Base::String,double,std::less< Base::String >,std::allocator< std::pair< Base::String const,double > > > const & string2doubleMap) -> Variant
        __init__(Variant self, std::map< Base::String,std::set< int,std::less< int >,std::allocator< int > >,std::less< Base::String >,std::allocator< std::pair< Base::String const,std::set< int,std::less< int >,std::allocator< int > > > > > const & string2integerSetMap) -> Variant
        __init__(Variant self, std::vector< std::vector< Base::String,std::allocator< Base::String > >,std::allocator< std::vector< Base::String,std::allocator< Base::String > > > > const & stringTable) -> Variant
        __init__(Variant self, std::map< Base::String,Core::Variant,std::less< Base::String >,std::allocator< std::pair< Base::String const,Core::Variant > > > const & keyValueMap) -> Variant
        """
        _Core.Variant_swiginit(self, _Core.new_Variant(*args))
    __swig_destroy__ = _Core.delete_Variant
    __eq__ = _swig_new_instance_method(_Core.Variant___eq__)
    __ne__ = _swig_new_instance_method(_Core.Variant___ne__)
    getType = _swig_new_instance_method(_Core.Variant_getType)
    getUserType = _swig_new_instance_method(_Core.Variant_getUserType)
    canConvert = _swig_new_instance_method(_Core.Variant_canConvert)
    toUInt64 = _swig_new_instance_method(_Core.Variant_toUInt64)
    toUInt32 = _swig_new_instance_method(_Core.Variant_toUInt32)
    toUInt8 = _swig_new_instance_method(_Core.Variant_toUInt8)
    toInteger = _swig_new_instance_method(_Core.Variant_toInteger)
    toLong = _swig_new_instance_method(_Core.Variant_toLong)
    toStdString = _swig_new_instance_method(_Core.Variant_toStdString)
    toString = _swig_new_instance_method(_Core.Variant_toString)
    toDouble = _swig_new_instance_method(_Core.Variant_toDouble)
    toBool = _swig_new_instance_method(_Core.Variant_toBool)
    toColor = _swig_new_instance_method(_Core.Variant_toColor)
    toColorList = _swig_new_instance_method(_Core.Variant_toColorList)
    toMaterial = _swig_new_instance_method(_Core.Variant_toMaterial)
    toTexture2 = _swig_new_instance_method(_Core.Variant_toTexture2)
    toTexture2Transform = _swig_new_instance_method(_Core.Variant_toTexture2Transform)
    toTextureCoordinateMapping = _swig_new_instance_method(_Core.Variant_toTextureCoordinateMapping)
    toTextureCoordinateFunction = _swig_new_instance_method(_Core.Variant_toTextureCoordinateFunction)
    toDrawStyle = _swig_new_instance_method(_Core.Variant_toDrawStyle)
    toArrowheads = _swig_new_instance_method(_Core.Variant_toArrowheads)
    toStdStringList = _swig_new_instance_method(_Core.Variant_toStdStringList)
    toStringList = _swig_new_instance_method(_Core.Variant_toStringList)
    toMaterialList = _swig_new_instance_method(_Core.Variant_toMaterialList)
    toTexture2List = _swig_new_instance_method(_Core.Variant_toTexture2List)
    toAxis1 = _swig_new_instance_method(_Core.Variant_toAxis1)
    toAxis2 = _swig_new_instance_method(_Core.Variant_toAxis2)
    toAxis2d = _swig_new_instance_method(_Core.Variant_toAxis2d)
    toAxis22d = _swig_new_instance_method(_Core.Variant_toAxis22d)
    toObject = _swig_new_instance_method(_Core.Variant_toObject)
    toCoreDocument = _swig_new_instance_method(_Core.Variant_toCoreDocument)
    toObjectSet = _swig_new_instance_method(_Core.Variant_toObjectSet)
    toObjectVector = _swig_new_instance_method(_Core.Variant_toObjectVector)
    toPoint = _swig_new_instance_method(_Core.Variant_toPoint)
    toPoint2d = _swig_new_instance_method(_Core.Variant_toPoint2d)
    toVector = _swig_new_instance_method(_Core.Variant_toVector)
    toDirection = _swig_new_instance_method(_Core.Variant_toDirection)
    toTransform = _swig_new_instance_method(_Core.Variant_toTransform)
    toGTransform = _swig_new_instance_method(_Core.Variant_toGTransform)
    toVectorList = _swig_new_instance_method(_Core.Variant_toVectorList)
    toPointList = _swig_new_instance_method(_Core.Variant_toPointList)
    toPoint2dList = _swig_new_instance_method(_Core.Variant_toPoint2dList)
    toAxis2List = _swig_new_instance_method(_Core.Variant_toAxis2List)
    toMD5 = _swig_new_instance_method(_Core.Variant_toMD5)
    toBrepData = _swig_new_instance_method(_Core.Variant_toBrepData)
    toBrepDataSet = _swig_new_instance_method(_Core.Variant_toBrepDataSet)
    toIntegerList = _swig_new_instance_method(_Core.Variant_toIntegerList)
    toUInt8List = _swig_new_instance_method(_Core.Variant_toUInt8List)
    toRealList = _swig_new_instance_method(_Core.Variant_toRealList)
    toListPointList = _swig_new_instance_method(_Core.Variant_toListPointList)
    toListVectorList = _swig_new_instance_method(_Core.Variant_toListVectorList)
    toListIntegerList = _swig_new_instance_method(_Core.Variant_toListIntegerList)
    toListRealList = _swig_new_instance_method(_Core.Variant_toListRealList)
    toCompoundPlaneAngle = _swig_new_instance_method(_Core.Variant_toCompoundPlaneAngle)
    toVariantList = _swig_new_instance_method(_Core.Variant_toVariantList)
    toImportMessageDataType = _swig_new_instance_method(_Core.Variant_toImportMessageDataType)
    toIfcEntity = _swig_new_instance_method(_Core.Variant_toIfcEntity)
    toLinkList = _swig_new_instance_method(_Core.Variant_toLinkList)
    toGeomGeometryList = _swig_new_instance_method(_Core.Variant_toGeomGeometryList)
    toTypeMap = _swig_new_instance_method(_Core.Variant_toTypeMap)
    toStringMap = _swig_new_instance_method(_Core.Variant_toStringMap)
    toString2DoubleMap = _swig_new_instance_method(_Core.Variant_toString2DoubleMap)
    toString2IntegerSetMap = _swig_new_instance_method(_Core.Variant_toString2IntegerSetMap)
    toStringTable = _swig_new_instance_method(_Core.Variant_toStringTable)
    toKeyValueMap = _swig_new_instance_method(_Core.Variant_toKeyValueMap)
    getAsString = _swig_new_instance_method(_Core.Variant_getAsString)
    getTypeAsString = _swig_new_instance_method(_Core.Variant_getTypeAsString)
    hasValue = _swig_new_instance_method(_Core.Variant_hasValue)
    save = _swig_new_instance_method(_Core.Variant_save)
    restore = _swig_new_instance_method(_Core.Variant_restore)
    type = property(_Core.Variant_type_get, _Core.Variant_type_set, doc=r"""type : int""")
    data = property(_Core.Variant_data_get, _Core.Variant_data_set, doc=r"""data : std::any""")

# Register Variant in _Core:
_Core.Variant_swigregister(Variant)
class VariantHandler(object):
    r"""Proxy of C++ Core::VariantHandler class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    create = _swig_new_instance_method(_Core.VariantHandler_create)
    isEqual = _swig_new_instance_method(_Core.VariantHandler_isEqual)
    getType = _swig_new_instance_method(_Core.VariantHandler_getType)
    getAsString = _swig_new_instance_method(_Core.VariantHandler_getAsString)
    getVariantHandler = _swig_new_static_method(_Core.VariantHandler_getVariantHandler)
    registerVariantHandler = _swig_new_static_method(_Core.VariantHandler_registerVariantHandler)
    __swig_destroy__ = _Core.delete_VariantHandler

# Register VariantHandler in _Core:
_Core.VariantHandler_swigregister(VariantHandler)
VariantHandler_getVariantHandler = _Core.VariantHandler_getVariantHandler
VariantHandler_registerVariantHandler = _Core.VariantHandler_registerVariantHandler

class Command(object):
    r"""Proxy of C++ Core::Command class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Command self) -> Command"""
        if self.__class__ == Command:
            _self = None
        else:
            _self = self
        _Core.Command_swiginit(self, _Core.new_Command(_self, ))
    __swig_destroy__ = _Core.delete_Command
    redo = _swig_new_instance_method(_Core.Command_redo)
    undo = _swig_new_instance_method(_Core.Command_undo)
    getDescription = _swig_new_instance_method(_Core.Command_getDescription)
    setDescription = _swig_new_instance_method(_Core.Command_setDescription)
    setParameter = _swig_new_instance_method(_Core.Command_setParameter)
    getParameter = _swig_new_instance_method(_Core.Command_getParameter)
    getParameters = _swig_new_instance_method(_Core.Command_getParameters)
    setSilentMode = _swig_new_instance_method(_Core.Command_setSilentMode)
    isInSilentMode = _swig_new_instance_method(_Core.Command_isInSilentMode)
    setDoRecomputeInRedo = _swig_new_instance_method(_Core.Command_setDoRecomputeInRedo)
    setDoRecomputeInUndo = _swig_new_instance_method(_Core.Command_setDoRecomputeInUndo)
    getDoRecomputeInRedo = _swig_new_instance_method(_Core.Command_getDoRecomputeInRedo)
    getDoRecomputeInUndo = _swig_new_instance_method(_Core.Command_getDoRecomputeInUndo)
    setDone = _swig_new_instance_method(_Core.Command_setDone)
    isDone = _swig_new_instance_method(_Core.Command_isDone)
    ____deadVal = property(_Core.Command_____deadVal_get, _Core.Command_____deadVal_set, doc=r"""____deadVal : long""")
    def __disown__(self):
        self.this.disown()
        _Core.disown_Command(self)
        return weakref.proxy(self)

# Register Command in _Core:
_Core.Command_swigregister(Command)
class CommandFactory(object):
    r"""Proxy of C++ Core::CommandFactory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    CreatePublic = _swig_new_instance_method(_Core.CommandFactory_CreatePublic)

    def __init__(self):
        r"""__init__(CommandFactory self) -> CommandFactory"""
        _Core.CommandFactory_swiginit(self, _Core.new_CommandFactory())
    __swig_destroy__ = _Core.delete_CommandFactory

# Register CommandFactory in _Core:
_Core.CommandFactory_swigregister(CommandFactory)
class DoubleResult(object):
    r"""Proxy of C++ Core::DoubleResult class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    isNull = _swig_new_instance_method(_Core.DoubleResult_isNull)
    getValue = _swig_new_instance_method(_Core.DoubleResult_getValue)
    setValue = _swig_new_instance_method(_Core.DoubleResult_setValue)

    def __init__(self):
        r"""__init__(DoubleResult self) -> DoubleResult"""
        _Core.DoubleResult_swiginit(self, _Core.new_DoubleResult())
    __swig_destroy__ = _Core.delete_DoubleResult

# Register DoubleResult in _Core:
_Core.DoubleResult_swigregister(DoubleResult)
class IntegerResult(object):
    r"""Proxy of C++ Core::IntegerResult class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    isNull = _swig_new_instance_method(_Core.IntegerResult_isNull)
    getValue = _swig_new_instance_method(_Core.IntegerResult_getValue)
    setValue = _swig_new_instance_method(_Core.IntegerResult_setValue)

    def __init__(self):
        r"""__init__(IntegerResult self) -> IntegerResult"""
        _Core.IntegerResult_swiginit(self, _Core.new_IntegerResult())
    __swig_destroy__ = _Core.delete_IntegerResult

# Register IntegerResult in _Core:
_Core.IntegerResult_swigregister(IntegerResult)
class StringResult(object):
    r"""Proxy of C++ Core::StringResult class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    isNull = _swig_new_instance_method(_Core.StringResult_isNull)
    getValue = _swig_new_instance_method(_Core.StringResult_getValue)
    setValue = _swig_new_instance_method(_Core.StringResult_setValue)

    def __init__(self):
        r"""__init__(StringResult self) -> StringResult"""
        _Core.StringResult_swiginit(self, _Core.new_StringResult())
    __swig_destroy__ = _Core.delete_StringResult

# Register StringResult in _Core:
_Core.StringResult_swigregister(StringResult)
class PntResult(object):
    r"""Proxy of C++ Core::PntResult class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    isNull = _swig_new_instance_method(_Core.PntResult_isNull)
    getValue = _swig_new_instance_method(_Core.PntResult_getValue)
    setValue = _swig_new_instance_method(_Core.PntResult_setValue)

    def __init__(self):
        r"""__init__(PntResult self) -> PntResult"""
        _Core.PntResult_swiginit(self, _Core.new_PntResult())
    __swig_destroy__ = _Core.delete_PntResult

# Register PntResult in _Core:
_Core.PntResult_swigregister(PntResult)
class CdwkAttributeData(object):
    r"""Proxy of C++ Core::CdwkAttributeData class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _Core.delete_CdwkAttributeData
    BEAM = _Core.CdwkAttributeData_BEAM
    
    ROUND_BEAM = _Core.CdwkAttributeData_ROUND_BEAM
    
    PLATE = _Core.CdwkAttributeData_PLATE
    
    NODE = _Core.CdwkAttributeData_NODE
    
    BOLT = _Core.CdwkAttributeData_BOLT
    
    LINE = _Core.CdwkAttributeData_LINE
    
    SURFACE = _Core.CdwkAttributeData_SURFACE
    
    WALL = _Core.CdwkAttributeData_WALL
    
    OPENING = _Core.CdwkAttributeData_OPENING
    
    ROOF = _Core.CdwkAttributeData_ROOF
    
    FLOOR = _Core.CdwkAttributeData_FLOOR
    
    FASTENER = _Core.CdwkAttributeData_FASTENER
    
    OT_NONE = _Core.CdwkAttributeData_OT_NONE
    
    OT_RAFTER = _Core.CdwkAttributeData_OT_RAFTER
    
    OT_PURLIN = _Core.CdwkAttributeData_OT_PURLIN
    
    OT_JACKRAFTER = _Core.CdwkAttributeData_OT_JACKRAFTER
    
    OT_LOG = _Core.CdwkAttributeData_OT_LOG
    
    OT_PANEL = _Core.CdwkAttributeData_OT_PANEL
    
    OT_STUD = _Core.CdwkAttributeData_OT_STUD
    
    OT_TRUSS = _Core.CdwkAttributeData_OT_TRUSS
    
    OT_HIPVALLEY = _Core.CdwkAttributeData_OT_HIPVALLEY
    
    OT_USER1 = _Core.CdwkAttributeData_OT_USER1
    
    OT_USER2 = _Core.CdwkAttributeData_OT_USER2
    
    OT_USER3 = _Core.CdwkAttributeData_OT_USER3
    
    OT_USER4 = _Core.CdwkAttributeData_OT_USER4
    
    OT_USER5 = _Core.CdwkAttributeData_OT_USER5
    
    OT_STEP = _Core.CdwkAttributeData_OT_STEP
    
    OT_COVERMASSIVE = _Core.CdwkAttributeData_OT_COVERMASSIVE
    
    OT_COVERPANEL = _Core.CdwkAttributeData_OT_COVERPANEL
    
    OT_COVERLOG = _Core.CdwkAttributeData_OT_COVERLOG
    
    name = property(_Core.CdwkAttributeData_name_get, _Core.CdwkAttributeData_name_set, doc=r"""name : Base::String""")
    group = property(_Core.CdwkAttributeData_group_get, _Core.CdwkAttributeData_group_set, doc=r"""group : Base::String""")
    subgroup = property(_Core.CdwkAttributeData_subgroup_get, _Core.CdwkAttributeData_subgroup_set, doc=r"""subgroup : Base::String""")
    color = property(_Core.CdwkAttributeData_color_get, _Core.CdwkAttributeData_color_set, doc=r"""color : Base::Color""")
    lcs = property(_Core.CdwkAttributeData_lcs_get, _Core.CdwkAttributeData_lcs_set, doc=r"""lcs : Geom::Ax2""")
    element_type = property(_Core.CdwkAttributeData_element_type_get, _Core.CdwkAttributeData_element_type_set, doc=r"""element_type : Core::CdwkAttributeData::ElemType""")
    processing_type = property(_Core.CdwkAttributeData_processing_type_get, _Core.CdwkAttributeData_processing_type_set, doc=r"""processing_type : Core::CdwkAttributeData::OutputType""")
    supplement_drilling = property(_Core.CdwkAttributeData_supplement_drilling_get, _Core.CdwkAttributeData_supplement_drilling_set, doc=r"""supplement_drilling : double""")
    bolt_diameter = property(_Core.CdwkAttributeData_bolt_diameter_get, _Core.CdwkAttributeData_bolt_diameter_set, doc=r"""bolt_diameter : double""")
    length = property(_Core.CdwkAttributeData_length_get, _Core.CdwkAttributeData_length_set, doc=r"""length : double""")
    connectorHoleDiameter = property(_Core.CdwkAttributeData_connectorHoleDiameter_get, _Core.CdwkAttributeData_connectorHoleDiameter_set, doc=r"""connectorHoleDiameter : double""")
    connectorThreadLength = property(_Core.CdwkAttributeData_connectorThreadLength_get, _Core.CdwkAttributeData_connectorThreadLength_set, doc=r"""connectorThreadLength : double""")
    connectorSize = property(_Core.CdwkAttributeData_connectorSize_get, _Core.CdwkAttributeData_connectorSize_set, doc=r"""connectorSize : double""")
    buildingStoreyElevation = property(_Core.CdwkAttributeData_buildingStoreyElevation_get, _Core.CdwkAttributeData_buildingStoreyElevation_set, doc=r"""buildingStoreyElevation : double""")
    material_name = property(_Core.CdwkAttributeData_material_name_get, _Core.CdwkAttributeData_material_name_set, doc=r"""material_name : Base::String""")
    comment = property(_Core.CdwkAttributeData_comment_get, _Core.CdwkAttributeData_comment_set, doc=r"""comment : Base::String""")
    sku = property(_Core.CdwkAttributeData_sku_get, _Core.CdwkAttributeData_sku_set, doc=r"""sku : Base::String""")
    usertext_1 = property(_Core.CdwkAttributeData_usertext_1_get, _Core.CdwkAttributeData_usertext_1_set, doc=r"""usertext_1 : Base::String""")
    usertext_2 = property(_Core.CdwkAttributeData_usertext_2_get, _Core.CdwkAttributeData_usertext_2_set, doc=r"""usertext_2 : Base::String""")
    usertext_3 = property(_Core.CdwkAttributeData_usertext_3_get, _Core.CdwkAttributeData_usertext_3_set, doc=r"""usertext_3 : Base::String""")
    usertext_4 = property(_Core.CdwkAttributeData_usertext_4_get, _Core.CdwkAttributeData_usertext_4_set, doc=r"""usertext_4 : Base::String""")
    usertext_5 = property(_Core.CdwkAttributeData_usertext_5_get, _Core.CdwkAttributeData_usertext_5_set, doc=r"""usertext_5 : Base::String""")
    usertext_6 = property(_Core.CdwkAttributeData_usertext_6_get, _Core.CdwkAttributeData_usertext_6_set, doc=r"""usertext_6 : Base::String""")
    usertext_7 = property(_Core.CdwkAttributeData_usertext_7_get, _Core.CdwkAttributeData_usertext_7_set, doc=r"""usertext_7 : Base::String""")
    usertext_8 = property(_Core.CdwkAttributeData_usertext_8_get, _Core.CdwkAttributeData_usertext_8_set, doc=r"""usertext_8 : Base::String""")
    usertext_9 = property(_Core.CdwkAttributeData_usertext_9_get, _Core.CdwkAttributeData_usertext_9_set, doc=r"""usertext_9 : Base::String""")
    usertext_10 = property(_Core.CdwkAttributeData_usertext_10_get, _Core.CdwkAttributeData_usertext_10_set, doc=r"""usertext_10 : Base::String""")
    material_id = property(_Core.CdwkAttributeData_material_id_get, _Core.CdwkAttributeData_material_id_set, doc=r"""material_id : int""")
    production_nb = property(_Core.CdwkAttributeData_production_nb_get, _Core.CdwkAttributeData_production_nb_set, doc=r"""production_nb : int""")
    IfcGuid = property(_Core.CdwkAttributeData_IfcGuid_get, _Core.CdwkAttributeData_IfcGuid_set, doc=r"""IfcGuid : Base::GlobalId""")
    IfcBuilding = property(_Core.CdwkAttributeData_IfcBuilding_get, _Core.CdwkAttributeData_IfcBuilding_set, doc=r"""IfcBuilding : Base::String""")
    IfcBuildingStorey = property(_Core.CdwkAttributeData_IfcBuildingStorey_get, _Core.CdwkAttributeData_IfcBuildingStorey_set, doc=r"""IfcBuildingStorey : Base::String""")
    IfcBuildingElement = property(_Core.CdwkAttributeData_IfcBuildingElement_get, _Core.CdwkAttributeData_IfcBuildingElement_set, doc=r"""IfcBuildingElement : Base::String""")
    IfcConnectorItemType = property(_Core.CdwkAttributeData_IfcConnectorItemType_get, _Core.CdwkAttributeData_IfcConnectorItemType_set, doc=r"""IfcConnectorItemType : Base::String""")
    IfcLayer = property(_Core.CdwkAttributeData_IfcLayer_get, _Core.CdwkAttributeData_IfcLayer_set, doc=r"""IfcLayer : Base::String""")
    IfcEntityType = property(_Core.CdwkAttributeData_IfcEntityType_get, _Core.CdwkAttributeData_IfcEntityType_set, doc=r"""IfcEntityType : Base::String""")

    def __init__(self, *args):
        r"""
        __init__(CdwkAttributeData self) -> CdwkAttributeData
        __init__(CdwkAttributeData self, CdwkAttributeData other) -> CdwkAttributeData
        """
        _Core.CdwkAttributeData_swiginit(self, _Core.new_CdwkAttributeData(*args))
    assign = _swig_new_instance_method(_Core.CdwkAttributeData_assign)
    isEmpty = _swig_new_instance_method(_Core.CdwkAttributeData_isEmpty)

# Register CdwkAttributeData in _Core:
_Core.CdwkAttributeData_swigregister(CdwkAttributeData)
class SharedObject(object):
    r"""Proxy of C++ Core::SharedObject class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Core.delete_SharedObject

# Register SharedObject in _Core:
_Core.SharedObject_swigregister(SharedObject)
castToPropertyAxis1 = _Core.castToPropertyAxis1
castToPropertyAxis2 = _Core.castToPropertyAxis2
castToPropertyAxis22D = _Core.castToPropertyAxis22D
castToPropertyAxis2D = _Core.castToPropertyAxis2D
castToPropertyAxis2List = _Core.castToPropertyAxis2List
castToPropertyBackLinkBase = _Core.castToPropertyBackLinkBase
castToPropertyBackLinkSetBase = _Core.castToPropertyBackLinkSetBase
castToPropertyBoolean = _Core.castToPropertyBoolean
castToPropertyBrepData = _Core.castToPropertyBrepData
castToPropertyBrepDataSet = _Core.castToPropertyBrepDataSet
castToPropertyColor = _Core.castToPropertyColor
castToPropertyDirection = _Core.castToPropertyDirection
castToPropertyDrawStyle = _Core.castToPropertyDrawStyle
castToPropertyDynamicViscosity = _Core.castToPropertyDynamicViscosity
castToPropertyEmbeddedFile = _Core.castToPropertyEmbeddedFile
castToPropertyEnum = _Core.castToPropertyEnum
castToPropertyFile = _Core.castToPropertyFile
castToPropertyFont = _Core.castToPropertyFont
castToPropertyGTransform = _Core.castToPropertyGTransform
castToPropertyHeatingValue = _Core.castToPropertyHeatingValue
castToPropertyIndex = _Core.castToPropertyIndex
castToPropertyIndexList = _Core.castToPropertyIndexList
castToPropertyInteger = _Core.castToPropertyInteger
castToPropertyIonConcentration = _Core.castToPropertyIonConcentration
castToPropertyIsothermalMoistureCapacity = _Core.castToPropertyIsothermalMoistureCapacity
castToPropertyLength = _Core.castToPropertyLength
castToPropertyLengthOpt = _Core.castToPropertyLengthOpt
castToPropertyLinkBase = _Core.castToPropertyLinkBase
castToPropertyLinkList = _Core.castToPropertyLinkList
castToPropertyLinkSetBase = _Core.castToPropertyLinkSetBase
castToPropertyMassDensity = _Core.castToPropertyMassDensity
castToPropertyMD5 = _Core.castToPropertyMD5
castToPropertyModulusOfElasticity = _Core.castToPropertyModulusOfElasticity
castToPropertyMoistureDiffusivity = _Core.castToPropertyMoistureDiffusivity
castToPropertyMolecularWeight = _Core.castToPropertyMolecularWeight
castToPropertyMultiLineText = _Core.castToPropertyMultiLineText
castToPropertyNormalisedRatio = _Core.castToPropertyNormalisedRatio
castToPropertyNumberOfDecimals = _Core.castToPropertyNumberOfDecimals
castToPropertyPercent = _Core.castToPropertyPercent
castToPropertyPHMeasure = _Core.castToPropertyPHMeasure
castToPropertyPlaneAngle = _Core.castToPropertyPlaneAngle
castToPropertyPoint = _Core.castToPropertyPoint
castToPropertyPoint2d = _Core.castToPropertyPoint2d
castToPropertyPoint2dList = _Core.castToPropertyPoint2dList
castToPropertyPointList = _Core.castToPropertyPointList
castToPropertyPositiveLength = _Core.castToPropertyPositiveLength
castToPropertyPositiveRatio = _Core.castToPropertyPositiveRatio
castToPropertyPressure = _Core.castToPropertyPressure
castToPropertyRatio = _Core.castToPropertyRatio
castToPropertyReal = _Core.castToPropertyReal
castToPropertyRelaxation = _Core.castToPropertyRelaxation
castToPropertyRelaxationSet = _Core.castToPropertyRelaxationSet
castToPropertyScriptParam = _Core.castToPropertyScriptParam
castToPropertySpecificHeatCapacity = _Core.castToPropertySpecificHeatCapacity
castToPropertyString2DoubleMap = _Core.castToPropertyString2DoubleMap
castToPropertyText = _Core.castToPropertyText
castToPropertyTextList = _Core.castToPropertyTextList
castToPropertyTextMap = _Core.castToPropertyTextMap
castToPropertyTexture2 = _Core.castToPropertyTexture2
castToPropertyTexture2List = _Core.castToPropertyTexture2List
castToPropertyTexture2Transform = _Core.castToPropertyTexture2Transform
castToPropertyTextureCoordinateFunction = _Core.castToPropertyTextureCoordinateFunction
castToPropertyTextureCoordinateMapping = _Core.castToPropertyTextureCoordinateMapping
castToPropertyThermalConductivity = _Core.castToPropertyThermalConductivity
castToPropertyThermalExpansionCoefficient = _Core.castToPropertyThermalExpansionCoefficient
castToPropertyThermodynamicTemperature = _Core.castToPropertyThermodynamicTemperature
castToPropertyTransform = _Core.castToPropertyTransform
castToPropertyUser = _Core.castToPropertyUser
castToPropertyVaporPermeability = _Core.castToPropertyVaporPermeability
castToPropertyVector = _Core.castToPropertyVector
castToPropertyVectorList = _Core.castToPropertyVectorList
class list_DocObject(object):
    r"""Proxy of C++ std::list< Core::DocObject * > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_Core.list_DocObject_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_Core.list_DocObject___nonzero__)
    __bool__ = _swig_new_instance_method(_Core.list_DocObject___bool__)
    __len__ = _swig_new_instance_method(_Core.list_DocObject___len__)
    __getslice__ = _swig_new_instance_method(_Core.list_DocObject___getslice__)
    __setslice__ = _swig_new_instance_method(_Core.list_DocObject___setslice__)
    __delslice__ = _swig_new_instance_method(_Core.list_DocObject___delslice__)
    __delitem__ = _swig_new_instance_method(_Core.list_DocObject___delitem__)
    __getitem__ = _swig_new_instance_method(_Core.list_DocObject___getitem__)
    __setitem__ = _swig_new_instance_method(_Core.list_DocObject___setitem__)
    pop = _swig_new_instance_method(_Core.list_DocObject_pop)
    append = _swig_new_instance_method(_Core.list_DocObject_append)
    empty = _swig_new_instance_method(_Core.list_DocObject_empty)
    size = _swig_new_instance_method(_Core.list_DocObject_size)
    swap = _swig_new_instance_method(_Core.list_DocObject_swap)
    begin = _swig_new_instance_method(_Core.list_DocObject_begin)
    end = _swig_new_instance_method(_Core.list_DocObject_end)
    rbegin = _swig_new_instance_method(_Core.list_DocObject_rbegin)
    rend = _swig_new_instance_method(_Core.list_DocObject_rend)
    clear = _swig_new_instance_method(_Core.list_DocObject_clear)
    get_allocator = _swig_new_instance_method(_Core.list_DocObject_get_allocator)
    pop_back = _swig_new_instance_method(_Core.list_DocObject_pop_back)
    erase = _swig_new_instance_method(_Core.list_DocObject_erase)

    def __init__(self, *args):
        r"""
        __init__(list_DocObject self) -> list_DocObject
        __init__(list_DocObject self, list_DocObject other) -> list_DocObject
        __init__(list_DocObject self, std::list< Core::DocObject * >::size_type size) -> list_DocObject
        __init__(list_DocObject self, std::list< Core::DocObject * >::size_type size, DocObject value) -> list_DocObject
        """
        _Core.list_DocObject_swiginit(self, _Core.new_list_DocObject(*args))
    push_back = _swig_new_instance_method(_Core.list_DocObject_push_back)
    front = _swig_new_instance_method(_Core.list_DocObject_front)
    back = _swig_new_instance_method(_Core.list_DocObject_back)
    assign = _swig_new_instance_method(_Core.list_DocObject_assign)
    resize = _swig_new_instance_method(_Core.list_DocObject_resize)
    insert = _swig_new_instance_method(_Core.list_DocObject_insert)
    pop_front = _swig_new_instance_method(_Core.list_DocObject_pop_front)
    push_front = _swig_new_instance_method(_Core.list_DocObject_push_front)
    remove = _swig_new_instance_method(_Core.list_DocObject_remove)
    unique = _swig_new_instance_method(_Core.list_DocObject_unique)
    reverse = _swig_new_instance_method(_Core.list_DocObject_reverse)
    sort = _swig_new_instance_method(_Core.list_DocObject_sort)
    merge = _swig_new_instance_method(_Core.list_DocObject_merge)
    __swig_destroy__ = _Core.delete_list_DocObject

# Register list_DocObject in _Core:
_Core.list_DocObject_swigregister(list_DocObject)
class vector_DocObject(object):
    r"""Proxy of C++ std::vector< Core::DocObject * > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_Core.vector_DocObject_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_Core.vector_DocObject___nonzero__)
    __bool__ = _swig_new_instance_method(_Core.vector_DocObject___bool__)
    __len__ = _swig_new_instance_method(_Core.vector_DocObject___len__)
    __getslice__ = _swig_new_instance_method(_Core.vector_DocObject___getslice__)
    __setslice__ = _swig_new_instance_method(_Core.vector_DocObject___setslice__)
    __delslice__ = _swig_new_instance_method(_Core.vector_DocObject___delslice__)
    __delitem__ = _swig_new_instance_method(_Core.vector_DocObject___delitem__)
    __getitem__ = _swig_new_instance_method(_Core.vector_DocObject___getitem__)
    __setitem__ = _swig_new_instance_method(_Core.vector_DocObject___setitem__)
    pop = _swig_new_instance_method(_Core.vector_DocObject_pop)
    append = _swig_new_instance_method(_Core.vector_DocObject_append)
    empty = _swig_new_instance_method(_Core.vector_DocObject_empty)
    size = _swig_new_instance_method(_Core.vector_DocObject_size)
    swap = _swig_new_instance_method(_Core.vector_DocObject_swap)
    begin = _swig_new_instance_method(_Core.vector_DocObject_begin)
    end = _swig_new_instance_method(_Core.vector_DocObject_end)
    rbegin = _swig_new_instance_method(_Core.vector_DocObject_rbegin)
    rend = _swig_new_instance_method(_Core.vector_DocObject_rend)
    clear = _swig_new_instance_method(_Core.vector_DocObject_clear)
    get_allocator = _swig_new_instance_method(_Core.vector_DocObject_get_allocator)
    pop_back = _swig_new_instance_method(_Core.vector_DocObject_pop_back)
    erase = _swig_new_instance_method(_Core.vector_DocObject_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_DocObject self) -> vector_DocObject
        __init__(vector_DocObject self, vector_DocObject other) -> vector_DocObject
        __init__(vector_DocObject self, std::vector< Core::DocObject * >::size_type size) -> vector_DocObject
        __init__(vector_DocObject self, std::vector< Core::DocObject * >::size_type size, DocObject value) -> vector_DocObject
        """
        _Core.vector_DocObject_swiginit(self, _Core.new_vector_DocObject(*args))
    push_back = _swig_new_instance_method(_Core.vector_DocObject_push_back)
    front = _swig_new_instance_method(_Core.vector_DocObject_front)
    back = _swig_new_instance_method(_Core.vector_DocObject_back)
    assign = _swig_new_instance_method(_Core.vector_DocObject_assign)
    resize = _swig_new_instance_method(_Core.vector_DocObject_resize)
    insert = _swig_new_instance_method(_Core.vector_DocObject_insert)
    reserve = _swig_new_instance_method(_Core.vector_DocObject_reserve)
    capacity = _swig_new_instance_method(_Core.vector_DocObject_capacity)
    __swig_destroy__ = _Core.delete_vector_DocObject

# Register vector_DocObject in _Core:
_Core.vector_DocObject_swigregister(vector_DocObject)
class vector_Property(object):
    r"""Proxy of C++ std::vector< Core::Property * > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_Core.vector_Property_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_Core.vector_Property___nonzero__)
    __bool__ = _swig_new_instance_method(_Core.vector_Property___bool__)
    __len__ = _swig_new_instance_method(_Core.vector_Property___len__)
    __getslice__ = _swig_new_instance_method(_Core.vector_Property___getslice__)
    __setslice__ = _swig_new_instance_method(_Core.vector_Property___setslice__)
    __delslice__ = _swig_new_instance_method(_Core.vector_Property___delslice__)
    __delitem__ = _swig_new_instance_method(_Core.vector_Property___delitem__)
    __getitem__ = _swig_new_instance_method(_Core.vector_Property___getitem__)
    __setitem__ = _swig_new_instance_method(_Core.vector_Property___setitem__)
    pop = _swig_new_instance_method(_Core.vector_Property_pop)
    append = _swig_new_instance_method(_Core.vector_Property_append)
    empty = _swig_new_instance_method(_Core.vector_Property_empty)
    size = _swig_new_instance_method(_Core.vector_Property_size)
    swap = _swig_new_instance_method(_Core.vector_Property_swap)
    begin = _swig_new_instance_method(_Core.vector_Property_begin)
    end = _swig_new_instance_method(_Core.vector_Property_end)
    rbegin = _swig_new_instance_method(_Core.vector_Property_rbegin)
    rend = _swig_new_instance_method(_Core.vector_Property_rend)
    clear = _swig_new_instance_method(_Core.vector_Property_clear)
    get_allocator = _swig_new_instance_method(_Core.vector_Property_get_allocator)
    pop_back = _swig_new_instance_method(_Core.vector_Property_pop_back)
    erase = _swig_new_instance_method(_Core.vector_Property_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_Property self) -> vector_Property
        __init__(vector_Property self, vector_Property other) -> vector_Property
        __init__(vector_Property self, std::vector< Core::Property * >::size_type size) -> vector_Property
        __init__(vector_Property self, std::vector< Core::Property * >::size_type size, Property value) -> vector_Property
        """
        _Core.vector_Property_swiginit(self, _Core.new_vector_Property(*args))
    push_back = _swig_new_instance_method(_Core.vector_Property_push_back)
    front = _swig_new_instance_method(_Core.vector_Property_front)
    back = _swig_new_instance_method(_Core.vector_Property_back)
    assign = _swig_new_instance_method(_Core.vector_Property_assign)
    resize = _swig_new_instance_method(_Core.vector_Property_resize)
    insert = _swig_new_instance_method(_Core.vector_Property_insert)
    reserve = _swig_new_instance_method(_Core.vector_Property_reserve)
    capacity = _swig_new_instance_method(_Core.vector_Property_capacity)
    __swig_destroy__ = _Core.delete_vector_Property

# Register vector_Property in _Core:
_Core.vector_Property_swigregister(vector_Property)
class set_DocObject(object):
    r"""Proxy of C++ std::set< Core::DocObject * > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_Core.set_DocObject_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_Core.set_DocObject___nonzero__)
    __bool__ = _swig_new_instance_method(_Core.set_DocObject___bool__)
    __len__ = _swig_new_instance_method(_Core.set_DocObject___len__)
    append = _swig_new_instance_method(_Core.set_DocObject_append)
    __contains__ = _swig_new_instance_method(_Core.set_DocObject___contains__)
    __getitem__ = _swig_new_instance_method(_Core.set_DocObject___getitem__)
    add = _swig_new_instance_method(_Core.set_DocObject_add)
    discard = _swig_new_instance_method(_Core.set_DocObject_discard)

    def __init__(self, *args):
        r"""
        __init__(set_DocObject self, std::less< Core::DocObject * > const & other) -> set_DocObject
        __init__(set_DocObject self) -> set_DocObject
        __init__(set_DocObject self, set_DocObject other) -> set_DocObject
        """
        _Core.set_DocObject_swiginit(self, _Core.new_set_DocObject(*args))
    empty = _swig_new_instance_method(_Core.set_DocObject_empty)
    size = _swig_new_instance_method(_Core.set_DocObject_size)
    clear = _swig_new_instance_method(_Core.set_DocObject_clear)
    swap = _swig_new_instance_method(_Core.set_DocObject_swap)
    count = _swig_new_instance_method(_Core.set_DocObject_count)
    begin = _swig_new_instance_method(_Core.set_DocObject_begin)
    end = _swig_new_instance_method(_Core.set_DocObject_end)
    rbegin = _swig_new_instance_method(_Core.set_DocObject_rbegin)
    rend = _swig_new_instance_method(_Core.set_DocObject_rend)
    erase = _swig_new_instance_method(_Core.set_DocObject_erase)
    find = _swig_new_instance_method(_Core.set_DocObject_find)
    lower_bound = _swig_new_instance_method(_Core.set_DocObject_lower_bound)
    upper_bound = _swig_new_instance_method(_Core.set_DocObject_upper_bound)
    equal_range = _swig_new_instance_method(_Core.set_DocObject_equal_range)
    insert = _swig_new_instance_method(_Core.set_DocObject_insert)
    __swig_destroy__ = _Core.delete_set_DocObject

# Register set_DocObject in _Core:
_Core.set_DocObject_swigregister(set_DocObject)
class vector_DbgInfo(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Core::DbgInfo > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_Core.vector_DbgInfo_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_Core.vector_DbgInfo___nonzero__)
    __bool__ = _swig_new_instance_method(_Core.vector_DbgInfo___bool__)
    __len__ = _swig_new_instance_method(_Core.vector_DbgInfo___len__)
    __getslice__ = _swig_new_instance_method(_Core.vector_DbgInfo___getslice__)
    __setslice__ = _swig_new_instance_method(_Core.vector_DbgInfo___setslice__)
    __delslice__ = _swig_new_instance_method(_Core.vector_DbgInfo___delslice__)
    __delitem__ = _swig_new_instance_method(_Core.vector_DbgInfo___delitem__)
    __getitem__ = _swig_new_instance_method(_Core.vector_DbgInfo___getitem__)
    __setitem__ = _swig_new_instance_method(_Core.vector_DbgInfo___setitem__)
    pop = _swig_new_instance_method(_Core.vector_DbgInfo_pop)
    append = _swig_new_instance_method(_Core.vector_DbgInfo_append)
    empty = _swig_new_instance_method(_Core.vector_DbgInfo_empty)
    size = _swig_new_instance_method(_Core.vector_DbgInfo_size)
    swap = _swig_new_instance_method(_Core.vector_DbgInfo_swap)
    begin = _swig_new_instance_method(_Core.vector_DbgInfo_begin)
    end = _swig_new_instance_method(_Core.vector_DbgInfo_end)
    rbegin = _swig_new_instance_method(_Core.vector_DbgInfo_rbegin)
    rend = _swig_new_instance_method(_Core.vector_DbgInfo_rend)
    clear = _swig_new_instance_method(_Core.vector_DbgInfo_clear)
    get_allocator = _swig_new_instance_method(_Core.vector_DbgInfo_get_allocator)
    pop_back = _swig_new_instance_method(_Core.vector_DbgInfo_pop_back)
    erase = _swig_new_instance_method(_Core.vector_DbgInfo_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_DbgInfo self) -> vector_DbgInfo
        __init__(vector_DbgInfo self, vector_DbgInfo other) -> vector_DbgInfo
        __init__(vector_DbgInfo self, std::vector< std::shared_ptr< Core::DbgInfo > >::size_type size) -> vector_DbgInfo
        __init__(vector_DbgInfo self, std::vector< std::shared_ptr< Core::DbgInfo > >::size_type size, std::vector< std::shared_ptr< Core::DbgInfo > >::value_type const & value) -> vector_DbgInfo
        """
        _Core.vector_DbgInfo_swiginit(self, _Core.new_vector_DbgInfo(*args))
    push_back = _swig_new_instance_method(_Core.vector_DbgInfo_push_back)
    front = _swig_new_instance_method(_Core.vector_DbgInfo_front)
    back = _swig_new_instance_method(_Core.vector_DbgInfo_back)
    assign = _swig_new_instance_method(_Core.vector_DbgInfo_assign)
    resize = _swig_new_instance_method(_Core.vector_DbgInfo_resize)
    insert = _swig_new_instance_method(_Core.vector_DbgInfo_insert)
    reserve = _swig_new_instance_method(_Core.vector_DbgInfo_reserve)
    capacity = _swig_new_instance_method(_Core.vector_DbgInfo_capacity)
    __swig_destroy__ = _Core.delete_vector_DbgInfo

# Register vector_DbgInfo in _Core:
_Core.vector_DbgInfo_swigregister(vector_DbgInfo)

