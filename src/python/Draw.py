# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _Draw
else:
    import _Draw

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _Draw.SWIG_PyInstanceMethod_New
_swig_new_static_method = _Draw.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

class OglMaterial(object):
    r"""Proxy of C++ Draw::OglMaterial class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _Draw.delete_OglMaterial

    def __init__(self, *args):
        r"""
        __init__(OglMaterial self) -> OglMaterial
        __init__(OglMaterial self, Base::Color const & diffuseColor) -> OglMaterial
        __init__(OglMaterial self, Base::Color const & ambientColor, Base::Color const & diffuseColor, Base::Color const & specularColor, Base::Color const & emissiveColor, int shininess, int transparency) -> OglMaterial
        __init__(OglMaterial self, Base::Color const & ambientColor, Base::Color const & diffuseColor, Base::Color const & specularColor, Base::Color const & emissiveColor, Base::Color const & reflection, int shininess, int transparency) -> OglMaterial
        """
        _Draw.OglMaterial_swiginit(self, _Draw.new_OglMaterial(*args))
    __eq__ = _swig_new_instance_method(_Draw.OglMaterial___eq__)
    setValues = _swig_new_instance_method(_Draw.OglMaterial_setValues)
    getValues = _swig_new_instance_method(_Draw.OglMaterial_getValues)
    setAmbientColor = _swig_new_instance_method(_Draw.OglMaterial_setAmbientColor)
    setDiffuseColor = _swig_new_instance_method(_Draw.OglMaterial_setDiffuseColor)
    setSpecularColor = _swig_new_instance_method(_Draw.OglMaterial_setSpecularColor)
    setEmissiveColor = _swig_new_instance_method(_Draw.OglMaterial_setEmissiveColor)
    setReflectiveColor = _swig_new_instance_method(_Draw.OglMaterial_setReflectiveColor)
    getAmbientColor = _swig_new_instance_method(_Draw.OglMaterial_getAmbientColor)
    getDiffuseColor = _swig_new_instance_method(_Draw.OglMaterial_getDiffuseColor)
    getSpecularColor = _swig_new_instance_method(_Draw.OglMaterial_getSpecularColor)
    getEmissiveColor = _swig_new_instance_method(_Draw.OglMaterial_getEmissiveColor)
    getReflectiveColor = _swig_new_instance_method(_Draw.OglMaterial_getReflectiveColor)
    setShininess = _swig_new_instance_method(_Draw.OglMaterial_setShininess)
    setTransparency = _swig_new_instance_method(_Draw.OglMaterial_setTransparency)
    getShininess = _swig_new_instance_method(_Draw.OglMaterial_getShininess)
    getTransparency = _swig_new_instance_method(_Draw.OglMaterial_getTransparency)
    hasSameValuesAs = _swig_new_instance_method(_Draw.OglMaterial_hasSameValuesAs)
    hash = _swig_new_instance_method(_Draw.OglMaterial_hash)

# Register OglMaterial in _Draw:
_Draw.OglMaterial_swigregister(OglMaterial)
__lshift__ = _Draw.__lshift__
class Texture2(object):
    r"""Proxy of C++ Draw::Texture2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    BLEND = _Draw.Texture2_BLEND
    
    MODULATE = _Draw.Texture2_MODULATE
    
    DECAL = _Draw.Texture2_DECAL
    
    REPLACE_ = _Draw.Texture2_REPLACE_
    
    CLAMP = _Draw.Texture2_CLAMP
    
    REPEAT = _Draw.Texture2_REPEAT
    

    def __init__(self, *args):
        r"""
        __init__(Texture2 self) -> Texture2
        __init__(Texture2 self, Base::String const & textureFileName, Base::String const & textureOriginalFileName, Draw::Texture2::Model mappingModel, Draw::Texture2::Wrap wrapS, Draw::Texture2::Wrap wrapT, Base::Color const & blendColor, bool textureImageIsExternal) -> Texture2
        """
        _Draw.Texture2_swiginit(self, _Draw.new_Texture2(*args))
    __swig_destroy__ = _Draw.delete_Texture2
    __eq__ = _swig_new_instance_method(_Draw.Texture2___eq__)
    setValues = _swig_new_instance_method(_Draw.Texture2_setValues)
    getValues = _swig_new_instance_method(_Draw.Texture2_getValues)
    setTextureFileName = _swig_new_instance_method(_Draw.Texture2_setTextureFileName)
    setTextureOriginalFileName = _swig_new_instance_method(_Draw.Texture2_setTextureOriginalFileName)
    setTextureOriginalFileNameAbsolut = _swig_new_instance_method(_Draw.Texture2_setTextureOriginalFileNameAbsolut)
    setMappingModel = _swig_new_instance_method(_Draw.Texture2_setMappingModel)
    setWrapS = _swig_new_instance_method(_Draw.Texture2_setWrapS)
    setWrapT = _swig_new_instance_method(_Draw.Texture2_setWrapT)
    setBlendColor = _swig_new_instance_method(_Draw.Texture2_setBlendColor)
    setTextureImageIsExternal = _swig_new_instance_method(_Draw.Texture2_setTextureImageIsExternal)
    setTextureImageIsSavedOptimized = _swig_new_instance_method(_Draw.Texture2_setTextureImageIsSavedOptimized)
    getTextureFileName = _swig_new_instance_method(_Draw.Texture2_getTextureFileName)
    getTextureOriginalFileName = _swig_new_instance_method(_Draw.Texture2_getTextureOriginalFileName)
    getTextureOriginalFileNameAbsolut = _swig_new_instance_method(_Draw.Texture2_getTextureOriginalFileNameAbsolut)
    getMappingModel = _swig_new_instance_method(_Draw.Texture2_getMappingModel)
    getWrapS = _swig_new_instance_method(_Draw.Texture2_getWrapS)
    getWrapT = _swig_new_instance_method(_Draw.Texture2_getWrapT)
    getBlendColor = _swig_new_instance_method(_Draw.Texture2_getBlendColor)
    isTextureImageExternal = _swig_new_instance_method(_Draw.Texture2_isTextureImageExternal)
    getTextureImageIsSavedOptimized = _swig_new_instance_method(_Draw.Texture2_getTextureImageIsSavedOptimized)
    getModelEnum = _swig_new_static_method(_Draw.Texture2_getModelEnum)
    getWrapEnum = _swig_new_static_method(_Draw.Texture2_getWrapEnum)
    getStringFromModelEnum = _swig_new_static_method(_Draw.Texture2_getStringFromModelEnum)
    getStringFromWrapEnum = _swig_new_static_method(_Draw.Texture2_getStringFromWrapEnum)
    getTextureMD5 = _swig_new_instance_method(_Draw.Texture2_getTextureMD5)
    setTextureMD5 = _swig_new_instance_method(_Draw.Texture2_setTextureMD5)
    hasTexture = _swig_new_instance_method(_Draw.Texture2_hasTexture)
    dump = _swig_new_instance_method(_Draw.Texture2_dump)
    hash = _swig_new_instance_method(_Draw.Texture2_hash)

# Register Texture2 in _Draw:
_Draw.Texture2_swigregister(Texture2)
Texture2_getModelEnum = _Draw.Texture2_getModelEnum
Texture2_getWrapEnum = _Draw.Texture2_getWrapEnum
Texture2_getStringFromModelEnum = _Draw.Texture2_getStringFromModelEnum
Texture2_getStringFromWrapEnum = _Draw.Texture2_getStringFromWrapEnum

class Texture2Transform(object):
    r"""Proxy of C++ Draw::Texture2Transform class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(Texture2Transform self) -> Texture2Transform
        __init__(Texture2Transform self, float translationX, float translationY, float rotation, float scaleFactorX, float scaleFactorY, float centerX, float centerY) -> Texture2Transform
        """
        _Draw.Texture2Transform_swiginit(self, _Draw.new_Texture2Transform(*args))
    __swig_destroy__ = _Draw.delete_Texture2Transform
    setValues = _swig_new_instance_method(_Draw.Texture2Transform_setValues)
    getValues = _swig_new_instance_method(_Draw.Texture2Transform_getValues)
    setTranslation = _swig_new_instance_method(_Draw.Texture2Transform_setTranslation)
    setRotation = _swig_new_instance_method(_Draw.Texture2Transform_setRotation)
    setScaleFactor = _swig_new_instance_method(_Draw.Texture2Transform_setScaleFactor)
    setCenter = _swig_new_instance_method(_Draw.Texture2Transform_setCenter)
    getTranslation = _swig_new_instance_method(_Draw.Texture2Transform_getTranslation)
    getRotation = _swig_new_instance_method(_Draw.Texture2Transform_getRotation)
    getScaleFactor = _swig_new_instance_method(_Draw.Texture2Transform_getScaleFactor)
    getCenter = _swig_new_instance_method(_Draw.Texture2Transform_getCenter)
    __eq__ = _swig_new_instance_method(_Draw.Texture2Transform___eq__)
    __ne__ = _swig_new_instance_method(_Draw.Texture2Transform___ne__)

# Register Texture2Transform in _Draw:
_Draw.Texture2Transform_swigregister(Texture2Transform)
class TextureCoordinateFunction(object):
    r"""Proxy of C++ Draw::TextureCoordinateFunction class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    DEFAULT = _Draw.TextureCoordinateFunction_DEFAULT
    
    PLANE = _Draw.TextureCoordinateFunction_PLANE
    
    ENVIRONMENT = _Draw.TextureCoordinateFunction_ENVIRONMENT
    

    def __init__(self):
        r"""__init__(TextureCoordinateFunction self) -> TextureCoordinateFunction"""
        _Draw.TextureCoordinateFunction_swiginit(self, _Draw.new_TextureCoordinateFunction())
    __swig_destroy__ = _Draw.delete_TextureCoordinateFunction
    getCoordinateFunction = _swig_new_instance_method(_Draw.TextureCoordinateFunction_getCoordinateFunction)
    getDirectionS = _swig_new_instance_method(_Draw.TextureCoordinateFunction_getDirectionS)
    getDirectionT = _swig_new_instance_method(_Draw.TextureCoordinateFunction_getDirectionT)
    setCoordinateFunction = _swig_new_instance_method(_Draw.TextureCoordinateFunction_setCoordinateFunction)
    setDirectionS = _swig_new_instance_method(_Draw.TextureCoordinateFunction_setDirectionS)
    setDirectionT = _swig_new_instance_method(_Draw.TextureCoordinateFunction_setDirectionT)
    getTextureCoordinateFunctionEnum = _swig_new_static_method(_Draw.TextureCoordinateFunction_getTextureCoordinateFunctionEnum)
    getStringFromTextureCoordinateFunctionEnum = _swig_new_static_method(_Draw.TextureCoordinateFunction_getStringFromTextureCoordinateFunctionEnum)
    __eq__ = _swig_new_instance_method(_Draw.TextureCoordinateFunction___eq__)
    __ne__ = _swig_new_instance_method(_Draw.TextureCoordinateFunction___ne__)

# Register TextureCoordinateFunction in _Draw:
_Draw.TextureCoordinateFunction_swigregister(TextureCoordinateFunction)
TextureCoordinateFunction_getTextureCoordinateFunctionEnum = _Draw.TextureCoordinateFunction_getTextureCoordinateFunctionEnum
TextureCoordinateFunction_getStringFromTextureCoordinateFunctionEnum = _Draw.TextureCoordinateFunction_getStringFromTextureCoordinateFunctionEnum

class TextureCoordinateMapping(object):
    r"""Proxy of C++ Draw::TextureCoordinateMapping class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    NONE = _Draw.TextureCoordinateMapping_NONE
    
    CUBE = _Draw.TextureCoordinateMapping_CUBE
    
    SPHERE = _Draw.TextureCoordinateMapping_SPHERE
    
    CYLINDER = _Draw.TextureCoordinateMapping_CYLINDER
    

    def __init__(self):
        r"""__init__(TextureCoordinateMapping self) -> TextureCoordinateMapping"""
        _Draw.TextureCoordinateMapping_swiginit(self, _Draw.new_TextureCoordinateMapping())
    __swig_destroy__ = _Draw.delete_TextureCoordinateMapping
    getCoordinateMapping = _swig_new_instance_method(_Draw.TextureCoordinateMapping_getCoordinateMapping)
    setCoordinateMapping = _swig_new_instance_method(_Draw.TextureCoordinateMapping_setCoordinateMapping)
    getTextureCoordinateMappingEnum = _swig_new_static_method(_Draw.TextureCoordinateMapping_getTextureCoordinateMappingEnum)
    getStringFromTextureCoordinateMappingEnum = _swig_new_static_method(_Draw.TextureCoordinateMapping_getStringFromTextureCoordinateMappingEnum)
    __eq__ = _swig_new_instance_method(_Draw.TextureCoordinateMapping___eq__)
    __ne__ = _swig_new_instance_method(_Draw.TextureCoordinateMapping___ne__)

# Register TextureCoordinateMapping in _Draw:
_Draw.TextureCoordinateMapping_swigregister(TextureCoordinateMapping)
TextureCoordinateMapping_getTextureCoordinateMappingEnum = _Draw.TextureCoordinateMapping_getTextureCoordinateMappingEnum
TextureCoordinateMapping_getStringFromTextureCoordinateMappingEnum = _Draw.TextureCoordinateMapping_getStringFromTextureCoordinateMappingEnum

class Appearance(object):
    r"""Proxy of C++ Draw::Appearance class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Appearance self) -> Appearance"""
        _Draw.Appearance_swiginit(self, _Draw.new_Appearance())
    getName = _swig_new_instance_method(_Draw.Appearance_getName)
    setName = _swig_new_instance_method(_Draw.Appearance_setName)
    getMaterial = _swig_new_instance_method(_Draw.Appearance_getMaterial)
    setMaterial = _swig_new_instance_method(_Draw.Appearance_setMaterial)
    getTexture2 = _swig_new_instance_method(_Draw.Appearance_getTexture2)
    setTexture2 = _swig_new_instance_method(_Draw.Appearance_setTexture2)
    getTexture2Transform = _swig_new_instance_method(_Draw.Appearance_getTexture2Transform)
    setTexture2Transform = _swig_new_instance_method(_Draw.Appearance_setTexture2Transform)
    getTextureCoordinateMapping = _swig_new_instance_method(_Draw.Appearance_getTextureCoordinateMapping)
    setTextureCoordinateMapping = _swig_new_instance_method(_Draw.Appearance_setTextureCoordinateMapping)
    getTextureCoordinateFunction = _swig_new_instance_method(_Draw.Appearance_getTextureCoordinateFunction)
    setTextureCoordinateFunction = _swig_new_instance_method(_Draw.Appearance_setTextureCoordinateFunction)
    __swig_destroy__ = _Draw.delete_Appearance

# Register Appearance in _Draw:
_Draw.Appearance_swigregister(Appearance)
class Arrowheads(object):
    r"""Proxy of C++ Draw::Arrowheads class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    NONE = _Draw.Arrowheads_NONE
    
    ARROW = _Draw.Arrowheads_ARROW
    
    DOT = _Draw.Arrowheads_DOT
    
    ARROWLINE = _Draw.Arrowheads_ARROWLINE
    

    def __init__(self, *args):
        r"""
        __init__(Arrowheads self) -> Arrowheads
        __init__(Arrowheads self, Draw::Arrowheads::Style startStyle, Draw::Arrowheads::Style endStyle, double startSize, double endSize, bool useFactor) -> Arrowheads
        """
        _Draw.Arrowheads_swiginit(self, _Draw.new_Arrowheads(*args))
    __eq__ = _swig_new_instance_method(_Draw.Arrowheads___eq__)
    __ne__ = _swig_new_instance_method(_Draw.Arrowheads___ne__)
    getStartStyle = _swig_new_instance_method(_Draw.Arrowheads_getStartStyle)
    getStartStyleAsString = _swig_new_instance_method(_Draw.Arrowheads_getStartStyleAsString)
    setStartStyle = _swig_new_instance_method(_Draw.Arrowheads_setStartStyle)
    getEndStyle = _swig_new_instance_method(_Draw.Arrowheads_getEndStyle)
    getEndStyleAsString = _swig_new_instance_method(_Draw.Arrowheads_getEndStyleAsString)
    setEndStyle = _swig_new_instance_method(_Draw.Arrowheads_setEndStyle)
    getStartSize = _swig_new_instance_method(_Draw.Arrowheads_getStartSize)
    setStartSize = _swig_new_instance_method(_Draw.Arrowheads_setStartSize)
    getEndSize = _swig_new_instance_method(_Draw.Arrowheads_getEndSize)
    setEndSize = _swig_new_instance_method(_Draw.Arrowheads_setEndSize)
    getUseFactor = _swig_new_instance_method(_Draw.Arrowheads_getUseFactor)
    setUseFactor = _swig_new_instance_method(_Draw.Arrowheads_setUseFactor)
    getStyleFromString = _swig_new_static_method(_Draw.Arrowheads_getStyleFromString)
    __swig_destroy__ = _Draw.delete_Arrowheads

# Register Arrowheads in _Draw:
_Draw.Arrowheads_swigregister(Arrowheads)
Arrowheads_getStyleFromString = _Draw.Arrowheads_getStyleFromString

class CurveStyle(object):
    r"""Proxy of C++ Draw::CurveStyle class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(CurveStyle self) -> CurveStyle"""
        _Draw.CurveStyle_swiginit(self, _Draw.new_CurveStyle())
    setCurveWidth = _swig_new_instance_method(_Draw.CurveStyle_setCurveWidth)
    setCurveMaterial = _swig_new_instance_method(_Draw.CurveStyle_setCurveMaterial)
    setCurveDashType = _swig_new_instance_method(_Draw.CurveStyle_setCurveDashType)
    setCurveArrow = _swig_new_instance_method(_Draw.CurveStyle_setCurveArrow)
    setCurveScaleFactor = _swig_new_instance_method(_Draw.CurveStyle_setCurveScaleFactor)
    getCurveWidth = _swig_new_instance_method(_Draw.CurveStyle_getCurveWidth)
    getCurveMaterial = _swig_new_instance_method(_Draw.CurveStyle_getCurveMaterial)
    getCurveDashType = _swig_new_instance_method(_Draw.CurveStyle_getCurveDashType)
    getCurveArrow = _swig_new_instance_method(_Draw.CurveStyle_getCurveArrow)
    getCurveScaleFactor = _swig_new_instance_method(_Draw.CurveStyle_getCurveScaleFactor)
    __swig_destroy__ = _Draw.delete_CurveStyle

# Register CurveStyle in _Draw:
_Draw.CurveStyle_swigregister(CurveStyle)
class DimensionStyle(object):
    r"""Proxy of C++ Draw::DimensionStyle class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    DiagonalLine = _Draw.DimensionStyle_DiagonalLine
    
    FilledArrow = _Draw.DimensionStyle_FilledArrow
    
    FilledDownwards = _Draw.DimensionStyle_FilledDownwards
    
    FilledUpwards = _Draw.DimensionStyle_FilledUpwards
    

    def __init__(self, *args):
        r"""
        __init__(DimensionStyle self) -> DimensionStyle
        __init__(DimensionStyle self, DimensionStyle o) -> DimensionStyle
        """
        _Draw.DimensionStyle_swiginit(self, _Draw.new_DimensionStyle(*args))
    __swig_destroy__ = _Draw.delete_DimensionStyle
    getTextColor = _swig_new_instance_method(_Draw.DimensionStyle_getTextColor)
    setTextColor = _swig_new_instance_method(_Draw.DimensionStyle_setTextColor)
    getTextFont = _swig_new_instance_method(_Draw.DimensionStyle_getTextFont)
    setTextFont = _swig_new_instance_method(_Draw.DimensionStyle_setTextFont)
    getTextScaleFactor = _swig_new_instance_method(_Draw.DimensionStyle_getTextScaleFactor)
    setTextScaleFactor = _swig_new_instance_method(_Draw.DimensionStyle_setTextScaleFactor)
    getTextIsCameraAligned = _swig_new_instance_method(_Draw.DimensionStyle_getTextIsCameraAligned)
    setTextIsCameraAligned = _swig_new_instance_method(_Draw.DimensionStyle_setTextIsCameraAligned)
    getNumberOfDecimals = _swig_new_instance_method(_Draw.DimensionStyle_getNumberOfDecimals)
    setNumberOfDecimals = _swig_new_instance_method(_Draw.DimensionStyle_setNumberOfDecimals)
    getTerminatorSymbol = _swig_new_instance_method(_Draw.DimensionStyle_getTerminatorSymbol)
    setTerminatorSymbol = _swig_new_instance_method(_Draw.DimensionStyle_setTerminatorSymbol)
    getAltitudeSymbol = _swig_new_instance_method(_Draw.DimensionStyle_getAltitudeSymbol)
    setAltitudeSymbol = _swig_new_instance_method(_Draw.DimensionStyle_setAltitudeSymbol)
    getAnchorLength = _swig_new_instance_method(_Draw.DimensionStyle_getAnchorLength)
    setAnchorLength = _swig_new_instance_method(_Draw.DimensionStyle_setAnchorLength)
    getAnchorDistance = _swig_new_instance_method(_Draw.DimensionStyle_getAnchorDistance)
    setAnchorDistance = _swig_new_instance_method(_Draw.DimensionStyle_setAnchorDistance)
    getMinimumDistance = _swig_new_instance_method(_Draw.DimensionStyle_getMinimumDistance)
    setMinimumDistance = _swig_new_instance_method(_Draw.DimensionStyle_setMinimumDistance)
    getAnchorDistanceOpt = _swig_new_instance_method(_Draw.DimensionStyle_getAnchorDistanceOpt)
    setAnchorDistanceOpt = _swig_new_instance_method(_Draw.DimensionStyle_setAnchorDistanceOpt)
    getLengthUnits = _swig_new_instance_method(_Draw.DimensionStyle_getLengthUnits)
    setLengthUnits = _swig_new_instance_method(_Draw.DimensionStyle_setLengthUnits)
    getTextLayout = _swig_new_instance_method(_Draw.DimensionStyle_getTextLayout)
    setTextLayout = _swig_new_instance_method(_Draw.DimensionStyle_setTextLayout)
    getUnitsCurrent = _swig_new_instance_method(_Draw.DimensionStyle_getUnitsCurrent)
    setUnitsCurrent = _swig_new_instance_method(_Draw.DimensionStyle_setUnitsCurrent)
    getTextVertical = _swig_new_instance_method(_Draw.DimensionStyle_getTextVertical)
    setTextVertical = _swig_new_instance_method(_Draw.DimensionStyle_setTextVertical)
    getTextOnNegativeSide = _swig_new_instance_method(_Draw.DimensionStyle_getTextOnNegativeSide)
    setTextOnNegativeSide = _swig_new_instance_method(_Draw.DimensionStyle_setTextOnNegativeSide)

# Register DimensionStyle in _Draw:
_Draw.DimensionStyle_swigregister(DimensionStyle)
class DimensionParams(object):
    r"""Proxy of C++ Draw::DimensionParams class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    points = property(_Draw.DimensionParams_points_get, _Draw.DimensionParams_points_set, doc=r"""points : std::vector<(Geom::Pnt)>""")
    dimensionCurvePassingPoint = property(_Draw.DimensionParams_dimensionCurvePassingPoint_get, _Draw.DimensionParams_dimensionCurvePassingPoint_set, doc=r"""dimensionCurvePassingPoint : Geom::Pnt""")
    dimensionCurveDirection = property(_Draw.DimensionParams_dimensionCurveDirection_get, _Draw.DimensionParams_dimensionCurveDirection_set, doc=r"""dimensionCurveDirection : Geom::Dir""")
    textPositionOffset = property(_Draw.DimensionParams_textPositionOffset_get, _Draw.DimensionParams_textPositionOffset_set, doc=r"""textPositionOffset : Geom::Pnt""")
    secondValue = property(_Draw.DimensionParams_secondValue_get, _Draw.DimensionParams_secondValue_set, doc=r"""secondValue : double""")
    ds = property(_Draw.DimensionParams_ds_get, _Draw.DimensionParams_ds_set, doc=r"""ds : Draw::DimensionStyle""")
    variableParamIdx = property(_Draw.DimensionParams_variableParamIdx_get, _Draw.DimensionParams_variableParamIdx_set, doc=r"""variableParamIdx : size_t""")
    transform = property(_Draw.DimensionParams_transform_get, _Draw.DimensionParams_transform_set, doc=r"""transform : Geom::Trsf""")
    projectToPlane = property(_Draw.DimensionParams_projectToPlane_get, _Draw.DimensionParams_projectToPlane_set, doc=r"""projectToPlane : bool""")
    projectionPlane = property(_Draw.DimensionParams_projectionPlane_get, _Draw.DimensionParams_projectionPlane_set, doc=r"""projectionPlane : Geom::Ax1""")
    showSumDimension = property(_Draw.DimensionParams_showSumDimension_get, _Draw.DimensionParams_showSumDimension_set, doc=r"""showSumDimension : bool""")
    planeZY = property(_Draw.DimensionParams_planeZY_get, _Draw.DimensionParams_planeZY_set, doc=r"""planeZY : bool""")
    verticalPlaneMode = property(_Draw.DimensionParams_verticalPlaneMode_get, _Draw.DimensionParams_verticalPlaneMode_set, doc=r"""verticalPlaneMode : int""")
    textLayout = property(_Draw.DimensionParams_textLayout_get, _Draw.DimensionParams_textLayout_set, doc=r"""textLayout : bool""")
    unitsCurrent = property(_Draw.DimensionParams_unitsCurrent_get, _Draw.DimensionParams_unitsCurrent_set, doc=r"""unitsCurrent : bool""")
    keepInPlane = property(_Draw.DimensionParams_keepInPlane_get, _Draw.DimensionParams_keepInPlane_set, doc=r"""keepInPlane : bool""")
    hasWPlane = property(_Draw.DimensionParams_hasWPlane_get, _Draw.DimensionParams_hasWPlane_set, doc=r"""hasWPlane : bool""")
    wPlane = property(_Draw.DimensionParams_wPlane_get, _Draw.DimensionParams_wPlane_set, doc=r"""wPlane : Geom::Ax2""")

    def __init__(self):
        r"""__init__(DimensionParams self) -> DimensionParams"""
        _Draw.DimensionParams_swiginit(self, _Draw.new_DimensionParams())
    __swig_destroy__ = _Draw.delete_DimensionParams

# Register DimensionParams in _Draw:
_Draw.DimensionParams_swigregister(DimensionParams)
class DrawStyle(object):
    r"""Proxy of C++ Draw::DrawStyle class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    FILLED = _Draw.DrawStyle_FILLED
    
    LINES = _Draw.DrawStyle_LINES
    
    FILLEDWITHLINES = _Draw.DrawStyle_FILLEDWITHLINES
    
    FILLEDWITHBLACKLINES = _Draw.DrawStyle_FILLEDWITHBLACKLINES
    
    POINTS = _Draw.DrawStyle_POINTS
    
    HALFTRANSPARENT = _Draw.DrawStyle_HALFTRANSPARENT
    
    VERTICES = _Draw.DrawStyle_VERTICES
    
    HIDDENLINES = _Draw.DrawStyle_HIDDENLINES
    
    DASHEDHIDDENLINES = _Draw.DrawStyle_DASHEDHIDDENLINES
    

    def __init__(self, *args):
        r"""
        __init__(DrawStyle self) -> DrawStyle
        __init__(DrawStyle self, Draw::DrawStyle::Style style, float pointSize=0.0, float lineWidth=1.0, uint16_t linePattern=0xffff, int linePatternScaleFactor=1) -> DrawStyle
        """
        _Draw.DrawStyle_swiginit(self, _Draw.new_DrawStyle(*args))
    __eq__ = _swig_new_instance_method(_Draw.DrawStyle___eq__)
    __ne__ = _swig_new_instance_method(_Draw.DrawStyle___ne__)
    getStyle = _swig_new_instance_method(_Draw.DrawStyle_getStyle)
    setStyle = _swig_new_instance_method(_Draw.DrawStyle_setStyle)
    getStyleAsString = _swig_new_instance_method(_Draw.DrawStyle_getStyleAsString)
    getPointSize = _swig_new_instance_method(_Draw.DrawStyle_getPointSize)
    setPointSize = _swig_new_instance_method(_Draw.DrawStyle_setPointSize)
    getLineWidth = _swig_new_instance_method(_Draw.DrawStyle_getLineWidth)
    setLineWidth = _swig_new_instance_method(_Draw.DrawStyle_setLineWidth)
    getLinePattern = _swig_new_instance_method(_Draw.DrawStyle_getLinePattern)
    setLinePattern = _swig_new_instance_method(_Draw.DrawStyle_setLinePattern)
    getShowVertices = _swig_new_instance_method(_Draw.DrawStyle_getShowVertices)
    setShowVertices = _swig_new_instance_method(_Draw.DrawStyle_setShowVertices)
    getShowControlPoints = _swig_new_instance_method(_Draw.DrawStyle_getShowControlPoints)
    setShowControlPoints = _swig_new_instance_method(_Draw.DrawStyle_setShowControlPoints)
    getLinePatternScaleFactor = _swig_new_instance_method(_Draw.DrawStyle_getLinePatternScaleFactor)
    setLinePatternScaleFactor = _swig_new_instance_method(_Draw.DrawStyle_setLinePatternScaleFactor)
    getStyleFromString = _swig_new_static_method(_Draw.DrawStyle_getStyleFromString)
    hash = _swig_new_instance_method(_Draw.DrawStyle_hash)
    __swig_destroy__ = _Draw.delete_DrawStyle

# Register DrawStyle in _Draw:
_Draw.DrawStyle_swigregister(DrawStyle)
DrawStyle_getStyleFromString = _Draw.DrawStyle_getStyleFromString

class PointStyle(object):
    r"""Proxy of C++ Draw::PointStyle class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(PointStyle self) -> PointStyle"""
        _Draw.PointStyle_swiginit(self, _Draw.new_PointStyle())
    setPointSize = _swig_new_instance_method(_Draw.PointStyle_setPointSize)
    setPointMaterial = _swig_new_instance_method(_Draw.PointStyle_setPointMaterial)
    setPointFixSize = _swig_new_instance_method(_Draw.PointStyle_setPointFixSize)
    setPointType = _swig_new_instance_method(_Draw.PointStyle_setPointType)
    getPointSize = _swig_new_instance_method(_Draw.PointStyle_getPointSize)
    getPointMaterial = _swig_new_instance_method(_Draw.PointStyle_getPointMaterial)
    getPointFixSize = _swig_new_instance_method(_Draw.PointStyle_getPointFixSize)
    getPointType = _swig_new_instance_method(_Draw.PointStyle_getPointType)
    __swig_destroy__ = _Draw.delete_PointStyle

# Register PointStyle in _Draw:
_Draw.PointStyle_swigregister(PointStyle)
class SolidStyle(object):
    r"""Proxy of C++ Draw::SolidStyle class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(SolidStyle self) -> SolidStyle"""
        _Draw.SolidStyle_swiginit(self, _Draw.new_SolidStyle())
    setSolidMaterial = _swig_new_instance_method(_Draw.SolidStyle_setSolidMaterial)
    getSolidMaterial = _swig_new_instance_method(_Draw.SolidStyle_getSolidMaterial)
    __swig_destroy__ = _Draw.delete_SolidStyle

# Register SolidStyle in _Draw:
_Draw.SolidStyle_swigregister(SolidStyle)
class SurfaceStyle(object):
    r"""Proxy of C++ Draw::SurfaceStyle class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(SurfaceStyle self) -> SurfaceStyle"""
        _Draw.SurfaceStyle_swiginit(self, _Draw.new_SurfaceStyle())
    setSurfaceMaterial = _swig_new_instance_method(_Draw.SurfaceStyle_setSurfaceMaterial)
    setTexture = _swig_new_instance_method(_Draw.SurfaceStyle_setTexture)
    setTextureTransform = _swig_new_instance_method(_Draw.SurfaceStyle_setTextureTransform)
    getSurfaceMaterial = _swig_new_instance_method(_Draw.SurfaceStyle_getSurfaceMaterial)
    getTexture = _swig_new_instance_method(_Draw.SurfaceStyle_getTexture)
    getTextureTransform = _swig_new_instance_method(_Draw.SurfaceStyle_getTextureTransform)
    __swig_destroy__ = _Draw.delete_SurfaceStyle

# Register SurfaceStyle in _Draw:
_Draw.SurfaceStyle_swigregister(SurfaceStyle)
class TextStyle(object):
    r"""Proxy of C++ Draw::TextStyle class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TextStyle self) -> TextStyle
        __init__(TextStyle self, TextStyle o) -> TextStyle
        """
        _Draw.TextStyle_swiginit(self, _Draw.new_TextStyle(*args))
    __eq__ = _swig_new_instance_method(_Draw.TextStyle___eq__)
    __swig_destroy__ = _Draw.delete_TextStyle
    setTextMaterial = _swig_new_instance_method(_Draw.TextStyle_setTextMaterial)
    setTextFont = _swig_new_instance_method(_Draw.TextStyle_setTextFont)
    setTextScaleFactor = _swig_new_instance_method(_Draw.TextStyle_setTextScaleFactor)
    setTextPointSize = _swig_new_instance_method(_Draw.TextStyle_setTextPointSize)
    setTextItalic = _swig_new_instance_method(_Draw.TextStyle_setTextItalic)
    setTextBold = _swig_new_instance_method(_Draw.TextStyle_setTextBold)
    setTextFrame = _swig_new_instance_method(_Draw.TextStyle_setTextFrame)
    setTextBackground = _swig_new_instance_method(_Draw.TextStyle_setTextBackground)
    setTextMaterialBackground = _swig_new_instance_method(_Draw.TextStyle_setTextMaterialBackground)
    setTextSpec = _swig_new_instance_method(_Draw.TextStyle_setTextSpec)
    getTextMaterial = _swig_new_instance_method(_Draw.TextStyle_getTextMaterial)
    getTextFont = _swig_new_instance_method(_Draw.TextStyle_getTextFont)
    getTextScaleFactor = _swig_new_instance_method(_Draw.TextStyle_getTextScaleFactor)
    getTextPointSize = _swig_new_instance_method(_Draw.TextStyle_getTextPointSize)
    getTextItalic = _swig_new_instance_method(_Draw.TextStyle_getTextItalic)
    getTextBold = _swig_new_instance_method(_Draw.TextStyle_getTextBold)
    getTextFrame = _swig_new_instance_method(_Draw.TextStyle_getTextFrame)
    getTextBackground = _swig_new_instance_method(_Draw.TextStyle_getTextBackground)
    getTextSpec = _swig_new_instance_method(_Draw.TextStyle_getTextSpec)
    getTextMaterialBackground = _swig_new_instance_method(_Draw.TextStyle_getTextMaterialBackground)

# Register TextStyle in _Draw:
_Draw.TextStyle_swigregister(TextStyle)

