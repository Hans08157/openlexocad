# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _Geom
else:
    import _Geom

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _Geom.SWIG_PyInstanceMethod_New
_swig_new_static_method = _Geom.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

class SwigPyIterator(object):
    r"""Proxy of C++ swig::SwigPyIterator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Geom.delete_SwigPyIterator
    value = _swig_new_instance_method(_Geom.SwigPyIterator_value)
    incr = _swig_new_instance_method(_Geom.SwigPyIterator_incr)
    decr = _swig_new_instance_method(_Geom.SwigPyIterator_decr)
    distance = _swig_new_instance_method(_Geom.SwigPyIterator_distance)
    equal = _swig_new_instance_method(_Geom.SwigPyIterator_equal)
    copy = _swig_new_instance_method(_Geom.SwigPyIterator_copy)
    next = _swig_new_instance_method(_Geom.SwigPyIterator_next)
    __next__ = _swig_new_instance_method(_Geom.SwigPyIterator___next__)
    previous = _swig_new_instance_method(_Geom.SwigPyIterator_previous)
    advance = _swig_new_instance_method(_Geom.SwigPyIterator_advance)
    __eq__ = _swig_new_instance_method(_Geom.SwigPyIterator___eq__)
    __ne__ = _swig_new_instance_method(_Geom.SwigPyIterator___ne__)
    __iadd__ = _swig_new_instance_method(_Geom.SwigPyIterator___iadd__)
    __isub__ = _swig_new_instance_method(_Geom.SwigPyIterator___isub__)
    __add__ = _swig_new_instance_method(_Geom.SwigPyIterator___add__)
    __sub__ = _swig_new_instance_method(_Geom.SwigPyIterator___sub__)
    def __iter__(self):
        return self

# Register SwigPyIterator in _Geom:
_Geom.SwigPyIterator_swigregister(SwigPyIterator)
class intP(object):
    r"""Proxy of C++ intP class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(intP self) -> intP"""
        _Geom.intP_swiginit(self, _Geom.new_intP())
    __swig_destroy__ = _Geom.delete_intP
    assign = _swig_new_instance_method(_Geom.intP_assign)
    value = _swig_new_instance_method(_Geom.intP_value)
    cast = _swig_new_instance_method(_Geom.intP_cast)
    frompointer = _swig_new_static_method(_Geom.intP_frompointer)

# Register intP in _Geom:
_Geom.intP_swigregister(intP)
intP_frompointer = _Geom.intP_frompointer

class doubleP(object):
    r"""Proxy of C++ doubleP class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(doubleP self) -> doubleP"""
        _Geom.doubleP_swiginit(self, _Geom.new_doubleP())
    __swig_destroy__ = _Geom.delete_doubleP
    assign = _swig_new_instance_method(_Geom.doubleP_assign)
    value = _swig_new_instance_method(_Geom.doubleP_value)
    cast = _swig_new_instance_method(_Geom.doubleP_cast)
    frompointer = _swig_new_static_method(_Geom.doubleP_frompointer)

# Register doubleP in _Geom:
_Geom.doubleP_swigregister(doubleP)
doubleP_frompointer = _Geom.doubleP_frompointer

class boolP(object):
    r"""Proxy of C++ boolP class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(boolP self) -> boolP"""
        _Geom.boolP_swiginit(self, _Geom.new_boolP())
    __swig_destroy__ = _Geom.delete_boolP
    assign = _swig_new_instance_method(_Geom.boolP_assign)
    value = _swig_new_instance_method(_Geom.boolP_value)
    cast = _swig_new_instance_method(_Geom.boolP_cast)
    frompointer = _swig_new_static_method(_Geom.boolP_frompointer)

# Register boolP in _Geom:
_Geom.boolP_swigregister(boolP)
boolP_frompointer = _Geom.boolP_frompointer

class GT_MakePlaneFrom3Points_Result(object):
    r"""Proxy of C++ Geom::GT_MakePlaneFrom3Points_Result class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ok = property(_Geom.GT_MakePlaneFrom3Points_Result_ok_get, _Geom.GT_MakePlaneFrom3Points_Result_ok_set, doc=r"""ok : bool""")
    plane = property(_Geom.GT_MakePlaneFrom3Points_Result_plane_get, _Geom.GT_MakePlaneFrom3Points_Result_plane_set, doc=r"""plane : Geom::Pln""")
    coordSystem = property(_Geom.GT_MakePlaneFrom3Points_Result_coordSystem_get, _Geom.GT_MakePlaneFrom3Points_Result_coordSystem_set, doc=r"""coordSystem : Geom::Ax2""")

    def __init__(self):
        r"""__init__(GT_MakePlaneFrom3Points_Result self) -> GT_MakePlaneFrom3Points_Result"""
        _Geom.GT_MakePlaneFrom3Points_Result_swiginit(self, _Geom.new_GT_MakePlaneFrom3Points_Result())
    __swig_destroy__ = _Geom.delete_GT_MakePlaneFrom3Points_Result

# Register GT_MakePlaneFrom3Points_Result in _Geom:
_Geom.GT_MakePlaneFrom3Points_Result_swigregister(GT_MakePlaneFrom3Points_Result)
class GT_MakeLineFrom2Points1_Result(object):
    r"""Proxy of C++ Geom::GT_MakeLineFrom2Points1_Result class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ok = property(_Geom.GT_MakeLineFrom2Points1_Result_ok_get, _Geom.GT_MakeLineFrom2Points1_Result_ok_set, doc=r"""ok : bool""")
    line = property(_Geom.GT_MakeLineFrom2Points1_Result_line_get, _Geom.GT_MakeLineFrom2Points1_Result_line_set, doc=r"""line : Geom::Lin""")

    def __init__(self):
        r"""__init__(GT_MakeLineFrom2Points1_Result self) -> GT_MakeLineFrom2Points1_Result"""
        _Geom.GT_MakeLineFrom2Points1_Result_swiginit(self, _Geom.new_GT_MakeLineFrom2Points1_Result())
    __swig_destroy__ = _Geom.delete_GT_MakeLineFrom2Points1_Result

# Register GT_MakeLineFrom2Points1_Result in _Geom:
_Geom.GT_MakeLineFrom2Points1_Result_swigregister(GT_MakeLineFrom2Points1_Result)
class GT_ProjectPointOnPlane1_Result(object):
    r"""Proxy of C++ Geom::GT_ProjectPointOnPlane1_Result class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ok = property(_Geom.GT_ProjectPointOnPlane1_Result_ok_get, _Geom.GT_ProjectPointOnPlane1_Result_ok_set, doc=r"""ok : bool""")
    point = property(_Geom.GT_ProjectPointOnPlane1_Result_point_get, _Geom.GT_ProjectPointOnPlane1_Result_point_set, doc=r"""point : Geom::Pnt""")

    def __init__(self):
        r"""__init__(GT_ProjectPointOnPlane1_Result self) -> GT_ProjectPointOnPlane1_Result"""
        _Geom.GT_ProjectPointOnPlane1_Result_swiginit(self, _Geom.new_GT_ProjectPointOnPlane1_Result())
    __swig_destroy__ = _Geom.delete_GT_ProjectPointOnPlane1_Result

# Register GT_ProjectPointOnPlane1_Result in _Geom:
_Geom.GT_ProjectPointOnPlane1_Result_swigregister(GT_ProjectPointOnPlane1_Result)
class GT_ProjectPointOnPlane2_Result(object):
    r"""Proxy of C++ Geom::GT_ProjectPointOnPlane2_Result class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ok = property(_Geom.GT_ProjectPointOnPlane2_Result_ok_get, _Geom.GT_ProjectPointOnPlane2_Result_ok_set, doc=r"""ok : bool""")
    point = property(_Geom.GT_ProjectPointOnPlane2_Result_point_get, _Geom.GT_ProjectPointOnPlane2_Result_point_set, doc=r"""point : Geom::Pnt""")
    U = property(_Geom.GT_ProjectPointOnPlane2_Result_U_get, _Geom.GT_ProjectPointOnPlane2_Result_U_set, doc=r"""U : double""")
    V = property(_Geom.GT_ProjectPointOnPlane2_Result_V_get, _Geom.GT_ProjectPointOnPlane2_Result_V_set, doc=r"""V : double""")

    def __init__(self):
        r"""__init__(GT_ProjectPointOnPlane2_Result self) -> GT_ProjectPointOnPlane2_Result"""
        _Geom.GT_ProjectPointOnPlane2_Result_swiginit(self, _Geom.new_GT_ProjectPointOnPlane2_Result())
    __swig_destroy__ = _Geom.delete_GT_ProjectPointOnPlane2_Result

# Register GT_ProjectPointOnPlane2_Result in _Geom:
_Geom.GT_ProjectPointOnPlane2_Result_swigregister(GT_ProjectPointOnPlane2_Result)
class GT_ProjectPointOnLine1_Result(object):
    r"""Proxy of C++ Geom::GT_ProjectPointOnLine1_Result class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ok = property(_Geom.GT_ProjectPointOnLine1_Result_ok_get, _Geom.GT_ProjectPointOnLine1_Result_ok_set, doc=r"""ok : bool""")
    point = property(_Geom.GT_ProjectPointOnLine1_Result_point_get, _Geom.GT_ProjectPointOnLine1_Result_point_set, doc=r"""point : Geom::Pnt""")

    def __init__(self):
        r"""__init__(GT_ProjectPointOnLine1_Result self) -> GT_ProjectPointOnLine1_Result"""
        _Geom.GT_ProjectPointOnLine1_Result_swiginit(self, _Geom.new_GT_ProjectPointOnLine1_Result())
    __swig_destroy__ = _Geom.delete_GT_ProjectPointOnLine1_Result

# Register GT_ProjectPointOnLine1_Result in _Geom:
_Geom.GT_ProjectPointOnLine1_Result_swigregister(GT_ProjectPointOnLine1_Result)
class GT_ProjectPointOnLine2_Result(object):
    r"""Proxy of C++ Geom::GT_ProjectPointOnLine2_Result class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ok = property(_Geom.GT_ProjectPointOnLine2_Result_ok_get, _Geom.GT_ProjectPointOnLine2_Result_ok_set, doc=r"""ok : bool""")
    point = property(_Geom.GT_ProjectPointOnLine2_Result_point_get, _Geom.GT_ProjectPointOnLine2_Result_point_set, doc=r"""point : Geom::Pnt""")
    U = property(_Geom.GT_ProjectPointOnLine2_Result_U_get, _Geom.GT_ProjectPointOnLine2_Result_U_set, doc=r"""U : double""")

    def __init__(self):
        r"""__init__(GT_ProjectPointOnLine2_Result self) -> GT_ProjectPointOnLine2_Result"""
        _Geom.GT_ProjectPointOnLine2_Result_swiginit(self, _Geom.new_GT_ProjectPointOnLine2_Result())
    __swig_destroy__ = _Geom.delete_GT_ProjectPointOnLine2_Result

# Register GT_ProjectPointOnLine2_Result in _Geom:
_Geom.GT_ProjectPointOnLine2_Result_swigregister(GT_ProjectPointOnLine2_Result)
class GT_ProjectPointOnCircle1_Result(object):
    r"""Proxy of C++ Geom::GT_ProjectPointOnCircle1_Result class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ok = property(_Geom.GT_ProjectPointOnCircle1_Result_ok_get, _Geom.GT_ProjectPointOnCircle1_Result_ok_set, doc=r"""ok : bool""")
    point = property(_Geom.GT_ProjectPointOnCircle1_Result_point_get, _Geom.GT_ProjectPointOnCircle1_Result_point_set, doc=r"""point : Geom::Pnt""")

    def __init__(self):
        r"""__init__(GT_ProjectPointOnCircle1_Result self) -> GT_ProjectPointOnCircle1_Result"""
        _Geom.GT_ProjectPointOnCircle1_Result_swiginit(self, _Geom.new_GT_ProjectPointOnCircle1_Result())
    __swig_destroy__ = _Geom.delete_GT_ProjectPointOnCircle1_Result

# Register GT_ProjectPointOnCircle1_Result in _Geom:
_Geom.GT_ProjectPointOnCircle1_Result_swigregister(GT_ProjectPointOnCircle1_Result)
class GT_MakeAxisPlacementFrom2Points_Result(object):
    r"""Proxy of C++ Geom::GT_MakeAxisPlacementFrom2Points_Result class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ok = property(_Geom.GT_MakeAxisPlacementFrom2Points_Result_ok_get, _Geom.GT_MakeAxisPlacementFrom2Points_Result_ok_set, doc=r"""ok : bool""")
    ax2 = property(_Geom.GT_MakeAxisPlacementFrom2Points_Result_ax2_get, _Geom.GT_MakeAxisPlacementFrom2Points_Result_ax2_set, doc=r"""ax2 : Geom::Ax2""")
    xLength = property(_Geom.GT_MakeAxisPlacementFrom2Points_Result_xLength_get, _Geom.GT_MakeAxisPlacementFrom2Points_Result_xLength_set, doc=r"""xLength : double""")
    angleXYPlane = property(_Geom.GT_MakeAxisPlacementFrom2Points_Result_angleXYPlane_get, _Geom.GT_MakeAxisPlacementFrom2Points_Result_angleXYPlane_set, doc=r"""angleXYPlane : double""")

    def __init__(self):
        r"""__init__(GT_MakeAxisPlacementFrom2Points_Result self) -> GT_MakeAxisPlacementFrom2Points_Result"""
        _Geom.GT_MakeAxisPlacementFrom2Points_Result_swiginit(self, _Geom.new_GT_MakeAxisPlacementFrom2Points_Result())
    __swig_destroy__ = _Geom.delete_GT_MakeAxisPlacementFrom2Points_Result

# Register GT_MakeAxisPlacementFrom2Points_Result in _Geom:
_Geom.GT_MakeAxisPlacementFrom2Points_Result_swigregister(GT_MakeAxisPlacementFrom2Points_Result)
class Ax1(object):
    r"""Proxy of C++ Geom::Ax1 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(Ax1 self) -> Ax1
        __init__(Ax1 self, Pnt P, Dir V) -> Ax1
        """
        _Geom.Ax1_swiginit(self, _Geom.new_Ax1(*args))
    setDirection = _swig_new_instance_method(_Geom.Ax1_setDirection)
    setLocation = _swig_new_instance_method(_Geom.Ax1_setLocation)
    direction = _swig_new_instance_method(_Geom.Ax1_direction)
    location = _swig_new_instance_method(_Geom.Ax1_location)
    isCoaxial = _swig_new_instance_method(_Geom.Ax1_isCoaxial)
    isNormal = _swig_new_instance_method(_Geom.Ax1_isNormal)
    isOpposite = _swig_new_instance_method(_Geom.Ax1_isOpposite)
    isParallel = _swig_new_instance_method(_Geom.Ax1_isParallel)
    angle = _swig_new_instance_method(_Geom.Ax1_angle)
    reverse = _swig_new_instance_method(_Geom.Ax1_reverse)
    reversed = _swig_new_instance_method(_Geom.Ax1_reversed)
    mirror = _swig_new_instance_method(_Geom.Ax1_mirror)
    mirrored = _swig_new_instance_method(_Geom.Ax1_mirrored)
    rotate = _swig_new_instance_method(_Geom.Ax1_rotate)
    rotated = _swig_new_instance_method(_Geom.Ax1_rotated)
    scale = _swig_new_instance_method(_Geom.Ax1_scale)
    scaled = _swig_new_instance_method(_Geom.Ax1_scaled)
    transform = _swig_new_instance_method(_Geom.Ax1_transform)
    transformed = _swig_new_instance_method(_Geom.Ax1_transformed)
    translate = _swig_new_instance_method(_Geom.Ax1_translate)
    translated = _swig_new_instance_method(_Geom.Ax1_translated)
    __swig_destroy__ = _Geom.delete_Ax1

# Register Ax1 in _Geom:
_Geom.Ax1_swigregister(Ax1)
class Ax2(object):
    r"""Proxy of C++ Geom::Ax2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(Ax2 self) -> Ax2
        __init__(Ax2 self, Pnt P, Dir N, Dir Vx) -> Ax2
        __init__(Ax2 self, Pnt P, Dir V) -> Ax2
        __init__(Ax2 self, Pnt aP, Dir aZDir, Dir aYDir, Dir aXDir) -> Ax2
        """
        _Geom.Ax2_swiginit(self, _Geom.new_Ax2(*args))
    setAxis = _swig_new_instance_method(_Geom.Ax2_setAxis)
    setDirection = _swig_new_instance_method(_Geom.Ax2_setDirection)
    setLocation = _swig_new_instance_method(_Geom.Ax2_setLocation)
    setXDirection = _swig_new_instance_method(_Geom.Ax2_setXDirection)
    setYDirection = _swig_new_instance_method(_Geom.Ax2_setYDirection)
    angle = _swig_new_instance_method(_Geom.Ax2_angle)
    axis = _swig_new_instance_method(_Geom.Ax2_axis)
    direction = _swig_new_instance_method(_Geom.Ax2_direction)
    location = _swig_new_instance_method(_Geom.Ax2_location)
    xDirection = _swig_new_instance_method(_Geom.Ax2_xDirection)
    yDirection = _swig_new_instance_method(_Geom.Ax2_yDirection)
    isCoplanar = _swig_new_instance_method(_Geom.Ax2_isCoplanar)
    mirror = _swig_new_instance_method(_Geom.Ax2_mirror)
    mirrored = _swig_new_instance_method(_Geom.Ax2_mirrored)
    rotate = _swig_new_instance_method(_Geom.Ax2_rotate)
    rotated = _swig_new_instance_method(_Geom.Ax2_rotated)
    scale = _swig_new_instance_method(_Geom.Ax2_scale)
    scaled = _swig_new_instance_method(_Geom.Ax2_scaled)
    transform = _swig_new_instance_method(_Geom.Ax2_transform)
    transformed = _swig_new_instance_method(_Geom.Ax2_transformed)
    translate = _swig_new_instance_method(_Geom.Ax2_translate)
    translated = _swig_new_instance_method(_Geom.Ax2_translated)
    isEqual = _swig_new_instance_method(_Geom.Ax2_isEqual)
    __swig_destroy__ = _Geom.delete_Ax2

# Register Ax2 in _Geom:
_Geom.Ax2_swigregister(Ax2)
class Ax3(object):
    r"""Proxy of C++ Geom::Ax3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(Ax3 self) -> Ax3
        __init__(Ax3 self, Ax2 A) -> Ax3
        __init__(Ax3 self, Pnt P, Dir N, Dir Vx) -> Ax3
        __init__(Ax3 self, Pnt P, Dir V) -> Ax3
        """
        _Geom.Ax3_swiginit(self, _Geom.new_Ax3(*args))
    xReverse = _swig_new_instance_method(_Geom.Ax3_xReverse)
    yReverse = _swig_new_instance_method(_Geom.Ax3_yReverse)
    zReverse = _swig_new_instance_method(_Geom.Ax3_zReverse)
    setAxis = _swig_new_instance_method(_Geom.Ax3_setAxis)
    setDirection = _swig_new_instance_method(_Geom.Ax3_setDirection)
    setLocation = _swig_new_instance_method(_Geom.Ax3_setLocation)
    setXDirection = _swig_new_instance_method(_Geom.Ax3_setXDirection)
    setYDirection = _swig_new_instance_method(_Geom.Ax3_setYDirection)
    angle = _swig_new_instance_method(_Geom.Ax3_angle)
    axis = _swig_new_instance_method(_Geom.Ax3_axis)
    axis2 = _swig_new_instance_method(_Geom.Ax3_axis2)
    direction = _swig_new_instance_method(_Geom.Ax3_direction)
    location = _swig_new_instance_method(_Geom.Ax3_location)
    xDirection = _swig_new_instance_method(_Geom.Ax3_xDirection)
    yDirection = _swig_new_instance_method(_Geom.Ax3_yDirection)
    direct = _swig_new_instance_method(_Geom.Ax3_direct)
    isCoplanar = _swig_new_instance_method(_Geom.Ax3_isCoplanar)
    mirror = _swig_new_instance_method(_Geom.Ax3_mirror)
    mirrored = _swig_new_instance_method(_Geom.Ax3_mirrored)
    rotate = _swig_new_instance_method(_Geom.Ax3_rotate)
    rotated = _swig_new_instance_method(_Geom.Ax3_rotated)
    scale = _swig_new_instance_method(_Geom.Ax3_scale)
    scaled = _swig_new_instance_method(_Geom.Ax3_scaled)
    transform = _swig_new_instance_method(_Geom.Ax3_transform)
    transformed = _swig_new_instance_method(_Geom.Ax3_transformed)
    translate = _swig_new_instance_method(_Geom.Ax3_translate)
    translated = _swig_new_instance_method(_Geom.Ax3_translated)
    __swig_destroy__ = _Geom.delete_Ax3

# Register Ax3 in _Geom:
_Geom.Ax3_swigregister(Ax3)
class Bnd_Box(object):
    r"""Proxy of C++ Geom::Bnd_Box class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(Bnd_Box self) -> Bnd_Box
        __init__(Bnd_Box self, Pnt min, Pnt max) -> Bnd_Box
        """
        _Geom.Bnd_Box_swiginit(self, _Geom.new_Bnd_Box(*args))
    SetWhole = _swig_new_instance_method(_Geom.Bnd_Box_SetWhole)
    SetVoid = _swig_new_instance_method(_Geom.Bnd_Box_SetVoid)
    Set = _swig_new_instance_method(_Geom.Bnd_Box_Set)
    Update = _swig_new_instance_method(_Geom.Bnd_Box_Update)
    SetGap = _swig_new_instance_method(_Geom.Bnd_Box_SetGap)
    Enlarge = _swig_new_instance_method(_Geom.Bnd_Box_Enlarge)
    Get = _swig_new_instance_method(_Geom.Bnd_Box_Get)
    GetXmin = _swig_new_instance_method(_Geom.Bnd_Box_GetXmin)
    GetYmin = _swig_new_instance_method(_Geom.Bnd_Box_GetYmin)
    GetZmin = _swig_new_instance_method(_Geom.Bnd_Box_GetZmin)
    GetXmax = _swig_new_instance_method(_Geom.Bnd_Box_GetXmax)
    GetYmax = _swig_new_instance_method(_Geom.Bnd_Box_GetYmax)
    GetZmax = _swig_new_instance_method(_Geom.Bnd_Box_GetZmax)
    GetXsize = _swig_new_instance_method(_Geom.Bnd_Box_GetXsize)
    GetYsize = _swig_new_instance_method(_Geom.Bnd_Box_GetYsize)
    GetZsize = _swig_new_instance_method(_Geom.Bnd_Box_GetZsize)
    GetMin = _swig_new_instance_method(_Geom.Bnd_Box_GetMin)
    GetMax = _swig_new_instance_method(_Geom.Bnd_Box_GetMax)
    GetCornerPoints = _swig_new_instance_method(_Geom.Bnd_Box_GetCornerPoints)
    GetCenter = _swig_new_instance_method(_Geom.Bnd_Box_GetCenter)
    GetSize = _swig_new_instance_method(_Geom.Bnd_Box_GetSize)
    OpenXmin = _swig_new_instance_method(_Geom.Bnd_Box_OpenXmin)
    OpenXmax = _swig_new_instance_method(_Geom.Bnd_Box_OpenXmax)
    OpenYmin = _swig_new_instance_method(_Geom.Bnd_Box_OpenYmin)
    OpenYmax = _swig_new_instance_method(_Geom.Bnd_Box_OpenYmax)
    OpenZmin = _swig_new_instance_method(_Geom.Bnd_Box_OpenZmin)
    OpenZmax = _swig_new_instance_method(_Geom.Bnd_Box_OpenZmax)
    IsOpenXmin = _swig_new_instance_method(_Geom.Bnd_Box_IsOpenXmin)
    IsOpenXmax = _swig_new_instance_method(_Geom.Bnd_Box_IsOpenXmax)
    IsOpenYmin = _swig_new_instance_method(_Geom.Bnd_Box_IsOpenYmin)
    IsOpenYmax = _swig_new_instance_method(_Geom.Bnd_Box_IsOpenYmax)
    IsOpenZmin = _swig_new_instance_method(_Geom.Bnd_Box_IsOpenZmin)
    IsOpenZmax = _swig_new_instance_method(_Geom.Bnd_Box_IsOpenZmax)
    IsWhole = _swig_new_instance_method(_Geom.Bnd_Box_IsWhole)
    IsVoid = _swig_new_instance_method(_Geom.Bnd_Box_IsVoid)
    Transformed = _swig_new_instance_method(_Geom.Bnd_Box_Transformed)
    Add = _swig_new_instance_method(_Geom.Bnd_Box_Add)
    IsOut = _swig_new_instance_method(_Geom.Bnd_Box_IsOut)
    GetMinDifference = _swig_new_instance_method(_Geom.Bnd_Box_GetMinDifference)
    __swig_destroy__ = _Geom.delete_Bnd_Box

# Register Bnd_Box in _Geom:
_Geom.Bnd_Box_swigregister(Bnd_Box)
class Circ(object):
    r"""Proxy of C++ Geom::Circ class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(Circ self) -> Circ
        __init__(Circ self, Ax2 A2, double const Radius) -> Circ
        """
        _Geom.Circ_swiginit(self, _Geom.new_Circ(*args))
    setAxis = _swig_new_instance_method(_Geom.Circ_setAxis)
    setLocation = _swig_new_instance_method(_Geom.Circ_setLocation)
    setPosition = _swig_new_instance_method(_Geom.Circ_setPosition)
    setRadius = _swig_new_instance_method(_Geom.Circ_setRadius)
    area = _swig_new_instance_method(_Geom.Circ_area)
    axis = _swig_new_instance_method(_Geom.Circ_axis)
    length = _swig_new_instance_method(_Geom.Circ_length)
    location = _swig_new_instance_method(_Geom.Circ_location)
    position = _swig_new_instance_method(_Geom.Circ_position)
    radius = _swig_new_instance_method(_Geom.Circ_radius)
    xAxis = _swig_new_instance_method(_Geom.Circ_xAxis)
    yAxis = _swig_new_instance_method(_Geom.Circ_yAxis)
    distance = _swig_new_instance_method(_Geom.Circ_distance)
    squareDistance = _swig_new_instance_method(_Geom.Circ_squareDistance)
    contains = _swig_new_instance_method(_Geom.Circ_contains)
    mirror = _swig_new_instance_method(_Geom.Circ_mirror)
    mirrored = _swig_new_instance_method(_Geom.Circ_mirrored)
    rotate = _swig_new_instance_method(_Geom.Circ_rotate)
    rotated = _swig_new_instance_method(_Geom.Circ_rotated)
    scale = _swig_new_instance_method(_Geom.Circ_scale)
    scaled = _swig_new_instance_method(_Geom.Circ_scaled)
    transform = _swig_new_instance_method(_Geom.Circ_transform)
    transformed = _swig_new_instance_method(_Geom.Circ_transformed)
    translate = _swig_new_instance_method(_Geom.Circ_translate)
    translated = _swig_new_instance_method(_Geom.Circ_translated)
    __swig_destroy__ = _Geom.delete_Circ

# Register Circ in _Geom:
_Geom.Circ_swigregister(Circ)
class CompoundPlaneAngle(object):
    r"""Proxy of C++ Geom::CompoundPlaneAngle class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(CompoundPlaneAngle self) -> CompoundPlaneAngle
        __init__(CompoundPlaneAngle self, int degrees, int minutes, int seconds) -> CompoundPlaneAngle
        __init__(CompoundPlaneAngle self, int degrees, int minutes, int seconds, int millionthSeconds) -> CompoundPlaneAngle
        """
        _Geom.CompoundPlaneAngle_swiginit(self, _Geom.new_CompoundPlaneAngle(*args))
    setDegrees = _swig_new_instance_method(_Geom.CompoundPlaneAngle_setDegrees)
    getDegrees = _swig_new_instance_method(_Geom.CompoundPlaneAngle_getDegrees)
    setMinutes = _swig_new_instance_method(_Geom.CompoundPlaneAngle_setMinutes)
    getMinutes = _swig_new_instance_method(_Geom.CompoundPlaneAngle_getMinutes)
    setSeconds = _swig_new_instance_method(_Geom.CompoundPlaneAngle_setSeconds)
    getSeconds = _swig_new_instance_method(_Geom.CompoundPlaneAngle_getSeconds)
    setMillionthSeconds = _swig_new_instance_method(_Geom.CompoundPlaneAngle_setMillionthSeconds)
    getMillionthSeconds = _swig_new_instance_method(_Geom.CompoundPlaneAngle_getMillionthSeconds)
    getValues = _swig_new_instance_method(_Geom.CompoundPlaneAngle_getValues)
    __eq__ = _swig_new_instance_method(_Geom.CompoundPlaneAngle___eq__)
    __ne__ = _swig_new_instance_method(_Geom.CompoundPlaneAngle___ne__)
    __swig_destroy__ = _Geom.delete_CompoundPlaneAngle

# Register CompoundPlaneAngle in _Geom:
_Geom.CompoundPlaneAngle_swigregister(CompoundPlaneAngle)
class Dir(object):
    r"""Proxy of C++ Geom::Dir class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(Dir self) -> Dir
        __init__(Dir self, Vec V) -> Dir
        __init__(Dir self, XYZ Coord) -> Dir
        __init__(Dir self, double const Xv, double const Yv, double const Zv) -> Dir
        __init__(Dir self, Dir rhs) -> Dir
        """
        _Geom.Dir_swiginit(self, _Geom.new_Dir(*args))
    XDir = _swig_new_static_method(_Geom.Dir_XDir)
    YDir = _swig_new_static_method(_Geom.Dir_YDir)
    ZDir = _swig_new_static_method(_Geom.Dir_ZDir)
    setCoord = _swig_new_instance_method(_Geom.Dir_setCoord)
    setX = _swig_new_instance_method(_Geom.Dir_setX)
    setY = _swig_new_instance_method(_Geom.Dir_setY)
    setZ = _swig_new_instance_method(_Geom.Dir_setZ)
    setXYZ = _swig_new_instance_method(_Geom.Dir_setXYZ)
    coord = _swig_new_instance_method(_Geom.Dir_coord)
    x = _swig_new_instance_method(_Geom.Dir_x)
    y = _swig_new_instance_method(_Geom.Dir_y)
    z = _swig_new_instance_method(_Geom.Dir_z)
    xyz = _swig_new_instance_method(_Geom.Dir_xyz)
    isEqual = _swig_new_instance_method(_Geom.Dir_isEqual)
    isNormal = _swig_new_instance_method(_Geom.Dir_isNormal)
    isOpposite = _swig_new_instance_method(_Geom.Dir_isOpposite)
    isParallel = _swig_new_instance_method(_Geom.Dir_isParallel)
    angle = _swig_new_instance_method(_Geom.Dir_angle)
    angleWithRef = _swig_new_instance_method(_Geom.Dir_angleWithRef)
    cross = _swig_new_instance_method(_Geom.Dir_cross)
    __ixor__ = _swig_new_instance_method(_Geom.Dir___ixor__)
    crossed = _swig_new_instance_method(_Geom.Dir_crossed)
    __xor__ = _swig_new_instance_method(_Geom.Dir___xor__)
    crossCross = _swig_new_instance_method(_Geom.Dir_crossCross)
    crossCrossed = _swig_new_instance_method(_Geom.Dir_crossCrossed)
    dot = _swig_new_instance_method(_Geom.Dir_dot)
    __mul__ = _swig_new_instance_method(_Geom.Dir___mul__)
    dotCross = _swig_new_instance_method(_Geom.Dir_dotCross)
    reverse = _swig_new_instance_method(_Geom.Dir_reverse)
    reversed = _swig_new_instance_method(_Geom.Dir_reversed)
    __neg__ = _swig_new_instance_method(_Geom.Dir___neg__)
    mirror = _swig_new_instance_method(_Geom.Dir_mirror)
    mirrored = _swig_new_instance_method(_Geom.Dir_mirrored)
    rotate = _swig_new_instance_method(_Geom.Dir_rotate)
    rotated = _swig_new_instance_method(_Geom.Dir_rotated)
    transform = _swig_new_instance_method(_Geom.Dir_transform)
    transformed = _swig_new_instance_method(_Geom.Dir_transformed)
    __eq__ = _swig_new_instance_method(_Geom.Dir___eq__)
    at = _swig_new_instance_method(_Geom.Dir_at)
    __swig_destroy__ = _Geom.delete_Dir

# Register Dir in _Geom:
_Geom.Dir_swigregister(Dir)
Dir_XDir = _Geom.Dir_XDir
Dir_YDir = _Geom.Dir_YDir
Dir_ZDir = _Geom.Dir_ZDir

CoordSpace_WCS = _Geom.CoordSpace_WCS

CoordSpace_LCS = _Geom.CoordSpace_LCS

CurveType_LINE = _Geom.CurveType_LINE

CurveType_CIRCLE = _Geom.CurveType_CIRCLE

CurveType_ELLIPSE = _Geom.CurveType_ELLIPSE

CurveType_PARABOLA = _Geom.CurveType_PARABOLA

CurveType_BEZIERCURVE = _Geom.CurveType_BEZIERCURVE

CurveType_BSPLINECURVE = _Geom.CurveType_BSPLINECURVE

CurveType_HELIX = _Geom.CurveType_HELIX

CurveType_OTHERCURVE = _Geom.CurveType_OTHERCURVE

SurfaceType_PLANE = _Geom.SurfaceType_PLANE

SurfaceType_CYLINDER = _Geom.SurfaceType_CYLINDER

SurfaceType_CONE = _Geom.SurfaceType_CONE

SurfaceType_SPHERE = _Geom.SurfaceType_SPHERE

SurfaceType_TORUS = _Geom.SurfaceType_TORUS

SurfaceType_BEZIERSURFACE = _Geom.SurfaceType_BEZIERSURFACE

SurfaceType_BSPLINESURFACE = _Geom.SurfaceType_BSPLINESURFACE

SurfaceType_SURFACEOFREVOLUTION = _Geom.SurfaceType_SURFACEOFREVOLUTION

SurfaceType_SURFACEOFEXTRUSION = _Geom.SurfaceType_SURFACEOFEXTRUSION

SurfaceType_OFFSETSURFACE = _Geom.SurfaceType_OFFSETSURFACE

SurfaceType_OTHERSURFACE = _Geom.SurfaceType_OTHERSURFACE

IfcBSplineCurveForm_POLYLINE_FORM = _Geom.IfcBSplineCurveForm_POLYLINE_FORM

IfcBSplineCurveForm_CIRCULAR_ARC = _Geom.IfcBSplineCurveForm_CIRCULAR_ARC

IfcBSplineCurveForm_ELLIPTIC_ARC = _Geom.IfcBSplineCurveForm_ELLIPTIC_ARC

IfcBSplineCurveForm_PARABOLIC_ARC = _Geom.IfcBSplineCurveForm_PARABOLIC_ARC

IfcBSplineCurveForm_HYPERBOLIC_ARC = _Geom.IfcBSplineCurveForm_HYPERBOLIC_ARC

IfcBSplineCurveForm_UNSPECIFIED_CURVE_FORM = _Geom.IfcBSplineCurveForm_UNSPECIFIED_CURVE_FORM

IfcBSplineSurfaceForm_PLANE_SURF = _Geom.IfcBSplineSurfaceForm_PLANE_SURF

IfcBSplineSurfaceForm_CYLINDRICAL_SURF = _Geom.IfcBSplineSurfaceForm_CYLINDRICAL_SURF

IfcBSplineSurfaceForm_CONICAL_SURF = _Geom.IfcBSplineSurfaceForm_CONICAL_SURF

IfcBSplineSurfaceForm_SPHERICAL_SURF = _Geom.IfcBSplineSurfaceForm_SPHERICAL_SURF

IfcBSplineSurfaceForm_TOROIDAL_SURF = _Geom.IfcBSplineSurfaceForm_TOROIDAL_SURF

IfcBSplineSurfaceForm_SURF_OF_REVOLUTION = _Geom.IfcBSplineSurfaceForm_SURF_OF_REVOLUTION

IfcBSplineSurfaceForm_RULED_SURF = _Geom.IfcBSplineSurfaceForm_RULED_SURF

IfcBSplineSurfaceForm_GENERALISED_CONE = _Geom.IfcBSplineSurfaceForm_GENERALISED_CONE

IfcBSplineSurfaceForm_QUADRIC_SURF = _Geom.IfcBSplineSurfaceForm_QUADRIC_SURF

IfcBSplineSurfaceForm_SURF_OF_LINEAR_EXTRUSION = _Geom.IfcBSplineSurfaceForm_SURF_OF_LINEAR_EXTRUSION

IfcBSplineSurfaceForm_UNSPECIFIED_SURFACE_FORM = _Geom.IfcBSplineSurfaceForm_UNSPECIFIED_SURFACE_FORM

ENCLOSING = _Geom.ENCLOSING

ENCLOSED = _Geom.ENCLOSED

OUTSIDE = _Geom.OUTSIDE

UNQUALIFIED = _Geom.UNQUALIFIED

class GeomTools(object):
    r"""Proxy of C++ Geom::GeomTools class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(GeomTools self) -> GeomTools"""
        _Geom.GeomTools_swiginit(self, _Geom.new_GeomTools())
    __swig_destroy__ = _Geom.delete_GeomTools
    makeLineFrom2Points = _swig_new_static_method(_Geom.GeomTools_makeLineFrom2Points)
    projectPointOnPlane = _swig_new_static_method(_Geom.GeomTools_projectPointOnPlane)
    isPointOnPlane = _swig_new_static_method(_Geom.GeomTools_isPointOnPlane)
    projectPointOnLine = _swig_new_static_method(_Geom.GeomTools_projectPointOnLine)
    projectPointOnCircle = _swig_new_static_method(_Geom.GeomTools_projectPointOnCircle)
    midpoint = _swig_new_static_method(_Geom.GeomTools_midpoint)
    getAngleWithPlane = _swig_new_static_method(_Geom.GeomTools_getAngleWithPlane)
    getAngleBetweenVectors = _swig_new_static_method(_Geom.GeomTools_getAngleBetweenVectors)
    angleBetween = _swig_new_static_method(_Geom.GeomTools_angleBetween)
    get3AnglePoints = _swig_new_static_method(_Geom.GeomTools_get3AnglePoints)
    getDistanceBetween2Points = _swig_new_static_method(_Geom.GeomTools_getDistanceBetween2Points)
    findClosestPointToPoints = _swig_new_static_method(_Geom.GeomTools_findClosestPointToPoints)
    isEqual = _swig_new_static_method(_Geom.GeomTools_isEqual)
    isEqual2d = _swig_new_static_method(_Geom.GeomTools_isEqual2d)
    intersectLineWithLine = _swig_new_static_method(_Geom.GeomTools_intersectLineWithLine)
    intersectDirWithDir = _swig_new_static_method(_Geom.GeomTools_intersectDirWithDir)
    intersectLineWithPlane = _swig_new_static_method(_Geom.GeomTools_intersectLineWithPlane)
    intersectBBoxWithPlane = _swig_new_static_method(_Geom.GeomTools_intersectBBoxWithPlane)
    intersectLineWithBoundedRect = _swig_new_static_method(_Geom.GeomTools_intersectLineWithBoundedRect)
    intersectPlaneWithPlane = _swig_new_static_method(_Geom.GeomTools_intersectPlaneWithPlane)
    intersectLineWithBBox = _swig_new_static_method(_Geom.GeomTools_intersectLineWithBBox)
    makePlaneFrom2Lines = _swig_new_static_method(_Geom.GeomTools_makePlaneFrom2Lines)
    makeCircleFrom3Points = _swig_new_static_method(_Geom.GeomTools_makeCircleFrom3Points)
    makeCirclesFrom2TangentsAndRadius = _swig_new_static_method(_Geom.GeomTools_makeCirclesFrom2TangentsAndRadius)
    makeCirclesFrom2TangentsAndCenterOnLine = _swig_new_static_method(_Geom.GeomTools_makeCirclesFrom2TangentsAndCenterOnLine)
    makeLinePerpendicularToLineThroughPoint = _swig_new_static_method(_Geom.GeomTools_makeLinePerpendicularToLineThroughPoint)
    make2DLines_Tangent2Circles = _swig_new_static_method(_Geom.GeomTools_make2DLines_Tangent2Circles)
    make2DLines_TangentCirclePoint = _swig_new_static_method(_Geom.GeomTools_make2DLines_TangentCirclePoint)
    makeLines_BisLineLine = _swig_new_static_method(_Geom.GeomTools_makeLines_BisLineLine)
    make2DCircles_RadiusPointPoint = _swig_new_static_method(_Geom.GeomTools_make2DCircles_RadiusPointPoint)
    makeCircles_RadiusLinePoint = _swig_new_static_method(_Geom.GeomTools_makeCircles_RadiusLinePoint)
    makeCircles_RadiusCirclePoint = _swig_new_static_method(_Geom.GeomTools_makeCircles_RadiusCirclePoint)
    makeCircles_RadiusLineLine = _swig_new_static_method(_Geom.GeomTools_makeCircles_RadiusLineLine)
    makeCircles_RadiusLineCircle = _swig_new_static_method(_Geom.GeomTools_makeCircles_RadiusLineCircle)
    makeCircles_RadiusCircleCircle = _swig_new_static_method(_Geom.GeomTools_makeCircles_RadiusCircleCircle)
    calculateAngleFrom3Points = _swig_new_static_method(_Geom.GeomTools_calculateAngleFrom3Points)
    getSignedDistanceFromPointToPlane = _swig_new_static_method(_Geom.GeomTools_getSignedDistanceFromPointToPlane)
    convertRadianToDegree = _swig_new_static_method(_Geom.GeomTools_convertRadianToDegree)
    convertDegreeToRadian = _swig_new_static_method(_Geom.GeomTools_convertDegreeToRadian)
    convertPercentToRadian = _swig_new_static_method(_Geom.GeomTools_convertPercentToRadian)
    convertRadianToPercent = _swig_new_static_method(_Geom.GeomTools_convertRadianToPercent)
    getNormalizedCoordinatesRelativeToBndBox = _swig_new_static_method(_Geom.GeomTools_getNormalizedCoordinatesRelativeToBndBox)
    getCoordinatesFromNormalizedRelativeToBndBox = _swig_new_static_method(_Geom.GeomTools_getCoordinatesFromNormalizedRelativeToBndBox)
    getAnglesFromPosition = _swig_new_static_method(_Geom.GeomTools_getAnglesFromPosition)
    pointsOnSamePlane = _swig_new_static_method(_Geom.GeomTools_pointsOnSamePlane)
    pointsAreCollinear = _swig_new_static_method(_Geom.GeomTools_pointsAreCollinear)
    debugOccTransform = _swig_new_static_method(_Geom.GeomTools_debugOccTransform)
    getUnitCylinderLineIntersection = _swig_new_static_method(_Geom.GeomTools_getUnitCylinderLineIntersection)
    getCylinderLineIntersection = _swig_new_static_method(_Geom.GeomTools_getCylinderLineIntersection)
    getClosestAxis = _swig_new_static_method(_Geom.GeomTools_getClosestAxis)
    gcd = _swig_new_static_method(_Geom.GeomTools_gcd)
    circumscribeSphereAroundBox = _swig_new_static_method(_Geom.GeomTools_circumscribeSphereAroundBox)
    getIntersectionWithTriangle = _swig_new_static_method(_Geom.GeomTools_getIntersectionWithTriangle)
    calculatePositionToViewBoundingBoxForDefaultView = _swig_new_static_method(_Geom.GeomTools_calculatePositionToViewBoundingBoxForDefaultView)
    lineValue = _swig_new_static_method(_Geom.GeomTools_lineValue)
    computeComplemetaryAngle = _swig_new_static_method(_Geom.GeomTools_computeComplemetaryAngle)
    computeClothoidMaxR = _swig_new_static_method(_Geom.GeomTools_computeClothoidMaxR)
    computeTrsfFromAx2 = _swig_new_static_method(_Geom.GeomTools_computeTrsfFromAx2)
    isConvexPolyon = _swig_new_static_method(_Geom.GeomTools_isConvexPolyon)
    rayTriangleIntersect = _swig_new_static_method(_Geom.GeomTools_rayTriangleIntersect)
    centroid = _swig_new_static_method(_Geom.GeomTools_centroid)
    testRayThruTriangle = _swig_new_static_method(_Geom.GeomTools_testRayThruTriangle)
    approximateAx2 = _swig_new_static_method(_Geom.GeomTools_approximateAx2)
    removeSequentialDuplicates = _swig_new_static_method(_Geom.GeomTools_removeSequentialDuplicates)
    makePlaneFrom3Points = _swig_new_static_method(_Geom.GeomTools_makePlaneFrom3Points)
    makeLineFrom2Points1 = _swig_new_static_method(_Geom.GeomTools_makeLineFrom2Points1)
    projectPointOnPlane1 = _swig_new_static_method(_Geom.GeomTools_projectPointOnPlane1)
    projectPointOnPlane2 = _swig_new_static_method(_Geom.GeomTools_projectPointOnPlane2)
    projectPointOnLine1 = _swig_new_static_method(_Geom.GeomTools_projectPointOnLine1)
    projectPointOnLine2 = _swig_new_static_method(_Geom.GeomTools_projectPointOnLine2)
    projectPointOnCircle1 = _swig_new_static_method(_Geom.GeomTools_projectPointOnCircle1)
    makeAxisPlacementFrom2Points = _swig_new_static_method(_Geom.GeomTools_makeAxisPlacementFrom2Points)

# Register GeomTools in _Geom:
_Geom.GeomTools_swigregister(GeomTools)
GeomTools_makeLineFrom2Points = _Geom.GeomTools_makeLineFrom2Points
GeomTools_projectPointOnPlane = _Geom.GeomTools_projectPointOnPlane
GeomTools_isPointOnPlane = _Geom.GeomTools_isPointOnPlane
GeomTools_projectPointOnLine = _Geom.GeomTools_projectPointOnLine
GeomTools_projectPointOnCircle = _Geom.GeomTools_projectPointOnCircle
GeomTools_midpoint = _Geom.GeomTools_midpoint
GeomTools_getAngleWithPlane = _Geom.GeomTools_getAngleWithPlane
GeomTools_getAngleBetweenVectors = _Geom.GeomTools_getAngleBetweenVectors
GeomTools_angleBetween = _Geom.GeomTools_angleBetween
GeomTools_get3AnglePoints = _Geom.GeomTools_get3AnglePoints
GeomTools_getDistanceBetween2Points = _Geom.GeomTools_getDistanceBetween2Points
GeomTools_findClosestPointToPoints = _Geom.GeomTools_findClosestPointToPoints
GeomTools_isEqual = _Geom.GeomTools_isEqual
GeomTools_isEqual2d = _Geom.GeomTools_isEqual2d
GeomTools_intersectLineWithLine = _Geom.GeomTools_intersectLineWithLine
GeomTools_intersectDirWithDir = _Geom.GeomTools_intersectDirWithDir
GeomTools_intersectLineWithPlane = _Geom.GeomTools_intersectLineWithPlane
GeomTools_intersectBBoxWithPlane = _Geom.GeomTools_intersectBBoxWithPlane
GeomTools_intersectLineWithBoundedRect = _Geom.GeomTools_intersectLineWithBoundedRect
GeomTools_intersectPlaneWithPlane = _Geom.GeomTools_intersectPlaneWithPlane
GeomTools_intersectLineWithBBox = _Geom.GeomTools_intersectLineWithBBox
GeomTools_makePlaneFrom2Lines = _Geom.GeomTools_makePlaneFrom2Lines
GeomTools_makeCircleFrom3Points = _Geom.GeomTools_makeCircleFrom3Points
GeomTools_makeCirclesFrom2TangentsAndRadius = _Geom.GeomTools_makeCirclesFrom2TangentsAndRadius
GeomTools_makeCirclesFrom2TangentsAndCenterOnLine = _Geom.GeomTools_makeCirclesFrom2TangentsAndCenterOnLine
GeomTools_makeLinePerpendicularToLineThroughPoint = _Geom.GeomTools_makeLinePerpendicularToLineThroughPoint
GeomTools_make2DLines_Tangent2Circles = _Geom.GeomTools_make2DLines_Tangent2Circles
GeomTools_make2DLines_TangentCirclePoint = _Geom.GeomTools_make2DLines_TangentCirclePoint
GeomTools_makeLines_BisLineLine = _Geom.GeomTools_makeLines_BisLineLine
GeomTools_make2DCircles_RadiusPointPoint = _Geom.GeomTools_make2DCircles_RadiusPointPoint
GeomTools_makeCircles_RadiusLinePoint = _Geom.GeomTools_makeCircles_RadiusLinePoint
GeomTools_makeCircles_RadiusCirclePoint = _Geom.GeomTools_makeCircles_RadiusCirclePoint
GeomTools_makeCircles_RadiusLineLine = _Geom.GeomTools_makeCircles_RadiusLineLine
GeomTools_makeCircles_RadiusLineCircle = _Geom.GeomTools_makeCircles_RadiusLineCircle
GeomTools_makeCircles_RadiusCircleCircle = _Geom.GeomTools_makeCircles_RadiusCircleCircle
GeomTools_calculateAngleFrom3Points = _Geom.GeomTools_calculateAngleFrom3Points
GeomTools_getSignedDistanceFromPointToPlane = _Geom.GeomTools_getSignedDistanceFromPointToPlane
GeomTools_convertRadianToDegree = _Geom.GeomTools_convertRadianToDegree
GeomTools_convertDegreeToRadian = _Geom.GeomTools_convertDegreeToRadian
GeomTools_convertPercentToRadian = _Geom.GeomTools_convertPercentToRadian
GeomTools_convertRadianToPercent = _Geom.GeomTools_convertRadianToPercent
GeomTools_getNormalizedCoordinatesRelativeToBndBox = _Geom.GeomTools_getNormalizedCoordinatesRelativeToBndBox
GeomTools_getCoordinatesFromNormalizedRelativeToBndBox = _Geom.GeomTools_getCoordinatesFromNormalizedRelativeToBndBox
GeomTools_getAnglesFromPosition = _Geom.GeomTools_getAnglesFromPosition
GeomTools_pointsOnSamePlane = _Geom.GeomTools_pointsOnSamePlane
GeomTools_pointsAreCollinear = _Geom.GeomTools_pointsAreCollinear
GeomTools_debugOccTransform = _Geom.GeomTools_debugOccTransform
GeomTools_getUnitCylinderLineIntersection = _Geom.GeomTools_getUnitCylinderLineIntersection
GeomTools_getCylinderLineIntersection = _Geom.GeomTools_getCylinderLineIntersection
GeomTools_getClosestAxis = _Geom.GeomTools_getClosestAxis
GeomTools_gcd = _Geom.GeomTools_gcd
GeomTools_circumscribeSphereAroundBox = _Geom.GeomTools_circumscribeSphereAroundBox
GeomTools_getIntersectionWithTriangle = _Geom.GeomTools_getIntersectionWithTriangle
GeomTools_calculatePositionToViewBoundingBoxForDefaultView = _Geom.GeomTools_calculatePositionToViewBoundingBoxForDefaultView
GeomTools_lineValue = _Geom.GeomTools_lineValue
GeomTools_computeComplemetaryAngle = _Geom.GeomTools_computeComplemetaryAngle
GeomTools_computeClothoidMaxR = _Geom.GeomTools_computeClothoidMaxR
GeomTools_computeTrsfFromAx2 = _Geom.GeomTools_computeTrsfFromAx2
GeomTools_isConvexPolyon = _Geom.GeomTools_isConvexPolyon
GeomTools_rayTriangleIntersect = _Geom.GeomTools_rayTriangleIntersect
GeomTools_centroid = _Geom.GeomTools_centroid
GeomTools_testRayThruTriangle = _Geom.GeomTools_testRayThruTriangle
GeomTools_approximateAx2 = _Geom.GeomTools_approximateAx2
GeomTools_removeSequentialDuplicates = _Geom.GeomTools_removeSequentialDuplicates
GeomTools_makePlaneFrom3Points = _Geom.GeomTools_makePlaneFrom3Points
GeomTools_makeLineFrom2Points1 = _Geom.GeomTools_makeLineFrom2Points1
GeomTools_projectPointOnPlane1 = _Geom.GeomTools_projectPointOnPlane1
GeomTools_projectPointOnPlane2 = _Geom.GeomTools_projectPointOnPlane2
GeomTools_projectPointOnLine1 = _Geom.GeomTools_projectPointOnLine1
GeomTools_projectPointOnLine2 = _Geom.GeomTools_projectPointOnLine2
GeomTools_projectPointOnCircle1 = _Geom.GeomTools_projectPointOnCircle1
GeomTools_makeAxisPlacementFrom2Points = _Geom.GeomTools_makeAxisPlacementFrom2Points

class GeometricTools(object):
    r"""Proxy of C++ Geom::GeometricTools class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(GeometricTools self) -> GeometricTools"""
        _Geom.GeometricTools_swiginit(self, _Geom.new_GeometricTools())
    __swig_destroy__ = _Geom.delete_GeometricTools
    getFaceNormal = _swig_new_static_method(_Geom.GeometricTools_getFaceNormal)
    getNFaceNormal = _swig_new_static_method(_Geom.GeometricTools_getNFaceNormal)
    getNFaceNormalNoExc = _swig_new_static_method(_Geom.GeometricTools_getNFaceNormalNoExc)
    getConcaveFaceNormalXY = _swig_new_static_method(_Geom.GeometricTools_getConcaveFaceNormalXY)
    getNonColinearEdges = _swig_new_static_method(_Geom.GeometricTools_getNonColinearEdges)
    savePoint = _swig_new_static_method(_Geom.GeometricTools_savePoint)
    isEqual = _swig_new_static_method(_Geom.GeometricTools_isEqual)
    roundValue = _swig_new_static_method(_Geom.GeometricTools_roundValue)
    roundfValue = _swig_new_static_method(_Geom.GeometricTools_roundfValue)
    round = _swig_new_static_method(_Geom.GeometricTools_round)
    roundValueOffset = _swig_new_static_method(_Geom.GeometricTools_roundValueOffset)
    isEven = _swig_new_static_method(_Geom.GeometricTools_isEven)
    isOdd = _swig_new_static_method(_Geom.GeometricTools_isOdd)
    factorial = _swig_new_static_method(_Geom.GeometricTools_factorial)
    getMedianPlaneFromPoints = _swig_new_static_method(_Geom.GeometricTools_getMedianPlaneFromPoints)

# Register GeometricTools in _Geom:
_Geom.GeometricTools_swigregister(GeometricTools)
GeometricTools_getFaceNormal = _Geom.GeometricTools_getFaceNormal
GeometricTools_getNFaceNormal = _Geom.GeometricTools_getNFaceNormal
GeometricTools_getNFaceNormalNoExc = _Geom.GeometricTools_getNFaceNormalNoExc
GeometricTools_getConcaveFaceNormalXY = _Geom.GeometricTools_getConcaveFaceNormalXY
GeometricTools_getNonColinearEdges = _Geom.GeometricTools_getNonColinearEdges
GeometricTools_savePoint = _Geom.GeometricTools_savePoint
GeometricTools_isEqual = _Geom.GeometricTools_isEqual
GeometricTools_roundValue = _Geom.GeometricTools_roundValue
GeometricTools_roundfValue = _Geom.GeometricTools_roundfValue
GeometricTools_round = _Geom.GeometricTools_round
GeometricTools_roundValueOffset = _Geom.GeometricTools_roundValueOffset
GeometricTools_isEven = _Geom.GeometricTools_isEven
GeometricTools_isOdd = _Geom.GeometricTools_isOdd
GeometricTools_factorial = _Geom.GeometricTools_factorial
GeometricTools_getMedianPlaneFromPoints = _Geom.GeometricTools_getMedianPlaneFromPoints

class GTrsf(object):
    r"""Proxy of C++ Geom::GTrsf class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(GTrsf self) -> GTrsf
        __init__(GTrsf self, Trsf T) -> GTrsf
        __init__(GTrsf self, Mat M, XYZ V) -> GTrsf
        """
        _Geom.GTrsf_swiginit(self, _Geom.new_GTrsf(*args))
    SetAffinity = _swig_new_instance_method(_Geom.GTrsf_SetAffinity)
    SetValue = _swig_new_instance_method(_Geom.GTrsf_SetValue)
    SetVectorialPart = _swig_new_instance_method(_Geom.GTrsf_SetVectorialPart)
    SetTranslationPart = _swig_new_instance_method(_Geom.GTrsf_SetTranslationPart)
    SetTrsf = _swig_new_instance_method(_Geom.GTrsf_SetTrsf)
    IsNegative = _swig_new_instance_method(_Geom.GTrsf_IsNegative)
    IsSingular = _swig_new_instance_method(_Geom.GTrsf_IsSingular)
    Form = _swig_new_instance_method(_Geom.GTrsf_Form)
    SetForm = _swig_new_instance_method(_Geom.GTrsf_SetForm)
    TranslationPart = _swig_new_instance_method(_Geom.GTrsf_TranslationPart)
    VectorialPart = _swig_new_instance_method(_Geom.GTrsf_VectorialPart)
    Value = _swig_new_instance_method(_Geom.GTrsf_Value)
    __call__ = _swig_new_instance_method(_Geom.GTrsf___call__)
    Invert = _swig_new_instance_method(_Geom.GTrsf_Invert)
    Inverted = _swig_new_instance_method(_Geom.GTrsf_Inverted)
    Multiply = _swig_new_instance_method(_Geom.GTrsf_Multiply)
    Multiplied = _swig_new_instance_method(_Geom.GTrsf_Multiplied)
    PreMultiply = _swig_new_instance_method(_Geom.GTrsf_PreMultiply)
    Power = _swig_new_instance_method(_Geom.GTrsf_Power)
    Powered = _swig_new_instance_method(_Geom.GTrsf_Powered)
    Transforms = _swig_new_instance_method(_Geom.GTrsf_Transforms)
    Trsf = _swig_new_instance_method(_Geom.GTrsf_Trsf)
    __eq__ = _swig_new_instance_method(_Geom.GTrsf___eq__)
    hash = _swig_new_instance_method(_Geom.GTrsf_hash)
    __swig_destroy__ = _Geom.delete_GTrsf

# Register GTrsf in _Geom:
_Geom.GTrsf_swigregister(GTrsf)
class Lin(object):
    r"""Proxy of C++ Geom::Lin class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(Lin self) -> Lin
        __init__(Lin self, Ax1 A1) -> Lin
        __init__(Lin self, Pnt P, Dir V) -> Lin
        """
        _Geom.Lin_swiginit(self, _Geom.new_Lin(*args))
    reverse = _swig_new_instance_method(_Geom.Lin_reverse)
    reversed = _swig_new_instance_method(_Geom.Lin_reversed)
    setDirection = _swig_new_instance_method(_Geom.Lin_setDirection)
    setLocation = _swig_new_instance_method(_Geom.Lin_setLocation)
    setPosition = _swig_new_instance_method(_Geom.Lin_setPosition)
    direction = _swig_new_instance_method(_Geom.Lin_direction)
    location = _swig_new_instance_method(_Geom.Lin_location)
    position = _swig_new_instance_method(_Geom.Lin_position)
    angle = _swig_new_instance_method(_Geom.Lin_angle)
    contains = _swig_new_instance_method(_Geom.Lin_contains)
    distance = _swig_new_instance_method(_Geom.Lin_distance)
    squareDistance = _swig_new_instance_method(_Geom.Lin_squareDistance)
    normal = _swig_new_instance_method(_Geom.Lin_normal)
    mirror = _swig_new_instance_method(_Geom.Lin_mirror)
    mirrored = _swig_new_instance_method(_Geom.Lin_mirrored)
    rotate = _swig_new_instance_method(_Geom.Lin_rotate)
    rotated = _swig_new_instance_method(_Geom.Lin_rotated)
    scale = _swig_new_instance_method(_Geom.Lin_scale)
    scaled = _swig_new_instance_method(_Geom.Lin_scaled)
    transform = _swig_new_instance_method(_Geom.Lin_transform)
    transformed = _swig_new_instance_method(_Geom.Lin_transformed)
    translate = _swig_new_instance_method(_Geom.Lin_translate)
    translated = _swig_new_instance_method(_Geom.Lin_translated)
    __swig_destroy__ = _Geom.delete_Lin

# Register Lin in _Geom:
_Geom.Lin_swigregister(Lin)
class Mat(object):
    r"""Proxy of C++ Geom::Mat class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(Mat self) -> Mat
        __init__(Mat self, double const a11, double const a12, double const a13, double const a21, double const a22, double const a23, double const a31, double const a32, double const a33) -> Mat
        __init__(Mat self, XYZ Col1, XYZ Col2, XYZ Col3) -> Mat
        """
        _Geom.Mat_swiginit(self, _Geom.new_Mat(*args))
    setCol = _swig_new_instance_method(_Geom.Mat_setCol)
    setCols = _swig_new_instance_method(_Geom.Mat_setCols)
    setCross = _swig_new_instance_method(_Geom.Mat_setCross)
    setDiagonal = _swig_new_instance_method(_Geom.Mat_setDiagonal)
    setDot = _swig_new_instance_method(_Geom.Mat_setDot)
    setIdentity = _swig_new_instance_method(_Geom.Mat_setIdentity)
    isIdentity = _swig_new_instance_method(_Geom.Mat_isIdentity)
    setRotation = _swig_new_instance_method(_Geom.Mat_setRotation)
    setRow = _swig_new_instance_method(_Geom.Mat_setRow)
    setRows = _swig_new_instance_method(_Geom.Mat_setRows)
    setScale = _swig_new_instance_method(_Geom.Mat_setScale)
    setValue = _swig_new_instance_method(_Geom.Mat_setValue)
    column = _swig_new_instance_method(_Geom.Mat_column)
    determinant = _swig_new_instance_method(_Geom.Mat_determinant)
    diagonal = _swig_new_instance_method(_Geom.Mat_diagonal)
    row = _swig_new_instance_method(_Geom.Mat_row)
    value = _swig_new_instance_method(_Geom.Mat_value)
    changeValue = _swig_new_instance_method(_Geom.Mat_changeValue)
    __call__ = _swig_new_instance_method(_Geom.Mat___call__)
    isSingular = _swig_new_instance_method(_Geom.Mat_isSingular)
    add = _swig_new_instance_method(_Geom.Mat_add)
    __iadd__ = _swig_new_instance_method(_Geom.Mat___iadd__)
    added = _swig_new_instance_method(_Geom.Mat_added)
    __add__ = _swig_new_instance_method(_Geom.Mat___add__)
    divide = _swig_new_instance_method(_Geom.Mat_divide)

    def __itruediv__(self, *args):
        return _Geom.Mat___itruediv__(self, *args)
    __idiv__ = __itruediv__


    divided = _swig_new_instance_method(_Geom.Mat_divided)

    def __truediv__(self, *args):
        return _Geom.Mat___truediv__(self, *args)
    __div__ = __truediv__


    invert = _swig_new_instance_method(_Geom.Mat_invert)
    inverted = _swig_new_instance_method(_Geom.Mat_inverted)
    preMultiply = _swig_new_instance_method(_Geom.Mat_preMultiply)
    multiplied = _swig_new_instance_method(_Geom.Mat_multiplied)
    __mul__ = _swig_new_instance_method(_Geom.Mat___mul__)
    multiply = _swig_new_instance_method(_Geom.Mat_multiply)
    __imul__ = _swig_new_instance_method(_Geom.Mat___imul__)
    power = _swig_new_instance_method(_Geom.Mat_power)
    powered = _swig_new_instance_method(_Geom.Mat_powered)
    subtract = _swig_new_instance_method(_Geom.Mat_subtract)
    __isub__ = _swig_new_instance_method(_Geom.Mat___isub__)
    subtracted = _swig_new_instance_method(_Geom.Mat_subtracted)
    __sub__ = _swig_new_instance_method(_Geom.Mat___sub__)
    __eq__ = _swig_new_instance_method(_Geom.Mat___eq__)
    __ne__ = _swig_new_instance_method(_Geom.Mat___ne__)
    transpose = _swig_new_instance_method(_Geom.Mat_transpose)
    transposed = _swig_new_instance_method(_Geom.Mat_transposed)
    computeEulerAngles = _swig_new_instance_method(_Geom.Mat_computeEulerAngles)
    initFromQuaternion = _swig_new_instance_method(_Geom.Mat_initFromQuaternion)
    toQuaternion = _swig_new_instance_method(_Geom.Mat_toQuaternion)
    isEqual = _swig_new_instance_method(_Geom.Mat_isEqual)
    hash = _swig_new_instance_method(_Geom.Mat_hash)
    __swig_destroy__ = _Geom.delete_Mat

# Register Mat in _Geom:
_Geom.Mat_swigregister(Mat)
class Mat2d(object):
    r"""Proxy of C++ Geom::Mat2d class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(Mat2d self) -> Mat2d
        __init__(Mat2d self, XY Col1, XY Col2) -> Mat2d
        """
        _Geom.Mat2d_swiginit(self, _Geom.new_Mat2d(*args))
    add = _swig_new_instance_method(_Geom.Mat2d_add)
    added = _swig_new_instance_method(_Geom.Mat2d_added)
    changeValue = _swig_new_instance_method(_Geom.Mat2d_changeValue)
    column = _swig_new_instance_method(_Geom.Mat2d_column)
    determinant = _swig_new_instance_method(_Geom.Mat2d_determinant)
    diagonal = _swig_new_instance_method(_Geom.Mat2d_diagonal)
    divide = _swig_new_instance_method(_Geom.Mat2d_divide)
    divided = _swig_new_instance_method(_Geom.Mat2d_divided)
    invert = _swig_new_instance_method(_Geom.Mat2d_invert)
    inverted = _swig_new_instance_method(_Geom.Mat2d_inverted)
    isEven = _swig_new_static_method(_Geom.Mat2d_isEven)
    isOdd = _swig_new_static_method(_Geom.Mat2d_isOdd)
    isSingular = _swig_new_instance_method(_Geom.Mat2d_isSingular)
    multiplied = _swig_new_instance_method(_Geom.Mat2d_multiplied)
    multiply = _swig_new_instance_method(_Geom.Mat2d_multiply)
    __iadd__ = _swig_new_instance_method(_Geom.Mat2d___iadd__)
    __add__ = _swig_new_instance_method(_Geom.Mat2d___add__)
    __isub__ = _swig_new_instance_method(_Geom.Mat2d___isub__)
    __sub__ = _swig_new_instance_method(_Geom.Mat2d___sub__)
    __imul__ = _swig_new_instance_method(_Geom.Mat2d___imul__)
    __mul__ = _swig_new_instance_method(_Geom.Mat2d___mul__)

    def __itruediv__(self, *args):
        return _Geom.Mat2d___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __truediv__(self, *args):
        return _Geom.Mat2d___truediv__(self, *args)
    __div__ = __truediv__


    __call__ = _swig_new_instance_method(_Geom.Mat2d___call__)
    power = _swig_new_instance_method(_Geom.Mat2d_power)
    powered = _swig_new_instance_method(_Geom.Mat2d_powered)
    preMultiply = _swig_new_instance_method(_Geom.Mat2d_preMultiply)
    row = _swig_new_instance_method(_Geom.Mat2d_row)
    setCol = _swig_new_instance_method(_Geom.Mat2d_setCol)
    setCols = _swig_new_instance_method(_Geom.Mat2d_setCols)
    setDiagonal = _swig_new_instance_method(_Geom.Mat2d_setDiagonal)
    setIdentity = _swig_new_instance_method(_Geom.Mat2d_setIdentity)
    setRotation = _swig_new_instance_method(_Geom.Mat2d_setRotation)
    setRow = _swig_new_instance_method(_Geom.Mat2d_setRow)
    setRows = _swig_new_instance_method(_Geom.Mat2d_setRows)
    setScale = _swig_new_instance_method(_Geom.Mat2d_setScale)
    setValue = _swig_new_instance_method(_Geom.Mat2d_setValue)
    subtract = _swig_new_instance_method(_Geom.Mat2d_subtract)
    subtracted = _swig_new_instance_method(_Geom.Mat2d_subtracted)
    transpose = _swig_new_instance_method(_Geom.Mat2d_transpose)
    transposed = _swig_new_instance_method(_Geom.Mat2d_transposed)
    value = _swig_new_instance_method(_Geom.Mat2d_value)
    __swig_destroy__ = _Geom.delete_Mat2d

# Register Mat2d in _Geom:
_Geom.Mat2d_swigregister(Mat2d)
Mat2d_isEven = _Geom.Mat2d_isEven
Mat2d_isOdd = _Geom.Mat2d_isOdd

class Trsf2d(object):
    r"""Proxy of C++ Geom::Trsf2d class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Identity = _Geom.Trsf2d_Identity
    
    Rotation = _Geom.Trsf2d_Rotation
    
    Translation = _Geom.Trsf2d_Translation
    
    PntMirror = _Geom.Trsf2d_PntMirror
    
    Ax1Mirror = _Geom.Trsf2d_Ax1Mirror
    
    Ax2Mirror = _Geom.Trsf2d_Ax2Mirror
    
    Scale = _Geom.Trsf2d_Scale
    
    CompoundTrsf = _Geom.Trsf2d_CompoundTrsf
    
    Other = _Geom.Trsf2d_Other
    

    def __init__(self, *args):
        r"""
        __init__(Trsf2d self) -> Trsf2d
        __init__(Trsf2d self, Trsf2d T) -> Trsf2d
        """
        _Geom.Trsf2d_swiginit(self, _Geom.new_Trsf2d(*args))
    form = _swig_new_instance_method(_Geom.Trsf2d_form)
    hVectorialPart = _swig_new_instance_method(_Geom.Trsf2d_hVectorialPart)
    invert = _swig_new_instance_method(_Geom.Trsf2d_invert)
    inverted = _swig_new_instance_method(_Geom.Trsf2d_inverted)
    isNegative = _swig_new_instance_method(_Geom.Trsf2d_isNegative)
    multiplied = _swig_new_instance_method(_Geom.Trsf2d_multiplied)
    multiply = _swig_new_instance_method(_Geom.Trsf2d_multiply)
    __mul__ = _swig_new_instance_method(_Geom.Trsf2d___mul__)
    __imul__ = _swig_new_instance_method(_Geom.Trsf2d___imul__)
    power = _swig_new_instance_method(_Geom.Trsf2d_power)
    powered = _swig_new_instance_method(_Geom.Trsf2d_powered)
    preMultiply = _swig_new_instance_method(_Geom.Trsf2d_preMultiply)
    rotationPart = _swig_new_instance_method(_Geom.Trsf2d_rotationPart)
    scaleFactor = _swig_new_instance_method(_Geom.Trsf2d_scaleFactor)
    setMirror = _swig_new_instance_method(_Geom.Trsf2d_setMirror)
    setRotation = _swig_new_instance_method(_Geom.Trsf2d_setRotation)
    setScale = _swig_new_instance_method(_Geom.Trsf2d_setScale)
    setScaleFactor = _swig_new_instance_method(_Geom.Trsf2d_setScaleFactor)
    setTransformation = _swig_new_instance_method(_Geom.Trsf2d_setTransformation)
    setTranslation = _swig_new_instance_method(_Geom.Trsf2d_setTranslation)
    setTranslationPart = _swig_new_instance_method(_Geom.Trsf2d_setTranslationPart)
    transforms = _swig_new_instance_method(_Geom.Trsf2d_transforms)
    translationPart = _swig_new_instance_method(_Geom.Trsf2d_translationPart)
    value = _swig_new_instance_method(_Geom.Trsf2d_value)
    vectorialPart = _swig_new_instance_method(_Geom.Trsf2d_vectorialPart)
    __swig_destroy__ = _Geom.delete_Trsf2d

# Register Trsf2d in _Geom:
_Geom.Trsf2d_swigregister(Trsf2d)
class GTrsf2d(object):
    r"""Proxy of C++ Geom::GTrsf2d class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(GTrsf2d self) -> GTrsf2d
        __init__(GTrsf2d self, Trsf2d T) -> GTrsf2d
        __init__(GTrsf2d self, Mat2d M, XY V) -> GTrsf2d
        """
        _Geom.GTrsf2d_swiginit(self, _Geom.new_GTrsf2d(*args))
    form = _swig_new_instance_method(_Geom.GTrsf2d_form)
    invert = _swig_new_instance_method(_Geom.GTrsf2d_invert)
    inverted = _swig_new_instance_method(_Geom.GTrsf2d_inverted)
    isNegative = _swig_new_instance_method(_Geom.GTrsf2d_isNegative)
    isSingular = _swig_new_instance_method(_Geom.GTrsf2d_isSingular)
    multiplied = _swig_new_instance_method(_Geom.GTrsf2d_multiplied)
    multiply = _swig_new_instance_method(_Geom.GTrsf2d_multiply)
    __imul__ = _swig_new_instance_method(_Geom.GTrsf2d___imul__)
    __mul__ = _swig_new_instance_method(_Geom.GTrsf2d___mul__)
    __call__ = _swig_new_instance_method(_Geom.GTrsf2d___call__)
    power = _swig_new_instance_method(_Geom.GTrsf2d_power)
    powered = _swig_new_instance_method(_Geom.GTrsf2d_powered)
    preMultiply = _swig_new_instance_method(_Geom.GTrsf2d_preMultiply)
    setAffinity = _swig_new_instance_method(_Geom.GTrsf2d_setAffinity)
    setTranslationPart = _swig_new_instance_method(_Geom.GTrsf2d_setTranslationPart)
    setTrsf2d = _swig_new_instance_method(_Geom.GTrsf2d_setTrsf2d)
    setValue = _swig_new_instance_method(_Geom.GTrsf2d_setValue)
    setVectorialPart = _swig_new_instance_method(_Geom.GTrsf2d_setVectorialPart)
    translationPart = _swig_new_instance_method(_Geom.GTrsf2d_translationPart)
    transformed = _swig_new_instance_method(_Geom.GTrsf2d_transformed)
    transforms = _swig_new_instance_method(_Geom.GTrsf2d_transforms)
    trsf2d = _swig_new_instance_method(_Geom.GTrsf2d_trsf2d)
    value = _swig_new_instance_method(_Geom.GTrsf2d_value)
    vectorialPart = _swig_new_instance_method(_Geom.GTrsf2d_vectorialPart)
    _CSFDB_GetGTrsf2dmatrix = _swig_new_instance_method(_Geom.GTrsf2d__CSFDB_GetGTrsf2dmatrix)
    _CSFDB_GetGTrsf2dloc = _swig_new_instance_method(_Geom.GTrsf2d__CSFDB_GetGTrsf2dloc)
    _CSFDB_GetGTrsf2dshape = _swig_new_instance_method(_Geom.GTrsf2d__CSFDB_GetGTrsf2dshape)
    _CSFDB_SetGTrsf2dshape = _swig_new_instance_method(_Geom.GTrsf2d__CSFDB_SetGTrsf2dshape)
    _CSFDB_GetGTrsf2dscale = _swig_new_instance_method(_Geom.GTrsf2d__CSFDB_GetGTrsf2dscale)
    _CSFDB_SetGTrsf2dscale = _swig_new_instance_method(_Geom.GTrsf2d__CSFDB_SetGTrsf2dscale)
    __swig_destroy__ = _Geom.delete_GTrsf2d

# Register GTrsf2d in _Geom:
_Geom.GTrsf2d_swigregister(GTrsf2d)
class Pln(object):
    r"""Proxy of C++ Geom::Pln class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(Pln self) -> Pln
        __init__(Pln self, Ax3 A3) -> Pln
        __init__(Pln self, Pnt P, Dir V) -> Pln
        __init__(Pln self, double const A, double const B, double const C, double const D) -> Pln
        """
        _Geom.Pln_swiginit(self, _Geom.new_Pln(*args))
    coefficients = _swig_new_instance_method(_Geom.Pln_coefficients)
    setAxis = _swig_new_instance_method(_Geom.Pln_setAxis)
    setLocation = _swig_new_instance_method(_Geom.Pln_setLocation)
    setPosition = _swig_new_instance_method(_Geom.Pln_setPosition)
    uReverse = _swig_new_instance_method(_Geom.Pln_uReverse)
    vReverse = _swig_new_instance_method(_Geom.Pln_vReverse)
    direct = _swig_new_instance_method(_Geom.Pln_direct)
    axis = _swig_new_instance_method(_Geom.Pln_axis)
    location = _swig_new_instance_method(_Geom.Pln_location)
    position = _swig_new_instance_method(_Geom.Pln_position)
    signeddistance = _swig_new_instance_method(_Geom.Pln_signeddistance)
    distance = _swig_new_instance_method(_Geom.Pln_distance)
    squareDistance = _swig_new_instance_method(_Geom.Pln_squareDistance)
    xAxis = _swig_new_instance_method(_Geom.Pln_xAxis)
    yAxis = _swig_new_instance_method(_Geom.Pln_yAxis)
    contains = _swig_new_instance_method(_Geom.Pln_contains)
    mirror = _swig_new_instance_method(_Geom.Pln_mirror)
    mirrored = _swig_new_instance_method(_Geom.Pln_mirrored)
    rotate = _swig_new_instance_method(_Geom.Pln_rotate)
    rotated = _swig_new_instance_method(_Geom.Pln_rotated)
    scale = _swig_new_instance_method(_Geom.Pln_scale)
    scaled = _swig_new_instance_method(_Geom.Pln_scaled)
    transform = _swig_new_instance_method(_Geom.Pln_transform)
    transformed = _swig_new_instance_method(_Geom.Pln_transformed)
    translate = _swig_new_instance_method(_Geom.Pln_translate)
    translated = _swig_new_instance_method(_Geom.Pln_translated)
    __swig_destroy__ = _Geom.delete_Pln

# Register Pln in _Geom:
_Geom.Pln_swigregister(Pln)
class Pnt(object):
    r"""Proxy of C++ Geom::Pnt class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(Pnt self) -> Pnt
        __init__(Pnt self, XYZ Coord) -> Pnt
        __init__(Pnt self, double const Xp, double const Yp, double const Zp=.0) -> Pnt
        __init__(Pnt self, Pnt rhs) -> Pnt
        """
        _Geom.Pnt_swiginit(self, _Geom.new_Pnt(*args))
    ZeroPnt = _swig_new_static_method(_Geom.Pnt_ZeroPnt)
    setCoord = _swig_new_instance_method(_Geom.Pnt_setCoord)
    setX = _swig_new_instance_method(_Geom.Pnt_setX)
    setY = _swig_new_instance_method(_Geom.Pnt_setY)
    setZ = _swig_new_instance_method(_Geom.Pnt_setZ)
    setXYZ = _swig_new_instance_method(_Geom.Pnt_setXYZ)
    x = _swig_new_instance_method(_Geom.Pnt_x)
    y = _swig_new_instance_method(_Geom.Pnt_y)
    z = _swig_new_instance_method(_Geom.Pnt_z)
    fx = _swig_new_instance_method(_Geom.Pnt_fx)
    fy = _swig_new_instance_method(_Geom.Pnt_fy)
    fz = _swig_new_instance_method(_Geom.Pnt_fz)
    xyz = _swig_new_instance_method(_Geom.Pnt_xyz)
    coord = _swig_new_instance_method(_Geom.Pnt_coord)
    changeCoord = _swig_new_instance_method(_Geom.Pnt_changeCoord)
    baryCenter = _swig_new_instance_method(_Geom.Pnt_baryCenter)
    isEqual = _swig_new_instance_method(_Geom.Pnt_isEqual)
    distance = _swig_new_instance_method(_Geom.Pnt_distance)
    squareDistance = _swig_new_instance_method(_Geom.Pnt_squareDistance)
    mirror = _swig_new_instance_method(_Geom.Pnt_mirror)
    mirrored = _swig_new_instance_method(_Geom.Pnt_mirrored)
    rotate = _swig_new_instance_method(_Geom.Pnt_rotate)
    rotated = _swig_new_instance_method(_Geom.Pnt_rotated)
    scale = _swig_new_instance_method(_Geom.Pnt_scale)
    scaled = _swig_new_instance_method(_Geom.Pnt_scaled)
    transform = _swig_new_instance_method(_Geom.Pnt_transform)
    transformed = _swig_new_instance_method(_Geom.Pnt_transformed)
    translate = _swig_new_instance_method(_Geom.Pnt_translate)
    translated = _swig_new_instance_method(_Geom.Pnt_translated)
    __eq__ = _swig_new_instance_method(_Geom.Pnt___eq__)
    __ne__ = _swig_new_instance_method(_Geom.Pnt___ne__)
    at = _swig_new_instance_method(_Geom.Pnt_at)
    __sub__ = _swig_new_instance_method(_Geom.Pnt___sub__)
    __add__ = _swig_new_instance_method(_Geom.Pnt___add__)
    __mul__ = _swig_new_instance_method(_Geom.Pnt___mul__)
    __lt__ = _swig_new_instance_method(_Geom.Pnt___lt__)
    __swig_destroy__ = _Geom.delete_Pnt

# Register Pnt in _Geom:
_Geom.Pnt_swigregister(Pnt)
Pnt_ZeroPnt = _Geom.Pnt_ZeroPnt

L_RES = _Geom.L_RES

A_RES = _Geom.A_RES

class Precision(object):
    r"""Proxy of C++ Geom::Precision class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    linear_Resolution = _swig_new_static_method(_Geom.Precision_linear_Resolution)
    angle_Resolution = _swig_new_static_method(_Geom.Precision_angle_Resolution)
    tolerance = _swig_new_static_method(_Geom.Precision_tolerance)
    confusion = _swig_new_static_method(_Geom.Precision_confusion)
    angular = _swig_new_static_method(_Geom.Precision_angular)
    infinite = _swig_new_static_method(_Geom.Precision_infinite)
    shape_infinite = _swig_new_static_method(_Geom.Precision_shape_infinite)
    min_double = _swig_new_static_method(_Geom.Precision_min_double)
    max_double = _swig_new_static_method(_Geom.Precision_max_double)
    epsilon = _swig_new_static_method(_Geom.Precision_epsilon)

    def __init__(self):
        r"""__init__(Precision self) -> Precision"""
        _Geom.Precision_swiginit(self, _Geom.new_Precision())
    __swig_destroy__ = _Geom.delete_Precision

# Register Precision in _Geom:
_Geom.Precision_swigregister(Precision)
Precision_linear_Resolution = _Geom.Precision_linear_Resolution
Precision_angle_Resolution = _Geom.Precision_angle_Resolution
Precision_tolerance = _Geom.Precision_tolerance
Precision_confusion = _Geom.Precision_confusion
Precision_angular = _Geom.Precision_angular
Precision_infinite = _Geom.Precision_infinite
Precision_shape_infinite = _Geom.Precision_shape_infinite
Precision_min_double = _Geom.Precision_min_double
Precision_max_double = _Geom.Precision_max_double
Precision_epsilon = _Geom.Precision_epsilon

class Rect(object):
    r"""Proxy of C++ Geom::Rect class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(Rect self) -> Rect
        __init__(Rect self, Pnt2d bottomleft, Pnt2d topright) -> Rect
        __init__(Rect self, double left, double bottom, double width, double height) -> Rect
        """
        _Geom.Rect_swiginit(self, _Geom.new_Rect(*args))
    isNull = _swig_new_instance_method(_Geom.Rect_isNull)
    isEmpty = _swig_new_instance_method(_Geom.Rect_isEmpty)
    isValid = _swig_new_instance_method(_Geom.Rect_isValid)
    setNull = _swig_new_instance_method(_Geom.Rect_setNull)
    makeSingular = _swig_new_instance_method(_Geom.Rect_makeSingular)
    getRect = _swig_new_instance_method(_Geom.Rect_getRect)
    left = _swig_new_instance_method(_Geom.Rect_left)
    right = _swig_new_instance_method(_Geom.Rect_right)
    bottom = _swig_new_instance_method(_Geom.Rect_bottom)
    top = _swig_new_instance_method(_Geom.Rect_top)
    width = _swig_new_instance_method(_Geom.Rect_width)
    height = _swig_new_instance_method(_Geom.Rect_height)
    bottomLeft = _swig_new_instance_method(_Geom.Rect_bottomLeft)
    bottomRight = _swig_new_instance_method(_Geom.Rect_bottomRight)
    topLeft = _swig_new_instance_method(_Geom.Rect_topLeft)
    topRight = _swig_new_instance_method(_Geom.Rect_topRight)
    center = _swig_new_instance_method(_Geom.Rect_center)
    setLeft = _swig_new_instance_method(_Geom.Rect_setLeft)
    setRight = _swig_new_instance_method(_Geom.Rect_setRight)
    setBottom = _swig_new_instance_method(_Geom.Rect_setBottom)
    setTop = _swig_new_instance_method(_Geom.Rect_setTop)
    setWidth = _swig_new_instance_method(_Geom.Rect_setWidth)
    setHeight = _swig_new_instance_method(_Geom.Rect_setHeight)
    setSize = _swig_new_instance_method(_Geom.Rect_setSize)
    moveCenter = _swig_new_instance_method(_Geom.Rect_moveCenter)
    grow = _swig_new_instance_method(_Geom.Rect_grow)
    shrink = _swig_new_instance_method(_Geom.Rect_shrink)
    translate = _swig_new_instance_method(_Geom.Rect_translate)
    __or__ = _swig_new_instance_method(_Geom.Rect___or__)
    __ior__ = _swig_new_instance_method(_Geom.Rect___ior__)
    unite = _swig_new_instance_method(_Geom.Rect_unite)
    united = _swig_new_instance_method(_Geom.Rect_united)
    normalized = _swig_new_instance_method(_Geom.Rect_normalized)
    contains = _swig_new_instance_method(_Geom.Rect_contains)
    intersects = _swig_new_instance_method(_Geom.Rect_intersects)
    __swig_destroy__ = _Geom.delete_Rect

# Register Rect in _Geom:
_Geom.Rect_swigregister(Rect)
class Trsf(object):
    r"""Proxy of C++ Geom::Trsf class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(Trsf self) -> Trsf
        __init__(Trsf self, Trsf2d T) -> Trsf
        __init__(Trsf self, Mat mat, XYZ location, double scale) -> Trsf
        __init__(Trsf self, Base::Matrix4D const & mtrx) -> Trsf
        __init__(Trsf self, Trsf rhs) -> Trsf
        """
        _Geom.Trsf_swiginit(self, _Geom.new_Trsf(*args))
    Identity = _Geom.Trsf_Identity
    
    Rotation = _Geom.Trsf_Rotation
    
    Translation = _Geom.Trsf_Translation
    
    PntMirror = _Geom.Trsf_PntMirror
    
    Ax1Mirror = _Geom.Trsf_Ax1Mirror
    
    Ax2Mirror = _Geom.Trsf_Ax2Mirror
    
    Scale = _Geom.Trsf_Scale
    
    CompoundTrsf = _Geom.Trsf_CompoundTrsf
    
    Other = _Geom.Trsf_Other
    
    setMirror = _swig_new_instance_method(_Geom.Trsf_setMirror)
    setRotation = _swig_new_instance_method(_Geom.Trsf_setRotation)
    setScale = _swig_new_instance_method(_Geom.Trsf_setScale)
    setDisplacement = _swig_new_instance_method(_Geom.Trsf_setDisplacement)
    setTransformation = _swig_new_instance_method(_Geom.Trsf_setTransformation)
    setTranslation = _swig_new_instance_method(_Geom.Trsf_setTranslation)
    setTranslationPart = _swig_new_instance_method(_Geom.Trsf_setTranslationPart)
    translate = _swig_new_instance_method(_Geom.Trsf_translate)
    setScaleFactor = _swig_new_instance_method(_Geom.Trsf_setScaleFactor)
    setValues = _swig_new_instance_method(_Geom.Trsf_setValues)
    isNegative = _swig_new_instance_method(_Geom.Trsf_isNegative)
    isIdentity = _swig_new_instance_method(_Geom.Trsf_isIdentity)
    setIdentity = _swig_new_instance_method(_Geom.Trsf_setIdentity)
    form = _swig_new_instance_method(_Geom.Trsf_form)
    scaleFactor = _swig_new_instance_method(_Geom.Trsf_scaleFactor)
    translationPart = _swig_new_instance_method(_Geom.Trsf_translationPart)
    vectorialPart = _swig_new_instance_method(_Geom.Trsf_vectorialPart)
    hVectorialPart = _swig_new_instance_method(_Geom.Trsf_hVectorialPart)
    value = _swig_new_instance_method(_Geom.Trsf_value)
    invert = _swig_new_instance_method(_Geom.Trsf_invert)
    inverted = _swig_new_instance_method(_Geom.Trsf_inverted)
    multiplied = _swig_new_instance_method(_Geom.Trsf_multiplied)
    __mul__ = _swig_new_instance_method(_Geom.Trsf___mul__)
    multiply = _swig_new_instance_method(_Geom.Trsf_multiply)
    __imul__ = _swig_new_instance_method(_Geom.Trsf___imul__)
    preMultiply = _swig_new_instance_method(_Geom.Trsf_preMultiply)
    power = _swig_new_instance_method(_Geom.Trsf_power)
    powered = _swig_new_instance_method(_Geom.Trsf_powered)
    transforms = _swig_new_instance_method(_Geom.Trsf_transforms)
    toMatrix4D = _swig_new_instance_method(_Geom.Trsf_toMatrix4D)
    isSameAs = _swig_new_instance_method(_Geom.Trsf_isSameAs)
    __swig_destroy__ = _Geom.delete_Trsf

# Register Trsf in _Geom:
_Geom.Trsf_swigregister(Trsf)
class Vec(object):
    r"""Proxy of C++ Geom::Vec class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(Vec self) -> Vec
        __init__(Vec self, Dir V) -> Vec
        __init__(Vec self, XYZ Coord) -> Vec
        __init__(Vec self, double const Xv, double const Yv, double const Zv) -> Vec
        __init__(Vec self, Pnt P1, Pnt P2) -> Vec
        __init__(Vec self, Vec rhs) -> Vec
        """
        _Geom.Vec_swiginit(self, _Geom.new_Vec(*args))
    setCoord = _swig_new_instance_method(_Geom.Vec_setCoord)
    setX = _swig_new_instance_method(_Geom.Vec_setX)
    setY = _swig_new_instance_method(_Geom.Vec_setY)
    setZ = _swig_new_instance_method(_Geom.Vec_setZ)
    setXYZ = _swig_new_instance_method(_Geom.Vec_setXYZ)
    coord = _swig_new_instance_method(_Geom.Vec_coord)
    x = _swig_new_instance_method(_Geom.Vec_x)
    y = _swig_new_instance_method(_Geom.Vec_y)
    z = _swig_new_instance_method(_Geom.Vec_z)
    xyz = _swig_new_instance_method(_Geom.Vec_xyz)
    fx = _swig_new_instance_method(_Geom.Vec_fx)
    fy = _swig_new_instance_method(_Geom.Vec_fy)
    fz = _swig_new_instance_method(_Geom.Vec_fz)
    isEqual = _swig_new_instance_method(_Geom.Vec_isEqual)
    isNormal = _swig_new_instance_method(_Geom.Vec_isNormal)
    isOpposite = _swig_new_instance_method(_Geom.Vec_isOpposite)
    isParallel = _swig_new_instance_method(_Geom.Vec_isParallel)
    angle = _swig_new_instance_method(_Geom.Vec_angle)
    angleWithRef = _swig_new_instance_method(_Geom.Vec_angleWithRef)
    magnitude = _swig_new_instance_method(_Geom.Vec_magnitude)
    squareMagnitude = _swig_new_instance_method(_Geom.Vec_squareMagnitude)
    add = _swig_new_instance_method(_Geom.Vec_add)
    __iadd__ = _swig_new_instance_method(_Geom.Vec___iadd__)
    added = _swig_new_instance_method(_Geom.Vec_added)
    __add__ = _swig_new_instance_method(_Geom.Vec___add__)
    subtract = _swig_new_instance_method(_Geom.Vec_subtract)
    __isub__ = _swig_new_instance_method(_Geom.Vec___isub__)
    subtracted = _swig_new_instance_method(_Geom.Vec_subtracted)
    __sub__ = _swig_new_instance_method(_Geom.Vec___sub__)
    multiply = _swig_new_instance_method(_Geom.Vec_multiply)
    __imul__ = _swig_new_instance_method(_Geom.Vec___imul__)
    multiplied = _swig_new_instance_method(_Geom.Vec_multiplied)
    divide = _swig_new_instance_method(_Geom.Vec_divide)

    def __itruediv__(self, *args):
        return _Geom.Vec___itruediv__(self, *args)
    __idiv__ = __itruediv__


    divided = _swig_new_instance_method(_Geom.Vec_divided)

    def __truediv__(self, *args):
        return _Geom.Vec___truediv__(self, *args)
    __div__ = __truediv__


    cross = _swig_new_instance_method(_Geom.Vec_cross)
    __ixor__ = _swig_new_instance_method(_Geom.Vec___ixor__)
    crossed = _swig_new_instance_method(_Geom.Vec_crossed)
    __xor__ = _swig_new_instance_method(_Geom.Vec___xor__)
    crossMagnitude = _swig_new_instance_method(_Geom.Vec_crossMagnitude)
    crossSquareMagnitude = _swig_new_instance_method(_Geom.Vec_crossSquareMagnitude)
    crossCross = _swig_new_instance_method(_Geom.Vec_crossCross)
    crossCrossed = _swig_new_instance_method(_Geom.Vec_crossCrossed)
    dot = _swig_new_instance_method(_Geom.Vec_dot)
    __mul__ = _swig_new_instance_method(_Geom.Vec___mul__)
    dotCross = _swig_new_instance_method(_Geom.Vec_dotCross)
    normalize = _swig_new_instance_method(_Geom.Vec_normalize)
    normalized = _swig_new_instance_method(_Geom.Vec_normalized)
    reverse = _swig_new_instance_method(_Geom.Vec_reverse)
    reversed = _swig_new_instance_method(_Geom.Vec_reversed)
    __neg__ = _swig_new_instance_method(_Geom.Vec___neg__)
    __and__ = _swig_new_instance_method(_Geom.Vec___and__)
    setLinearForm = _swig_new_instance_method(_Geom.Vec_setLinearForm)
    mirror = _swig_new_instance_method(_Geom.Vec_mirror)
    mirrored = _swig_new_instance_method(_Geom.Vec_mirrored)
    rotate = _swig_new_instance_method(_Geom.Vec_rotate)
    rotated = _swig_new_instance_method(_Geom.Vec_rotated)
    scale = _swig_new_instance_method(_Geom.Vec_scale)
    scaled = _swig_new_instance_method(_Geom.Vec_scaled)
    transform = _swig_new_instance_method(_Geom.Vec_transform)
    transformed = _swig_new_instance_method(_Geom.Vec_transformed)
    projectToLine = _swig_new_instance_method(_Geom.Vec_projectToLine)
    perpendicular = _swig_new_instance_method(_Geom.Vec_perpendicular)
    distanceToPlane = _swig_new_instance_method(_Geom.Vec_distanceToPlane)
    distanceToLine = _swig_new_instance_method(_Geom.Vec_distanceToLine)
    distanceToLineSegment = _swig_new_instance_method(_Geom.Vec_distanceToLineSegment)
    at = _swig_new_instance_method(_Geom.Vec_at)
    __swig_destroy__ = _Geom.delete_Vec

# Register Vec in _Geom:
_Geom.Vec_swigregister(Vec)
distance = _Geom.distance
distanceP2 = _Geom.distanceP2
to_string = _Geom.to_string
class XY(object):
    r"""Proxy of C++ Geom::XY class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(XY self) -> XY
        __init__(XY self, double const X, double const Y) -> XY
        """
        _Geom.XY_swiginit(self, _Geom.new_XY(*args))
    add = _swig_new_instance_method(_Geom.XY_add)
    added = _swig_new_instance_method(_Geom.XY_added)
    coord = _swig_new_instance_method(_Geom.XY_coord)
    crossed = _swig_new_instance_method(_Geom.XY_crossed)
    crossMagnitude = _swig_new_instance_method(_Geom.XY_crossMagnitude)
    crossSquareMagnitude = _swig_new_instance_method(_Geom.XY_crossSquareMagnitude)
    divide = _swig_new_instance_method(_Geom.XY_divide)
    divided = _swig_new_instance_method(_Geom.XY_divided)
    dot = _swig_new_instance_method(_Geom.XY_dot)
    isEqual = _swig_new_instance_method(_Geom.XY_isEqual)
    modulus = _swig_new_instance_method(_Geom.XY_modulus)
    multiplied = _swig_new_instance_method(_Geom.XY_multiplied)
    multiply = _swig_new_instance_method(_Geom.XY_multiply)
    normalize = _swig_new_instance_method(_Geom.XY_normalize)
    normalized = _swig_new_instance_method(_Geom.XY_normalized)
    __iadd__ = _swig_new_instance_method(_Geom.XY___iadd__)
    __add__ = _swig_new_instance_method(_Geom.XY___add__)
    __neg__ = _swig_new_instance_method(_Geom.XY___neg__)
    __isub__ = _swig_new_instance_method(_Geom.XY___isub__)
    __sub__ = _swig_new_instance_method(_Geom.XY___sub__)
    __imul__ = _swig_new_instance_method(_Geom.XY___imul__)
    __mul__ = _swig_new_instance_method(_Geom.XY___mul__)

    def __itruediv__(self, *args):
        return _Geom.XY___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __truediv__(self, *args):
        return _Geom.XY___truediv__(self, *args)
    __div__ = __truediv__


    __xor__ = _swig_new_instance_method(_Geom.XY___xor__)
    reverse = _swig_new_instance_method(_Geom.XY_reverse)
    reversed = _swig_new_instance_method(_Geom.XY_reversed)
    setCoord = _swig_new_instance_method(_Geom.XY_setCoord)
    setLinearForm = _swig_new_instance_method(_Geom.XY_setLinearForm)
    setX = _swig_new_instance_method(_Geom.XY_setX)
    setY = _swig_new_instance_method(_Geom.XY_setY)
    squareModulus = _swig_new_instance_method(_Geom.XY_squareModulus)
    subtract = _swig_new_instance_method(_Geom.XY_subtract)
    subtracted = _swig_new_instance_method(_Geom.XY_subtracted)
    x = _swig_new_instance_method(_Geom.XY_x)
    y = _swig_new_instance_method(_Geom.XY_y)
    __swig_destroy__ = _Geom.delete_XY

# Register XY in _Geom:
_Geom.XY_swigregister(XY)
class Pnt2d(object):
    r"""Proxy of C++ Geom::Pnt2d class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(Pnt2d self) -> Pnt2d
        __init__(Pnt2d self, XY Coord) -> Pnt2d
        __init__(Pnt2d self, double const Xp, double const Yp) -> Pnt2d
        """
        _Geom.Pnt2d_swiginit(self, _Geom.new_Pnt2d(*args))
    changeCoord = _swig_new_instance_method(_Geom.Pnt2d_changeCoord)
    coord = _swig_new_instance_method(_Geom.Pnt2d_coord)
    distance = _swig_new_instance_method(_Geom.Pnt2d_distance)
    isEqual = _swig_new_instance_method(_Geom.Pnt2d_isEqual)
    mirror = _swig_new_instance_method(_Geom.Pnt2d_mirror)
    mirrored = _swig_new_instance_method(_Geom.Pnt2d_mirrored)
    rotate = _swig_new_instance_method(_Geom.Pnt2d_rotate)
    rotated = _swig_new_instance_method(_Geom.Pnt2d_rotated)
    scale = _swig_new_instance_method(_Geom.Pnt2d_scale)
    scaled = _swig_new_instance_method(_Geom.Pnt2d_scaled)
    setCoord = _swig_new_instance_method(_Geom.Pnt2d_setCoord)
    setX = _swig_new_instance_method(_Geom.Pnt2d_setX)
    setXY = _swig_new_instance_method(_Geom.Pnt2d_setXY)
    setY = _swig_new_instance_method(_Geom.Pnt2d_setY)
    squareDistance = _swig_new_instance_method(_Geom.Pnt2d_squareDistance)
    transform = _swig_new_instance_method(_Geom.Pnt2d_transform)
    transformed = _swig_new_instance_method(_Geom.Pnt2d_transformed)
    translate = _swig_new_instance_method(_Geom.Pnt2d_translate)
    translated = _swig_new_instance_method(_Geom.Pnt2d_translated)
    x = _swig_new_instance_method(_Geom.Pnt2d_x)
    xy = _swig_new_instance_method(_Geom.Pnt2d_xy)
    y = _swig_new_instance_method(_Geom.Pnt2d_y)
    __eq__ = _swig_new_instance_method(_Geom.Pnt2d___eq__)
    __ne__ = _swig_new_instance_method(_Geom.Pnt2d___ne__)
    __swig_destroy__ = _Geom.delete_Pnt2d

# Register Pnt2d in _Geom:
_Geom.Pnt2d_swigregister(Pnt2d)
class Vec2d(object):
    r"""Proxy of C++ Geom::Vec2d class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(Vec2d self) -> Vec2d
        __init__(Vec2d self, Dir2d V) -> Vec2d
        __init__(Vec2d self, XY Coord) -> Vec2d
        __init__(Vec2d self, double const Xv, double const Yv) -> Vec2d
        __init__(Vec2d self, Pnt2d P1, Pnt2d P2) -> Vec2d
        """
        _Geom.Vec2d_swiginit(self, _Geom.new_Vec2d(*args))
    add = _swig_new_instance_method(_Geom.Vec2d_add)
    added = _swig_new_instance_method(_Geom.Vec2d_added)
    angle = _swig_new_instance_method(_Geom.Vec2d_angle)
    coord = _swig_new_instance_method(_Geom.Vec2d_coord)
    crossed = _swig_new_instance_method(_Geom.Vec2d_crossed)
    crossMagnitude = _swig_new_instance_method(_Geom.Vec2d_crossMagnitude)
    crossSquareMagnitude = _swig_new_instance_method(_Geom.Vec2d_crossSquareMagnitude)
    divide = _swig_new_instance_method(_Geom.Vec2d_divide)
    divided = _swig_new_instance_method(_Geom.Vec2d_divided)
    dot = _swig_new_instance_method(_Geom.Vec2d_dot)
    isEqual = _swig_new_instance_method(_Geom.Vec2d_isEqual)
    isNormal = _swig_new_instance_method(_Geom.Vec2d_isNormal)
    isOpposite = _swig_new_instance_method(_Geom.Vec2d_isOpposite)
    isParallel = _swig_new_instance_method(_Geom.Vec2d_isParallel)
    magnitude = _swig_new_instance_method(_Geom.Vec2d_magnitude)
    squareMagnitude = _swig_new_instance_method(_Geom.Vec2d_squareMagnitude)
    __iadd__ = _swig_new_instance_method(_Geom.Vec2d___iadd__)
    __add__ = _swig_new_instance_method(_Geom.Vec2d___add__)
    __isub__ = _swig_new_instance_method(_Geom.Vec2d___isub__)
    __neg__ = _swig_new_instance_method(_Geom.Vec2d___neg__)
    __sub__ = _swig_new_instance_method(_Geom.Vec2d___sub__)
    __imul__ = _swig_new_instance_method(_Geom.Vec2d___imul__)
    __mul__ = _swig_new_instance_method(_Geom.Vec2d___mul__)

    def __itruediv__(self, *args):
        return _Geom.Vec2d___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __truediv__(self, *args):
        return _Geom.Vec2d___truediv__(self, *args)
    __div__ = __truediv__


    __xor__ = _swig_new_instance_method(_Geom.Vec2d___xor__)
    multiply = _swig_new_instance_method(_Geom.Vec2d_multiply)
    multiplied = _swig_new_instance_method(_Geom.Vec2d_multiplied)
    mirror = _swig_new_instance_method(_Geom.Vec2d_mirror)
    mirrored = _swig_new_instance_method(_Geom.Vec2d_mirrored)
    normalize = _swig_new_instance_method(_Geom.Vec2d_normalize)
    normalized = _swig_new_instance_method(_Geom.Vec2d_normalized)
    reverse = _swig_new_instance_method(_Geom.Vec2d_reverse)
    reversed = _swig_new_instance_method(_Geom.Vec2d_reversed)
    rotate = _swig_new_instance_method(_Geom.Vec2d_rotate)
    rotated = _swig_new_instance_method(_Geom.Vec2d_rotated)
    scale = _swig_new_instance_method(_Geom.Vec2d_scale)
    scaled = _swig_new_instance_method(_Geom.Vec2d_scaled)
    setCoord = _swig_new_instance_method(_Geom.Vec2d_setCoord)
    setLinearForm = _swig_new_instance_method(_Geom.Vec2d_setLinearForm)
    setX = _swig_new_instance_method(_Geom.Vec2d_setX)
    setXY = _swig_new_instance_method(_Geom.Vec2d_setXY)
    setY = _swig_new_instance_method(_Geom.Vec2d_setY)
    subtract = _swig_new_instance_method(_Geom.Vec2d_subtract)
    subtracted = _swig_new_instance_method(_Geom.Vec2d_subtracted)
    transform = _swig_new_instance_method(_Geom.Vec2d_transform)
    transformed = _swig_new_instance_method(_Geom.Vec2d_transformed)
    x = _swig_new_instance_method(_Geom.Vec2d_x)
    xy = _swig_new_instance_method(_Geom.Vec2d_xy)
    y = _swig_new_instance_method(_Geom.Vec2d_y)
    __swig_destroy__ = _Geom.delete_Vec2d

# Register Vec2d in _Geom:
_Geom.Vec2d_swigregister(Vec2d)
class Dir2d(object):
    r"""Proxy of C++ Geom::Dir2d class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(Dir2d self) -> Dir2d
        __init__(Dir2d self, Vec2d V) -> Dir2d
        __init__(Dir2d self, XY Coord) -> Dir2d
        __init__(Dir2d self, double const Xv, double const Yv) -> Dir2d
        """
        _Geom.Dir2d_swiginit(self, _Geom.new_Dir2d(*args))
    angle = _swig_new_instance_method(_Geom.Dir2d_angle)
    coord = _swig_new_instance_method(_Geom.Dir2d_coord)
    crossed = _swig_new_instance_method(_Geom.Dir2d_crossed)
    dot = _swig_new_instance_method(_Geom.Dir2d_dot)
    isEqual = _swig_new_instance_method(_Geom.Dir2d_isEqual)
    isNormal = _swig_new_instance_method(_Geom.Dir2d_isNormal)
    isOpposite = _swig_new_instance_method(_Geom.Dir2d_isOpposite)
    isParallel = _swig_new_instance_method(_Geom.Dir2d_isParallel)
    mirror = _swig_new_instance_method(_Geom.Dir2d_mirror)
    mirrored = _swig_new_instance_method(_Geom.Dir2d_mirrored)
    __neg__ = _swig_new_instance_method(_Geom.Dir2d___neg__)
    __xor__ = _swig_new_instance_method(_Geom.Dir2d___xor__)
    __mul__ = _swig_new_instance_method(_Geom.Dir2d___mul__)
    __eq__ = _swig_new_instance_method(_Geom.Dir2d___eq__)
    reverse = _swig_new_instance_method(_Geom.Dir2d_reverse)
    reversed = _swig_new_instance_method(_Geom.Dir2d_reversed)
    rotate = _swig_new_instance_method(_Geom.Dir2d_rotate)
    rotated = _swig_new_instance_method(_Geom.Dir2d_rotated)
    setCoord = _swig_new_instance_method(_Geom.Dir2d_setCoord)
    setX = _swig_new_instance_method(_Geom.Dir2d_setX)
    setXY = _swig_new_instance_method(_Geom.Dir2d_setXY)
    setY = _swig_new_instance_method(_Geom.Dir2d_setY)
    transform = _swig_new_instance_method(_Geom.Dir2d_transform)
    transformed = _swig_new_instance_method(_Geom.Dir2d_transformed)
    x = _swig_new_instance_method(_Geom.Dir2d_x)
    xy = _swig_new_instance_method(_Geom.Dir2d_xy)
    y = _swig_new_instance_method(_Geom.Dir2d_y)
    __swig_destroy__ = _Geom.delete_Dir2d

# Register Dir2d in _Geom:
_Geom.Dir2d_swigregister(Dir2d)
class Ax2d(object):
    r"""Proxy of C++ Geom::Ax2d class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(Ax2d self) -> Ax2d
        __init__(Ax2d self, Pnt2d P, Dir2d V) -> Ax2d
        """
        _Geom.Ax2d_swiginit(self, _Geom.new_Ax2d(*args))
    angle = _swig_new_instance_method(_Geom.Ax2d_angle)
    direction = _swig_new_instance_method(_Geom.Ax2d_direction)
    isCoaxial = _swig_new_instance_method(_Geom.Ax2d_isCoaxial)
    isNormal = _swig_new_instance_method(_Geom.Ax2d_isNormal)
    isOpposite = _swig_new_instance_method(_Geom.Ax2d_isOpposite)
    isParallel = _swig_new_instance_method(_Geom.Ax2d_isParallel)
    location = _swig_new_instance_method(_Geom.Ax2d_location)
    mirror = _swig_new_instance_method(_Geom.Ax2d_mirror)
    mirrored = _swig_new_instance_method(_Geom.Ax2d_mirrored)
    reverse = _swig_new_instance_method(_Geom.Ax2d_reverse)
    reversed = _swig_new_instance_method(_Geom.Ax2d_reversed)
    rotate = _swig_new_instance_method(_Geom.Ax2d_rotate)
    rotated = _swig_new_instance_method(_Geom.Ax2d_rotated)
    scale = _swig_new_instance_method(_Geom.Ax2d_scale)
    scaled = _swig_new_instance_method(_Geom.Ax2d_scaled)
    setDirection = _swig_new_instance_method(_Geom.Ax2d_setDirection)
    setLocation = _swig_new_instance_method(_Geom.Ax2d_setLocation)
    transform = _swig_new_instance_method(_Geom.Ax2d_transform)
    transformed = _swig_new_instance_method(_Geom.Ax2d_transformed)
    translate = _swig_new_instance_method(_Geom.Ax2d_translate)
    translated = _swig_new_instance_method(_Geom.Ax2d_translated)
    __swig_destroy__ = _Geom.delete_Ax2d

# Register Ax2d in _Geom:
_Geom.Ax2d_swigregister(Ax2d)
class Lin2d(object):
    r"""Proxy of C++ Geom::Lin2d class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(Lin2d self) -> Lin2d
        __init__(Lin2d self, Ax2d A) -> Lin2d
        __init__(Lin2d self, Pnt2d P, Dir2d V) -> Lin2d
        __init__(Lin2d self, double const A, double const B, double const C) -> Lin2d
        """
        _Geom.Lin2d_swiginit(self, _Geom.new_Lin2d(*args))
    angle = _swig_new_instance_method(_Geom.Lin2d_angle)
    coefficients = _swig_new_instance_method(_Geom.Lin2d_coefficients)
    contains = _swig_new_instance_method(_Geom.Lin2d_contains)
    distance = _swig_new_instance_method(_Geom.Lin2d_distance)
    signedDistance = _swig_new_instance_method(_Geom.Lin2d_signedDistance)
    direction = _swig_new_instance_method(_Geom.Lin2d_direction)
    location = _swig_new_instance_method(_Geom.Lin2d_location)
    mirror = _swig_new_instance_method(_Geom.Lin2d_mirror)
    mirrored = _swig_new_instance_method(_Geom.Lin2d_mirrored)
    normal = _swig_new_instance_method(_Geom.Lin2d_normal)
    position = _swig_new_instance_method(_Geom.Lin2d_position)
    reverse = _swig_new_instance_method(_Geom.Lin2d_reverse)
    reversed = _swig_new_instance_method(_Geom.Lin2d_reversed)
    rotate = _swig_new_instance_method(_Geom.Lin2d_rotate)
    rotated = _swig_new_instance_method(_Geom.Lin2d_rotated)
    scale = _swig_new_instance_method(_Geom.Lin2d_scale)
    scaled = _swig_new_instance_method(_Geom.Lin2d_scaled)
    setDirection = _swig_new_instance_method(_Geom.Lin2d_setDirection)
    setLocation = _swig_new_instance_method(_Geom.Lin2d_setLocation)
    setPosition = _swig_new_instance_method(_Geom.Lin2d_setPosition)
    squareDistance = _swig_new_instance_method(_Geom.Lin2d_squareDistance)
    transform = _swig_new_instance_method(_Geom.Lin2d_transform)
    transformed = _swig_new_instance_method(_Geom.Lin2d_transformed)
    translate = _swig_new_instance_method(_Geom.Lin2d_translate)
    translated = _swig_new_instance_method(_Geom.Lin2d_translated)
    _CSFDB_GetLin2dpos = _swig_new_instance_method(_Geom.Lin2d__CSFDB_GetLin2dpos)
    __swig_destroy__ = _Geom.delete_Lin2d

# Register Lin2d in _Geom:
_Geom.Lin2d_swigregister(Lin2d)
class Ax22d(object):
    r"""Proxy of C++ Geom::Ax22d class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(Ax22d self) -> Ax22d
        __init__(Ax22d self, Pnt2d P, Dir2d Vx, Dir2d Vy) -> Ax22d
        __init__(Ax22d self, Pnt2d P, Dir2d V, bool const Sense=True) -> Ax22d
        __init__(Ax22d self, Ax2d A, bool const Sense=True) -> Ax22d
        """
        _Geom.Ax22d_swiginit(self, _Geom.new_Ax22d(*args))
    location = _swig_new_instance_method(_Geom.Ax22d_location)
    mirror = _swig_new_instance_method(_Geom.Ax22d_mirror)
    mirrored = _swig_new_instance_method(_Geom.Ax22d_mirrored)
    rotate = _swig_new_instance_method(_Geom.Ax22d_rotate)
    rotated = _swig_new_instance_method(_Geom.Ax22d_rotated)
    scale = _swig_new_instance_method(_Geom.Ax22d_scale)
    scaled = _swig_new_instance_method(_Geom.Ax22d_scaled)
    setAxis = _swig_new_instance_method(_Geom.Ax22d_setAxis)
    setLocation = _swig_new_instance_method(_Geom.Ax22d_setLocation)
    setXAxis = _swig_new_instance_method(_Geom.Ax22d_setXAxis)
    setXDirection = _swig_new_instance_method(_Geom.Ax22d_setXDirection)
    setYAxis = _swig_new_instance_method(_Geom.Ax22d_setYAxis)
    setYDirection = _swig_new_instance_method(_Geom.Ax22d_setYDirection)
    transform = _swig_new_instance_method(_Geom.Ax22d_transform)
    transformed = _swig_new_instance_method(_Geom.Ax22d_transformed)
    translate = _swig_new_instance_method(_Geom.Ax22d_translate)
    translated = _swig_new_instance_method(_Geom.Ax22d_translated)
    xAxis = _swig_new_instance_method(_Geom.Ax22d_xAxis)
    xDirection = _swig_new_instance_method(_Geom.Ax22d_xDirection)
    yAxis = _swig_new_instance_method(_Geom.Ax22d_yAxis)
    yDirection = _swig_new_instance_method(_Geom.Ax22d_yDirection)
    _CSFDB_GetAx22dpoint = _swig_new_instance_method(_Geom.Ax22d__CSFDB_GetAx22dpoint)
    _CSFDB_GetAx22dvydir = _swig_new_instance_method(_Geom.Ax22d__CSFDB_GetAx22dvydir)
    _CSFDB_GetAx22dvxdir = _swig_new_instance_method(_Geom.Ax22d__CSFDB_GetAx22dvxdir)
    __eq__ = _swig_new_instance_method(_Geom.Ax22d___eq__)
    __swig_destroy__ = _Geom.delete_Ax22d

# Register Ax22d in _Geom:
_Geom.Ax22d_swigregister(Ax22d)
class Circ2d(object):
    r"""Proxy of C++ Geom::Circ2d class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(Circ2d self) -> Circ2d
        __init__(Circ2d self, Ax2d XAxis, double const Radius, bool const Sense=True) -> Circ2d
        __init__(Circ2d self, Ax22d Axis, double const Radius) -> Circ2d
        """
        _Geom.Circ2d_swiginit(self, _Geom.new_Circ2d(*args))
    SetLocation = _swig_new_instance_method(_Geom.Circ2d_SetLocation)
    SetXAxis = _swig_new_instance_method(_Geom.Circ2d_SetXAxis)
    SetAxis = _swig_new_instance_method(_Geom.Circ2d_SetAxis)
    SetYAxis = _swig_new_instance_method(_Geom.Circ2d_SetYAxis)
    SetRadius = _swig_new_instance_method(_Geom.Circ2d_SetRadius)
    Area = _swig_new_instance_method(_Geom.Circ2d_Area)
    Coefficients = _swig_new_instance_method(_Geom.Circ2d_Coefficients)
    Contains = _swig_new_instance_method(_Geom.Circ2d_Contains)
    Distance = _swig_new_instance_method(_Geom.Circ2d_Distance)
    SquareDistance = _swig_new_instance_method(_Geom.Circ2d_SquareDistance)
    Length = _swig_new_instance_method(_Geom.Circ2d_Length)
    Location = _swig_new_instance_method(_Geom.Circ2d_Location)
    Radius = _swig_new_instance_method(_Geom.Circ2d_Radius)
    Axis = _swig_new_instance_method(_Geom.Circ2d_Axis)
    Position = _swig_new_instance_method(_Geom.Circ2d_Position)
    XAxis = _swig_new_instance_method(_Geom.Circ2d_XAxis)
    YAxis = _swig_new_instance_method(_Geom.Circ2d_YAxis)
    Reverse = _swig_new_instance_method(_Geom.Circ2d_Reverse)
    Reversed = _swig_new_instance_method(_Geom.Circ2d_Reversed)
    IsDirect = _swig_new_instance_method(_Geom.Circ2d_IsDirect)
    Mirror = _swig_new_instance_method(_Geom.Circ2d_Mirror)
    Mirrored = _swig_new_instance_method(_Geom.Circ2d_Mirrored)
    Rotate = _swig_new_instance_method(_Geom.Circ2d_Rotate)
    Rotated = _swig_new_instance_method(_Geom.Circ2d_Rotated)
    Scale = _swig_new_instance_method(_Geom.Circ2d_Scale)
    Scaled = _swig_new_instance_method(_Geom.Circ2d_Scaled)
    Transform = _swig_new_instance_method(_Geom.Circ2d_Transform)
    Transformed = _swig_new_instance_method(_Geom.Circ2d_Transformed)
    Translate = _swig_new_instance_method(_Geom.Circ2d_Translate)
    Translated = _swig_new_instance_method(_Geom.Circ2d_Translated)
    _CSFDB_GetCirc2dpos = _swig_new_instance_method(_Geom.Circ2d__CSFDB_GetCirc2dpos)
    _CSFDB_GetCirc2dradius = _swig_new_instance_method(_Geom.Circ2d__CSFDB_GetCirc2dradius)
    _CSFDB_SetCirc2dradius = _swig_new_instance_method(_Geom.Circ2d__CSFDB_SetCirc2dradius)
    __swig_destroy__ = _Geom.delete_Circ2d

# Register Circ2d in _Geom:
_Geom.Circ2d_swigregister(Circ2d)
class XYZ(object):
    r"""Proxy of C++ Geom::XYZ class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(XYZ self) -> XYZ
        __init__(XYZ self, double const X, double const Y, double const Z) -> XYZ
        """
        _Geom.XYZ_swiginit(self, _Geom.new_XYZ(*args))
    setCoord = _swig_new_instance_method(_Geom.XYZ_setCoord)
    setX = _swig_new_instance_method(_Geom.XYZ_setX)
    setY = _swig_new_instance_method(_Geom.XYZ_setY)
    setZ = _swig_new_instance_method(_Geom.XYZ_setZ)
    coord = _swig_new_instance_method(_Geom.XYZ_coord)
    x = _swig_new_instance_method(_Geom.XYZ_x)
    y = _swig_new_instance_method(_Geom.XYZ_y)
    z = _swig_new_instance_method(_Geom.XYZ_z)
    modulus = _swig_new_instance_method(_Geom.XYZ_modulus)
    squareModulus = _swig_new_instance_method(_Geom.XYZ_squareModulus)
    isEqual = _swig_new_instance_method(_Geom.XYZ_isEqual)
    add = _swig_new_instance_method(_Geom.XYZ_add)
    __iadd__ = _swig_new_instance_method(_Geom.XYZ___iadd__)
    added = _swig_new_instance_method(_Geom.XYZ_added)
    __add__ = _swig_new_instance_method(_Geom.XYZ___add__)
    cross = _swig_new_instance_method(_Geom.XYZ_cross)
    __ixor__ = _swig_new_instance_method(_Geom.XYZ___ixor__)
    crossed = _swig_new_instance_method(_Geom.XYZ_crossed)
    __xor__ = _swig_new_instance_method(_Geom.XYZ___xor__)
    crossMagnitude = _swig_new_instance_method(_Geom.XYZ_crossMagnitude)
    crossSquareMagnitude = _swig_new_instance_method(_Geom.XYZ_crossSquareMagnitude)
    crossCross = _swig_new_instance_method(_Geom.XYZ_crossCross)
    crossCrossed = _swig_new_instance_method(_Geom.XYZ_crossCrossed)
    divide = _swig_new_instance_method(_Geom.XYZ_divide)

    def __itruediv__(self, *args):
        return _Geom.XYZ___itruediv__(self, *args)
    __idiv__ = __itruediv__


    divided = _swig_new_instance_method(_Geom.XYZ_divided)

    def __truediv__(self, *args):
        return _Geom.XYZ___truediv__(self, *args)
    __div__ = __truediv__


    dot = _swig_new_instance_method(_Geom.XYZ_dot)
    dotCross = _swig_new_instance_method(_Geom.XYZ_dotCross)
    multiply = _swig_new_instance_method(_Geom.XYZ_multiply)
    __imul__ = _swig_new_instance_method(_Geom.XYZ___imul__)
    multiplied = _swig_new_instance_method(_Geom.XYZ_multiplied)
    __mul__ = _swig_new_instance_method(_Geom.XYZ___mul__)
    normalize = _swig_new_instance_method(_Geom.XYZ_normalize)
    normalized = _swig_new_instance_method(_Geom.XYZ_normalized)
    reverse = _swig_new_instance_method(_Geom.XYZ_reverse)
    reversed = _swig_new_instance_method(_Geom.XYZ_reversed)
    subtract = _swig_new_instance_method(_Geom.XYZ_subtract)
    __isub__ = _swig_new_instance_method(_Geom.XYZ___isub__)
    subtracted = _swig_new_instance_method(_Geom.XYZ_subtracted)
    __sub__ = _swig_new_instance_method(_Geom.XYZ___sub__)
    setLinearForm = _swig_new_instance_method(_Geom.XYZ_setLinearForm)
    at = _swig_new_instance_method(_Geom.XYZ_at)
    __lt__ = _swig_new_instance_method(_Geom.XYZ___lt__)
    __swig_destroy__ = _Geom.delete_XYZ

# Register XYZ in _Geom:
_Geom.XYZ_swigregister(XYZ)
class vector_Ax1(object):
    r"""Proxy of C++ std::vector< Geom::Ax1 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_Geom.vector_Ax1_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_Geom.vector_Ax1___nonzero__)
    __bool__ = _swig_new_instance_method(_Geom.vector_Ax1___bool__)
    __len__ = _swig_new_instance_method(_Geom.vector_Ax1___len__)
    __getslice__ = _swig_new_instance_method(_Geom.vector_Ax1___getslice__)
    __setslice__ = _swig_new_instance_method(_Geom.vector_Ax1___setslice__)
    __delslice__ = _swig_new_instance_method(_Geom.vector_Ax1___delslice__)
    __delitem__ = _swig_new_instance_method(_Geom.vector_Ax1___delitem__)
    __getitem__ = _swig_new_instance_method(_Geom.vector_Ax1___getitem__)
    __setitem__ = _swig_new_instance_method(_Geom.vector_Ax1___setitem__)
    pop = _swig_new_instance_method(_Geom.vector_Ax1_pop)
    append = _swig_new_instance_method(_Geom.vector_Ax1_append)
    empty = _swig_new_instance_method(_Geom.vector_Ax1_empty)
    size = _swig_new_instance_method(_Geom.vector_Ax1_size)
    swap = _swig_new_instance_method(_Geom.vector_Ax1_swap)
    begin = _swig_new_instance_method(_Geom.vector_Ax1_begin)
    end = _swig_new_instance_method(_Geom.vector_Ax1_end)
    rbegin = _swig_new_instance_method(_Geom.vector_Ax1_rbegin)
    rend = _swig_new_instance_method(_Geom.vector_Ax1_rend)
    clear = _swig_new_instance_method(_Geom.vector_Ax1_clear)
    get_allocator = _swig_new_instance_method(_Geom.vector_Ax1_get_allocator)
    pop_back = _swig_new_instance_method(_Geom.vector_Ax1_pop_back)
    erase = _swig_new_instance_method(_Geom.vector_Ax1_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_Ax1 self) -> vector_Ax1
        __init__(vector_Ax1 self, vector_Ax1 other) -> vector_Ax1
        __init__(vector_Ax1 self, std::vector< Geom::Ax1 >::size_type size) -> vector_Ax1
        __init__(vector_Ax1 self, std::vector< Geom::Ax1 >::size_type size, Ax1 value) -> vector_Ax1
        """
        _Geom.vector_Ax1_swiginit(self, _Geom.new_vector_Ax1(*args))
    push_back = _swig_new_instance_method(_Geom.vector_Ax1_push_back)
    front = _swig_new_instance_method(_Geom.vector_Ax1_front)
    back = _swig_new_instance_method(_Geom.vector_Ax1_back)
    assign = _swig_new_instance_method(_Geom.vector_Ax1_assign)
    resize = _swig_new_instance_method(_Geom.vector_Ax1_resize)
    insert = _swig_new_instance_method(_Geom.vector_Ax1_insert)
    reserve = _swig_new_instance_method(_Geom.vector_Ax1_reserve)
    capacity = _swig_new_instance_method(_Geom.vector_Ax1_capacity)
    __swig_destroy__ = _Geom.delete_vector_Ax1

# Register vector_Ax1 in _Geom:
_Geom.vector_Ax1_swigregister(vector_Ax1)
class vector_Ax2(object):
    r"""Proxy of C++ std::vector< Geom::Ax2 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_Geom.vector_Ax2_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_Geom.vector_Ax2___nonzero__)
    __bool__ = _swig_new_instance_method(_Geom.vector_Ax2___bool__)
    __len__ = _swig_new_instance_method(_Geom.vector_Ax2___len__)
    __getslice__ = _swig_new_instance_method(_Geom.vector_Ax2___getslice__)
    __setslice__ = _swig_new_instance_method(_Geom.vector_Ax2___setslice__)
    __delslice__ = _swig_new_instance_method(_Geom.vector_Ax2___delslice__)
    __delitem__ = _swig_new_instance_method(_Geom.vector_Ax2___delitem__)
    __getitem__ = _swig_new_instance_method(_Geom.vector_Ax2___getitem__)
    __setitem__ = _swig_new_instance_method(_Geom.vector_Ax2___setitem__)
    pop = _swig_new_instance_method(_Geom.vector_Ax2_pop)
    append = _swig_new_instance_method(_Geom.vector_Ax2_append)
    empty = _swig_new_instance_method(_Geom.vector_Ax2_empty)
    size = _swig_new_instance_method(_Geom.vector_Ax2_size)
    swap = _swig_new_instance_method(_Geom.vector_Ax2_swap)
    begin = _swig_new_instance_method(_Geom.vector_Ax2_begin)
    end = _swig_new_instance_method(_Geom.vector_Ax2_end)
    rbegin = _swig_new_instance_method(_Geom.vector_Ax2_rbegin)
    rend = _swig_new_instance_method(_Geom.vector_Ax2_rend)
    clear = _swig_new_instance_method(_Geom.vector_Ax2_clear)
    get_allocator = _swig_new_instance_method(_Geom.vector_Ax2_get_allocator)
    pop_back = _swig_new_instance_method(_Geom.vector_Ax2_pop_back)
    erase = _swig_new_instance_method(_Geom.vector_Ax2_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_Ax2 self) -> vector_Ax2
        __init__(vector_Ax2 self, vector_Ax2 other) -> vector_Ax2
        __init__(vector_Ax2 self, std::vector< Geom::Ax2 >::size_type size) -> vector_Ax2
        __init__(vector_Ax2 self, std::vector< Geom::Ax2 >::size_type size, Ax2 value) -> vector_Ax2
        """
        _Geom.vector_Ax2_swiginit(self, _Geom.new_vector_Ax2(*args))
    push_back = _swig_new_instance_method(_Geom.vector_Ax2_push_back)
    front = _swig_new_instance_method(_Geom.vector_Ax2_front)
    back = _swig_new_instance_method(_Geom.vector_Ax2_back)
    assign = _swig_new_instance_method(_Geom.vector_Ax2_assign)
    resize = _swig_new_instance_method(_Geom.vector_Ax2_resize)
    insert = _swig_new_instance_method(_Geom.vector_Ax2_insert)
    reserve = _swig_new_instance_method(_Geom.vector_Ax2_reserve)
    capacity = _swig_new_instance_method(_Geom.vector_Ax2_capacity)
    __swig_destroy__ = _Geom.delete_vector_Ax2

# Register vector_Ax2 in _Geom:
_Geom.vector_Ax2_swigregister(vector_Ax2)
class vector_Ax3(object):
    r"""Proxy of C++ std::vector< Geom::Ax3 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_Geom.vector_Ax3_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_Geom.vector_Ax3___nonzero__)
    __bool__ = _swig_new_instance_method(_Geom.vector_Ax3___bool__)
    __len__ = _swig_new_instance_method(_Geom.vector_Ax3___len__)
    __getslice__ = _swig_new_instance_method(_Geom.vector_Ax3___getslice__)
    __setslice__ = _swig_new_instance_method(_Geom.vector_Ax3___setslice__)
    __delslice__ = _swig_new_instance_method(_Geom.vector_Ax3___delslice__)
    __delitem__ = _swig_new_instance_method(_Geom.vector_Ax3___delitem__)
    __getitem__ = _swig_new_instance_method(_Geom.vector_Ax3___getitem__)
    __setitem__ = _swig_new_instance_method(_Geom.vector_Ax3___setitem__)
    pop = _swig_new_instance_method(_Geom.vector_Ax3_pop)
    append = _swig_new_instance_method(_Geom.vector_Ax3_append)
    empty = _swig_new_instance_method(_Geom.vector_Ax3_empty)
    size = _swig_new_instance_method(_Geom.vector_Ax3_size)
    swap = _swig_new_instance_method(_Geom.vector_Ax3_swap)
    begin = _swig_new_instance_method(_Geom.vector_Ax3_begin)
    end = _swig_new_instance_method(_Geom.vector_Ax3_end)
    rbegin = _swig_new_instance_method(_Geom.vector_Ax3_rbegin)
    rend = _swig_new_instance_method(_Geom.vector_Ax3_rend)
    clear = _swig_new_instance_method(_Geom.vector_Ax3_clear)
    get_allocator = _swig_new_instance_method(_Geom.vector_Ax3_get_allocator)
    pop_back = _swig_new_instance_method(_Geom.vector_Ax3_pop_back)
    erase = _swig_new_instance_method(_Geom.vector_Ax3_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_Ax3 self) -> vector_Ax3
        __init__(vector_Ax3 self, vector_Ax3 other) -> vector_Ax3
        __init__(vector_Ax3 self, std::vector< Geom::Ax3 >::size_type size) -> vector_Ax3
        __init__(vector_Ax3 self, std::vector< Geom::Ax3 >::size_type size, Ax3 value) -> vector_Ax3
        """
        _Geom.vector_Ax3_swiginit(self, _Geom.new_vector_Ax3(*args))
    push_back = _swig_new_instance_method(_Geom.vector_Ax3_push_back)
    front = _swig_new_instance_method(_Geom.vector_Ax3_front)
    back = _swig_new_instance_method(_Geom.vector_Ax3_back)
    assign = _swig_new_instance_method(_Geom.vector_Ax3_assign)
    resize = _swig_new_instance_method(_Geom.vector_Ax3_resize)
    insert = _swig_new_instance_method(_Geom.vector_Ax3_insert)
    reserve = _swig_new_instance_method(_Geom.vector_Ax3_reserve)
    capacity = _swig_new_instance_method(_Geom.vector_Ax3_capacity)
    __swig_destroy__ = _Geom.delete_vector_Ax3

# Register vector_Ax3 in _Geom:
_Geom.vector_Ax3_swigregister(vector_Ax3)
class vector_Circ(object):
    r"""Proxy of C++ std::vector< Geom::Circ > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_Geom.vector_Circ_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_Geom.vector_Circ___nonzero__)
    __bool__ = _swig_new_instance_method(_Geom.vector_Circ___bool__)
    __len__ = _swig_new_instance_method(_Geom.vector_Circ___len__)
    __getslice__ = _swig_new_instance_method(_Geom.vector_Circ___getslice__)
    __setslice__ = _swig_new_instance_method(_Geom.vector_Circ___setslice__)
    __delslice__ = _swig_new_instance_method(_Geom.vector_Circ___delslice__)
    __delitem__ = _swig_new_instance_method(_Geom.vector_Circ___delitem__)
    __getitem__ = _swig_new_instance_method(_Geom.vector_Circ___getitem__)
    __setitem__ = _swig_new_instance_method(_Geom.vector_Circ___setitem__)
    pop = _swig_new_instance_method(_Geom.vector_Circ_pop)
    append = _swig_new_instance_method(_Geom.vector_Circ_append)
    empty = _swig_new_instance_method(_Geom.vector_Circ_empty)
    size = _swig_new_instance_method(_Geom.vector_Circ_size)
    swap = _swig_new_instance_method(_Geom.vector_Circ_swap)
    begin = _swig_new_instance_method(_Geom.vector_Circ_begin)
    end = _swig_new_instance_method(_Geom.vector_Circ_end)
    rbegin = _swig_new_instance_method(_Geom.vector_Circ_rbegin)
    rend = _swig_new_instance_method(_Geom.vector_Circ_rend)
    clear = _swig_new_instance_method(_Geom.vector_Circ_clear)
    get_allocator = _swig_new_instance_method(_Geom.vector_Circ_get_allocator)
    pop_back = _swig_new_instance_method(_Geom.vector_Circ_pop_back)
    erase = _swig_new_instance_method(_Geom.vector_Circ_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_Circ self) -> vector_Circ
        __init__(vector_Circ self, vector_Circ other) -> vector_Circ
        __init__(vector_Circ self, std::vector< Geom::Circ >::size_type size) -> vector_Circ
        __init__(vector_Circ self, std::vector< Geom::Circ >::size_type size, Circ value) -> vector_Circ
        """
        _Geom.vector_Circ_swiginit(self, _Geom.new_vector_Circ(*args))
    push_back = _swig_new_instance_method(_Geom.vector_Circ_push_back)
    front = _swig_new_instance_method(_Geom.vector_Circ_front)
    back = _swig_new_instance_method(_Geom.vector_Circ_back)
    assign = _swig_new_instance_method(_Geom.vector_Circ_assign)
    resize = _swig_new_instance_method(_Geom.vector_Circ_resize)
    insert = _swig_new_instance_method(_Geom.vector_Circ_insert)
    reserve = _swig_new_instance_method(_Geom.vector_Circ_reserve)
    capacity = _swig_new_instance_method(_Geom.vector_Circ_capacity)
    __swig_destroy__ = _Geom.delete_vector_Circ

# Register vector_Circ in _Geom:
_Geom.vector_Circ_swigregister(vector_Circ)
class vector_Dir(object):
    r"""Proxy of C++ std::vector< Geom::Dir > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_Geom.vector_Dir_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_Geom.vector_Dir___nonzero__)
    __bool__ = _swig_new_instance_method(_Geom.vector_Dir___bool__)
    __len__ = _swig_new_instance_method(_Geom.vector_Dir___len__)
    __getslice__ = _swig_new_instance_method(_Geom.vector_Dir___getslice__)
    __setslice__ = _swig_new_instance_method(_Geom.vector_Dir___setslice__)
    __delslice__ = _swig_new_instance_method(_Geom.vector_Dir___delslice__)
    __delitem__ = _swig_new_instance_method(_Geom.vector_Dir___delitem__)
    __getitem__ = _swig_new_instance_method(_Geom.vector_Dir___getitem__)
    __setitem__ = _swig_new_instance_method(_Geom.vector_Dir___setitem__)
    pop = _swig_new_instance_method(_Geom.vector_Dir_pop)
    append = _swig_new_instance_method(_Geom.vector_Dir_append)
    empty = _swig_new_instance_method(_Geom.vector_Dir_empty)
    size = _swig_new_instance_method(_Geom.vector_Dir_size)
    swap = _swig_new_instance_method(_Geom.vector_Dir_swap)
    begin = _swig_new_instance_method(_Geom.vector_Dir_begin)
    end = _swig_new_instance_method(_Geom.vector_Dir_end)
    rbegin = _swig_new_instance_method(_Geom.vector_Dir_rbegin)
    rend = _swig_new_instance_method(_Geom.vector_Dir_rend)
    clear = _swig_new_instance_method(_Geom.vector_Dir_clear)
    get_allocator = _swig_new_instance_method(_Geom.vector_Dir_get_allocator)
    pop_back = _swig_new_instance_method(_Geom.vector_Dir_pop_back)
    erase = _swig_new_instance_method(_Geom.vector_Dir_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_Dir self) -> vector_Dir
        __init__(vector_Dir self, vector_Dir other) -> vector_Dir
        __init__(vector_Dir self, std::vector< Geom::Dir >::size_type size) -> vector_Dir
        __init__(vector_Dir self, std::vector< Geom::Dir >::size_type size, Dir value) -> vector_Dir
        """
        _Geom.vector_Dir_swiginit(self, _Geom.new_vector_Dir(*args))
    push_back = _swig_new_instance_method(_Geom.vector_Dir_push_back)
    front = _swig_new_instance_method(_Geom.vector_Dir_front)
    back = _swig_new_instance_method(_Geom.vector_Dir_back)
    assign = _swig_new_instance_method(_Geom.vector_Dir_assign)
    resize = _swig_new_instance_method(_Geom.vector_Dir_resize)
    insert = _swig_new_instance_method(_Geom.vector_Dir_insert)
    reserve = _swig_new_instance_method(_Geom.vector_Dir_reserve)
    capacity = _swig_new_instance_method(_Geom.vector_Dir_capacity)
    __swig_destroy__ = _Geom.delete_vector_Dir

# Register vector_Dir in _Geom:
_Geom.vector_Dir_swigregister(vector_Dir)
class vector_Lin(object):
    r"""Proxy of C++ std::vector< Geom::Lin > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_Geom.vector_Lin_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_Geom.vector_Lin___nonzero__)
    __bool__ = _swig_new_instance_method(_Geom.vector_Lin___bool__)
    __len__ = _swig_new_instance_method(_Geom.vector_Lin___len__)
    __getslice__ = _swig_new_instance_method(_Geom.vector_Lin___getslice__)
    __setslice__ = _swig_new_instance_method(_Geom.vector_Lin___setslice__)
    __delslice__ = _swig_new_instance_method(_Geom.vector_Lin___delslice__)
    __delitem__ = _swig_new_instance_method(_Geom.vector_Lin___delitem__)
    __getitem__ = _swig_new_instance_method(_Geom.vector_Lin___getitem__)
    __setitem__ = _swig_new_instance_method(_Geom.vector_Lin___setitem__)
    pop = _swig_new_instance_method(_Geom.vector_Lin_pop)
    append = _swig_new_instance_method(_Geom.vector_Lin_append)
    empty = _swig_new_instance_method(_Geom.vector_Lin_empty)
    size = _swig_new_instance_method(_Geom.vector_Lin_size)
    swap = _swig_new_instance_method(_Geom.vector_Lin_swap)
    begin = _swig_new_instance_method(_Geom.vector_Lin_begin)
    end = _swig_new_instance_method(_Geom.vector_Lin_end)
    rbegin = _swig_new_instance_method(_Geom.vector_Lin_rbegin)
    rend = _swig_new_instance_method(_Geom.vector_Lin_rend)
    clear = _swig_new_instance_method(_Geom.vector_Lin_clear)
    get_allocator = _swig_new_instance_method(_Geom.vector_Lin_get_allocator)
    pop_back = _swig_new_instance_method(_Geom.vector_Lin_pop_back)
    erase = _swig_new_instance_method(_Geom.vector_Lin_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_Lin self) -> vector_Lin
        __init__(vector_Lin self, vector_Lin other) -> vector_Lin
        __init__(vector_Lin self, std::vector< Geom::Lin >::size_type size) -> vector_Lin
        __init__(vector_Lin self, std::vector< Geom::Lin >::size_type size, Lin value) -> vector_Lin
        """
        _Geom.vector_Lin_swiginit(self, _Geom.new_vector_Lin(*args))
    push_back = _swig_new_instance_method(_Geom.vector_Lin_push_back)
    front = _swig_new_instance_method(_Geom.vector_Lin_front)
    back = _swig_new_instance_method(_Geom.vector_Lin_back)
    assign = _swig_new_instance_method(_Geom.vector_Lin_assign)
    resize = _swig_new_instance_method(_Geom.vector_Lin_resize)
    insert = _swig_new_instance_method(_Geom.vector_Lin_insert)
    reserve = _swig_new_instance_method(_Geom.vector_Lin_reserve)
    capacity = _swig_new_instance_method(_Geom.vector_Lin_capacity)
    __swig_destroy__ = _Geom.delete_vector_Lin

# Register vector_Lin in _Geom:
_Geom.vector_Lin_swigregister(vector_Lin)
class vector_Pln(object):
    r"""Proxy of C++ std::vector< Geom::Pln > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_Geom.vector_Pln_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_Geom.vector_Pln___nonzero__)
    __bool__ = _swig_new_instance_method(_Geom.vector_Pln___bool__)
    __len__ = _swig_new_instance_method(_Geom.vector_Pln___len__)
    __getslice__ = _swig_new_instance_method(_Geom.vector_Pln___getslice__)
    __setslice__ = _swig_new_instance_method(_Geom.vector_Pln___setslice__)
    __delslice__ = _swig_new_instance_method(_Geom.vector_Pln___delslice__)
    __delitem__ = _swig_new_instance_method(_Geom.vector_Pln___delitem__)
    __getitem__ = _swig_new_instance_method(_Geom.vector_Pln___getitem__)
    __setitem__ = _swig_new_instance_method(_Geom.vector_Pln___setitem__)
    pop = _swig_new_instance_method(_Geom.vector_Pln_pop)
    append = _swig_new_instance_method(_Geom.vector_Pln_append)
    empty = _swig_new_instance_method(_Geom.vector_Pln_empty)
    size = _swig_new_instance_method(_Geom.vector_Pln_size)
    swap = _swig_new_instance_method(_Geom.vector_Pln_swap)
    begin = _swig_new_instance_method(_Geom.vector_Pln_begin)
    end = _swig_new_instance_method(_Geom.vector_Pln_end)
    rbegin = _swig_new_instance_method(_Geom.vector_Pln_rbegin)
    rend = _swig_new_instance_method(_Geom.vector_Pln_rend)
    clear = _swig_new_instance_method(_Geom.vector_Pln_clear)
    get_allocator = _swig_new_instance_method(_Geom.vector_Pln_get_allocator)
    pop_back = _swig_new_instance_method(_Geom.vector_Pln_pop_back)
    erase = _swig_new_instance_method(_Geom.vector_Pln_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_Pln self) -> vector_Pln
        __init__(vector_Pln self, vector_Pln other) -> vector_Pln
        __init__(vector_Pln self, std::vector< Geom::Pln >::size_type size) -> vector_Pln
        __init__(vector_Pln self, std::vector< Geom::Pln >::size_type size, Pln value) -> vector_Pln
        """
        _Geom.vector_Pln_swiginit(self, _Geom.new_vector_Pln(*args))
    push_back = _swig_new_instance_method(_Geom.vector_Pln_push_back)
    front = _swig_new_instance_method(_Geom.vector_Pln_front)
    back = _swig_new_instance_method(_Geom.vector_Pln_back)
    assign = _swig_new_instance_method(_Geom.vector_Pln_assign)
    resize = _swig_new_instance_method(_Geom.vector_Pln_resize)
    insert = _swig_new_instance_method(_Geom.vector_Pln_insert)
    reserve = _swig_new_instance_method(_Geom.vector_Pln_reserve)
    capacity = _swig_new_instance_method(_Geom.vector_Pln_capacity)
    __swig_destroy__ = _Geom.delete_vector_Pln

# Register vector_Pln in _Geom:
_Geom.vector_Pln_swigregister(vector_Pln)
class vector_Pnt(object):
    r"""Proxy of C++ std::vector< Geom::Pnt > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_Geom.vector_Pnt_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_Geom.vector_Pnt___nonzero__)
    __bool__ = _swig_new_instance_method(_Geom.vector_Pnt___bool__)
    __len__ = _swig_new_instance_method(_Geom.vector_Pnt___len__)
    __getslice__ = _swig_new_instance_method(_Geom.vector_Pnt___getslice__)
    __setslice__ = _swig_new_instance_method(_Geom.vector_Pnt___setslice__)
    __delslice__ = _swig_new_instance_method(_Geom.vector_Pnt___delslice__)
    __delitem__ = _swig_new_instance_method(_Geom.vector_Pnt___delitem__)
    __getitem__ = _swig_new_instance_method(_Geom.vector_Pnt___getitem__)
    __setitem__ = _swig_new_instance_method(_Geom.vector_Pnt___setitem__)
    pop = _swig_new_instance_method(_Geom.vector_Pnt_pop)
    append = _swig_new_instance_method(_Geom.vector_Pnt_append)
    empty = _swig_new_instance_method(_Geom.vector_Pnt_empty)
    size = _swig_new_instance_method(_Geom.vector_Pnt_size)
    swap = _swig_new_instance_method(_Geom.vector_Pnt_swap)
    begin = _swig_new_instance_method(_Geom.vector_Pnt_begin)
    end = _swig_new_instance_method(_Geom.vector_Pnt_end)
    rbegin = _swig_new_instance_method(_Geom.vector_Pnt_rbegin)
    rend = _swig_new_instance_method(_Geom.vector_Pnt_rend)
    clear = _swig_new_instance_method(_Geom.vector_Pnt_clear)
    get_allocator = _swig_new_instance_method(_Geom.vector_Pnt_get_allocator)
    pop_back = _swig_new_instance_method(_Geom.vector_Pnt_pop_back)
    erase = _swig_new_instance_method(_Geom.vector_Pnt_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_Pnt self) -> vector_Pnt
        __init__(vector_Pnt self, vector_Pnt other) -> vector_Pnt
        __init__(vector_Pnt self, std::vector< Geom::Pnt >::size_type size) -> vector_Pnt
        __init__(vector_Pnt self, std::vector< Geom::Pnt >::size_type size, Pnt value) -> vector_Pnt
        """
        _Geom.vector_Pnt_swiginit(self, _Geom.new_vector_Pnt(*args))
    push_back = _swig_new_instance_method(_Geom.vector_Pnt_push_back)
    front = _swig_new_instance_method(_Geom.vector_Pnt_front)
    back = _swig_new_instance_method(_Geom.vector_Pnt_back)
    assign = _swig_new_instance_method(_Geom.vector_Pnt_assign)
    resize = _swig_new_instance_method(_Geom.vector_Pnt_resize)
    insert = _swig_new_instance_method(_Geom.vector_Pnt_insert)
    reserve = _swig_new_instance_method(_Geom.vector_Pnt_reserve)
    capacity = _swig_new_instance_method(_Geom.vector_Pnt_capacity)
    __swig_destroy__ = _Geom.delete_vector_Pnt

# Register vector_Pnt in _Geom:
_Geom.vector_Pnt_swigregister(vector_Pnt)
class vector_Pnt2d(object):
    r"""Proxy of C++ std::vector< Geom::Pnt2d > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_Geom.vector_Pnt2d_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_Geom.vector_Pnt2d___nonzero__)
    __bool__ = _swig_new_instance_method(_Geom.vector_Pnt2d___bool__)
    __len__ = _swig_new_instance_method(_Geom.vector_Pnt2d___len__)
    __getslice__ = _swig_new_instance_method(_Geom.vector_Pnt2d___getslice__)
    __setslice__ = _swig_new_instance_method(_Geom.vector_Pnt2d___setslice__)
    __delslice__ = _swig_new_instance_method(_Geom.vector_Pnt2d___delslice__)
    __delitem__ = _swig_new_instance_method(_Geom.vector_Pnt2d___delitem__)
    __getitem__ = _swig_new_instance_method(_Geom.vector_Pnt2d___getitem__)
    __setitem__ = _swig_new_instance_method(_Geom.vector_Pnt2d___setitem__)
    pop = _swig_new_instance_method(_Geom.vector_Pnt2d_pop)
    append = _swig_new_instance_method(_Geom.vector_Pnt2d_append)
    empty = _swig_new_instance_method(_Geom.vector_Pnt2d_empty)
    size = _swig_new_instance_method(_Geom.vector_Pnt2d_size)
    swap = _swig_new_instance_method(_Geom.vector_Pnt2d_swap)
    begin = _swig_new_instance_method(_Geom.vector_Pnt2d_begin)
    end = _swig_new_instance_method(_Geom.vector_Pnt2d_end)
    rbegin = _swig_new_instance_method(_Geom.vector_Pnt2d_rbegin)
    rend = _swig_new_instance_method(_Geom.vector_Pnt2d_rend)
    clear = _swig_new_instance_method(_Geom.vector_Pnt2d_clear)
    get_allocator = _swig_new_instance_method(_Geom.vector_Pnt2d_get_allocator)
    pop_back = _swig_new_instance_method(_Geom.vector_Pnt2d_pop_back)
    erase = _swig_new_instance_method(_Geom.vector_Pnt2d_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_Pnt2d self) -> vector_Pnt2d
        __init__(vector_Pnt2d self, vector_Pnt2d other) -> vector_Pnt2d
        __init__(vector_Pnt2d self, std::vector< Geom::Pnt2d >::size_type size) -> vector_Pnt2d
        __init__(vector_Pnt2d self, std::vector< Geom::Pnt2d >::size_type size, Pnt2d value) -> vector_Pnt2d
        """
        _Geom.vector_Pnt2d_swiginit(self, _Geom.new_vector_Pnt2d(*args))
    push_back = _swig_new_instance_method(_Geom.vector_Pnt2d_push_back)
    front = _swig_new_instance_method(_Geom.vector_Pnt2d_front)
    back = _swig_new_instance_method(_Geom.vector_Pnt2d_back)
    assign = _swig_new_instance_method(_Geom.vector_Pnt2d_assign)
    resize = _swig_new_instance_method(_Geom.vector_Pnt2d_resize)
    insert = _swig_new_instance_method(_Geom.vector_Pnt2d_insert)
    reserve = _swig_new_instance_method(_Geom.vector_Pnt2d_reserve)
    capacity = _swig_new_instance_method(_Geom.vector_Pnt2d_capacity)
    __swig_destroy__ = _Geom.delete_vector_Pnt2d

# Register vector_Pnt2d in _Geom:
_Geom.vector_Pnt2d_swigregister(vector_Pnt2d)
class vector_Trsf(object):
    r"""Proxy of C++ std::vector< Geom::Trsf > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_Geom.vector_Trsf_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_Geom.vector_Trsf___nonzero__)
    __bool__ = _swig_new_instance_method(_Geom.vector_Trsf___bool__)
    __len__ = _swig_new_instance_method(_Geom.vector_Trsf___len__)
    __getslice__ = _swig_new_instance_method(_Geom.vector_Trsf___getslice__)
    __setslice__ = _swig_new_instance_method(_Geom.vector_Trsf___setslice__)
    __delslice__ = _swig_new_instance_method(_Geom.vector_Trsf___delslice__)
    __delitem__ = _swig_new_instance_method(_Geom.vector_Trsf___delitem__)
    __getitem__ = _swig_new_instance_method(_Geom.vector_Trsf___getitem__)
    __setitem__ = _swig_new_instance_method(_Geom.vector_Trsf___setitem__)
    pop = _swig_new_instance_method(_Geom.vector_Trsf_pop)
    append = _swig_new_instance_method(_Geom.vector_Trsf_append)
    empty = _swig_new_instance_method(_Geom.vector_Trsf_empty)
    size = _swig_new_instance_method(_Geom.vector_Trsf_size)
    swap = _swig_new_instance_method(_Geom.vector_Trsf_swap)
    begin = _swig_new_instance_method(_Geom.vector_Trsf_begin)
    end = _swig_new_instance_method(_Geom.vector_Trsf_end)
    rbegin = _swig_new_instance_method(_Geom.vector_Trsf_rbegin)
    rend = _swig_new_instance_method(_Geom.vector_Trsf_rend)
    clear = _swig_new_instance_method(_Geom.vector_Trsf_clear)
    get_allocator = _swig_new_instance_method(_Geom.vector_Trsf_get_allocator)
    pop_back = _swig_new_instance_method(_Geom.vector_Trsf_pop_back)
    erase = _swig_new_instance_method(_Geom.vector_Trsf_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_Trsf self) -> vector_Trsf
        __init__(vector_Trsf self, vector_Trsf other) -> vector_Trsf
        __init__(vector_Trsf self, std::vector< Geom::Trsf >::size_type size) -> vector_Trsf
        __init__(vector_Trsf self, std::vector< Geom::Trsf >::size_type size, Trsf value) -> vector_Trsf
        """
        _Geom.vector_Trsf_swiginit(self, _Geom.new_vector_Trsf(*args))
    push_back = _swig_new_instance_method(_Geom.vector_Trsf_push_back)
    front = _swig_new_instance_method(_Geom.vector_Trsf_front)
    back = _swig_new_instance_method(_Geom.vector_Trsf_back)
    assign = _swig_new_instance_method(_Geom.vector_Trsf_assign)
    resize = _swig_new_instance_method(_Geom.vector_Trsf_resize)
    insert = _swig_new_instance_method(_Geom.vector_Trsf_insert)
    reserve = _swig_new_instance_method(_Geom.vector_Trsf_reserve)
    capacity = _swig_new_instance_method(_Geom.vector_Trsf_capacity)
    __swig_destroy__ = _Geom.delete_vector_Trsf

# Register vector_Trsf in _Geom:
_Geom.vector_Trsf_swigregister(vector_Trsf)
class vector_GTrsf(object):
    r"""Proxy of C++ std::vector< Geom::GTrsf > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_Geom.vector_GTrsf_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_Geom.vector_GTrsf___nonzero__)
    __bool__ = _swig_new_instance_method(_Geom.vector_GTrsf___bool__)
    __len__ = _swig_new_instance_method(_Geom.vector_GTrsf___len__)
    __getslice__ = _swig_new_instance_method(_Geom.vector_GTrsf___getslice__)
    __setslice__ = _swig_new_instance_method(_Geom.vector_GTrsf___setslice__)
    __delslice__ = _swig_new_instance_method(_Geom.vector_GTrsf___delslice__)
    __delitem__ = _swig_new_instance_method(_Geom.vector_GTrsf___delitem__)
    __getitem__ = _swig_new_instance_method(_Geom.vector_GTrsf___getitem__)
    __setitem__ = _swig_new_instance_method(_Geom.vector_GTrsf___setitem__)
    pop = _swig_new_instance_method(_Geom.vector_GTrsf_pop)
    append = _swig_new_instance_method(_Geom.vector_GTrsf_append)
    empty = _swig_new_instance_method(_Geom.vector_GTrsf_empty)
    size = _swig_new_instance_method(_Geom.vector_GTrsf_size)
    swap = _swig_new_instance_method(_Geom.vector_GTrsf_swap)
    begin = _swig_new_instance_method(_Geom.vector_GTrsf_begin)
    end = _swig_new_instance_method(_Geom.vector_GTrsf_end)
    rbegin = _swig_new_instance_method(_Geom.vector_GTrsf_rbegin)
    rend = _swig_new_instance_method(_Geom.vector_GTrsf_rend)
    clear = _swig_new_instance_method(_Geom.vector_GTrsf_clear)
    get_allocator = _swig_new_instance_method(_Geom.vector_GTrsf_get_allocator)
    pop_back = _swig_new_instance_method(_Geom.vector_GTrsf_pop_back)
    erase = _swig_new_instance_method(_Geom.vector_GTrsf_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_GTrsf self) -> vector_GTrsf
        __init__(vector_GTrsf self, vector_GTrsf other) -> vector_GTrsf
        __init__(vector_GTrsf self, std::vector< Geom::GTrsf >::size_type size) -> vector_GTrsf
        __init__(vector_GTrsf self, std::vector< Geom::GTrsf >::size_type size, GTrsf value) -> vector_GTrsf
        """
        _Geom.vector_GTrsf_swiginit(self, _Geom.new_vector_GTrsf(*args))
    push_back = _swig_new_instance_method(_Geom.vector_GTrsf_push_back)
    front = _swig_new_instance_method(_Geom.vector_GTrsf_front)
    back = _swig_new_instance_method(_Geom.vector_GTrsf_back)
    assign = _swig_new_instance_method(_Geom.vector_GTrsf_assign)
    resize = _swig_new_instance_method(_Geom.vector_GTrsf_resize)
    insert = _swig_new_instance_method(_Geom.vector_GTrsf_insert)
    reserve = _swig_new_instance_method(_Geom.vector_GTrsf_reserve)
    capacity = _swig_new_instance_method(_Geom.vector_GTrsf_capacity)
    __swig_destroy__ = _Geom.delete_vector_GTrsf

# Register vector_GTrsf in _Geom:
_Geom.vector_GTrsf_swigregister(vector_GTrsf)
class vector_Vec(object):
    r"""Proxy of C++ std::vector< Geom::Vec > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_Geom.vector_Vec_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_Geom.vector_Vec___nonzero__)
    __bool__ = _swig_new_instance_method(_Geom.vector_Vec___bool__)
    __len__ = _swig_new_instance_method(_Geom.vector_Vec___len__)
    __getslice__ = _swig_new_instance_method(_Geom.vector_Vec___getslice__)
    __setslice__ = _swig_new_instance_method(_Geom.vector_Vec___setslice__)
    __delslice__ = _swig_new_instance_method(_Geom.vector_Vec___delslice__)
    __delitem__ = _swig_new_instance_method(_Geom.vector_Vec___delitem__)
    __getitem__ = _swig_new_instance_method(_Geom.vector_Vec___getitem__)
    __setitem__ = _swig_new_instance_method(_Geom.vector_Vec___setitem__)
    pop = _swig_new_instance_method(_Geom.vector_Vec_pop)
    append = _swig_new_instance_method(_Geom.vector_Vec_append)
    empty = _swig_new_instance_method(_Geom.vector_Vec_empty)
    size = _swig_new_instance_method(_Geom.vector_Vec_size)
    swap = _swig_new_instance_method(_Geom.vector_Vec_swap)
    begin = _swig_new_instance_method(_Geom.vector_Vec_begin)
    end = _swig_new_instance_method(_Geom.vector_Vec_end)
    rbegin = _swig_new_instance_method(_Geom.vector_Vec_rbegin)
    rend = _swig_new_instance_method(_Geom.vector_Vec_rend)
    clear = _swig_new_instance_method(_Geom.vector_Vec_clear)
    get_allocator = _swig_new_instance_method(_Geom.vector_Vec_get_allocator)
    pop_back = _swig_new_instance_method(_Geom.vector_Vec_pop_back)
    erase = _swig_new_instance_method(_Geom.vector_Vec_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_Vec self) -> vector_Vec
        __init__(vector_Vec self, vector_Vec other) -> vector_Vec
        __init__(vector_Vec self, std::vector< Geom::Vec >::size_type size) -> vector_Vec
        __init__(vector_Vec self, std::vector< Geom::Vec >::size_type size, Vec value) -> vector_Vec
        """
        _Geom.vector_Vec_swiginit(self, _Geom.new_vector_Vec(*args))
    push_back = _swig_new_instance_method(_Geom.vector_Vec_push_back)
    front = _swig_new_instance_method(_Geom.vector_Vec_front)
    back = _swig_new_instance_method(_Geom.vector_Vec_back)
    assign = _swig_new_instance_method(_Geom.vector_Vec_assign)
    resize = _swig_new_instance_method(_Geom.vector_Vec_resize)
    insert = _swig_new_instance_method(_Geom.vector_Vec_insert)
    reserve = _swig_new_instance_method(_Geom.vector_Vec_reserve)
    capacity = _swig_new_instance_method(_Geom.vector_Vec_capacity)
    __swig_destroy__ = _Geom.delete_vector_Vec

# Register vector_Vec in _Geom:
_Geom.vector_Vec_swigregister(vector_Vec)
class vector_XYZ(object):
    r"""Proxy of C++ std::vector< Geom::XYZ > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_Geom.vector_XYZ_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_Geom.vector_XYZ___nonzero__)
    __bool__ = _swig_new_instance_method(_Geom.vector_XYZ___bool__)
    __len__ = _swig_new_instance_method(_Geom.vector_XYZ___len__)
    __getslice__ = _swig_new_instance_method(_Geom.vector_XYZ___getslice__)
    __setslice__ = _swig_new_instance_method(_Geom.vector_XYZ___setslice__)
    __delslice__ = _swig_new_instance_method(_Geom.vector_XYZ___delslice__)
    __delitem__ = _swig_new_instance_method(_Geom.vector_XYZ___delitem__)
    __getitem__ = _swig_new_instance_method(_Geom.vector_XYZ___getitem__)
    __setitem__ = _swig_new_instance_method(_Geom.vector_XYZ___setitem__)
    pop = _swig_new_instance_method(_Geom.vector_XYZ_pop)
    append = _swig_new_instance_method(_Geom.vector_XYZ_append)
    empty = _swig_new_instance_method(_Geom.vector_XYZ_empty)
    size = _swig_new_instance_method(_Geom.vector_XYZ_size)
    swap = _swig_new_instance_method(_Geom.vector_XYZ_swap)
    begin = _swig_new_instance_method(_Geom.vector_XYZ_begin)
    end = _swig_new_instance_method(_Geom.vector_XYZ_end)
    rbegin = _swig_new_instance_method(_Geom.vector_XYZ_rbegin)
    rend = _swig_new_instance_method(_Geom.vector_XYZ_rend)
    clear = _swig_new_instance_method(_Geom.vector_XYZ_clear)
    get_allocator = _swig_new_instance_method(_Geom.vector_XYZ_get_allocator)
    pop_back = _swig_new_instance_method(_Geom.vector_XYZ_pop_back)
    erase = _swig_new_instance_method(_Geom.vector_XYZ_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_XYZ self) -> vector_XYZ
        __init__(vector_XYZ self, vector_XYZ other) -> vector_XYZ
        __init__(vector_XYZ self, std::vector< Geom::XYZ >::size_type size) -> vector_XYZ
        __init__(vector_XYZ self, std::vector< Geom::XYZ >::size_type size, XYZ value) -> vector_XYZ
        """
        _Geom.vector_XYZ_swiginit(self, _Geom.new_vector_XYZ(*args))
    push_back = _swig_new_instance_method(_Geom.vector_XYZ_push_back)
    front = _swig_new_instance_method(_Geom.vector_XYZ_front)
    back = _swig_new_instance_method(_Geom.vector_XYZ_back)
    assign = _swig_new_instance_method(_Geom.vector_XYZ_assign)
    resize = _swig_new_instance_method(_Geom.vector_XYZ_resize)
    insert = _swig_new_instance_method(_Geom.vector_XYZ_insert)
    reserve = _swig_new_instance_method(_Geom.vector_XYZ_reserve)
    capacity = _swig_new_instance_method(_Geom.vector_XYZ_capacity)
    __swig_destroy__ = _Geom.delete_vector_XYZ

# Register vector_XYZ in _Geom:
_Geom.vector_XYZ_swigregister(vector_XYZ)
class vector_vector_Pnt(object):
    r"""Proxy of C++ std::vector< std::vector< Geom::Pnt > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_Geom.vector_vector_Pnt_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_Geom.vector_vector_Pnt___nonzero__)
    __bool__ = _swig_new_instance_method(_Geom.vector_vector_Pnt___bool__)
    __len__ = _swig_new_instance_method(_Geom.vector_vector_Pnt___len__)
    __getslice__ = _swig_new_instance_method(_Geom.vector_vector_Pnt___getslice__)
    __setslice__ = _swig_new_instance_method(_Geom.vector_vector_Pnt___setslice__)
    __delslice__ = _swig_new_instance_method(_Geom.vector_vector_Pnt___delslice__)
    __delitem__ = _swig_new_instance_method(_Geom.vector_vector_Pnt___delitem__)
    __getitem__ = _swig_new_instance_method(_Geom.vector_vector_Pnt___getitem__)
    __setitem__ = _swig_new_instance_method(_Geom.vector_vector_Pnt___setitem__)
    pop = _swig_new_instance_method(_Geom.vector_vector_Pnt_pop)
    append = _swig_new_instance_method(_Geom.vector_vector_Pnt_append)
    empty = _swig_new_instance_method(_Geom.vector_vector_Pnt_empty)
    size = _swig_new_instance_method(_Geom.vector_vector_Pnt_size)
    swap = _swig_new_instance_method(_Geom.vector_vector_Pnt_swap)
    begin = _swig_new_instance_method(_Geom.vector_vector_Pnt_begin)
    end = _swig_new_instance_method(_Geom.vector_vector_Pnt_end)
    rbegin = _swig_new_instance_method(_Geom.vector_vector_Pnt_rbegin)
    rend = _swig_new_instance_method(_Geom.vector_vector_Pnt_rend)
    clear = _swig_new_instance_method(_Geom.vector_vector_Pnt_clear)
    get_allocator = _swig_new_instance_method(_Geom.vector_vector_Pnt_get_allocator)
    pop_back = _swig_new_instance_method(_Geom.vector_vector_Pnt_pop_back)
    erase = _swig_new_instance_method(_Geom.vector_vector_Pnt_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_vector_Pnt self) -> vector_vector_Pnt
        __init__(vector_vector_Pnt self, vector_vector_Pnt other) -> vector_vector_Pnt
        __init__(vector_vector_Pnt self, std::vector< std::vector< Geom::Pnt > >::size_type size) -> vector_vector_Pnt
        __init__(vector_vector_Pnt self, std::vector< std::vector< Geom::Pnt > >::size_type size, vector_Pnt value) -> vector_vector_Pnt
        """
        _Geom.vector_vector_Pnt_swiginit(self, _Geom.new_vector_vector_Pnt(*args))
    push_back = _swig_new_instance_method(_Geom.vector_vector_Pnt_push_back)
    front = _swig_new_instance_method(_Geom.vector_vector_Pnt_front)
    back = _swig_new_instance_method(_Geom.vector_vector_Pnt_back)
    assign = _swig_new_instance_method(_Geom.vector_vector_Pnt_assign)
    resize = _swig_new_instance_method(_Geom.vector_vector_Pnt_resize)
    insert = _swig_new_instance_method(_Geom.vector_vector_Pnt_insert)
    reserve = _swig_new_instance_method(_Geom.vector_vector_Pnt_reserve)
    capacity = _swig_new_instance_method(_Geom.vector_vector_Pnt_capacity)
    __swig_destroy__ = _Geom.delete_vector_vector_Pnt

# Register vector_vector_Pnt in _Geom:
_Geom.vector_vector_Pnt_swigregister(vector_vector_Pnt)
class vector_vector_Pnt2d(object):
    r"""Proxy of C++ std::vector< std::vector< Geom::Pnt2d > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_Geom.vector_vector_Pnt2d_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_Geom.vector_vector_Pnt2d___nonzero__)
    __bool__ = _swig_new_instance_method(_Geom.vector_vector_Pnt2d___bool__)
    __len__ = _swig_new_instance_method(_Geom.vector_vector_Pnt2d___len__)
    __getslice__ = _swig_new_instance_method(_Geom.vector_vector_Pnt2d___getslice__)
    __setslice__ = _swig_new_instance_method(_Geom.vector_vector_Pnt2d___setslice__)
    __delslice__ = _swig_new_instance_method(_Geom.vector_vector_Pnt2d___delslice__)
    __delitem__ = _swig_new_instance_method(_Geom.vector_vector_Pnt2d___delitem__)
    __getitem__ = _swig_new_instance_method(_Geom.vector_vector_Pnt2d___getitem__)
    __setitem__ = _swig_new_instance_method(_Geom.vector_vector_Pnt2d___setitem__)
    pop = _swig_new_instance_method(_Geom.vector_vector_Pnt2d_pop)
    append = _swig_new_instance_method(_Geom.vector_vector_Pnt2d_append)
    empty = _swig_new_instance_method(_Geom.vector_vector_Pnt2d_empty)
    size = _swig_new_instance_method(_Geom.vector_vector_Pnt2d_size)
    swap = _swig_new_instance_method(_Geom.vector_vector_Pnt2d_swap)
    begin = _swig_new_instance_method(_Geom.vector_vector_Pnt2d_begin)
    end = _swig_new_instance_method(_Geom.vector_vector_Pnt2d_end)
    rbegin = _swig_new_instance_method(_Geom.vector_vector_Pnt2d_rbegin)
    rend = _swig_new_instance_method(_Geom.vector_vector_Pnt2d_rend)
    clear = _swig_new_instance_method(_Geom.vector_vector_Pnt2d_clear)
    get_allocator = _swig_new_instance_method(_Geom.vector_vector_Pnt2d_get_allocator)
    pop_back = _swig_new_instance_method(_Geom.vector_vector_Pnt2d_pop_back)
    erase = _swig_new_instance_method(_Geom.vector_vector_Pnt2d_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_vector_Pnt2d self) -> vector_vector_Pnt2d
        __init__(vector_vector_Pnt2d self, vector_vector_Pnt2d other) -> vector_vector_Pnt2d
        __init__(vector_vector_Pnt2d self, std::vector< std::vector< Geom::Pnt2d > >::size_type size) -> vector_vector_Pnt2d
        __init__(vector_vector_Pnt2d self, std::vector< std::vector< Geom::Pnt2d > >::size_type size, vector_Pnt2d value) -> vector_vector_Pnt2d
        """
        _Geom.vector_vector_Pnt2d_swiginit(self, _Geom.new_vector_vector_Pnt2d(*args))
    push_back = _swig_new_instance_method(_Geom.vector_vector_Pnt2d_push_back)
    front = _swig_new_instance_method(_Geom.vector_vector_Pnt2d_front)
    back = _swig_new_instance_method(_Geom.vector_vector_Pnt2d_back)
    assign = _swig_new_instance_method(_Geom.vector_vector_Pnt2d_assign)
    resize = _swig_new_instance_method(_Geom.vector_vector_Pnt2d_resize)
    insert = _swig_new_instance_method(_Geom.vector_vector_Pnt2d_insert)
    reserve = _swig_new_instance_method(_Geom.vector_vector_Pnt2d_reserve)
    capacity = _swig_new_instance_method(_Geom.vector_vector_Pnt2d_capacity)
    __swig_destroy__ = _Geom.delete_vector_vector_Pnt2d

# Register vector_vector_Pnt2d in _Geom:
_Geom.vector_vector_Pnt2d_swigregister(vector_vector_Pnt2d)

