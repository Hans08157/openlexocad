# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _OpenLxApp
else:
    import _OpenLxApp

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _OpenLxApp.SWIG_PyInstanceMethod_New
_swig_new_static_method = _OpenLxApp.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

class intP(object):
    r"""Proxy of C++ intP class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(intP self) -> intP"""
        _OpenLxApp.intP_swiginit(self, _OpenLxApp.new_intP())
    __swig_destroy__ = _OpenLxApp.delete_intP
    assign = _swig_new_instance_method(_OpenLxApp.intP_assign)
    value = _swig_new_instance_method(_OpenLxApp.intP_value)
    cast = _swig_new_instance_method(_OpenLxApp.intP_cast)
    frompointer = _swig_new_static_method(_OpenLxApp.intP_frompointer)

# Register intP in _OpenLxApp:
_OpenLxApp.intP_swigregister(intP)
intP_frompointer = _OpenLxApp.intP_frompointer

class doubleP(object):
    r"""Proxy of C++ doubleP class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(doubleP self) -> doubleP"""
        _OpenLxApp.doubleP_swiginit(self, _OpenLxApp.new_doubleP())
    __swig_destroy__ = _OpenLxApp.delete_doubleP
    assign = _swig_new_instance_method(_OpenLxApp.doubleP_assign)
    value = _swig_new_instance_method(_OpenLxApp.doubleP_value)
    cast = _swig_new_instance_method(_OpenLxApp.doubleP_cast)
    frompointer = _swig_new_static_method(_OpenLxApp.doubleP_frompointer)

# Register doubleP in _OpenLxApp:
_OpenLxApp.doubleP_swigregister(doubleP)
doubleP_frompointer = _OpenLxApp.doubleP_frompointer

class boolP(object):
    r"""Proxy of C++ boolP class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(boolP self) -> boolP"""
        _OpenLxApp.boolP_swiginit(self, _OpenLxApp.new_boolP())
    __swig_destroy__ = _OpenLxApp.delete_boolP
    assign = _swig_new_instance_method(_OpenLxApp.boolP_assign)
    value = _swig_new_instance_method(_OpenLxApp.boolP_value)
    cast = _swig_new_instance_method(_OpenLxApp.boolP_cast)
    frompointer = _swig_new_static_method(_OpenLxApp.boolP_frompointer)

# Register boolP in _OpenLxApp:
_OpenLxApp.boolP_swigregister(boolP)
boolP_frompointer = _OpenLxApp.boolP_frompointer

class SwigPyIterator(object):
    r"""Proxy of C++ swig::SwigPyIterator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _OpenLxApp.delete_SwigPyIterator
    value = _swig_new_instance_method(_OpenLxApp.SwigPyIterator_value)
    incr = _swig_new_instance_method(_OpenLxApp.SwigPyIterator_incr)
    decr = _swig_new_instance_method(_OpenLxApp.SwigPyIterator_decr)
    distance = _swig_new_instance_method(_OpenLxApp.SwigPyIterator_distance)
    equal = _swig_new_instance_method(_OpenLxApp.SwigPyIterator_equal)
    copy = _swig_new_instance_method(_OpenLxApp.SwigPyIterator_copy)
    next = _swig_new_instance_method(_OpenLxApp.SwigPyIterator_next)
    __next__ = _swig_new_instance_method(_OpenLxApp.SwigPyIterator___next__)
    previous = _swig_new_instance_method(_OpenLxApp.SwigPyIterator_previous)
    advance = _swig_new_instance_method(_OpenLxApp.SwigPyIterator_advance)
    __eq__ = _swig_new_instance_method(_OpenLxApp.SwigPyIterator___eq__)
    __ne__ = _swig_new_instance_method(_OpenLxApp.SwigPyIterator___ne__)
    __iadd__ = _swig_new_instance_method(_OpenLxApp.SwigPyIterator___iadd__)
    __isub__ = _swig_new_instance_method(_OpenLxApp.SwigPyIterator___isub__)
    __add__ = _swig_new_instance_method(_OpenLxApp.SwigPyIterator___add__)
    __sub__ = _swig_new_instance_method(_OpenLxApp.SwigPyIterator___sub__)
    def __iter__(self):
        return self

# Register SwigPyIterator in _OpenLxApp:
_OpenLxApp.SwigPyIterator_swigregister(SwigPyIterator)
import Core
import Base
import Geom
import Topo
import Draw
import LxIfcBase
M_PI = _OpenLxApp.M_PI

SDK_Language_PYTHON = _OpenLxApp.SDK_Language_PYTHON

SDK_Language_CSHARP = _OpenLxApp.SDK_Language_CSHARP

View_Direction_X = _OpenLxApp.View_Direction_X

View_Direction_Y = _OpenLxApp.View_Direction_Y

View_Direction_Z = _OpenLxApp.View_Direction_Z

View_Direction_NX = _OpenLxApp.View_Direction_NX

View_Direction_NY = _OpenLxApp.View_Direction_NY

View_Direction_NZ = _OpenLxApp.View_Direction_NZ

View_Direction_AXO_LEFT = _OpenLxApp.View_Direction_AXO_LEFT

View_Direction_AXO_BACK_LEFT = _OpenLxApp.View_Direction_AXO_BACK_LEFT

Event_NewDocument = _OpenLxApp.Event_NewDocument

Event_CloseDocument = _OpenLxApp.Event_CloseDocument

Event_SetActiveDocument = _OpenLxApp.Event_SetActiveDocument

Event_RecomputeFinished = _OpenLxApp.Event_RecomputeFinished

Event_FileOpened = _OpenLxApp.Event_FileOpened

Event_NewFile = _OpenLxApp.Event_NewFile

Event_BeforeSave = _OpenLxApp.Event_BeforeSave

Event_AddSelection = _OpenLxApp.Event_AddSelection

Event_RemoveSelection = _OpenLxApp.Event_RemoveSelection

Event_ClearSelection = _OpenLxApp.Event_ClearSelection

Event_UpdateSelection = _OpenLxApp.Event_UpdateSelection

Event_RemoveActivePoint = _OpenLxApp.Event_RemoveActivePoint

Event_SetActivePoint = _OpenLxApp.Event_SetActivePoint

class Version(object):
    r"""Proxy of C++ OpenLxApp::Version class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    major = property(_OpenLxApp.Version_major_get, _OpenLxApp.Version_major_set, doc=r"""major : int""")
    minor = property(_OpenLxApp.Version_minor_get, _OpenLxApp.Version_minor_set, doc=r"""minor : int""")
    micro = property(_OpenLxApp.Version_micro_get, _OpenLxApp.Version_micro_set, doc=r"""micro : int""")
    revision = property(_OpenLxApp.Version_revision_get, _OpenLxApp.Version_revision_set, doc=r"""revision : int""")
    name = property(_OpenLxApp.Version_name_get, _OpenLxApp.Version_name_set, doc=r"""name : std::string""")
    toString = _swig_new_instance_method(_OpenLxApp.Version_toString)

    def __init__(self):
        r"""__init__(Version self) -> Version"""
        _OpenLxApp.Version_swiginit(self, _OpenLxApp.new_Version())
    __swig_destroy__ = _OpenLxApp.delete_Version

# Register Version in _OpenLxApp:
_OpenLxApp.Version_swigregister(Version)
ErrorCode_NoError = _OpenLxApp.ErrorCode_NoError

ErrorCode_UnknownError = _OpenLxApp.ErrorCode_UnknownError

ErrorCode_InvalidArguments = _OpenLxApp.ErrorCode_InvalidArguments

ErrorCode_ResultingGeometryIsInvalid = _OpenLxApp.ErrorCode_ResultingGeometryIsInvalid

ErrorCode_InsufficientArraySize = _OpenLxApp.ErrorCode_InsufficientArraySize

class CdwkAttributeData(object):
    r"""Proxy of C++ OpenLxApp::CdwkAttributeData class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    buildingGroup = property(_OpenLxApp.CdwkAttributeData_buildingGroup_get, _OpenLxApp.CdwkAttributeData_buildingGroup_set, doc=r"""buildingGroup : Base::String""")
    buildingSubGroup = property(_OpenLxApp.CdwkAttributeData_buildingSubGroup_get, _OpenLxApp.CdwkAttributeData_buildingSubGroup_set, doc=r"""buildingSubGroup : Base::String""")
    comment = property(_OpenLxApp.CdwkAttributeData_comment_get, _OpenLxApp.CdwkAttributeData_comment_set, doc=r"""comment : Base::String""")
    sku = property(_OpenLxApp.CdwkAttributeData_sku_get, _OpenLxApp.CdwkAttributeData_sku_set, doc=r"""sku : Base::String""")
    usertext_1 = property(_OpenLxApp.CdwkAttributeData_usertext_1_get, _OpenLxApp.CdwkAttributeData_usertext_1_set, doc=r"""usertext_1 : Base::String""")
    usertext_2 = property(_OpenLxApp.CdwkAttributeData_usertext_2_get, _OpenLxApp.CdwkAttributeData_usertext_2_set, doc=r"""usertext_2 : Base::String""")
    usertext_3 = property(_OpenLxApp.CdwkAttributeData_usertext_3_get, _OpenLxApp.CdwkAttributeData_usertext_3_set, doc=r"""usertext_3 : Base::String""")
    usertext_4 = property(_OpenLxApp.CdwkAttributeData_usertext_4_get, _OpenLxApp.CdwkAttributeData_usertext_4_set, doc=r"""usertext_4 : Base::String""")
    usertext_5 = property(_OpenLxApp.CdwkAttributeData_usertext_5_get, _OpenLxApp.CdwkAttributeData_usertext_5_set, doc=r"""usertext_5 : Base::String""")
    usertext_6 = property(_OpenLxApp.CdwkAttributeData_usertext_6_get, _OpenLxApp.CdwkAttributeData_usertext_6_set, doc=r"""usertext_6 : Base::String""")
    usertext_7 = property(_OpenLxApp.CdwkAttributeData_usertext_7_get, _OpenLxApp.CdwkAttributeData_usertext_7_set, doc=r"""usertext_7 : Base::String""")
    usertext_8 = property(_OpenLxApp.CdwkAttributeData_usertext_8_get, _OpenLxApp.CdwkAttributeData_usertext_8_set, doc=r"""usertext_8 : Base::String""")
    usertext_9 = property(_OpenLxApp.CdwkAttributeData_usertext_9_get, _OpenLxApp.CdwkAttributeData_usertext_9_set, doc=r"""usertext_9 : Base::String""")
    usertext_10 = property(_OpenLxApp.CdwkAttributeData_usertext_10_get, _OpenLxApp.CdwkAttributeData_usertext_10_set, doc=r"""usertext_10 : Base::String""")
    production_nb = property(_OpenLxApp.CdwkAttributeData_production_nb_get, _OpenLxApp.CdwkAttributeData_production_nb_set, doc=r"""production_nb : int""")
    __swig_destroy__ = _OpenLxApp.delete_CdwkAttributeData

    def __init__(self):
        r"""__init__(CdwkAttributeData self) -> CdwkAttributeData"""
        _OpenLxApp.CdwkAttributeData_swiginit(self, _OpenLxApp.new_CdwkAttributeData())

# Register CdwkAttributeData in _OpenLxApp:
_OpenLxApp.CdwkAttributeData_swigregister(CdwkAttributeData)
class PropertyFactory(object):
    r"""Proxy of C++ OpenLxApp::PropertyFactory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    create = _swig_new_static_method(_OpenLxApp.PropertyFactory_create)

    def __init__(self):
        r"""__init__(PropertyFactory self) -> PropertyFactory"""
        _OpenLxApp.PropertyFactory_swiginit(self, _OpenLxApp.new_PropertyFactory())
    __swig_destroy__ = _OpenLxApp.delete_PropertyFactory

# Register PropertyFactory in _OpenLxApp:
_OpenLxApp.PropertyFactory_swigregister(PropertyFactory)
PropertyFactory_create = _OpenLxApp.PropertyFactory_create

class DocObject(object):
    r"""Proxy of C++ OpenLxApp::DocObject class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getDocument = _swig_new_instance_method(_OpenLxApp.DocObject_getDocument)
    isNew = _swig_new_instance_method(_OpenLxApp.DocObject_isNew)
    isUpdated = _swig_new_instance_method(_OpenLxApp.DocObject_isUpdated)
    isValid = _swig_new_instance_method(_OpenLxApp.DocObject_isValid)
    hasErrors = _swig_new_instance_method(_OpenLxApp.DocObject_hasErrors)
    touch = _swig_new_instance_method(_OpenLxApp.DocObject_touch)
    getEntityType = _swig_new_instance_method(_OpenLxApp.DocObject_getEntityType)
    getEntityTypeAsString = _swig_new_instance_method(_OpenLxApp.DocObject_getEntityTypeAsString)
    getDbgInfo = _swig_new_instance_method(_OpenLxApp.DocObject_getDbgInfo)
    __swig_destroy__ = _OpenLxApp.delete_DocObject

    def __init__(self, *args):
        r"""
        __init__(DocObject self, DocObject aObject) -> DocObject
        __init__(DocObject self) -> DocObject
        """
        if self.__class__ == DocObject:
            _self = None
        else:
            _self = self
        _OpenLxApp.DocObject_swiginit(self, _OpenLxApp.new_DocObject(_self, *args))
    __getObj__ = _swig_new_instance_method(_OpenLxApp.DocObject___getObj__)
    def __disown__(self):
        self.this.disown()
        _OpenLxApp.disown_DocObject(self)
        return weakref.proxy(self)

# Register DocObject in _OpenLxApp:
_OpenLxApp.DocObject_swigregister(DocObject)
class DocObjectFactory(object):
    r"""Proxy of C++ OpenLxApp::DocObjectFactory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(DocObjectFactory self, std::shared_ptr< OpenLxApp::Document > aDoc) -> DocObjectFactory
        __init__(DocObjectFactory self, App::Document * aDoc) -> DocObjectFactory
        """
        _OpenLxApp.DocObjectFactory_swiginit(self, _OpenLxApp.new_DocObjectFactory(*args))
    __swig_destroy__ = _OpenLxApp.delete_DocObjectFactory
    aProducts = _swig_new_static_method(_OpenLxApp.DocObjectFactory_aProducts)
    aProduct = _swig_new_static_method(_OpenLxApp.DocObjectFactory_aProduct)
    aElements = _swig_new_static_method(_OpenLxApp.DocObjectFactory_aElements)
    aElement = _swig_new_static_method(_OpenLxApp.DocObjectFactory_aElement)
    aTmpElement = _swig_new_instance_method(_OpenLxApp.DocObjectFactory_aTmpElement)
    aGeometry = _swig_new_static_method(_OpenLxApp.DocObjectFactory_aGeometry)
    aProfile = _swig_new_static_method(_OpenLxApp.DocObjectFactory_aProfile)
    aDocObject = _swig_new_static_method(_OpenLxApp.DocObjectFactory_aDocObject)
    aLayerIfc = _swig_new_static_method(_OpenLxApp.DocObjectFactory_aLayerIfc)
    aLayer = _swig_new_static_method(_OpenLxApp.DocObjectFactory_aLayer)
    aObjectDefinition = _swig_new_static_method(_OpenLxApp.DocObjectFactory_aObjectDefinition)
    aObject = _swig_new_static_method(_OpenLxApp.DocObjectFactory_aObject)
    aProcess = _swig_new_static_method(_OpenLxApp.DocObjectFactory_aProcess)
    aRoot = _swig_new_static_method(_OpenLxApp.DocObjectFactory_aRoot)
    aTask = _swig_new_static_method(_OpenLxApp.DocObjectFactory_aTask)
    aMaterialSelect = _swig_new_static_method(_OpenLxApp.DocObjectFactory_aMaterialSelect)
    getEntityTypeFromTypeName = _swig_new_static_method(_OpenLxApp.DocObjectFactory_getEntityTypeFromTypeName)

# Register DocObjectFactory in _OpenLxApp:
_OpenLxApp.DocObjectFactory_swigregister(DocObjectFactory)
DocObjectFactory_aProducts = _OpenLxApp.DocObjectFactory_aProducts
DocObjectFactory_aProduct = _OpenLxApp.DocObjectFactory_aProduct
DocObjectFactory_aElements = _OpenLxApp.DocObjectFactory_aElements
DocObjectFactory_aElement = _OpenLxApp.DocObjectFactory_aElement
DocObjectFactory_aGeometry = _OpenLxApp.DocObjectFactory_aGeometry
DocObjectFactory_aProfile = _OpenLxApp.DocObjectFactory_aProfile
DocObjectFactory_aDocObject = _OpenLxApp.DocObjectFactory_aDocObject
DocObjectFactory_aLayerIfc = _OpenLxApp.DocObjectFactory_aLayerIfc
DocObjectFactory_aLayer = _OpenLxApp.DocObjectFactory_aLayer
DocObjectFactory_aObjectDefinition = _OpenLxApp.DocObjectFactory_aObjectDefinition
DocObjectFactory_aObject = _OpenLxApp.DocObjectFactory_aObject
DocObjectFactory_aProcess = _OpenLxApp.DocObjectFactory_aProcess
DocObjectFactory_aRoot = _OpenLxApp.DocObjectFactory_aRoot
DocObjectFactory_aTask = _OpenLxApp.DocObjectFactory_aTask
DocObjectFactory_aMaterialSelect = _OpenLxApp.DocObjectFactory_aMaterialSelect
DocObjectFactory_getEntityTypeFromTypeName = _OpenLxApp.DocObjectFactory_getEntityTypeFromTypeName

class DocObjectProxy(DocObject):
    r"""Proxy of C++ OpenLxApp::DocObjectProxy class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getEntityType_Static = _swig_new_static_method(_OpenLxApp.DocObjectProxy_getEntityType_Static)
    assign = _swig_new_instance_method(_OpenLxApp.DocObjectProxy_assign)
    isEqual = _swig_new_instance_method(_OpenLxApp.DocObjectProxy_isEqual)
    __getCasted__ = _swig_new_instance_method(_OpenLxApp.DocObjectProxy___getCasted__)
    __swig_destroy__ = _OpenLxApp.delete_DocObjectProxy

    def __init__(self, *args):
        r"""
        __init__(DocObjectProxy self, std::shared_ptr< OpenLxApp::DocObjectProxy > other) -> DocObjectProxy
        __init__(DocObjectProxy self, DocObject aObj) -> DocObjectProxy
        __init__(DocObjectProxy self) -> DocObjectProxy
        """
        if self.__class__ == DocObjectProxy:
            _self = None
        else:
            _self = self
        _OpenLxApp.DocObjectProxy_swiginit(self, _OpenLxApp.new_DocObjectProxy(_self, *args))
    def __disown__(self):
        self.this.disown()
        _OpenLxApp.disown_DocObjectProxy(self)
        return weakref.proxy(self)

# Register DocObjectProxy in _OpenLxApp:
_OpenLxApp.DocObjectProxy_swigregister(DocObjectProxy)
DocObjectProxy_getEntityType_Static = _OpenLxApp.DocObjectProxy_getEntityType_Static

class ExternalPythonTypeObject(DocObject):
    r"""Proxy of C++ OpenLxApp::ExternalPythonTypeObject class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    typeName = property(_OpenLxApp.ExternalPythonTypeObject_typeName_get, _OpenLxApp.ExternalPythonTypeObject_typeName_set, doc=r"""typeName : PropertyString""")
    fileName = property(_OpenLxApp.ExternalPythonTypeObject_fileName_get, _OpenLxApp.ExternalPythonTypeObject_fileName_set, doc=r"""fileName : PropertyString""")
    scriptGUID = property(_OpenLxApp.ExternalPythonTypeObject_scriptGUID_get, _OpenLxApp.ExternalPythonTypeObject_scriptGUID_set, doc=r"""scriptGUID : PropertyString""")
    scalingCB = property(_OpenLxApp.ExternalPythonTypeObject_scalingCB_get, _OpenLxApp.ExternalPythonTypeObject_scalingCB_set, doc=r"""scalingCB : PropertyString""")
    getPropertyScriptParam = _swig_new_instance_method(_OpenLxApp.ExternalPythonTypeObject_getPropertyScriptParam)
    addPropertyScriptParam = _swig_new_instance_method(_OpenLxApp.ExternalPythonTypeObject_addPropertyScriptParam)
    removePropertyScriptParam = _swig_new_instance_method(_OpenLxApp.ExternalPythonTypeObject_removePropertyScriptParam)
    createIn = _swig_new_static_method(_OpenLxApp.ExternalPythonTypeObject_createIn)
    __swig_destroy__ = _OpenLxApp.delete_ExternalPythonTypeObject

    def __init__(self):
        r"""__init__(ExternalPythonTypeObject self) -> ExternalPythonTypeObject"""
        if self.__class__ == ExternalPythonTypeObject:
            _self = None
        else:
            _self = self
        _OpenLxApp.ExternalPythonTypeObject_swiginit(self, _OpenLxApp.new_ExternalPythonTypeObject(_self, ))
    def __disown__(self):
        self.this.disown()
        _OpenLxApp.disown_ExternalPythonTypeObject(self)
        return weakref.proxy(self)

# Register ExternalPythonTypeObject in _OpenLxApp:
_OpenLxApp.ExternalPythonTypeObject_swigregister(ExternalPythonTypeObject)
ExternalPythonTypeObject_createIn = _OpenLxApp.ExternalPythonTypeObject_createIn

class MaterialSelect(object):
    r"""Proxy of C++ OpenLxApp::MaterialSelect class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(MaterialSelect self) -> MaterialSelect"""
        if self.__class__ == MaterialSelect:
            _self = None
        else:
            _self = self
        _OpenLxApp.MaterialSelect_swiginit(self, _OpenLxApp.new_MaterialSelect(_self, ))
    __swig_destroy__ = _OpenLxApp.delete_MaterialSelect
    def __disown__(self):
        self.this.disown()
        _OpenLxApp.disown_MaterialSelect(self)
        return weakref.proxy(self)

# Register MaterialSelect in _OpenLxApp:
_OpenLxApp.MaterialSelect_swigregister(MaterialSelect)
class MaterialDefinition(DocObject):
    r"""Proxy of C++ OpenLxApp::MaterialDefinition class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getEntityType_Static = _swig_new_static_method(_OpenLxApp.MaterialDefinition_getEntityType_Static)
    assign = _swig_new_instance_method(_OpenLxApp.MaterialDefinition_assign)
    isEqual = _swig_new_instance_method(_OpenLxApp.MaterialDefinition_isEqual)
    __getCasted__ = _swig_new_instance_method(_OpenLxApp.MaterialDefinition___getCasted__)
    __swig_destroy__ = _OpenLxApp.delete_MaterialDefinition

    def __init__(self, *args):
        r"""
        __init__(MaterialDefinition self, std::shared_ptr< OpenLxApp::MaterialDefinition > other) -> MaterialDefinition
        __init__(MaterialDefinition self, App::MaterialDefinition * aObj) -> MaterialDefinition
        __init__(MaterialDefinition self) -> MaterialDefinition
        """
        if self.__class__ == MaterialDefinition:
            _self = None
        else:
            _self = self
        _OpenLxApp.MaterialDefinition_swiginit(self, _OpenLxApp.new_MaterialDefinition(_self, *args))
    def __disown__(self):
        self.this.disown()
        _OpenLxApp.disown_MaterialDefinition(self)
        return weakref.proxy(self)

# Register MaterialDefinition in _OpenLxApp:
_OpenLxApp.MaterialDefinition_swigregister(MaterialDefinition)
MaterialDefinition_getEntityType_Static = _OpenLxApp.MaterialDefinition_getEntityType_Static

class Material(MaterialDefinition, MaterialSelect):
    r"""Proxy of C++ OpenLxApp::Material class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getEntityType_Static = _swig_new_static_method(_OpenLxApp.Material_getEntityType_Static)
    assign = _swig_new_instance_method(_OpenLxApp.Material_assign)
    isEqual = _swig_new_instance_method(_OpenLxApp.Material_isEqual)
    __getCasted__ = _swig_new_instance_method(_OpenLxApp.Material___getCasted__)

    def __init__(self, *args):
        r"""
        __init__(Material self, std::shared_ptr< OpenLxApp::Material > other) -> Material
        __init__(Material self, App::BimMaterial * aObj) -> Material
        __init__(Material self, std::shared_ptr< OpenLxApp::Document > aDoc) -> Material
        """
        if self.__class__ == Material:
            _self = None
        else:
            _self = self
        _OpenLxApp.Material_swiginit(self, _OpenLxApp.new_Material(_self, *args))
    createIn = _swig_new_static_method(_OpenLxApp.Material_createIn)
    createFrom = _swig_new_static_method(_OpenLxApp.Material_createFrom)
    getName = _swig_new_instance_method(_OpenLxApp.Material_getName)
    setName = _swig_new_instance_method(_OpenLxApp.Material_setName)
    getDescription = _swig_new_instance_method(_OpenLxApp.Material_getDescription)
    setDescription = _swig_new_instance_method(_OpenLxApp.Material_setDescription)
    getCategory = _swig_new_instance_method(_OpenLxApp.Material_getCategory)
    setCategory = _swig_new_instance_method(_OpenLxApp.Material_setCategory)
    __swig_destroy__ = _OpenLxApp.delete_Material
    def __disown__(self):
        self.this.disown()
        _OpenLxApp.disown_Material(self)
        return weakref.proxy(self)

# Register Material in _OpenLxApp:
_OpenLxApp.Material_swigregister(Material)
Material_getEntityType_Static = _OpenLxApp.Material_getEntityType_Static
Material_createIn = _OpenLxApp.Material_createIn
Material_createFrom = _OpenLxApp.Material_createFrom

class MaterialConstituent(MaterialDefinition, MaterialSelect):
    r"""Proxy of C++ OpenLxApp::MaterialConstituent class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getEntityType_Static = _swig_new_static_method(_OpenLxApp.MaterialConstituent_getEntityType_Static)
    assign = _swig_new_instance_method(_OpenLxApp.MaterialConstituent_assign)
    isEqual = _swig_new_instance_method(_OpenLxApp.MaterialConstituent_isEqual)
    __getCasted__ = _swig_new_instance_method(_OpenLxApp.MaterialConstituent___getCasted__)

    def __init__(self, *args):
        r"""
        __init__(MaterialConstituent self, std::shared_ptr< OpenLxApp::MaterialConstituent > other) -> MaterialConstituent
        __init__(MaterialConstituent self, App::MaterialConstituent * aObj) -> MaterialConstituent
        __init__(MaterialConstituent self, std::shared_ptr< OpenLxApp::Document > aDoc) -> MaterialConstituent
        """
        if self.__class__ == MaterialConstituent:
            _self = None
        else:
            _self = self
        _OpenLxApp.MaterialConstituent_swiginit(self, _OpenLxApp.new_MaterialConstituent(_self, *args))
    createIn = _swig_new_static_method(_OpenLxApp.MaterialConstituent_createIn)
    createFrom = _swig_new_static_method(_OpenLxApp.MaterialConstituent_createFrom)
    getName = _swig_new_instance_method(_OpenLxApp.MaterialConstituent_getName)
    setName = _swig_new_instance_method(_OpenLxApp.MaterialConstituent_setName)
    getDescription = _swig_new_instance_method(_OpenLxApp.MaterialConstituent_getDescription)
    setDescription = _swig_new_instance_method(_OpenLxApp.MaterialConstituent_setDescription)
    getFraction = _swig_new_instance_method(_OpenLxApp.MaterialConstituent_getFraction)
    setFraction = _swig_new_instance_method(_OpenLxApp.MaterialConstituent_setFraction)
    getCategory = _swig_new_instance_method(_OpenLxApp.MaterialConstituent_getCategory)
    setCategory = _swig_new_instance_method(_OpenLxApp.MaterialConstituent_setCategory)
    __swig_destroy__ = _OpenLxApp.delete_MaterialConstituent
    setMaterial = _swig_new_instance_method(_OpenLxApp.MaterialConstituent_setMaterial)
    getMaterial = _swig_new_instance_method(_OpenLxApp.MaterialConstituent_getMaterial)
    def __disown__(self):
        self.this.disown()
        _OpenLxApp.disown_MaterialConstituent(self)
        return weakref.proxy(self)

# Register MaterialConstituent in _OpenLxApp:
_OpenLxApp.MaterialConstituent_swigregister(MaterialConstituent)
MaterialConstituent_getEntityType_Static = _OpenLxApp.MaterialConstituent_getEntityType_Static
MaterialConstituent_createIn = _OpenLxApp.MaterialConstituent_createIn
MaterialConstituent_createFrom = _OpenLxApp.MaterialConstituent_createFrom

class MaterialConstituentSet(MaterialDefinition, MaterialSelect):
    r"""Proxy of C++ OpenLxApp::MaterialConstituentSet class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getEntityType_Static = _swig_new_static_method(_OpenLxApp.MaterialConstituentSet_getEntityType_Static)
    assign = _swig_new_instance_method(_OpenLxApp.MaterialConstituentSet_assign)
    isEqual = _swig_new_instance_method(_OpenLxApp.MaterialConstituentSet_isEqual)
    __getCasted__ = _swig_new_instance_method(_OpenLxApp.MaterialConstituentSet___getCasted__)

    def __init__(self, *args):
        r"""
        __init__(MaterialConstituentSet self, std::shared_ptr< OpenLxApp::MaterialConstituentSet > other) -> MaterialConstituentSet
        __init__(MaterialConstituentSet self, App::MaterialConstituentSet * aObj) -> MaterialConstituentSet
        __init__(MaterialConstituentSet self, std::shared_ptr< OpenLxApp::Document > aDoc) -> MaterialConstituentSet
        """
        if self.__class__ == MaterialConstituentSet:
            _self = None
        else:
            _self = self
        _OpenLxApp.MaterialConstituentSet_swiginit(self, _OpenLxApp.new_MaterialConstituentSet(_self, *args))
    createIn = _swig_new_static_method(_OpenLxApp.MaterialConstituentSet_createIn)
    createFrom = _swig_new_static_method(_OpenLxApp.MaterialConstituentSet_createFrom)
    getName = _swig_new_instance_method(_OpenLxApp.MaterialConstituentSet_getName)
    setName = _swig_new_instance_method(_OpenLxApp.MaterialConstituentSet_setName)
    getDescription = _swig_new_instance_method(_OpenLxApp.MaterialConstituentSet_getDescription)
    setDescription = _swig_new_instance_method(_OpenLxApp.MaterialConstituentSet_setDescription)
    __swig_destroy__ = _OpenLxApp.delete_MaterialConstituentSet
    getMaterialConstituents = _swig_new_instance_method(_OpenLxApp.MaterialConstituentSet_getMaterialConstituents)
    setMaterialConstituents = _swig_new_instance_method(_OpenLxApp.MaterialConstituentSet_setMaterialConstituents)
    addMaterialConstituent = _swig_new_instance_method(_OpenLxApp.MaterialConstituentSet_addMaterialConstituent)
    removeMaterialConstituent = _swig_new_instance_method(_OpenLxApp.MaterialConstituentSet_removeMaterialConstituent)
    def __disown__(self):
        self.this.disown()
        _OpenLxApp.disown_MaterialConstituentSet(self)
        return weakref.proxy(self)

# Register MaterialConstituentSet in _OpenLxApp:
_OpenLxApp.MaterialConstituentSet_swigregister(MaterialConstituentSet)
MaterialConstituentSet_getEntityType_Static = _OpenLxApp.MaterialConstituentSet_getEntityType_Static
MaterialConstituentSet_createIn = _OpenLxApp.MaterialConstituentSet_createIn
MaterialConstituentSet_createFrom = _OpenLxApp.MaterialConstituentSet_createFrom

class ProfileDef(DocObject):
    r"""Proxy of C++ OpenLxApp::ProfileDef class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getEntityType_Static = _swig_new_static_method(_OpenLxApp.ProfileDef_getEntityType_Static)
    assign = _swig_new_instance_method(_OpenLxApp.ProfileDef_assign)
    isEqual = _swig_new_instance_method(_OpenLxApp.ProfileDef_isEqual)
    __getCasted__ = _swig_new_instance_method(_OpenLxApp.ProfileDef___getCasted__)
    getProfileName = _swig_new_instance_method(_OpenLxApp.ProfileDef_getProfileName)
    setProfileName = _swig_new_instance_method(_OpenLxApp.ProfileDef_setProfileName)
    __swig_destroy__ = _OpenLxApp.delete_ProfileDef

    def __init__(self, *args):
        r"""
        __init__(ProfileDef self, std::shared_ptr< OpenLxApp::ProfileDef > other) -> ProfileDef
        __init__(ProfileDef self, Part::ProfileDef * aObj) -> ProfileDef
        __init__(ProfileDef self) -> ProfileDef
        """
        if self.__class__ == ProfileDef:
            _self = None
        else:
            _self = self
        _OpenLxApp.ProfileDef_swiginit(self, _OpenLxApp.new_ProfileDef(_self, *args))
    def __disown__(self):
        self.this.disown()
        _OpenLxApp.disown_ProfileDef(self)
        return weakref.proxy(self)

# Register ProfileDef in _OpenLxApp:
_OpenLxApp.ProfileDef_swigregister(ProfileDef)
ProfileDef_getEntityType_Static = _OpenLxApp.ProfileDef_getEntityType_Static

class ParameterizedProfileDef(ProfileDef):
    r"""Proxy of C++ OpenLxApp::ParameterizedProfileDef class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getEntityType_Static = _swig_new_static_method(_OpenLxApp.ParameterizedProfileDef_getEntityType_Static)
    assign = _swig_new_instance_method(_OpenLxApp.ParameterizedProfileDef_assign)
    isEqual = _swig_new_instance_method(_OpenLxApp.ParameterizedProfileDef_isEqual)
    __getCasted__ = _swig_new_instance_method(_OpenLxApp.ParameterizedProfileDef___getCasted__)
    getPosition = _swig_new_instance_method(_OpenLxApp.ParameterizedProfileDef_getPosition)
    setPosition = _swig_new_instance_method(_OpenLxApp.ParameterizedProfileDef_setPosition)
    __swig_destroy__ = _OpenLxApp.delete_ParameterizedProfileDef

    def __init__(self, *args):
        r"""
        __init__(ParameterizedProfileDef self, std::shared_ptr< OpenLxApp::ParameterizedProfileDef > other) -> ParameterizedProfileDef
        __init__(ParameterizedProfileDef self, Part::ParameterizedProfileDef * aObj) -> ParameterizedProfileDef
        __init__(ParameterizedProfileDef self) -> ParameterizedProfileDef
        """
        if self.__class__ == ParameterizedProfileDef:
            _self = None
        else:
            _self = self
        _OpenLxApp.ParameterizedProfileDef_swiginit(self, _OpenLxApp.new_ParameterizedProfileDef(_self, *args))
    def __disown__(self):
        self.this.disown()
        _OpenLxApp.disown_ParameterizedProfileDef(self)
        return weakref.proxy(self)

# Register ParameterizedProfileDef in _OpenLxApp:
_OpenLxApp.ParameterizedProfileDef_swigregister(ParameterizedProfileDef)
ParameterizedProfileDef_getEntityType_Static = _OpenLxApp.ParameterizedProfileDef_getEntityType_Static

class CircleProfileDef(ParameterizedProfileDef):
    r"""Proxy of C++ OpenLxApp::CircleProfileDef class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getEntityType_Static = _swig_new_static_method(_OpenLxApp.CircleProfileDef_getEntityType_Static)
    assign = _swig_new_instance_method(_OpenLxApp.CircleProfileDef_assign)
    isEqual = _swig_new_instance_method(_OpenLxApp.CircleProfileDef_isEqual)
    __getCasted__ = _swig_new_instance_method(_OpenLxApp.CircleProfileDef___getCasted__)
    createIn = _swig_new_static_method(_OpenLxApp.CircleProfileDef_createIn)
    createFrom = _swig_new_static_method(_OpenLxApp.CircleProfileDef_createFrom)
    getRadius = _swig_new_instance_method(_OpenLxApp.CircleProfileDef_getRadius)
    setRadius = _swig_new_instance_method(_OpenLxApp.CircleProfileDef_setRadius)
    __swig_destroy__ = _OpenLxApp.delete_CircleProfileDef

    def __init__(self, *args):
        r"""
        __init__(CircleProfileDef self, std::shared_ptr< OpenLxApp::CircleProfileDef > other) -> CircleProfileDef
        __init__(CircleProfileDef self, Part::CircleProfileDef * aObj) -> CircleProfileDef
        __init__(CircleProfileDef self, std::shared_ptr< OpenLxApp::Document > aDoc) -> CircleProfileDef
        __init__(CircleProfileDef self) -> CircleProfileDef
        """
        if self.__class__ == CircleProfileDef:
            _self = None
        else:
            _self = self
        _OpenLxApp.CircleProfileDef_swiginit(self, _OpenLxApp.new_CircleProfileDef(_self, *args))
    def __disown__(self):
        self.this.disown()
        _OpenLxApp.disown_CircleProfileDef(self)
        return weakref.proxy(self)

# Register CircleProfileDef in _OpenLxApp:
_OpenLxApp.CircleProfileDef_swigregister(CircleProfileDef)
CircleProfileDef_getEntityType_Static = _OpenLxApp.CircleProfileDef_getEntityType_Static
CircleProfileDef_createIn = _OpenLxApp.CircleProfileDef_createIn
CircleProfileDef_createFrom = _OpenLxApp.CircleProfileDef_createFrom

class CircleHollowProfileDef(CircleProfileDef):
    r"""Proxy of C++ OpenLxApp::CircleHollowProfileDef class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getEntityType_Static = _swig_new_static_method(_OpenLxApp.CircleHollowProfileDef_getEntityType_Static)
    assign = _swig_new_instance_method(_OpenLxApp.CircleHollowProfileDef_assign)
    isEqual = _swig_new_instance_method(_OpenLxApp.CircleHollowProfileDef_isEqual)
    __getCasted__ = _swig_new_instance_method(_OpenLxApp.CircleHollowProfileDef___getCasted__)
    createIn = _swig_new_static_method(_OpenLxApp.CircleHollowProfileDef_createIn)
    createFrom = _swig_new_static_method(_OpenLxApp.CircleHollowProfileDef_createFrom)
    getWallThickness = _swig_new_instance_method(_OpenLxApp.CircleHollowProfileDef_getWallThickness)
    setWallThickness = _swig_new_instance_method(_OpenLxApp.CircleHollowProfileDef_setWallThickness)
    __swig_destroy__ = _OpenLxApp.delete_CircleHollowProfileDef

    def __init__(self, *args):
        r"""
        __init__(CircleHollowProfileDef self, std::shared_ptr< OpenLxApp::CircleHollowProfileDef > other) -> CircleHollowProfileDef
        __init__(CircleHollowProfileDef self, Part::CircleHollowProfileDef * aObj) -> CircleHollowProfileDef
        __init__(CircleHollowProfileDef self, std::shared_ptr< OpenLxApp::Document > aDoc) -> CircleHollowProfileDef
        __init__(CircleHollowProfileDef self) -> CircleHollowProfileDef
        """
        if self.__class__ == CircleHollowProfileDef:
            _self = None
        else:
            _self = self
        _OpenLxApp.CircleHollowProfileDef_swiginit(self, _OpenLxApp.new_CircleHollowProfileDef(_self, *args))
    def __disown__(self):
        self.this.disown()
        _OpenLxApp.disown_CircleHollowProfileDef(self)
        return weakref.proxy(self)

# Register CircleHollowProfileDef in _OpenLxApp:
_OpenLxApp.CircleHollowProfileDef_swigregister(CircleHollowProfileDef)
CircleHollowProfileDef_getEntityType_Static = _OpenLxApp.CircleHollowProfileDef_getEntityType_Static
CircleHollowProfileDef_createIn = _OpenLxApp.CircleHollowProfileDef_createIn
CircleHollowProfileDef_createFrom = _OpenLxApp.CircleHollowProfileDef_createFrom

class IShapeProfileDef(ParameterizedProfileDef):
    r"""Proxy of C++ OpenLxApp::IShapeProfileDef class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getEntityType_Static = _swig_new_static_method(_OpenLxApp.IShapeProfileDef_getEntityType_Static)
    assign = _swig_new_instance_method(_OpenLxApp.IShapeProfileDef_assign)
    isEqual = _swig_new_instance_method(_OpenLxApp.IShapeProfileDef_isEqual)
    __getCasted__ = _swig_new_instance_method(_OpenLxApp.IShapeProfileDef___getCasted__)
    createIn = _swig_new_static_method(_OpenLxApp.IShapeProfileDef_createIn)
    createFrom = _swig_new_static_method(_OpenLxApp.IShapeProfileDef_createFrom)
    getOverallWidth = _swig_new_instance_method(_OpenLxApp.IShapeProfileDef_getOverallWidth)
    setOverallWidth = _swig_new_instance_method(_OpenLxApp.IShapeProfileDef_setOverallWidth)
    getOverallDepth = _swig_new_instance_method(_OpenLxApp.IShapeProfileDef_getOverallDepth)
    setOverallDepth = _swig_new_instance_method(_OpenLxApp.IShapeProfileDef_setOverallDepth)
    getWebThickness = _swig_new_instance_method(_OpenLxApp.IShapeProfileDef_getWebThickness)
    setWebThickness = _swig_new_instance_method(_OpenLxApp.IShapeProfileDef_setWebThickness)
    getFlangeThickness = _swig_new_instance_method(_OpenLxApp.IShapeProfileDef_getFlangeThickness)
    setFlangeThickness = _swig_new_instance_method(_OpenLxApp.IShapeProfileDef_setFlangeThickness)
    getFilletRadius = _swig_new_instance_method(_OpenLxApp.IShapeProfileDef_getFilletRadius)
    setFilletRadius = _swig_new_instance_method(_OpenLxApp.IShapeProfileDef_setFilletRadius)
    getPredefinedSteelProfileTypes = _swig_new_static_method(_OpenLxApp.IShapeProfileDef_getPredefinedSteelProfileTypes)
    getPredefinedSteelProfiles = _swig_new_static_method(_OpenLxApp.IShapeProfileDef_getPredefinedSteelProfiles)
    setValuesFromPredefinedSteelProfile = _swig_new_instance_method(_OpenLxApp.IShapeProfileDef_setValuesFromPredefinedSteelProfile)
    __swig_destroy__ = _OpenLxApp.delete_IShapeProfileDef

    def __init__(self, *args):
        r"""
        __init__(IShapeProfileDef self, std::shared_ptr< OpenLxApp::IShapeProfileDef > other) -> IShapeProfileDef
        __init__(IShapeProfileDef self, Part::IShapeProfileDef * aObj) -> IShapeProfileDef
        __init__(IShapeProfileDef self, std::shared_ptr< OpenLxApp::Document > aDoc) -> IShapeProfileDef
        __init__(IShapeProfileDef self) -> IShapeProfileDef
        """
        if self.__class__ == IShapeProfileDef:
            _self = None
        else:
            _self = self
        _OpenLxApp.IShapeProfileDef_swiginit(self, _OpenLxApp.new_IShapeProfileDef(_self, *args))
    def __disown__(self):
        self.this.disown()
        _OpenLxApp.disown_IShapeProfileDef(self)
        return weakref.proxy(self)

# Register IShapeProfileDef in _OpenLxApp:
_OpenLxApp.IShapeProfileDef_swigregister(IShapeProfileDef)
IShapeProfileDef_getEntityType_Static = _OpenLxApp.IShapeProfileDef_getEntityType_Static
IShapeProfileDef_createIn = _OpenLxApp.IShapeProfileDef_createIn
IShapeProfileDef_createFrom = _OpenLxApp.IShapeProfileDef_createFrom
IShapeProfileDef_getPredefinedSteelProfileTypes = _OpenLxApp.IShapeProfileDef_getPredefinedSteelProfileTypes
IShapeProfileDef_getPredefinedSteelProfiles = _OpenLxApp.IShapeProfileDef_getPredefinedSteelProfiles

class ArbitraryClosedProfileDef(ProfileDef):
    r"""Proxy of C++ OpenLxApp::ArbitraryClosedProfileDef class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getEntityType_Static = _swig_new_static_method(_OpenLxApp.ArbitraryClosedProfileDef_getEntityType_Static)
    assign = _swig_new_instance_method(_OpenLxApp.ArbitraryClosedProfileDef_assign)
    isEqual = _swig_new_instance_method(_OpenLxApp.ArbitraryClosedProfileDef_isEqual)
    __getCasted__ = _swig_new_instance_method(_OpenLxApp.ArbitraryClosedProfileDef___getCasted__)
    createIn = _swig_new_static_method(_OpenLxApp.ArbitraryClosedProfileDef_createIn)
    createFrom = _swig_new_static_method(_OpenLxApp.ArbitraryClosedProfileDef_createFrom)
    setOuterCurve = _swig_new_instance_method(_OpenLxApp.ArbitraryClosedProfileDef_setOuterCurve)
    getOuterCurve = _swig_new_instance_method(_OpenLxApp.ArbitraryClosedProfileDef_getOuterCurve)
    __swig_destroy__ = _OpenLxApp.delete_ArbitraryClosedProfileDef

    def __init__(self, *args):
        r"""
        __init__(ArbitraryClosedProfileDef self, std::shared_ptr< OpenLxApp::ArbitraryClosedProfileDef > other) -> ArbitraryClosedProfileDef
        __init__(ArbitraryClosedProfileDef self, Part::ArbitraryClosedProfileDef * aObj) -> ArbitraryClosedProfileDef
        __init__(ArbitraryClosedProfileDef self, std::shared_ptr< OpenLxApp::Document > aDoc) -> ArbitraryClosedProfileDef
        __init__(ArbitraryClosedProfileDef self) -> ArbitraryClosedProfileDef
        """
        if self.__class__ == ArbitraryClosedProfileDef:
            _self = None
        else:
            _self = self
        _OpenLxApp.ArbitraryClosedProfileDef_swiginit(self, _OpenLxApp.new_ArbitraryClosedProfileDef(_self, *args))
    def __disown__(self):
        self.this.disown()
        _OpenLxApp.disown_ArbitraryClosedProfileDef(self)
        return weakref.proxy(self)

# Register ArbitraryClosedProfileDef in _OpenLxApp:
_OpenLxApp.ArbitraryClosedProfileDef_swigregister(ArbitraryClosedProfileDef)
ArbitraryClosedProfileDef_getEntityType_Static = _OpenLxApp.ArbitraryClosedProfileDef_getEntityType_Static
ArbitraryClosedProfileDef_createIn = _OpenLxApp.ArbitraryClosedProfileDef_createIn
ArbitraryClosedProfileDef_createFrom = _OpenLxApp.ArbitraryClosedProfileDef_createFrom

class ArbitraryOpenProfileDef(ProfileDef):
    r"""Proxy of C++ OpenLxApp::ArbitraryOpenProfileDef class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getEntityType_Static = _swig_new_static_method(_OpenLxApp.ArbitraryOpenProfileDef_getEntityType_Static)
    assign = _swig_new_instance_method(_OpenLxApp.ArbitraryOpenProfileDef_assign)
    isEqual = _swig_new_instance_method(_OpenLxApp.ArbitraryOpenProfileDef_isEqual)
    __getCasted__ = _swig_new_instance_method(_OpenLxApp.ArbitraryOpenProfileDef___getCasted__)
    createIn = _swig_new_static_method(_OpenLxApp.ArbitraryOpenProfileDef_createIn)
    createFrom = _swig_new_static_method(_OpenLxApp.ArbitraryOpenProfileDef_createFrom)
    setCurve = _swig_new_instance_method(_OpenLxApp.ArbitraryOpenProfileDef_setCurve)
    getCurve = _swig_new_instance_method(_OpenLxApp.ArbitraryOpenProfileDef_getCurve)
    __swig_destroy__ = _OpenLxApp.delete_ArbitraryOpenProfileDef

    def __init__(self, *args):
        r"""
        __init__(ArbitraryOpenProfileDef self, std::shared_ptr< OpenLxApp::ArbitraryOpenProfileDef > other) -> ArbitraryOpenProfileDef
        __init__(ArbitraryOpenProfileDef self, Part::ArbitraryOpenProfileDef * aObj) -> ArbitraryOpenProfileDef
        __init__(ArbitraryOpenProfileDef self, std::shared_ptr< OpenLxApp::Document > aDoc) -> ArbitraryOpenProfileDef
        __init__(ArbitraryOpenProfileDef self) -> ArbitraryOpenProfileDef
        """
        if self.__class__ == ArbitraryOpenProfileDef:
            _self = None
        else:
            _self = self
        _OpenLxApp.ArbitraryOpenProfileDef_swiginit(self, _OpenLxApp.new_ArbitraryOpenProfileDef(_self, *args))
    def __disown__(self):
        self.this.disown()
        _OpenLxApp.disown_ArbitraryOpenProfileDef(self)
        return weakref.proxy(self)

# Register ArbitraryOpenProfileDef in _OpenLxApp:
_OpenLxApp.ArbitraryOpenProfileDef_swigregister(ArbitraryOpenProfileDef)
ArbitraryOpenProfileDef_getEntityType_Static = _OpenLxApp.ArbitraryOpenProfileDef_getEntityType_Static
ArbitraryOpenProfileDef_createIn = _OpenLxApp.ArbitraryOpenProfileDef_createIn
ArbitraryOpenProfileDef_createFrom = _OpenLxApp.ArbitraryOpenProfileDef_createFrom

class ArbitraryProfileDefWithVoids(ArbitraryClosedProfileDef):
    r"""Proxy of C++ OpenLxApp::ArbitraryProfileDefWithVoids class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getEntityType_Static = _swig_new_static_method(_OpenLxApp.ArbitraryProfileDefWithVoids_getEntityType_Static)
    assign = _swig_new_instance_method(_OpenLxApp.ArbitraryProfileDefWithVoids_assign)
    isEqual = _swig_new_instance_method(_OpenLxApp.ArbitraryProfileDefWithVoids_isEqual)
    __getCasted__ = _swig_new_instance_method(_OpenLxApp.ArbitraryProfileDefWithVoids___getCasted__)
    createIn = _swig_new_static_method(_OpenLxApp.ArbitraryProfileDefWithVoids_createIn)
    createFrom = _swig_new_static_method(_OpenLxApp.ArbitraryProfileDefWithVoids_createFrom)
    setInnerCurves = _swig_new_instance_method(_OpenLxApp.ArbitraryProfileDefWithVoids_setInnerCurves)
    getInnerCurves = _swig_new_instance_method(_OpenLxApp.ArbitraryProfileDefWithVoids_getInnerCurves)
    __swig_destroy__ = _OpenLxApp.delete_ArbitraryProfileDefWithVoids

    def __init__(self, *args):
        r"""
        __init__(ArbitraryProfileDefWithVoids self, std::shared_ptr< OpenLxApp::ArbitraryProfileDefWithVoids > other) -> ArbitraryProfileDefWithVoids
        __init__(ArbitraryProfileDefWithVoids self, Part::ArbitraryProfileDefWithVoids * aObj) -> ArbitraryProfileDefWithVoids
        __init__(ArbitraryProfileDefWithVoids self, std::shared_ptr< OpenLxApp::Document > aDoc) -> ArbitraryProfileDefWithVoids
        __init__(ArbitraryProfileDefWithVoids self) -> ArbitraryProfileDefWithVoids
        """
        if self.__class__ == ArbitraryProfileDefWithVoids:
            _self = None
        else:
            _self = self
        _OpenLxApp.ArbitraryProfileDefWithVoids_swiginit(self, _OpenLxApp.new_ArbitraryProfileDefWithVoids(_self, *args))
    def __disown__(self):
        self.this.disown()
        _OpenLxApp.disown_ArbitraryProfileDefWithVoids(self)
        return weakref.proxy(self)

# Register ArbitraryProfileDefWithVoids in _OpenLxApp:
_OpenLxApp.ArbitraryProfileDefWithVoids_swigregister(ArbitraryProfileDefWithVoids)
ArbitraryProfileDefWithVoids_getEntityType_Static = _OpenLxApp.ArbitraryProfileDefWithVoids_getEntityType_Static
ArbitraryProfileDefWithVoids_createIn = _OpenLxApp.ArbitraryProfileDefWithVoids_createIn
ArbitraryProfileDefWithVoids_createFrom = _OpenLxApp.ArbitraryProfileDefWithVoids_createFrom

class RectangleProfileDef(ParameterizedProfileDef):
    r"""Proxy of C++ OpenLxApp::RectangleProfileDef class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getEntityType_Static = _swig_new_static_method(_OpenLxApp.RectangleProfileDef_getEntityType_Static)
    assign = _swig_new_instance_method(_OpenLxApp.RectangleProfileDef_assign)
    isEqual = _swig_new_instance_method(_OpenLxApp.RectangleProfileDef_isEqual)
    __getCasted__ = _swig_new_instance_method(_OpenLxApp.RectangleProfileDef___getCasted__)
    createIn = _swig_new_static_method(_OpenLxApp.RectangleProfileDef_createIn)
    createFrom = _swig_new_static_method(_OpenLxApp.RectangleProfileDef_createFrom)
    getXDim = _swig_new_instance_method(_OpenLxApp.RectangleProfileDef_getXDim)
    setXDim = _swig_new_instance_method(_OpenLxApp.RectangleProfileDef_setXDim)
    getYDim = _swig_new_instance_method(_OpenLxApp.RectangleProfileDef_getYDim)
    setYDim = _swig_new_instance_method(_OpenLxApp.RectangleProfileDef_setYDim)
    __swig_destroy__ = _OpenLxApp.delete_RectangleProfileDef

    def __init__(self, *args):
        r"""
        __init__(RectangleProfileDef self, std::shared_ptr< OpenLxApp::RectangleProfileDef > other) -> RectangleProfileDef
        __init__(RectangleProfileDef self, Part::RectangleProfileDef * aObj) -> RectangleProfileDef
        __init__(RectangleProfileDef self, std::shared_ptr< OpenLxApp::Document > aDoc) -> RectangleProfileDef
        __init__(RectangleProfileDef self) -> RectangleProfileDef
        """
        if self.__class__ == RectangleProfileDef:
            _self = None
        else:
            _self = self
        _OpenLxApp.RectangleProfileDef_swiginit(self, _OpenLxApp.new_RectangleProfileDef(_self, *args))
    def __disown__(self):
        self.this.disown()
        _OpenLxApp.disown_RectangleProfileDef(self)
        return weakref.proxy(self)

# Register RectangleProfileDef in _OpenLxApp:
_OpenLxApp.RectangleProfileDef_swigregister(RectangleProfileDef)
RectangleProfileDef_getEntityType_Static = _OpenLxApp.RectangleProfileDef_getEntityType_Static
RectangleProfileDef_createIn = _OpenLxApp.RectangleProfileDef_createIn
RectangleProfileDef_createFrom = _OpenLxApp.RectangleProfileDef_createFrom

class RectangleHollowProfileDef(RectangleProfileDef):
    r"""Proxy of C++ OpenLxApp::RectangleHollowProfileDef class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getEntityType_Static = _swig_new_static_method(_OpenLxApp.RectangleHollowProfileDef_getEntityType_Static)
    assign = _swig_new_instance_method(_OpenLxApp.RectangleHollowProfileDef_assign)
    isEqual = _swig_new_instance_method(_OpenLxApp.RectangleHollowProfileDef_isEqual)
    __getCasted__ = _swig_new_instance_method(_OpenLxApp.RectangleHollowProfileDef___getCasted__)
    createIn = _swig_new_static_method(_OpenLxApp.RectangleHollowProfileDef_createIn)
    createFrom = _swig_new_static_method(_OpenLxApp.RectangleHollowProfileDef_createFrom)
    getWallThickness = _swig_new_instance_method(_OpenLxApp.RectangleHollowProfileDef_getWallThickness)
    setWallThickness = _swig_new_instance_method(_OpenLxApp.RectangleHollowProfileDef_setWallThickness)
    getInnerFilletRadius = _swig_new_instance_method(_OpenLxApp.RectangleHollowProfileDef_getInnerFilletRadius)
    setInnerFilletRadius = _swig_new_instance_method(_OpenLxApp.RectangleHollowProfileDef_setInnerFilletRadius)
    getOuterFilletRadius = _swig_new_instance_method(_OpenLxApp.RectangleHollowProfileDef_getOuterFilletRadius)
    setOuterFilletRadius = _swig_new_instance_method(_OpenLxApp.RectangleHollowProfileDef_setOuterFilletRadius)
    __swig_destroy__ = _OpenLxApp.delete_RectangleHollowProfileDef

    def __init__(self, *args):
        r"""
        __init__(RectangleHollowProfileDef self, std::shared_ptr< OpenLxApp::RectangleHollowProfileDef > other) -> RectangleHollowProfileDef
        __init__(RectangleHollowProfileDef self, Part::RectangleHollowProfileDef * aObj) -> RectangleHollowProfileDef
        __init__(RectangleHollowProfileDef self, std::shared_ptr< OpenLxApp::Document > aDoc) -> RectangleHollowProfileDef
        __init__(RectangleHollowProfileDef self) -> RectangleHollowProfileDef
        """
        if self.__class__ == RectangleHollowProfileDef:
            _self = None
        else:
            _self = self
        _OpenLxApp.RectangleHollowProfileDef_swiginit(self, _OpenLxApp.new_RectangleHollowProfileDef(_self, *args))
    def __disown__(self):
        self.this.disown()
        _OpenLxApp.disown_RectangleHollowProfileDef(self)
        return weakref.proxy(self)

# Register RectangleHollowProfileDef in _OpenLxApp:
_OpenLxApp.RectangleHollowProfileDef_swigregister(RectangleHollowProfileDef)
RectangleHollowProfileDef_getEntityType_Static = _OpenLxApp.RectangleHollowProfileDef_getEntityType_Static
RectangleHollowProfileDef_createIn = _OpenLxApp.RectangleHollowProfileDef_createIn
RectangleHollowProfileDef_createFrom = _OpenLxApp.RectangleHollowProfileDef_createFrom

class ComponentType(DocObject):
    r"""Proxy of C++ OpenLxApp::ComponentType class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getEntityType_Static = _swig_new_static_method(_OpenLxApp.ComponentType_getEntityType_Static)
    assign = _swig_new_instance_method(_OpenLxApp.ComponentType_assign)
    isEqual = _swig_new_instance_method(_OpenLxApp.ComponentType_isEqual)
    __getCasted__ = _swig_new_instance_method(_OpenLxApp.ComponentType___getCasted__)
    createIn = _swig_new_static_method(_OpenLxApp.ComponentType_createIn)
    createFrom = _swig_new_static_method(_OpenLxApp.ComponentType_createFrom)
    __swig_destroy__ = _OpenLxApp.delete_ComponentType
    getName = _swig_new_instance_method(_OpenLxApp.ComponentType_getName)
    setName = _swig_new_instance_method(_OpenLxApp.ComponentType_setName)

    def __init__(self, *args):
        r"""
        __init__(ComponentType self, std::shared_ptr< OpenLxApp::ComponentType > other) -> ComponentType
        __init__(ComponentType self, App::ComponentType * aObj) -> ComponentType
        __init__(ComponentType self, std::shared_ptr< OpenLxApp::Document > aDoc) -> ComponentType
        __init__(ComponentType self) -> ComponentType
        """
        if self.__class__ == ComponentType:
            _self = None
        else:
            _self = self
        _OpenLxApp.ComponentType_swiginit(self, _OpenLxApp.new_ComponentType(_self, *args))
    def __disown__(self):
        self.this.disown()
        _OpenLxApp.disown_ComponentType(self)
        return weakref.proxy(self)

# Register ComponentType in _OpenLxApp:
_OpenLxApp.ComponentType_swigregister(ComponentType)
ComponentType_getEntityType_Static = _OpenLxApp.ComponentType_getEntityType_Static
ComponentType_createIn = _OpenLxApp.ComponentType_createIn
ComponentType_createFrom = _OpenLxApp.ComponentType_createFrom

class Property(object):
    r"""Proxy of C++ OpenLxApp::Property class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    NOT_VISIBLE = _OpenLxApp.Property_NOT_VISIBLE
    
    VISIBLE = _OpenLxApp.Property_VISIBLE
    
    NOT_EDITABLE = _OpenLxApp.Property_NOT_EDITABLE
    
    EDITABLE = _OpenLxApp.Property_EDITABLE
    
    getVariant = _swig_new_instance_method(_OpenLxApp.Property_getVariant)
    getName = _swig_new_instance_method(_OpenLxApp.Property_getName)
    isVisible = _swig_new_instance_method(_OpenLxApp.Property_isVisible)
    setVisible = _swig_new_instance_method(_OpenLxApp.Property_setVisible)
    isEditable = _swig_new_instance_method(_OpenLxApp.Property_isEditable)
    setEditable = _swig_new_instance_method(_OpenLxApp.Property_setEditable)
    getDisplayName = _swig_new_instance_method(_OpenLxApp.Property_getDisplayName)
    setTranslationId = _swig_new_instance_method(_OpenLxApp.Property_setTranslationId)
    getTranslationId = _swig_new_instance_method(_OpenLxApp.Property_getTranslationId)
    __swig_destroy__ = _OpenLxApp.delete_Property
    __setPropertyUser__ = _swig_new_instance_method(_OpenLxApp.Property___setPropertyUser__)

    def __init__(self):
        r"""__init__(Property self) -> Property"""
        if self.__class__ == Property:
            _self = None
        else:
            _self = self
        _OpenLxApp.Property_swiginit(self, _OpenLxApp.new_Property(_self, ))
    def __disown__(self):
        self.this.disown()
        _OpenLxApp.disown_Property(self)
        return weakref.proxy(self)

# Register Property in _OpenLxApp:
_OpenLxApp.Property_swigregister(Property)
class PropertyInteger(Property):
    r"""Proxy of C++ OpenLxApp::PropertyInteger class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(PropertyInteger self) -> PropertyInteger"""
        if self.__class__ == PropertyInteger:
            _self = None
        else:
            _self = self
        _OpenLxApp.PropertyInteger_swiginit(self, _OpenLxApp.new_PropertyInteger(_self, ))
    __swig_destroy__ = _OpenLxApp.delete_PropertyInteger
    getValue = _swig_new_instance_method(_OpenLxApp.PropertyInteger_getValue)
    setValue = _swig_new_instance_method(_OpenLxApp.PropertyInteger_setValue)
    setMinValue = _swig_new_instance_method(_OpenLxApp.PropertyInteger_setMinValue)
    setMaxValue = _swig_new_instance_method(_OpenLxApp.PropertyInteger_setMaxValue)
    setSteps = _swig_new_instance_method(_OpenLxApp.PropertyInteger_setSteps)
    getMinValue = _swig_new_instance_method(_OpenLxApp.PropertyInteger_getMinValue)
    getMaxValue = _swig_new_instance_method(_OpenLxApp.PropertyInteger_getMaxValue)
    getSteps = _swig_new_instance_method(_OpenLxApp.PropertyInteger_getSteps)
    def __disown__(self):
        self.this.disown()
        _OpenLxApp.disown_PropertyInteger(self)
        return weakref.proxy(self)

# Register PropertyInteger in _OpenLxApp:
_OpenLxApp.PropertyInteger_swigregister(PropertyInteger)
class PropertyEnumEntry(object):
    r"""Proxy of C++ OpenLxApp::PropertyEnumEntry class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    mName = property(_OpenLxApp.PropertyEnumEntry_mName_get, _OpenLxApp.PropertyEnumEntry_mName_set, doc=r"""mName : Base::String""")
    mTranslationId = property(_OpenLxApp.PropertyEnumEntry_mTranslationId_get, _OpenLxApp.PropertyEnumEntry_mTranslationId_set, doc=r"""mTranslationId : int""")

    def __init__(self):
        r"""__init__(PropertyEnumEntry self) -> PropertyEnumEntry"""
        _OpenLxApp.PropertyEnumEntry_swiginit(self, _OpenLxApp.new_PropertyEnumEntry())
    __swig_destroy__ = _OpenLxApp.delete_PropertyEnumEntry

# Register PropertyEnumEntry in _OpenLxApp:
_OpenLxApp.PropertyEnumEntry_swigregister(PropertyEnumEntry)
class PropertyEnum(PropertyInteger):
    r"""Proxy of C++ OpenLxApp::PropertyEnum class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(PropertyEnum self) -> PropertyEnum"""
        if self.__class__ == PropertyEnum:
            _self = None
        else:
            _self = self
        _OpenLxApp.PropertyEnum_swiginit(self, _OpenLxApp.new_PropertyEnum(_self, ))
    __swig_destroy__ = _OpenLxApp.delete_PropertyEnum
    addEntry = _swig_new_instance_method(_OpenLxApp.PropertyEnum_addEntry)
    getEntry = _swig_new_instance_method(_OpenLxApp.PropertyEnum_getEntry)
    removeEntry = _swig_new_instance_method(_OpenLxApp.PropertyEnum_removeEntry)
    setEmpty = _swig_new_instance_method(_OpenLxApp.PropertyEnum_setEmpty)
    getPredefinedValues = _swig_new_instance_method(_OpenLxApp.PropertyEnum_getPredefinedValues)
    def __disown__(self):
        self.this.disown()
        _OpenLxApp.disown_PropertyEnum(self)
        return weakref.proxy(self)

# Register PropertyEnum in _OpenLxApp:
_OpenLxApp.PropertyEnum_swigregister(PropertyEnum)
class PropertyDouble(Property):
    r"""Proxy of C++ OpenLxApp::PropertyDouble class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(PropertyDouble self) -> PropertyDouble"""
        if self.__class__ == PropertyDouble:
            _self = None
        else:
            _self = self
        _OpenLxApp.PropertyDouble_swiginit(self, _OpenLxApp.new_PropertyDouble(_self, ))
    __swig_destroy__ = _OpenLxApp.delete_PropertyDouble
    getValue = _swig_new_instance_method(_OpenLxApp.PropertyDouble_getValue)
    setValue = _swig_new_instance_method(_OpenLxApp.PropertyDouble_setValue)
    setMinValue = _swig_new_instance_method(_OpenLxApp.PropertyDouble_setMinValue)
    setMaxValue = _swig_new_instance_method(_OpenLxApp.PropertyDouble_setMaxValue)
    setSteps = _swig_new_instance_method(_OpenLxApp.PropertyDouble_setSteps)
    getMinValue = _swig_new_instance_method(_OpenLxApp.PropertyDouble_getMinValue)
    getMaxValue = _swig_new_instance_method(_OpenLxApp.PropertyDouble_getMaxValue)
    getSteps = _swig_new_instance_method(_OpenLxApp.PropertyDouble_getSteps)
    def __disown__(self):
        self.this.disown()
        _OpenLxApp.disown_PropertyDouble(self)
        return weakref.proxy(self)

# Register PropertyDouble in _OpenLxApp:
_OpenLxApp.PropertyDouble_swigregister(PropertyDouble)
class PropertyBool(Property):
    r"""Proxy of C++ OpenLxApp::PropertyBool class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    DEFAULT = _OpenLxApp.PropertyBool_DEFAULT
    
    LOCKBUTTON = _OpenLxApp.PropertyBool_LOCKBUTTON
    

    def __init__(self):
        r"""__init__(PropertyBool self) -> PropertyBool"""
        if self.__class__ == PropertyBool:
            _self = None
        else:
            _self = self
        _OpenLxApp.PropertyBool_swiginit(self, _OpenLxApp.new_PropertyBool(_self, ))
    __swig_destroy__ = _OpenLxApp.delete_PropertyBool
    getValue = _swig_new_instance_method(_OpenLxApp.PropertyBool_getValue)
    setValue = _swig_new_instance_method(_OpenLxApp.PropertyBool_setValue)
    getStyle = _swig_new_instance_method(_OpenLxApp.PropertyBool_getStyle)
    setStyle = _swig_new_instance_method(_OpenLxApp.PropertyBool_setStyle)
    def __disown__(self):
        self.this.disown()
        _OpenLxApp.disown_PropertyBool(self)
        return weakref.proxy(self)

# Register PropertyBool in _OpenLxApp:
_OpenLxApp.PropertyBool_swigregister(PropertyBool)
class PropertyString(Property):
    r"""Proxy of C++ OpenLxApp::PropertyString class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(PropertyString self) -> PropertyString"""
        if self.__class__ == PropertyString:
            _self = None
        else:
            _self = self
        _OpenLxApp.PropertyString_swiginit(self, _OpenLxApp.new_PropertyString(_self, ))
    __swig_destroy__ = _OpenLxApp.delete_PropertyString
    getValue = _swig_new_instance_method(_OpenLxApp.PropertyString_getValue)
    setValue = _swig_new_instance_method(_OpenLxApp.PropertyString_setValue)
    def __disown__(self):
        self.this.disown()
        _OpenLxApp.disown_PropertyString(self)
        return weakref.proxy(self)

# Register PropertyString in _OpenLxApp:
_OpenLxApp.PropertyString_swigregister(PropertyString)
class PropertyButton(Property):
    r"""Proxy of C++ OpenLxApp::PropertyButton class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(PropertyButton self) -> PropertyButton"""
        if self.__class__ == PropertyButton:
            _self = None
        else:
            _self = self
        _OpenLxApp.PropertyButton_swiginit(self, _OpenLxApp.new_PropertyButton(_self, ))
    __swig_destroy__ = _OpenLxApp.delete_PropertyButton
    def __disown__(self):
        self.this.disown()
        _OpenLxApp.disown_PropertyButton(self)
        return weakref.proxy(self)

# Register PropertyButton in _OpenLxApp:
_OpenLxApp.PropertyButton_swigregister(PropertyButton)
class PropertyColor(Property):
    r"""Proxy of C++ OpenLxApp::PropertyColor class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(PropertyColor self) -> PropertyColor"""
        if self.__class__ == PropertyColor:
            _self = None
        else:
            _self = self
        _OpenLxApp.PropertyColor_swiginit(self, _OpenLxApp.new_PropertyColor(_self, ))
    __swig_destroy__ = _OpenLxApp.delete_PropertyColor
    getValue = _swig_new_instance_method(_OpenLxApp.PropertyColor_getValue)
    setValue = _swig_new_instance_method(_OpenLxApp.PropertyColor_setValue)
    def __disown__(self):
        self.this.disown()
        _OpenLxApp.disown_PropertyColor(self)
        return weakref.proxy(self)

# Register PropertyColor in _OpenLxApp:
_OpenLxApp.PropertyColor_swigregister(PropertyColor)
class PropertyPoint(Property):
    r"""Proxy of C++ OpenLxApp::PropertyPoint class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(PropertyPoint self) -> PropertyPoint"""
        if self.__class__ == PropertyPoint:
            _self = None
        else:
            _self = self
        _OpenLxApp.PropertyPoint_swiginit(self, _OpenLxApp.new_PropertyPoint(_self, ))
    __swig_destroy__ = _OpenLxApp.delete_PropertyPoint
    getValue = _swig_new_instance_method(_OpenLxApp.PropertyPoint_getValue)
    setValue = _swig_new_instance_method(_OpenLxApp.PropertyPoint_setValue)
    def __disown__(self):
        self.this.disown()
        _OpenLxApp.disown_PropertyPoint(self)
        return weakref.proxy(self)

# Register PropertyPoint in _OpenLxApp:
_OpenLxApp.PropertyPoint_swigregister(PropertyPoint)
class PropertyPointVector(Property):
    r"""Proxy of C++ OpenLxApp::PropertyPointVector class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(PropertyPointVector self) -> PropertyPointVector"""
        if self.__class__ == PropertyPointVector:
            _self = None
        else:
            _self = self
        _OpenLxApp.PropertyPointVector_swiginit(self, _OpenLxApp.new_PropertyPointVector(_self, ))
    __swig_destroy__ = _OpenLxApp.delete_PropertyPointVector
    getValue = _swig_new_instance_method(_OpenLxApp.PropertyPointVector_getValue)
    setValue = _swig_new_instance_method(_OpenLxApp.PropertyPointVector_setValue)
    def __disown__(self):
        self.this.disown()
        _OpenLxApp.disown_PropertyPointVector(self)
        return weakref.proxy(self)

# Register PropertyPointVector in _OpenLxApp:
_OpenLxApp.PropertyPointVector_swigregister(PropertyPointVector)
class PropertyObject(Property):
    r"""Proxy of C++ OpenLxApp::PropertyObject class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(PropertyObject self) -> PropertyObject"""
        if self.__class__ == PropertyObject:
            _self = None
        else:
            _self = self
        _OpenLxApp.PropertyObject_swiginit(self, _OpenLxApp.new_PropertyObject(_self, ))
    __swig_destroy__ = _OpenLxApp.delete_PropertyObject
    getValue = _swig_new_instance_method(_OpenLxApp.PropertyObject_getValue)
    setValue = _swig_new_instance_method(_OpenLxApp.PropertyObject_setValue)
    def __disown__(self):
        self.this.disown()
        _OpenLxApp.disown_PropertyObject(self)
        return weakref.proxy(self)

# Register PropertyObject in _OpenLxApp:
_OpenLxApp.PropertyObject_swigregister(PropertyObject)
class PropertyObjectVector(Property):
    r"""Proxy of C++ OpenLxApp::PropertyObjectVector class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(PropertyObjectVector self) -> PropertyObjectVector"""
        if self.__class__ == PropertyObjectVector:
            _self = None
        else:
            _self = self
        _OpenLxApp.PropertyObjectVector_swiginit(self, _OpenLxApp.new_PropertyObjectVector(_self, ))
    __swig_destroy__ = _OpenLxApp.delete_PropertyObjectVector
    getValue = _swig_new_instance_method(_OpenLxApp.PropertyObjectVector_getValue)
    setValue = _swig_new_instance_method(_OpenLxApp.PropertyObjectVector_setValue)
    def __disown__(self):
        self.this.disown()
        _OpenLxApp.disown_PropertyObjectVector(self)
        return weakref.proxy(self)

# Register PropertyObjectVector in _OpenLxApp:
_OpenLxApp.PropertyObjectVector_swigregister(PropertyObjectVector)
class PropertyUser(Property):
    r"""Proxy of C++ OpenLxApp::PropertyUser class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(PropertyUser self) -> PropertyUser"""
        if self.__class__ == PropertyUser:
            _self = None
        else:
            _self = self
        _OpenLxApp.PropertyUser_swiginit(self, _OpenLxApp.new_PropertyUser(_self, ))
    __swig_destroy__ = _OpenLxApp.delete_PropertyUser
    getValue = _swig_new_instance_method(_OpenLxApp.PropertyUser_getValue)
    setValue = _swig_new_instance_method(_OpenLxApp.PropertyUser_setValue)
    def __disown__(self):
        self.this.disown()
        _OpenLxApp.disown_PropertyUser(self)
        return weakref.proxy(self)

# Register PropertyUser in _OpenLxApp:
_OpenLxApp.PropertyUser_swigregister(PropertyUser)
class Value(object):
    r"""Proxy of C++ OpenLxApp::Value class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Value self) -> Value"""
        if self.__class__ == Value:
            _self = None
        else:
            _self = self
        _OpenLxApp.Value_swiginit(self, _OpenLxApp.new_Value(_self, ))
    __swig_destroy__ = _OpenLxApp.delete_Value
    setValue = _swig_new_instance_method(_OpenLxApp.Value_setValue)
    isNull = _swig_new_instance_method(_OpenLxApp.Value_isNull)
    def __disown__(self):
        self.this.disown()
        _OpenLxApp.disown_Value(self)
        return weakref.proxy(self)

# Register Value in _OpenLxApp:
_OpenLxApp.Value_swigregister(Value)
class ValueInteger(Value):
    r"""Proxy of C++ OpenLxApp::ValueInteger class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _OpenLxApp.delete_ValueInteger

    def __init__(self, *args):
        r"""
        __init__(ValueInteger self) -> ValueInteger
        __init__(ValueInteger self, Variant aVariant) -> ValueInteger
        __init__(ValueInteger self, int aValue) -> ValueInteger
        """
        if self.__class__ == ValueInteger:
            _self = None
        else:
            _self = self
        _OpenLxApp.ValueInteger_swiginit(self, _OpenLxApp.new_ValueInteger(_self, *args))
    setValue = _swig_new_instance_method(_OpenLxApp.ValueInteger_setValue)
    getValue = _swig_new_instance_method(_OpenLxApp.ValueInteger_getValue)
    isNull = _swig_new_instance_method(_OpenLxApp.ValueInteger_isNull)
    def __disown__(self):
        self.this.disown()
        _OpenLxApp.disown_ValueInteger(self)
        return weakref.proxy(self)

# Register ValueInteger in _OpenLxApp:
_OpenLxApp.ValueInteger_swigregister(ValueInteger)
class ValueDouble(Value):
    r"""Proxy of C++ OpenLxApp::ValueDouble class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _OpenLxApp.delete_ValueDouble

    def __init__(self, *args):
        r"""
        __init__(ValueDouble self) -> ValueDouble
        __init__(ValueDouble self, Variant aVariant) -> ValueDouble
        __init__(ValueDouble self, double aValue) -> ValueDouble
        """
        if self.__class__ == ValueDouble:
            _self = None
        else:
            _self = self
        _OpenLxApp.ValueDouble_swiginit(self, _OpenLxApp.new_ValueDouble(_self, *args))
    setValue = _swig_new_instance_method(_OpenLxApp.ValueDouble_setValue)
    getValue = _swig_new_instance_method(_OpenLxApp.ValueDouble_getValue)
    isNull = _swig_new_instance_method(_OpenLxApp.ValueDouble_isNull)
    def __disown__(self):
        self.this.disown()
        _OpenLxApp.disown_ValueDouble(self)
        return weakref.proxy(self)

# Register ValueDouble in _OpenLxApp:
_OpenLxApp.ValueDouble_swigregister(ValueDouble)
class Geometry(DocObject):
    r"""Proxy of C++ OpenLxApp::Geometry class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getEntityType_Static = _swig_new_static_method(_OpenLxApp.Geometry_getEntityType_Static)
    assign = _swig_new_instance_method(_OpenLxApp.Geometry_assign)
    isEqual = _swig_new_instance_method(_OpenLxApp.Geometry_isEqual)
    __getCasted__ = _swig_new_instance_method(_OpenLxApp.Geometry___getCasted__)
    __swig_destroy__ = _OpenLxApp.delete_Geometry
    computeShape = _swig_new_instance_method(_OpenLxApp.Geometry_computeShape)
    getShape = _swig_new_instance_method(_OpenLxApp.Geometry_getShape)
    getPrecision = _swig_new_instance_method(_OpenLxApp.Geometry_getPrecision)
    setPrecision = _swig_new_instance_method(_OpenLxApp.Geometry_setPrecision)
    getBoundingBox = _swig_new_instance_method(_OpenLxApp.Geometry_getBoundingBox)

    def __init__(self, *args):
        r"""
        __init__(Geometry self, std::shared_ptr< OpenLxApp::Geometry > other) -> Geometry
        __init__(Geometry self, App::Geometry * aObj) -> Geometry
        __init__(Geometry self) -> Geometry
        """
        if self.__class__ == Geometry:
            _self = None
        else:
            _self = self
        _OpenLxApp.Geometry_swiginit(self, _OpenLxApp.new_Geometry(_self, *args))
    def __disown__(self):
        self.this.disown()
        _OpenLxApp.disown_Geometry(self)
        return weakref.proxy(self)

# Register Geometry in _OpenLxApp:
_OpenLxApp.Geometry_swigregister(Geometry)
Geometry_getEntityType_Static = _OpenLxApp.Geometry_getEntityType_Static

class Block(Geometry):
    r"""Proxy of C++ OpenLxApp::Block class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getEntityType_Static = _swig_new_static_method(_OpenLxApp.Block_getEntityType_Static)
    assign = _swig_new_instance_method(_OpenLxApp.Block_assign)
    isEqual = _swig_new_instance_method(_OpenLxApp.Block_isEqual)
    __getCasted__ = _swig_new_instance_method(_OpenLxApp.Block___getCasted__)

    def __init__(self, *args):
        r"""
        __init__(Block self, std::shared_ptr< OpenLxApp::Block > other) -> Block
        __init__(Block self, Part::Box * aObj) -> Block
        __init__(Block self, std::shared_ptr< OpenLxApp::Document > aDoc) -> Block
        """
        if self.__class__ == Block:
            _self = None
        else:
            _self = self
        _OpenLxApp.Block_swiginit(self, _OpenLxApp.new_Block(_self, *args))
    createIn = _swig_new_static_method(_OpenLxApp.Block_createIn)
    createFrom = _swig_new_static_method(_OpenLxApp.Block_createFrom)
    getXLength = _swig_new_instance_method(_OpenLxApp.Block_getXLength)
    setXLength = _swig_new_instance_method(_OpenLxApp.Block_setXLength)
    getYLength = _swig_new_instance_method(_OpenLxApp.Block_getYLength)
    setYLength = _swig_new_instance_method(_OpenLxApp.Block_setYLength)
    getZLength = _swig_new_instance_method(_OpenLxApp.Block_getZLength)
    setZLength = _swig_new_instance_method(_OpenLxApp.Block_setZLength)
    getPosition = _swig_new_instance_method(_OpenLxApp.Block_getPosition)
    setPosition = _swig_new_instance_method(_OpenLxApp.Block_setPosition)
    getLength = _swig_new_instance_method(_OpenLxApp.Block_getLength)
    setLength = _swig_new_instance_method(_OpenLxApp.Block_setLength)
    getWidth = _swig_new_instance_method(_OpenLxApp.Block_getWidth)
    setWidth = _swig_new_instance_method(_OpenLxApp.Block_setWidth)
    getHeight = _swig_new_instance_method(_OpenLxApp.Block_getHeight)
    setHeight = _swig_new_instance_method(_OpenLxApp.Block_setHeight)
    __swig_destroy__ = _OpenLxApp.delete_Block
    def __disown__(self):
        self.this.disown()
        _OpenLxApp.disown_Block(self)
        return weakref.proxy(self)

# Register Block in _OpenLxApp:
_OpenLxApp.Block_swigregister(Block)
Block_getEntityType_Static = _OpenLxApp.Block_getEntityType_Static
Block_createIn = _OpenLxApp.Block_createIn
Block_createFrom = _OpenLxApp.Block_createFrom

class BooleanClippingResult(Geometry):
    r"""Proxy of C++ OpenLxApp::BooleanClippingResult class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getEntityType_Static = _swig_new_static_method(_OpenLxApp.BooleanClippingResult_getEntityType_Static)
    assign = _swig_new_instance_method(_OpenLxApp.BooleanClippingResult_assign)
    isEqual = _swig_new_instance_method(_OpenLxApp.BooleanClippingResult_isEqual)
    __getCasted__ = _swig_new_instance_method(_OpenLxApp.BooleanClippingResult___getCasted__)

    def __init__(self, *args):
        r"""
        __init__(BooleanClippingResult self, std::shared_ptr< OpenLxApp::BooleanClippingResult > other) -> BooleanClippingResult
        __init__(BooleanClippingResult self, Part::Cut * aObj) -> BooleanClippingResult
        __init__(BooleanClippingResult self, std::shared_ptr< OpenLxApp::Document > aDoc) -> BooleanClippingResult
        """
        if self.__class__ == BooleanClippingResult:
            _self = None
        else:
            _self = self
        _OpenLxApp.BooleanClippingResult_swiginit(self, _OpenLxApp.new_BooleanClippingResult(_self, *args))
    createIn = _swig_new_static_method(_OpenLxApp.BooleanClippingResult_createIn)
    createFrom = _swig_new_static_method(_OpenLxApp.BooleanClippingResult_createFrom)
    __swig_destroy__ = _OpenLxApp.delete_BooleanClippingResult
    setTool = _swig_new_instance_method(_OpenLxApp.BooleanClippingResult_setTool)
    getTool = _swig_new_instance_method(_OpenLxApp.BooleanClippingResult_getTool)
    setBlank = _swig_new_instance_method(_OpenLxApp.BooleanClippingResult_setBlank)
    getBlank = _swig_new_instance_method(_OpenLxApp.BooleanClippingResult_getBlank)
    def __disown__(self):
        self.this.disown()
        _OpenLxApp.disown_BooleanClippingResult(self)
        return weakref.proxy(self)

# Register BooleanClippingResult in _OpenLxApp:
_OpenLxApp.BooleanClippingResult_swigregister(BooleanClippingResult)
BooleanClippingResult_getEntityType_Static = _OpenLxApp.BooleanClippingResult_getEntityType_Static
BooleanClippingResult_createIn = _OpenLxApp.BooleanClippingResult_createIn
BooleanClippingResult_createFrom = _OpenLxApp.BooleanClippingResult_createFrom

class CartesianPoint(Geometry):
    r"""Proxy of C++ OpenLxApp::CartesianPoint class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getEntityType_Static = _swig_new_static_method(_OpenLxApp.CartesianPoint_getEntityType_Static)
    assign = _swig_new_instance_method(_OpenLxApp.CartesianPoint_assign)
    isEqual = _swig_new_instance_method(_OpenLxApp.CartesianPoint_isEqual)
    __getCasted__ = _swig_new_instance_method(_OpenLxApp.CartesianPoint___getCasted__)

    def __init__(self, *args):
        r"""
        __init__(CartesianPoint self, std::shared_ptr< OpenLxApp::CartesianPoint > other) -> CartesianPoint
        __init__(CartesianPoint self, Part::CartesianPoint * aObj) -> CartesianPoint
        __init__(CartesianPoint self, std::shared_ptr< OpenLxApp::Document > aDoc) -> CartesianPoint
        """
        if self.__class__ == CartesianPoint:
            _self = None
        else:
            _self = self
        _OpenLxApp.CartesianPoint_swiginit(self, _OpenLxApp.new_CartesianPoint(_self, *args))
    createIn = _swig_new_static_method(_OpenLxApp.CartesianPoint_createIn)
    createFrom = _swig_new_static_method(_OpenLxApp.CartesianPoint_createFrom)
    getPoint = _swig_new_instance_method(_OpenLxApp.CartesianPoint_getPoint)
    setPoint = _swig_new_instance_method(_OpenLxApp.CartesianPoint_setPoint)
    __swig_destroy__ = _OpenLxApp.delete_CartesianPoint
    def __disown__(self):
        self.this.disown()
        _OpenLxApp.disown_CartesianPoint(self)
        return weakref.proxy(self)

# Register CartesianPoint in _OpenLxApp:
_OpenLxApp.CartesianPoint_swigregister(CartesianPoint)
CartesianPoint_getEntityType_Static = _OpenLxApp.CartesianPoint_getEntityType_Static
CartesianPoint_createIn = _OpenLxApp.CartesianPoint_createIn
CartesianPoint_createFrom = _OpenLxApp.CartesianPoint_createFrom

class Curve(Geometry):
    r"""Proxy of C++ OpenLxApp::Curve class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getEntityType_Static = _swig_new_static_method(_OpenLxApp.Curve_getEntityType_Static)
    assign = _swig_new_instance_method(_OpenLxApp.Curve_assign)
    isEqual = _swig_new_instance_method(_OpenLxApp.Curve_isEqual)
    __getCasted__ = _swig_new_instance_method(_OpenLxApp.Curve___getCasted__)
    getWire = _swig_new_instance_method(_OpenLxApp.Curve_getWire)
    translate = _swig_new_instance_method(_OpenLxApp.Curve_translate)
    transform = _swig_new_instance_method(_OpenLxApp.Curve_transform)
    reverse = _swig_new_instance_method(_OpenLxApp.Curve_reverse)
    firstParameter = _swig_new_instance_method(_OpenLxApp.Curve_firstParameter)
    lastParameter = _swig_new_instance_method(_OpenLxApp.Curve_lastParameter)
    d0 = _swig_new_instance_method(_OpenLxApp.Curve_d0)
    d1 = _swig_new_instance_method(_OpenLxApp.Curve_d1)
    d2 = _swig_new_instance_method(_OpenLxApp.Curve_d2)
    value = _swig_new_instance_method(_OpenLxApp.Curve_value)
    transformedParameter = _swig_new_instance_method(_OpenLxApp.Curve_transformedParameter)
    __swig_destroy__ = _OpenLxApp.delete_Curve

    def __init__(self, *args):
        r"""
        __init__(Curve self, std::shared_ptr< OpenLxApp::Curve > other) -> Curve
        __init__(Curve self, Part::Curve * aObj) -> Curve
        __init__(Curve self) -> Curve
        """
        if self.__class__ == Curve:
            _self = None
        else:
            _self = self
        _OpenLxApp.Curve_swiginit(self, _OpenLxApp.new_Curve(_self, *args))
    def __disown__(self):
        self.this.disown()
        _OpenLxApp.disown_Curve(self)
        return weakref.proxy(self)

# Register Curve in _OpenLxApp:
_OpenLxApp.Curve_swigregister(Curve)
Curve_getEntityType_Static = _OpenLxApp.Curve_getEntityType_Static

class BoundedCurve(Curve):
    r"""Proxy of C++ OpenLxApp::BoundedCurve class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getEntityType_Static = _swig_new_static_method(_OpenLxApp.BoundedCurve_getEntityType_Static)
    assign = _swig_new_instance_method(_OpenLxApp.BoundedCurve_assign)
    isEqual = _swig_new_instance_method(_OpenLxApp.BoundedCurve_isEqual)
    __getCasted__ = _swig_new_instance_method(_OpenLxApp.BoundedCurve___getCasted__)
    getStartPoint = _swig_new_instance_method(_OpenLxApp.BoundedCurve_getStartPoint)
    getEndPoint = _swig_new_instance_method(_OpenLxApp.BoundedCurve_getEndPoint)
    __swig_destroy__ = _OpenLxApp.delete_BoundedCurve

    def __init__(self, *args):
        r"""
        __init__(BoundedCurve self, std::shared_ptr< OpenLxApp::BoundedCurve > other) -> BoundedCurve
        __init__(BoundedCurve self, Part::BoundedCurve * aObj) -> BoundedCurve
        __init__(BoundedCurve self) -> BoundedCurve
        """
        if self.__class__ == BoundedCurve:
            _self = None
        else:
            _self = self
        _OpenLxApp.BoundedCurve_swiginit(self, _OpenLxApp.new_BoundedCurve(_self, *args))
    def __disown__(self):
        self.this.disown()
        _OpenLxApp.disown_BoundedCurve(self)
        return weakref.proxy(self)

# Register BoundedCurve in _OpenLxApp:
_OpenLxApp.BoundedCurve_swigregister(BoundedCurve)
BoundedCurve_getEntityType_Static = _OpenLxApp.BoundedCurve_getEntityType_Static

class BezierCurve(BoundedCurve):
    r"""Proxy of C++ OpenLxApp::BezierCurve class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getEntityType_Static = _swig_new_static_method(_OpenLxApp.BezierCurve_getEntityType_Static)
    assign = _swig_new_instance_method(_OpenLxApp.BezierCurve_assign)
    isEqual = _swig_new_instance_method(_OpenLxApp.BezierCurve_isEqual)
    __getCasted__ = _swig_new_instance_method(_OpenLxApp.BezierCurve___getCasted__)

    def __init__(self, *args):
        r"""
        __init__(BezierCurve self, std::shared_ptr< OpenLxApp::BezierCurve > other) -> BezierCurve
        __init__(BezierCurve self, Part::BezierCurve * aObj) -> BezierCurve
        __init__(BezierCurve self, std::shared_ptr< OpenLxApp::Document > aDoc) -> BezierCurve
        """
        if self.__class__ == BezierCurve:
            _self = None
        else:
            _self = self
        _OpenLxApp.BezierCurve_swiginit(self, _OpenLxApp.new_BezierCurve(_self, *args))
    createIn = _swig_new_static_method(_OpenLxApp.BezierCurve_createIn)
    createFrom = _swig_new_static_method(_OpenLxApp.BezierCurve_createFrom)
    getClosedCurve = _swig_new_instance_method(_OpenLxApp.BezierCurve_getClosedCurve)
    setClosedCurve = _swig_new_instance_method(_OpenLxApp.BezierCurve_setClosedCurve)
    getControlPointsList = _swig_new_instance_method(_OpenLxApp.BezierCurve_getControlPointsList)
    setControlPointsList = _swig_new_instance_method(_OpenLxApp.BezierCurve_setControlPointsList)
    getDegree = _swig_new_instance_method(_OpenLxApp.BezierCurve_getDegree)
    setDegree = _swig_new_instance_method(_OpenLxApp.BezierCurve_setDegree)
    getSelfIntersect = _swig_new_instance_method(_OpenLxApp.BezierCurve_getSelfIntersect)
    setSelfIntersect = _swig_new_instance_method(_OpenLxApp.BezierCurve_setSelfIntersect)
    __swig_destroy__ = _OpenLxApp.delete_BezierCurve
    def __disown__(self):
        self.this.disown()
        _OpenLxApp.disown_BezierCurve(self)
        return weakref.proxy(self)

# Register BezierCurve in _OpenLxApp:
_OpenLxApp.BezierCurve_swigregister(BezierCurve)
BezierCurve_getEntityType_Static = _OpenLxApp.BezierCurve_getEntityType_Static
BezierCurve_createIn = _OpenLxApp.BezierCurve_createIn
BezierCurve_createFrom = _OpenLxApp.BezierCurve_createFrom

class CompositeCurveSegment(Geometry):
    r"""Proxy of C++ OpenLxApp::CompositeCurveSegment class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getEntityType_Static = _swig_new_static_method(_OpenLxApp.CompositeCurveSegment_getEntityType_Static)
    assign = _swig_new_instance_method(_OpenLxApp.CompositeCurveSegment_assign)
    isEqual = _swig_new_instance_method(_OpenLxApp.CompositeCurveSegment_isEqual)
    __getCasted__ = _swig_new_instance_method(_OpenLxApp.CompositeCurveSegment___getCasted__)

    def __init__(self, *args):
        r"""
        __init__(CompositeCurveSegment self, std::shared_ptr< OpenLxApp::CompositeCurveSegment > other) -> CompositeCurveSegment
        __init__(CompositeCurveSegment self, Part::CompositeCurveSegment * aObj) -> CompositeCurveSegment
        __init__(CompositeCurveSegment self, std::shared_ptr< OpenLxApp::Document > aDoc) -> CompositeCurveSegment
        """
        if self.__class__ == CompositeCurveSegment:
            _self = None
        else:
            _self = self
        _OpenLxApp.CompositeCurveSegment_swiginit(self, _OpenLxApp.new_CompositeCurveSegment(_self, *args))
    createIn = _swig_new_static_method(_OpenLxApp.CompositeCurveSegment_createIn)
    createFrom = _swig_new_static_method(_OpenLxApp.CompositeCurveSegment_createFrom)
    getSameSense = _swig_new_instance_method(_OpenLxApp.CompositeCurveSegment_getSameSense)
    setSameSense = _swig_new_instance_method(_OpenLxApp.CompositeCurveSegment_setSameSense)
    __swig_destroy__ = _OpenLxApp.delete_CompositeCurveSegment
    setParentCurve = _swig_new_instance_method(_OpenLxApp.CompositeCurveSegment_setParentCurve)
    getParentCurve = _swig_new_instance_method(_OpenLxApp.CompositeCurveSegment_getParentCurve)
    def __disown__(self):
        self.this.disown()
        _OpenLxApp.disown_CompositeCurveSegment(self)
        return weakref.proxy(self)

# Register CompositeCurveSegment in _OpenLxApp:
_OpenLxApp.CompositeCurveSegment_swigregister(CompositeCurveSegment)
CompositeCurveSegment_getEntityType_Static = _OpenLxApp.CompositeCurveSegment_getEntityType_Static
CompositeCurveSegment_createIn = _OpenLxApp.CompositeCurveSegment_createIn
CompositeCurveSegment_createFrom = _OpenLxApp.CompositeCurveSegment_createFrom

class CompositeCurve(BoundedCurve):
    r"""Proxy of C++ OpenLxApp::CompositeCurve class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getEntityType_Static = _swig_new_static_method(_OpenLxApp.CompositeCurve_getEntityType_Static)
    assign = _swig_new_instance_method(_OpenLxApp.CompositeCurve_assign)
    isEqual = _swig_new_instance_method(_OpenLxApp.CompositeCurve_isEqual)
    __getCasted__ = _swig_new_instance_method(_OpenLxApp.CompositeCurve___getCasted__)

    def __init__(self, *args):
        r"""
        __init__(CompositeCurve self, std::shared_ptr< OpenLxApp::CompositeCurve > other) -> CompositeCurve
        __init__(CompositeCurve self, Part::CompositeCurve * aObj) -> CompositeCurve
        __init__(CompositeCurve self, std::shared_ptr< OpenLxApp::Document > aDoc) -> CompositeCurve
        """
        if self.__class__ == CompositeCurve:
            _self = None
        else:
            _self = self
        _OpenLxApp.CompositeCurve_swiginit(self, _OpenLxApp.new_CompositeCurve(_self, *args))
    createIn = _swig_new_static_method(_OpenLxApp.CompositeCurve_createIn)
    createFrom = _swig_new_static_method(_OpenLxApp.CompositeCurve_createFrom)
    getAllow3dCurve = _swig_new_instance_method(_OpenLxApp.CompositeCurve_getAllow3dCurve)
    setAllow3dCurve = _swig_new_instance_method(_OpenLxApp.CompositeCurve_setAllow3dCurve)
    __swig_destroy__ = _OpenLxApp.delete_CompositeCurve
    addSegment = _swig_new_instance_method(_OpenLxApp.CompositeCurve_addSegment)
    getSegments = _swig_new_instance_method(_OpenLxApp.CompositeCurve_getSegments)
    def __disown__(self):
        self.this.disown()
        _OpenLxApp.disown_CompositeCurve(self)
        return weakref.proxy(self)

# Register CompositeCurve in _OpenLxApp:
_OpenLxApp.CompositeCurve_swigregister(CompositeCurve)
CompositeCurve_getEntityType_Static = _OpenLxApp.CompositeCurve_getEntityType_Static
CompositeCurve_createIn = _OpenLxApp.CompositeCurve_createIn
CompositeCurve_createFrom = _OpenLxApp.CompositeCurve_createFrom

class Conic(Curve):
    r"""Proxy of C++ OpenLxApp::Conic class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getEntityType_Static = _swig_new_static_method(_OpenLxApp.Conic_getEntityType_Static)
    assign = _swig_new_instance_method(_OpenLxApp.Conic_assign)
    isEqual = _swig_new_instance_method(_OpenLxApp.Conic_isEqual)
    __getCasted__ = _swig_new_instance_method(_OpenLxApp.Conic___getCasted__)
    getPosition = _swig_new_instance_method(_OpenLxApp.Conic_getPosition)
    setPosition = _swig_new_instance_method(_OpenLxApp.Conic_setPosition)
    __swig_destroy__ = _OpenLxApp.delete_Conic

    def __init__(self, *args):
        r"""
        __init__(Conic self, std::shared_ptr< OpenLxApp::Conic > other) -> Conic
        __init__(Conic self, Part::Conic * aObj) -> Conic
        __init__(Conic self) -> Conic
        """
        if self.__class__ == Conic:
            _self = None
        else:
            _self = self
        _OpenLxApp.Conic_swiginit(self, _OpenLxApp.new_Conic(_self, *args))
    def __disown__(self):
        self.this.disown()
        _OpenLxApp.disown_Conic(self)
        return weakref.proxy(self)

# Register Conic in _OpenLxApp:
_OpenLxApp.Conic_swigregister(Conic)
Conic_getEntityType_Static = _OpenLxApp.Conic_getEntityType_Static

class Line(Curve):
    r"""Proxy of C++ OpenLxApp::Line class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getEntityType_Static = _swig_new_static_method(_OpenLxApp.Line_getEntityType_Static)
    assign = _swig_new_instance_method(_OpenLxApp.Line_assign)
    isEqual = _swig_new_instance_method(_OpenLxApp.Line_isEqual)
    __getCasted__ = _swig_new_instance_method(_OpenLxApp.Line___getCasted__)

    def __init__(self, *args):
        r"""
        __init__(Line self, std::shared_ptr< OpenLxApp::Line > other) -> Line
        __init__(Line self, Part::Line * aObj) -> Line
        __init__(Line self, std::shared_ptr< OpenLxApp::Document > aDoc) -> Line
        """
        if self.__class__ == Line:
            _self = None
        else:
            _self = self
        _OpenLxApp.Line_swiginit(self, _OpenLxApp.new_Line(_self, *args))
    createIn = _swig_new_static_method(_OpenLxApp.Line_createIn)
    createFrom = _swig_new_static_method(_OpenLxApp.Line_createFrom)
    getPoint = _swig_new_instance_method(_OpenLxApp.Line_getPoint)
    setPoint = _swig_new_instance_method(_OpenLxApp.Line_setPoint)
    getDirection = _swig_new_instance_method(_OpenLxApp.Line_getDirection)
    setDirection = _swig_new_instance_method(_OpenLxApp.Line_setDirection)
    __swig_destroy__ = _OpenLxApp.delete_Line
    def __disown__(self):
        self.this.disown()
        _OpenLxApp.disown_Line(self)
        return weakref.proxy(self)

# Register Line in _OpenLxApp:
_OpenLxApp.Line_swigregister(Line)
Line_getEntityType_Static = _OpenLxApp.Line_getEntityType_Static
Line_createIn = _OpenLxApp.Line_createIn
Line_createFrom = _OpenLxApp.Line_createFrom

class TrimmedCurve(BoundedCurve):
    r"""Proxy of C++ OpenLxApp::TrimmedCurve class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getEntityType_Static = _swig_new_static_method(_OpenLxApp.TrimmedCurve_getEntityType_Static)
    assign = _swig_new_instance_method(_OpenLxApp.TrimmedCurve_assign)
    isEqual = _swig_new_instance_method(_OpenLxApp.TrimmedCurve_isEqual)
    __getCasted__ = _swig_new_instance_method(_OpenLxApp.TrimmedCurve___getCasted__)

    def __init__(self, *args):
        r"""
        __init__(TrimmedCurve self, std::shared_ptr< OpenLxApp::TrimmedCurve > other) -> TrimmedCurve
        __init__(TrimmedCurve self, Part::TrimmedCurve * aObj) -> TrimmedCurve
        __init__(TrimmedCurve self, std::shared_ptr< OpenLxApp::Document > aDoc) -> TrimmedCurve
        """
        if self.__class__ == TrimmedCurve:
            _self = None
        else:
            _self = self
        _OpenLxApp.TrimmedCurve_swiginit(self, _OpenLxApp.new_TrimmedCurve(_self, *args))
    createIn = _swig_new_static_method(_OpenLxApp.TrimmedCurve_createIn)
    createFrom = _swig_new_static_method(_OpenLxApp.TrimmedCurve_createFrom)
    getTrim1 = _swig_new_instance_method(_OpenLxApp.TrimmedCurve_getTrim1)
    setTrim1 = _swig_new_instance_method(_OpenLxApp.TrimmedCurve_setTrim1)
    getTrim2 = _swig_new_instance_method(_OpenLxApp.TrimmedCurve_getTrim2)
    setTrim2 = _swig_new_instance_method(_OpenLxApp.TrimmedCurve_setTrim2)
    getSense = _swig_new_instance_method(_OpenLxApp.TrimmedCurve_getSense)
    setSense = _swig_new_instance_method(_OpenLxApp.TrimmedCurve_setSense)
    __swig_destroy__ = _OpenLxApp.delete_TrimmedCurve
    setBasisCurve = _swig_new_instance_method(_OpenLxApp.TrimmedCurve_setBasisCurve)
    getBasisCurve = _swig_new_instance_method(_OpenLxApp.TrimmedCurve_getBasisCurve)
    def __disown__(self):
        self.this.disown()
        _OpenLxApp.disown_TrimmedCurve(self)
        return weakref.proxy(self)

# Register TrimmedCurve in _OpenLxApp:
_OpenLxApp.TrimmedCurve_swigregister(TrimmedCurve)
TrimmedCurve_getEntityType_Static = _OpenLxApp.TrimmedCurve_getEntityType_Static
TrimmedCurve_createIn = _OpenLxApp.TrimmedCurve_createIn
TrimmedCurve_createFrom = _OpenLxApp.TrimmedCurve_createFrom

class Polyline(BoundedCurve):
    r"""Proxy of C++ OpenLxApp::Polyline class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getEntityType_Static = _swig_new_static_method(_OpenLxApp.Polyline_getEntityType_Static)
    assign = _swig_new_instance_method(_OpenLxApp.Polyline_assign)
    isEqual = _swig_new_instance_method(_OpenLxApp.Polyline_isEqual)
    __getCasted__ = _swig_new_instance_method(_OpenLxApp.Polyline___getCasted__)

    def __init__(self, *args):
        r"""
        __init__(Polyline self, std::shared_ptr< OpenLxApp::Polyline > other) -> Polyline
        __init__(Polyline self, Part::Polyline * aObj) -> Polyline
        __init__(Polyline self, std::shared_ptr< OpenLxApp::Document > aDoc) -> Polyline
        """
        if self.__class__ == Polyline:
            _self = None
        else:
            _self = self
        _OpenLxApp.Polyline_swiginit(self, _OpenLxApp.new_Polyline(_self, *args))
    createIn = _swig_new_static_method(_OpenLxApp.Polyline_createIn)
    createFrom = _swig_new_static_method(_OpenLxApp.Polyline_createFrom)
    getPoints = _swig_new_instance_method(_OpenLxApp.Polyline_getPoints)
    setPoints = _swig_new_instance_method(_OpenLxApp.Polyline_setPoints)
    __swig_destroy__ = _OpenLxApp.delete_Polyline
    def __disown__(self):
        self.this.disown()
        _OpenLxApp.disown_Polyline(self)
        return weakref.proxy(self)

# Register Polyline in _OpenLxApp:
_OpenLxApp.Polyline_swigregister(Polyline)
Polyline_getEntityType_Static = _OpenLxApp.Polyline_getEntityType_Static
Polyline_createIn = _OpenLxApp.Polyline_createIn
Polyline_createFrom = _OpenLxApp.Polyline_createFrom

class Circle(Conic):
    r"""Proxy of C++ OpenLxApp::Circle class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getEntityType_Static = _swig_new_static_method(_OpenLxApp.Circle_getEntityType_Static)
    assign = _swig_new_instance_method(_OpenLxApp.Circle_assign)
    isEqual = _swig_new_instance_method(_OpenLxApp.Circle_isEqual)
    __getCasted__ = _swig_new_instance_method(_OpenLxApp.Circle___getCasted__)

    def __init__(self, *args):
        r"""
        __init__(Circle self, std::shared_ptr< OpenLxApp::Circle > other) -> Circle
        __init__(Circle self, Part::Circle * aObj) -> Circle
        __init__(Circle self, std::shared_ptr< OpenLxApp::Document > aDoc) -> Circle
        """
        if self.__class__ == Circle:
            _self = None
        else:
            _self = self
        _OpenLxApp.Circle_swiginit(self, _OpenLxApp.new_Circle(_self, *args))
    createIn = _swig_new_static_method(_OpenLxApp.Circle_createIn)
    createFrom = _swig_new_static_method(_OpenLxApp.Circle_createFrom)
    getRadius = _swig_new_instance_method(_OpenLxApp.Circle_getRadius)
    setRadius = _swig_new_instance_method(_OpenLxApp.Circle_setRadius)
    __swig_destroy__ = _OpenLxApp.delete_Circle
    def __disown__(self):
        self.this.disown()
        _OpenLxApp.disown_Circle(self)
        return weakref.proxy(self)

# Register Circle in _OpenLxApp:
_OpenLxApp.Circle_swigregister(Circle)
Circle_getEntityType_Static = _OpenLxApp.Circle_getEntityType_Static
Circle_createIn = _OpenLxApp.Circle_createIn
Circle_createFrom = _OpenLxApp.Circle_createFrom

class Ellipse(Conic):
    r"""Proxy of C++ OpenLxApp::Ellipse class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getEntityType_Static = _swig_new_static_method(_OpenLxApp.Ellipse_getEntityType_Static)
    assign = _swig_new_instance_method(_OpenLxApp.Ellipse_assign)
    isEqual = _swig_new_instance_method(_OpenLxApp.Ellipse_isEqual)
    __getCasted__ = _swig_new_instance_method(_OpenLxApp.Ellipse___getCasted__)

    def __init__(self, *args):
        r"""
        __init__(Ellipse self, std::shared_ptr< OpenLxApp::Ellipse > other) -> Ellipse
        __init__(Ellipse self, Part::Ellipse * aObj) -> Ellipse
        __init__(Ellipse self, std::shared_ptr< OpenLxApp::Document > aDoc) -> Ellipse
        """
        if self.__class__ == Ellipse:
            _self = None
        else:
            _self = self
        _OpenLxApp.Ellipse_swiginit(self, _OpenLxApp.new_Ellipse(_self, *args))
    createIn = _swig_new_static_method(_OpenLxApp.Ellipse_createIn)
    createFrom = _swig_new_static_method(_OpenLxApp.Ellipse_createFrom)
    getSemiAxis1 = _swig_new_instance_method(_OpenLxApp.Ellipse_getSemiAxis1)
    setSemiAxis1 = _swig_new_instance_method(_OpenLxApp.Ellipse_setSemiAxis1)
    getSemiAxis2 = _swig_new_instance_method(_OpenLxApp.Ellipse_getSemiAxis2)
    setSemiAxis2 = _swig_new_instance_method(_OpenLxApp.Ellipse_setSemiAxis2)
    __swig_destroy__ = _OpenLxApp.delete_Ellipse
    def __disown__(self):
        self.this.disown()
        _OpenLxApp.disown_Ellipse(self)
        return weakref.proxy(self)

# Register Ellipse in _OpenLxApp:
_OpenLxApp.Ellipse_swigregister(Ellipse)
Ellipse_getEntityType_Static = _OpenLxApp.Ellipse_getEntityType_Static
Ellipse_createIn = _OpenLxApp.Ellipse_createIn
Ellipse_createFrom = _OpenLxApp.Ellipse_createFrom

class RightCircularCylinder(Geometry):
    r"""Proxy of C++ OpenLxApp::RightCircularCylinder class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getEntityType_Static = _swig_new_static_method(_OpenLxApp.RightCircularCylinder_getEntityType_Static)
    assign = _swig_new_instance_method(_OpenLxApp.RightCircularCylinder_assign)
    isEqual = _swig_new_instance_method(_OpenLxApp.RightCircularCylinder_isEqual)
    __getCasted__ = _swig_new_instance_method(_OpenLxApp.RightCircularCylinder___getCasted__)

    def __init__(self, *args):
        r"""
        __init__(RightCircularCylinder self, std::shared_ptr< OpenLxApp::RightCircularCylinder > other) -> RightCircularCylinder
        __init__(RightCircularCylinder self, Part::Cylinder * aObj) -> RightCircularCylinder
        __init__(RightCircularCylinder self, std::shared_ptr< OpenLxApp::Document > aDoc) -> RightCircularCylinder
        """
        if self.__class__ == RightCircularCylinder:
            _self = None
        else:
            _self = self
        _OpenLxApp.RightCircularCylinder_swiginit(self, _OpenLxApp.new_RightCircularCylinder(_self, *args))
    createIn = _swig_new_static_method(_OpenLxApp.RightCircularCylinder_createIn)
    createFrom = _swig_new_static_method(_OpenLxApp.RightCircularCylinder_createFrom)
    getPosition = _swig_new_instance_method(_OpenLxApp.RightCircularCylinder_getPosition)
    setPosition = _swig_new_instance_method(_OpenLxApp.RightCircularCylinder_setPosition)
    getRadius = _swig_new_instance_method(_OpenLxApp.RightCircularCylinder_getRadius)
    setRadius = _swig_new_instance_method(_OpenLxApp.RightCircularCylinder_setRadius)
    getHeight = _swig_new_instance_method(_OpenLxApp.RightCircularCylinder_getHeight)
    setHeight = _swig_new_instance_method(_OpenLxApp.RightCircularCylinder_setHeight)
    __swig_destroy__ = _OpenLxApp.delete_RightCircularCylinder
    def __disown__(self):
        self.this.disown()
        _OpenLxApp.disown_RightCircularCylinder(self)
        return weakref.proxy(self)

# Register RightCircularCylinder in _OpenLxApp:
_OpenLxApp.RightCircularCylinder_swigregister(RightCircularCylinder)
RightCircularCylinder_getEntityType_Static = _OpenLxApp.RightCircularCylinder_getEntityType_Static
RightCircularCylinder_createIn = _OpenLxApp.RightCircularCylinder_createIn
RightCircularCylinder_createFrom = _OpenLxApp.RightCircularCylinder_createFrom

class RightCircularCone(Geometry):
    r"""Proxy of C++ OpenLxApp::RightCircularCone class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getEntityType_Static = _swig_new_static_method(_OpenLxApp.RightCircularCone_getEntityType_Static)
    assign = _swig_new_instance_method(_OpenLxApp.RightCircularCone_assign)
    isEqual = _swig_new_instance_method(_OpenLxApp.RightCircularCone_isEqual)
    __getCasted__ = _swig_new_instance_method(_OpenLxApp.RightCircularCone___getCasted__)

    def __init__(self, *args):
        r"""
        __init__(RightCircularCone self, std::shared_ptr< OpenLxApp::RightCircularCone > other) -> RightCircularCone
        __init__(RightCircularCone self, Part::Cone * aObj) -> RightCircularCone
        __init__(RightCircularCone self, std::shared_ptr< OpenLxApp::Document > aDoc) -> RightCircularCone
        """
        if self.__class__ == RightCircularCone:
            _self = None
        else:
            _self = self
        _OpenLxApp.RightCircularCone_swiginit(self, _OpenLxApp.new_RightCircularCone(_self, *args))
    createIn = _swig_new_static_method(_OpenLxApp.RightCircularCone_createIn)
    createFrom = _swig_new_static_method(_OpenLxApp.RightCircularCone_createFrom)
    getPosition = _swig_new_instance_method(_OpenLxApp.RightCircularCone_getPosition)
    setPosition = _swig_new_instance_method(_OpenLxApp.RightCircularCone_setPosition)
    getBottomRadius = _swig_new_instance_method(_OpenLxApp.RightCircularCone_getBottomRadius)
    setBottomRadius = _swig_new_instance_method(_OpenLxApp.RightCircularCone_setBottomRadius)
    getHeight = _swig_new_instance_method(_OpenLxApp.RightCircularCone_getHeight)
    setHeight = _swig_new_instance_method(_OpenLxApp.RightCircularCone_setHeight)
    __swig_destroy__ = _OpenLxApp.delete_RightCircularCone
    def __disown__(self):
        self.this.disown()
        _OpenLxApp.disown_RightCircularCone(self)
        return weakref.proxy(self)

# Register RightCircularCone in _OpenLxApp:
_OpenLxApp.RightCircularCone_swigregister(RightCircularCone)
RightCircularCone_getEntityType_Static = _OpenLxApp.RightCircularCone_getEntityType_Static
RightCircularCone_createIn = _OpenLxApp.RightCircularCone_createIn
RightCircularCone_createFrom = _OpenLxApp.RightCircularCone_createFrom

class Surface(Geometry):
    r"""Proxy of C++ OpenLxApp::Surface class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getEntityType_Static = _swig_new_static_method(_OpenLxApp.Surface_getEntityType_Static)
    assign = _swig_new_instance_method(_OpenLxApp.Surface_assign)
    isEqual = _swig_new_instance_method(_OpenLxApp.Surface_isEqual)
    __getCasted__ = _swig_new_instance_method(_OpenLxApp.Surface___getCasted__)
    __swig_destroy__ = _OpenLxApp.delete_Surface

    def __init__(self, *args):
        r"""
        __init__(Surface self, std::shared_ptr< OpenLxApp::Surface > other) -> Surface
        __init__(Surface self, Part::Surface * aObj) -> Surface
        __init__(Surface self) -> Surface
        """
        if self.__class__ == Surface:
            _self = None
        else:
            _self = self
        _OpenLxApp.Surface_swiginit(self, _OpenLxApp.new_Surface(_self, *args))
    def __disown__(self):
        self.this.disown()
        _OpenLxApp.disown_Surface(self)
        return weakref.proxy(self)

# Register Surface in _OpenLxApp:
_OpenLxApp.Surface_swigregister(Surface)
Surface_getEntityType_Static = _OpenLxApp.Surface_getEntityType_Static

class ElementarySurface(Surface):
    r"""Proxy of C++ OpenLxApp::ElementarySurface class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getEntityType_Static = _swig_new_static_method(_OpenLxApp.ElementarySurface_getEntityType_Static)
    assign = _swig_new_instance_method(_OpenLxApp.ElementarySurface_assign)
    isEqual = _swig_new_instance_method(_OpenLxApp.ElementarySurface_isEqual)
    __getCasted__ = _swig_new_instance_method(_OpenLxApp.ElementarySurface___getCasted__)
    __swig_destroy__ = _OpenLxApp.delete_ElementarySurface

    def __init__(self, *args):
        r"""
        __init__(ElementarySurface self, std::shared_ptr< OpenLxApp::ElementarySurface > other) -> ElementarySurface
        __init__(ElementarySurface self, Part::ElementarySurface * aObj) -> ElementarySurface
        __init__(ElementarySurface self) -> ElementarySurface
        """
        if self.__class__ == ElementarySurface:
            _self = None
        else:
            _self = self
        _OpenLxApp.ElementarySurface_swiginit(self, _OpenLxApp.new_ElementarySurface(_self, *args))
    def __disown__(self):
        self.this.disown()
        _OpenLxApp.disown_ElementarySurface(self)
        return weakref.proxy(self)

# Register ElementarySurface in _OpenLxApp:
_OpenLxApp.ElementarySurface_swigregister(ElementarySurface)
ElementarySurface_getEntityType_Static = _OpenLxApp.ElementarySurface_getEntityType_Static

class Plane(ElementarySurface):
    r"""Proxy of C++ OpenLxApp::Plane class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getEntityType_Static = _swig_new_static_method(_OpenLxApp.Plane_getEntityType_Static)
    assign = _swig_new_instance_method(_OpenLxApp.Plane_assign)
    isEqual = _swig_new_instance_method(_OpenLxApp.Plane_isEqual)
    __getCasted__ = _swig_new_instance_method(_OpenLxApp.Plane___getCasted__)

    def __init__(self, *args):
        r"""
        __init__(Plane self, std::shared_ptr< OpenLxApp::Plane > other) -> Plane
        __init__(Plane self, Part::Plane * aObj) -> Plane
        __init__(Plane self, std::shared_ptr< OpenLxApp::Document > aDoc) -> Plane
        """
        if self.__class__ == Plane:
            _self = None
        else:
            _self = self
        _OpenLxApp.Plane_swiginit(self, _OpenLxApp.new_Plane(_self, *args))
    createIn = _swig_new_static_method(_OpenLxApp.Plane_createIn)
    createFrom = _swig_new_static_method(_OpenLxApp.Plane_createFrom)
    getPosition = _swig_new_instance_method(_OpenLxApp.Plane_getPosition)
    setPosition = _swig_new_instance_method(_OpenLxApp.Plane_setPosition)
    __swig_destroy__ = _OpenLxApp.delete_Plane
    def __disown__(self):
        self.this.disown()
        _OpenLxApp.disown_Plane(self)
        return weakref.proxy(self)

# Register Plane in _OpenLxApp:
_OpenLxApp.Plane_swigregister(Plane)
Plane_getEntityType_Static = _OpenLxApp.Plane_getEntityType_Static
Plane_createIn = _OpenLxApp.Plane_createIn
Plane_createFrom = _OpenLxApp.Plane_createFrom

class BoundedSurface(Surface):
    r"""Proxy of C++ OpenLxApp::BoundedSurface class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getEntityType_Static = _swig_new_static_method(_OpenLxApp.BoundedSurface_getEntityType_Static)
    assign = _swig_new_instance_method(_OpenLxApp.BoundedSurface_assign)
    isEqual = _swig_new_instance_method(_OpenLxApp.BoundedSurface_isEqual)
    __getCasted__ = _swig_new_instance_method(_OpenLxApp.BoundedSurface___getCasted__)
    __swig_destroy__ = _OpenLxApp.delete_BoundedSurface

    def __init__(self, *args):
        r"""
        __init__(BoundedSurface self, std::shared_ptr< OpenLxApp::BoundedSurface > other) -> BoundedSurface
        __init__(BoundedSurface self, Part::BoundedSurface * aObj) -> BoundedSurface
        __init__(BoundedSurface self) -> BoundedSurface
        """
        if self.__class__ == BoundedSurface:
            _self = None
        else:
            _self = self
        _OpenLxApp.BoundedSurface_swiginit(self, _OpenLxApp.new_BoundedSurface(_self, *args))
    def __disown__(self):
        self.this.disown()
        _OpenLxApp.disown_BoundedSurface(self)
        return weakref.proxy(self)

# Register BoundedSurface in _OpenLxApp:
_OpenLxApp.BoundedSurface_swigregister(BoundedSurface)
BoundedSurface_getEntityType_Static = _OpenLxApp.BoundedSurface_getEntityType_Static

class CurveBoundedPlane(BoundedSurface):
    r"""Proxy of C++ OpenLxApp::CurveBoundedPlane class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getEntityType_Static = _swig_new_static_method(_OpenLxApp.CurveBoundedPlane_getEntityType_Static)
    assign = _swig_new_instance_method(_OpenLxApp.CurveBoundedPlane_assign)
    isEqual = _swig_new_instance_method(_OpenLxApp.CurveBoundedPlane_isEqual)
    __getCasted__ = _swig_new_instance_method(_OpenLxApp.CurveBoundedPlane___getCasted__)

    def __init__(self, *args):
        r"""
        __init__(CurveBoundedPlane self, std::shared_ptr< OpenLxApp::CurveBoundedPlane > other) -> CurveBoundedPlane
        __init__(CurveBoundedPlane self, Part::CurveBoundedSurface * aObj) -> CurveBoundedPlane
        __init__(CurveBoundedPlane self, std::shared_ptr< OpenLxApp::Document > aDoc) -> CurveBoundedPlane
        """
        if self.__class__ == CurveBoundedPlane:
            _self = None
        else:
            _self = self
        _OpenLxApp.CurveBoundedPlane_swiginit(self, _OpenLxApp.new_CurveBoundedPlane(_self, *args))
    createIn = _swig_new_static_method(_OpenLxApp.CurveBoundedPlane_createIn)
    createFrom = _swig_new_static_method(_OpenLxApp.CurveBoundedPlane_createFrom)
    __swig_destroy__ = _OpenLxApp.delete_CurveBoundedPlane
    setBasisSurface = _swig_new_instance_method(_OpenLxApp.CurveBoundedPlane_setBasisSurface)
    setOuterBoundary = _swig_new_instance_method(_OpenLxApp.CurveBoundedPlane_setOuterBoundary)
    setInnerBoundaries = _swig_new_instance_method(_OpenLxApp.CurveBoundedPlane_setInnerBoundaries)
    getBasisSurface = _swig_new_instance_method(_OpenLxApp.CurveBoundedPlane_getBasisSurface)
    getOuterBoundary = _swig_new_instance_method(_OpenLxApp.CurveBoundedPlane_getOuterBoundary)
    getInnerBoundaries = _swig_new_instance_method(_OpenLxApp.CurveBoundedPlane_getInnerBoundaries)
    def __disown__(self):
        self.this.disown()
        _OpenLxApp.disown_CurveBoundedPlane(self)
        return weakref.proxy(self)

# Register CurveBoundedPlane in _OpenLxApp:
_OpenLxApp.CurveBoundedPlane_swigregister(CurveBoundedPlane)
CurveBoundedPlane_getEntityType_Static = _OpenLxApp.CurveBoundedPlane_getEntityType_Static
CurveBoundedPlane_createIn = _OpenLxApp.CurveBoundedPlane_createIn
CurveBoundedPlane_createFrom = _OpenLxApp.CurveBoundedPlane_createFrom

class ExtrudedAreaSolid(Geometry):
    r"""Proxy of C++ OpenLxApp::ExtrudedAreaSolid class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getEntityType_Static = _swig_new_static_method(_OpenLxApp.ExtrudedAreaSolid_getEntityType_Static)
    assign = _swig_new_instance_method(_OpenLxApp.ExtrudedAreaSolid_assign)
    isEqual = _swig_new_instance_method(_OpenLxApp.ExtrudedAreaSolid_isEqual)
    __getCasted__ = _swig_new_instance_method(_OpenLxApp.ExtrudedAreaSolid___getCasted__)

    def __init__(self, *args):
        r"""
        __init__(ExtrudedAreaSolid self, std::shared_ptr< OpenLxApp::ExtrudedAreaSolid > other) -> ExtrudedAreaSolid
        __init__(ExtrudedAreaSolid self, Part::ExtrudedAreaSolid * aObj) -> ExtrudedAreaSolid
        __init__(ExtrudedAreaSolid self, std::shared_ptr< OpenLxApp::Document > aDoc) -> ExtrudedAreaSolid
        """
        if self.__class__ == ExtrudedAreaSolid:
            _self = None
        else:
            _self = self
        _OpenLxApp.ExtrudedAreaSolid_swiginit(self, _OpenLxApp.new_ExtrudedAreaSolid(_self, *args))
    createIn = _swig_new_static_method(_OpenLxApp.ExtrudedAreaSolid_createIn)
    createFrom = _swig_new_static_method(_OpenLxApp.ExtrudedAreaSolid_createFrom)
    getPosition = _swig_new_instance_method(_OpenLxApp.ExtrudedAreaSolid_getPosition)
    setPosition = _swig_new_instance_method(_OpenLxApp.ExtrudedAreaSolid_setPosition)
    getExtrudedDirection = _swig_new_instance_method(_OpenLxApp.ExtrudedAreaSolid_getExtrudedDirection)
    setExtrudedDirection = _swig_new_instance_method(_OpenLxApp.ExtrudedAreaSolid_setExtrudedDirection)
    getDepth = _swig_new_instance_method(_OpenLxApp.ExtrudedAreaSolid_getDepth)
    setDepth = _swig_new_instance_method(_OpenLxApp.ExtrudedAreaSolid_setDepth)
    __swig_destroy__ = _OpenLxApp.delete_ExtrudedAreaSolid
    setSweptArea = _swig_new_instance_method(_OpenLxApp.ExtrudedAreaSolid_setSweptArea)
    getSweptArea = _swig_new_instance_method(_OpenLxApp.ExtrudedAreaSolid_getSweptArea)
    def __disown__(self):
        self.this.disown()
        _OpenLxApp.disown_ExtrudedAreaSolid(self)
        return weakref.proxy(self)

# Register ExtrudedAreaSolid in _OpenLxApp:
_OpenLxApp.ExtrudedAreaSolid_swigregister(ExtrudedAreaSolid)
ExtrudedAreaSolid_getEntityType_Static = _OpenLxApp.ExtrudedAreaSolid_getEntityType_Static
ExtrudedAreaSolid_createIn = _OpenLxApp.ExtrudedAreaSolid_createIn
ExtrudedAreaSolid_createFrom = _OpenLxApp.ExtrudedAreaSolid_createFrom

class FaceBasedSurfaceModel(Geometry):
    r"""Proxy of C++ OpenLxApp::FaceBasedSurfaceModel class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getEntityType_Static = _swig_new_static_method(_OpenLxApp.FaceBasedSurfaceModel_getEntityType_Static)
    assign = _swig_new_instance_method(_OpenLxApp.FaceBasedSurfaceModel_assign)
    isEqual = _swig_new_instance_method(_OpenLxApp.FaceBasedSurfaceModel_isEqual)
    __getCasted__ = _swig_new_instance_method(_OpenLxApp.FaceBasedSurfaceModel___getCasted__)

    def __init__(self, *args):
        r"""
        __init__(FaceBasedSurfaceModel self, std::shared_ptr< OpenLxApp::FaceBasedSurfaceModel > other) -> FaceBasedSurfaceModel
        __init__(FaceBasedSurfaceModel self, Part::FaceBasedSurfaceModel * aObj) -> FaceBasedSurfaceModel
        __init__(FaceBasedSurfaceModel self, std::shared_ptr< OpenLxApp::Document > aDoc) -> FaceBasedSurfaceModel
        """
        if self.__class__ == FaceBasedSurfaceModel:
            _self = None
        else:
            _self = self
        _OpenLxApp.FaceBasedSurfaceModel_swiginit(self, _OpenLxApp.new_FaceBasedSurfaceModel(_self, *args))
    createIn = _swig_new_static_method(_OpenLxApp.FaceBasedSurfaceModel_createIn)
    createFrom = _swig_new_static_method(_OpenLxApp.FaceBasedSurfaceModel_createFrom)
    getFbsmFaces = _swig_new_instance_method(_OpenLxApp.FaceBasedSurfaceModel_getFbsmFaces)
    setFbsmFaces = _swig_new_instance_method(_OpenLxApp.FaceBasedSurfaceModel_setFbsmFaces)
    __swig_destroy__ = _OpenLxApp.delete_FaceBasedSurfaceModel
    def __disown__(self):
        self.this.disown()
        _OpenLxApp.disown_FaceBasedSurfaceModel(self)
        return weakref.proxy(self)

# Register FaceBasedSurfaceModel in _OpenLxApp:
_OpenLxApp.FaceBasedSurfaceModel_swigregister(FaceBasedSurfaceModel)
FaceBasedSurfaceModel_getEntityType_Static = _OpenLxApp.FaceBasedSurfaceModel_getEntityType_Static
FaceBasedSurfaceModel_createIn = _OpenLxApp.FaceBasedSurfaceModel_createIn
FaceBasedSurfaceModel_createFrom = _OpenLxApp.FaceBasedSurfaceModel_createFrom

class ShellBasedSurfaceModel(Geometry):
    r"""Proxy of C++ OpenLxApp::ShellBasedSurfaceModel class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getEntityType_Static = _swig_new_static_method(_OpenLxApp.ShellBasedSurfaceModel_getEntityType_Static)
    assign = _swig_new_instance_method(_OpenLxApp.ShellBasedSurfaceModel_assign)
    isEqual = _swig_new_instance_method(_OpenLxApp.ShellBasedSurfaceModel_isEqual)
    __getCasted__ = _swig_new_instance_method(_OpenLxApp.ShellBasedSurfaceModel___getCasted__)

    def __init__(self, *args):
        r"""
        __init__(ShellBasedSurfaceModel self, std::shared_ptr< OpenLxApp::ShellBasedSurfaceModel > other) -> ShellBasedSurfaceModel
        __init__(ShellBasedSurfaceModel self, Part::ShellBasedSurfaceModel * aObj) -> ShellBasedSurfaceModel
        __init__(ShellBasedSurfaceModel self, std::shared_ptr< OpenLxApp::Document > aDoc) -> ShellBasedSurfaceModel
        """
        if self.__class__ == ShellBasedSurfaceModel:
            _self = None
        else:
            _self = self
        _OpenLxApp.ShellBasedSurfaceModel_swiginit(self, _OpenLxApp.new_ShellBasedSurfaceModel(_self, *args))
    createIn = _swig_new_static_method(_OpenLxApp.ShellBasedSurfaceModel_createIn)
    createFrom = _swig_new_static_method(_OpenLxApp.ShellBasedSurfaceModel_createFrom)
    getSbsmBoundary = _swig_new_instance_method(_OpenLxApp.ShellBasedSurfaceModel_getSbsmBoundary)
    setSbsmBoundary = _swig_new_instance_method(_OpenLxApp.ShellBasedSurfaceModel_setSbsmBoundary)
    __swig_destroy__ = _OpenLxApp.delete_ShellBasedSurfaceModel
    def __disown__(self):
        self.this.disown()
        _OpenLxApp.disown_ShellBasedSurfaceModel(self)
        return weakref.proxy(self)

# Register ShellBasedSurfaceModel in _OpenLxApp:
_OpenLxApp.ShellBasedSurfaceModel_swigregister(ShellBasedSurfaceModel)
ShellBasedSurfaceModel_getEntityType_Static = _OpenLxApp.ShellBasedSurfaceModel_getEntityType_Static
ShellBasedSurfaceModel_createIn = _OpenLxApp.ShellBasedSurfaceModel_createIn
ShellBasedSurfaceModel_createFrom = _OpenLxApp.ShellBasedSurfaceModel_createFrom

class FacetedBrep(Geometry):
    r"""Proxy of C++ OpenLxApp::FacetedBrep class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getEntityType_Static = _swig_new_static_method(_OpenLxApp.FacetedBrep_getEntityType_Static)
    assign = _swig_new_instance_method(_OpenLxApp.FacetedBrep_assign)
    isEqual = _swig_new_instance_method(_OpenLxApp.FacetedBrep_isEqual)
    __getCasted__ = _swig_new_instance_method(_OpenLxApp.FacetedBrep___getCasted__)

    def __init__(self, *args):
        r"""
        __init__(FacetedBrep self, std::shared_ptr< OpenLxApp::FacetedBrep > other) -> FacetedBrep
        __init__(FacetedBrep self, Part::FacetedBrep * aObj) -> FacetedBrep
        __init__(FacetedBrep self, std::shared_ptr< OpenLxApp::Document > aDoc) -> FacetedBrep
        """
        if self.__class__ == FacetedBrep:
            _self = None
        else:
            _self = self
        _OpenLxApp.FacetedBrep_swiginit(self, _OpenLxApp.new_FacetedBrep(_self, *args))
    createIn = _swig_new_static_method(_OpenLxApp.FacetedBrep_createIn)
    createFrom = _swig_new_static_method(_OpenLxApp.FacetedBrep_createFrom)
    getModel = _swig_new_instance_method(_OpenLxApp.FacetedBrep_getModel)
    setModel = _swig_new_instance_method(_OpenLxApp.FacetedBrep_setModel)
    getPoints = _swig_new_instance_method(_OpenLxApp.FacetedBrep_getPoints)
    setPoints = _swig_new_instance_method(_OpenLxApp.FacetedBrep_setPoints)
    __swig_destroy__ = _OpenLxApp.delete_FacetedBrep
    setShape = _swig_new_instance_method(_OpenLxApp.FacetedBrep_setShape)
    def __disown__(self):
        self.this.disown()
        _OpenLxApp.disown_FacetedBrep(self)
        return weakref.proxy(self)

# Register FacetedBrep in _OpenLxApp:
_OpenLxApp.FacetedBrep_swigregister(FacetedBrep)
FacetedBrep_getEntityType_Static = _OpenLxApp.FacetedBrep_getEntityType_Static
FacetedBrep_createIn = _OpenLxApp.FacetedBrep_createIn
FacetedBrep_createFrom = _OpenLxApp.FacetedBrep_createFrom

class AdvancedBrep(Geometry):
    r"""Proxy of C++ OpenLxApp::AdvancedBrep class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getEntityType_Static = _swig_new_static_method(_OpenLxApp.AdvancedBrep_getEntityType_Static)
    assign = _swig_new_instance_method(_OpenLxApp.AdvancedBrep_assign)
    isEqual = _swig_new_instance_method(_OpenLxApp.AdvancedBrep_isEqual)
    __getCasted__ = _swig_new_instance_method(_OpenLxApp.AdvancedBrep___getCasted__)

    def __init__(self, *args):
        r"""
        __init__(AdvancedBrep self, std::shared_ptr< OpenLxApp::AdvancedBrep > other) -> AdvancedBrep
        __init__(AdvancedBrep self, Part::AdvancedBrep * aObj) -> AdvancedBrep
        __init__(AdvancedBrep self, std::shared_ptr< OpenLxApp::Document > aDoc) -> AdvancedBrep
        """
        if self.__class__ == AdvancedBrep:
            _self = None
        else:
            _self = self
        _OpenLxApp.AdvancedBrep_swiginit(self, _OpenLxApp.new_AdvancedBrep(_self, *args))
    createIn = _swig_new_static_method(_OpenLxApp.AdvancedBrep_createIn)
    createFrom = _swig_new_static_method(_OpenLxApp.AdvancedBrep_createFrom)
    __swig_destroy__ = _OpenLxApp.delete_AdvancedBrep
    setShape = _swig_new_instance_method(_OpenLxApp.AdvancedBrep_setShape)
    def __disown__(self):
        self.this.disown()
        _OpenLxApp.disown_AdvancedBrep(self)
        return weakref.proxy(self)

# Register AdvancedBrep in _OpenLxApp:
_OpenLxApp.AdvancedBrep_swigregister(AdvancedBrep)
AdvancedBrep_getEntityType_Static = _OpenLxApp.AdvancedBrep_getEntityType_Static
AdvancedBrep_createIn = _OpenLxApp.AdvancedBrep_createIn
AdvancedBrep_createFrom = _OpenLxApp.AdvancedBrep_createFrom

class GeometryProxy(Geometry):
    r"""Proxy of C++ OpenLxApp::GeometryProxy class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getEntityType_Static = _swig_new_static_method(_OpenLxApp.GeometryProxy_getEntityType_Static)
    assign = _swig_new_instance_method(_OpenLxApp.GeometryProxy_assign)
    isEqual = _swig_new_instance_method(_OpenLxApp.GeometryProxy_isEqual)

    def __init__(self, *args):
        r"""
        __init__(GeometryProxy self, std::shared_ptr< OpenLxApp::GeometryProxy > other) -> GeometryProxy
        __init__(GeometryProxy self, App::Geometry * aObj) -> GeometryProxy
        """
        if self.__class__ == GeometryProxy:
            _self = None
        else:
            _self = self
        _OpenLxApp.GeometryProxy_swiginit(self, _OpenLxApp.new_GeometryProxy(_self, *args))
    __getCasted__ = _swig_new_instance_method(_OpenLxApp.GeometryProxy___getCasted__)
    __swig_destroy__ = _OpenLxApp.delete_GeometryProxy
    def __disown__(self):
        self.this.disown()
        _OpenLxApp.disown_GeometryProxy(self)
        return weakref.proxy(self)

# Register GeometryProxy in _OpenLxApp:
_OpenLxApp.GeometryProxy_swigregister(GeometryProxy)
GeometryProxy_getEntityType_Static = _OpenLxApp.GeometryProxy_getEntityType_Static

class InventorImport(Geometry):
    r"""Proxy of C++ OpenLxApp::InventorImport class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getEntityType_Static = _swig_new_static_method(_OpenLxApp.InventorImport_getEntityType_Static)
    assign = _swig_new_instance_method(_OpenLxApp.InventorImport_assign)
    isEqual = _swig_new_instance_method(_OpenLxApp.InventorImport_isEqual)
    __getCasted__ = _swig_new_instance_method(_OpenLxApp.InventorImport___getCasted__)

    def __init__(self, *args):
        r"""
        __init__(InventorImport self, std::shared_ptr< OpenLxApp::InventorImport > other) -> InventorImport
        __init__(InventorImport self, Mesh::InventorImport * aObj) -> InventorImport
        __init__(InventorImport self, std::shared_ptr< OpenLxApp::Document > aDoc) -> InventorImport
        """
        if self.__class__ == InventorImport:
            _self = None
        else:
            _self = self
        _OpenLxApp.InventorImport_swiginit(self, _OpenLxApp.new_InventorImport(_self, *args))
    createIn = _swig_new_static_method(_OpenLxApp.InventorImport_createIn)
    createFrom = _swig_new_static_method(_OpenLxApp.InventorImport_createFrom)
    getTransform = _swig_new_instance_method(_OpenLxApp.InventorImport_getTransform)
    setTransform = _swig_new_instance_method(_OpenLxApp.InventorImport_setTransform)
    __swig_destroy__ = _OpenLxApp.delete_InventorImport
    setMesh = _swig_new_instance_method(_OpenLxApp.InventorImport_setMesh)
    getMesh = _swig_new_instance_method(_OpenLxApp.InventorImport_getMesh)
    def __disown__(self):
        self.this.disown()
        _OpenLxApp.disown_InventorImport(self)
        return weakref.proxy(self)

# Register InventorImport in _OpenLxApp:
_OpenLxApp.InventorImport_swigregister(InventorImport)
InventorImport_getEntityType_Static = _OpenLxApp.InventorImport_getEntityType_Static
InventorImport_createIn = _OpenLxApp.InventorImport_createIn
InventorImport_createFrom = _OpenLxApp.InventorImport_createFrom

class PolygonMesh(Geometry):
    r"""Proxy of C++ OpenLxApp::PolygonMesh class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getEntityType_Static = _swig_new_static_method(_OpenLxApp.PolygonMesh_getEntityType_Static)
    assign = _swig_new_instance_method(_OpenLxApp.PolygonMesh_assign)
    isEqual = _swig_new_instance_method(_OpenLxApp.PolygonMesh_isEqual)
    __getCasted__ = _swig_new_instance_method(_OpenLxApp.PolygonMesh___getCasted__)

    def __init__(self, *args):
        r"""
        __init__(PolygonMesh self, std::shared_ptr< OpenLxApp::PolygonMesh > other) -> PolygonMesh
        __init__(PolygonMesh self, Mesh::PolygonMesh * aObj) -> PolygonMesh
        __init__(PolygonMesh self, std::shared_ptr< OpenLxApp::Document > aDoc) -> PolygonMesh
        """
        if self.__class__ == PolygonMesh:
            _self = None
        else:
            _self = self
        _OpenLxApp.PolygonMesh_swiginit(self, _OpenLxApp.new_PolygonMesh(_self, *args))
    createIn = _swig_new_static_method(_OpenLxApp.PolygonMesh_createIn)
    createFrom = _swig_new_static_method(_OpenLxApp.PolygonMesh_createFrom)
    getPolygons = _swig_new_instance_method(_OpenLxApp.PolygonMesh_getPolygons)
    setPolygons = _swig_new_instance_method(_OpenLxApp.PolygonMesh_setPolygons)
    getPoints = _swig_new_instance_method(_OpenLxApp.PolygonMesh_getPoints)
    setPoints = _swig_new_instance_method(_OpenLxApp.PolygonMesh_setPoints)
    __swig_destroy__ = _OpenLxApp.delete_PolygonMesh
    setMesh = _swig_new_instance_method(_OpenLxApp.PolygonMesh_setMesh)
    getMesh = _swig_new_instance_method(_OpenLxApp.PolygonMesh_getMesh)
    def __disown__(self):
        self.this.disown()
        _OpenLxApp.disown_PolygonMesh(self)
        return weakref.proxy(self)

# Register PolygonMesh in _OpenLxApp:
_OpenLxApp.PolygonMesh_swigregister(PolygonMesh)
PolygonMesh_getEntityType_Static = _OpenLxApp.PolygonMesh_getEntityType_Static
PolygonMesh_createIn = _OpenLxApp.PolygonMesh_createIn
PolygonMesh_createFrom = _OpenLxApp.PolygonMesh_createFrom

class SweptDiskSolid(Geometry):
    r"""Proxy of C++ OpenLxApp::SweptDiskSolid class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getEntityType_Static = _swig_new_static_method(_OpenLxApp.SweptDiskSolid_getEntityType_Static)
    assign = _swig_new_instance_method(_OpenLxApp.SweptDiskSolid_assign)
    isEqual = _swig_new_instance_method(_OpenLxApp.SweptDiskSolid_isEqual)
    __getCasted__ = _swig_new_instance_method(_OpenLxApp.SweptDiskSolid___getCasted__)

    def __init__(self, *args):
        r"""
        __init__(SweptDiskSolid self, std::shared_ptr< OpenLxApp::SweptDiskSolid > other) -> SweptDiskSolid
        __init__(SweptDiskSolid self, Part::SweptDiskSolid * aObj) -> SweptDiskSolid
        __init__(SweptDiskSolid self, std::shared_ptr< OpenLxApp::Document > aDoc) -> SweptDiskSolid
        """
        if self.__class__ == SweptDiskSolid:
            _self = None
        else:
            _self = self
        _OpenLxApp.SweptDiskSolid_swiginit(self, _OpenLxApp.new_SweptDiskSolid(_self, *args))
    createIn = _swig_new_static_method(_OpenLxApp.SweptDiskSolid_createIn)
    createFrom = _swig_new_static_method(_OpenLxApp.SweptDiskSolid_createFrom)
    getRadius = _swig_new_instance_method(_OpenLxApp.SweptDiskSolid_getRadius)
    setRadius = _swig_new_instance_method(_OpenLxApp.SweptDiskSolid_setRadius)
    __swig_destroy__ = _OpenLxApp.delete_SweptDiskSolid
    setDirectrix = _swig_new_instance_method(_OpenLxApp.SweptDiskSolid_setDirectrix)
    getDirectrix = _swig_new_instance_method(_OpenLxApp.SweptDiskSolid_getDirectrix)
    def __disown__(self):
        self.this.disown()
        _OpenLxApp.disown_SweptDiskSolid(self)
        return weakref.proxy(self)

# Register SweptDiskSolid in _OpenLxApp:
_OpenLxApp.SweptDiskSolid_swigregister(SweptDiskSolid)
SweptDiskSolid_getEntityType_Static = _OpenLxApp.SweptDiskSolid_getEntityType_Static
SweptDiskSolid_createIn = _OpenLxApp.SweptDiskSolid_createIn
SweptDiskSolid_createFrom = _OpenLxApp.SweptDiskSolid_createFrom

class Sphere(Geometry):
    r"""Proxy of C++ OpenLxApp::Sphere class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getEntityType_Static = _swig_new_static_method(_OpenLxApp.Sphere_getEntityType_Static)
    assign = _swig_new_instance_method(_OpenLxApp.Sphere_assign)
    isEqual = _swig_new_instance_method(_OpenLxApp.Sphere_isEqual)
    __getCasted__ = _swig_new_instance_method(_OpenLxApp.Sphere___getCasted__)

    def __init__(self, *args):
        r"""
        __init__(Sphere self, std::shared_ptr< OpenLxApp::Sphere > other) -> Sphere
        __init__(Sphere self, Part::Sphere * aObj) -> Sphere
        __init__(Sphere self, std::shared_ptr< OpenLxApp::Document > aDoc) -> Sphere
        """
        if self.__class__ == Sphere:
            _self = None
        else:
            _self = self
        _OpenLxApp.Sphere_swiginit(self, _OpenLxApp.new_Sphere(_self, *args))
    createIn = _swig_new_static_method(_OpenLxApp.Sphere_createIn)
    createFrom = _swig_new_static_method(_OpenLxApp.Sphere_createFrom)
    getPosition = _swig_new_instance_method(_OpenLxApp.Sphere_getPosition)
    setPosition = _swig_new_instance_method(_OpenLxApp.Sphere_setPosition)
    getRadius = _swig_new_instance_method(_OpenLxApp.Sphere_getRadius)
    setRadius = _swig_new_instance_method(_OpenLxApp.Sphere_setRadius)
    __swig_destroy__ = _OpenLxApp.delete_Sphere
    def __disown__(self):
        self.this.disown()
        _OpenLxApp.disown_Sphere(self)
        return weakref.proxy(self)

# Register Sphere in _OpenLxApp:
_OpenLxApp.Sphere_swigregister(Sphere)
Sphere_getEntityType_Static = _OpenLxApp.Sphere_getEntityType_Static
Sphere_createIn = _OpenLxApp.Sphere_createIn
Sphere_createFrom = _OpenLxApp.Sphere_createFrom

class Group(DocObject):
    r"""Proxy of C++ OpenLxApp::Group class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getEntityType_Static = _swig_new_static_method(_OpenLxApp.Group_getEntityType_Static)
    assign = _swig_new_instance_method(_OpenLxApp.Group_assign)
    isEqual = _swig_new_instance_method(_OpenLxApp.Group_isEqual)
    __getCasted__ = _swig_new_instance_method(_OpenLxApp.Group___getCasted__)

    def __init__(self, *args):
        r"""
        __init__(Group self, std::shared_ptr< OpenLxApp::Group > other) -> Group
        __init__(Group self, App::Group * aObj) -> Group
        __init__(Group self, std::shared_ptr< OpenLxApp::Document > aDoc) -> Group
        """
        if self.__class__ == Group:
            _self = None
        else:
            _self = self
        _OpenLxApp.Group_swiginit(self, _OpenLxApp.new_Group(_self, *args))
    createIn = _swig_new_static_method(_OpenLxApp.Group_createIn)
    createFrom = _swig_new_static_method(_OpenLxApp.Group_createFrom)
    addElement = _swig_new_instance_method(_OpenLxApp.Group_addElement)
    addGroup = _swig_new_instance_method(_OpenLxApp.Group_addGroup)
    removeElement = _swig_new_instance_method(_OpenLxApp.Group_removeElement)
    removeGroup = _swig_new_instance_method(_OpenLxApp.Group_removeGroup)
    getTopGroup = _swig_new_instance_method(_OpenLxApp.Group_getTopGroup)
    getParentGroup = _swig_new_instance_method(_OpenLxApp.Group_getParentGroup)
    getAllElements = _swig_new_instance_method(_OpenLxApp.Group_getAllElements)
    getChildren = _swig_new_instance_method(_OpenLxApp.Group_getChildren)
    __swig_destroy__ = _OpenLxApp.delete_Group
    def __disown__(self):
        self.this.disown()
        _OpenLxApp.disown_Group(self)
        return weakref.proxy(self)

# Register Group in _OpenLxApp:
_OpenLxApp.Group_swigregister(Group)
Group_getEntityType_Static = _OpenLxApp.Group_getEntityType_Static
Group_createIn = _OpenLxApp.Group_createIn
Group_createFrom = _OpenLxApp.Group_createFrom

class Layer(DocObject):
    r"""Proxy of C++ OpenLxApp::Layer class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getEntityType_Static = _swig_new_static_method(_OpenLxApp.Layer_getEntityType_Static)
    assign = _swig_new_instance_method(_OpenLxApp.Layer_assign)
    isEqual = _swig_new_instance_method(_OpenLxApp.Layer_isEqual)
    __getCasted__ = _swig_new_instance_method(_OpenLxApp.Layer___getCasted__)
    createIn = _swig_new_static_method(_OpenLxApp.Layer_createIn)
    createFrom = _swig_new_static_method(_OpenLxApp.Layer_createFrom)
    __swig_destroy__ = _OpenLxApp.delete_Layer
    getName = _swig_new_instance_method(_OpenLxApp.Layer_getName)
    getNumber = _swig_new_instance_method(_OpenLxApp.Layer_getNumber)
    isEmpty = _swig_new_instance_method(_OpenLxApp.Layer_isEmpty)
    getElementCount = _swig_new_instance_method(_OpenLxApp.Layer_getElementCount)
    removeAllElements = _swig_new_instance_method(_OpenLxApp.Layer_removeAllElements)
    addElement = _swig_new_instance_method(_OpenLxApp.Layer_addElement)
    removeElement = _swig_new_instance_method(_OpenLxApp.Layer_removeElement)
    containsElement = _swig_new_instance_method(_OpenLxApp.Layer_containsElement)
    getElements = _swig_new_instance_method(_OpenLxApp.Layer_getElements)
    setVisible = _swig_new_instance_method(_OpenLxApp.Layer_setVisible)

    def __init__(self, *args):
        r"""
        __init__(Layer self, std::shared_ptr< OpenLxApp::Layer > other) -> Layer
        __init__(Layer self, App::Layer * aObj) -> Layer
        __init__(Layer self, std::shared_ptr< OpenLxApp::Document > aDoc) -> Layer
        __init__(Layer self) -> Layer
        """
        if self.__class__ == Layer:
            _self = None
        else:
            _self = self
        _OpenLxApp.Layer_swiginit(self, _OpenLxApp.new_Layer(_self, *args))
    def __disown__(self):
        self.this.disown()
        _OpenLxApp.disown_Layer(self)
        return weakref.proxy(self)

# Register Layer in _OpenLxApp:
_OpenLxApp.Layer_swigregister(Layer)
Layer_getEntityType_Static = _OpenLxApp.Layer_getEntityType_Static
Layer_createIn = _OpenLxApp.Layer_createIn
Layer_createFrom = _OpenLxApp.Layer_createFrom

class LayerIfc(Layer):
    r"""Proxy of C++ OpenLxApp::LayerIfc class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getEntityType_Static = _swig_new_static_method(_OpenLxApp.LayerIfc_getEntityType_Static)
    assign = _swig_new_instance_method(_OpenLxApp.LayerIfc_assign)
    isEqual = _swig_new_instance_method(_OpenLxApp.LayerIfc_isEqual)
    __getCasted__ = _swig_new_instance_method(_OpenLxApp.LayerIfc___getCasted__)
    createIn = _swig_new_static_method(_OpenLxApp.LayerIfc_createIn)
    createFrom = _swig_new_static_method(_OpenLxApp.LayerIfc_createFrom)
    __swig_destroy__ = _OpenLxApp.delete_LayerIfc

    def __init__(self, *args):
        r"""
        __init__(LayerIfc self, std::shared_ptr< OpenLxApp::LayerIfc > other) -> LayerIfc
        __init__(LayerIfc self, App::LayerIFC * aObj) -> LayerIfc
        __init__(LayerIfc self, std::shared_ptr< OpenLxApp::Document > aDoc) -> LayerIfc
        __init__(LayerIfc self) -> LayerIfc
        """
        if self.__class__ == LayerIfc:
            _self = None
        else:
            _self = self
        _OpenLxApp.LayerIfc_swiginit(self, _OpenLxApp.new_LayerIfc(_self, *args))
    def __disown__(self):
        self.this.disown()
        _OpenLxApp.disown_LayerIfc(self)
        return weakref.proxy(self)

# Register LayerIfc in _OpenLxApp:
_OpenLxApp.LayerIfc_swigregister(LayerIfc)
LayerIfc_getEntityType_Static = _OpenLxApp.LayerIfc_getEntityType_Static
LayerIfc_createIn = _OpenLxApp.LayerIfc_createIn
LayerIfc_createFrom = _OpenLxApp.LayerIfc_createFrom

class SingleLineText2d(Geometry):
    r"""Proxy of C++ OpenLxApp::SingleLineText2d class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getEntityType_Static = _swig_new_static_method(_OpenLxApp.SingleLineText2d_getEntityType_Static)
    assign = _swig_new_instance_method(_OpenLxApp.SingleLineText2d_assign)
    isEqual = _swig_new_instance_method(_OpenLxApp.SingleLineText2d_isEqual)
    __getCasted__ = _swig_new_instance_method(_OpenLxApp.SingleLineText2d___getCasted__)

    def __init__(self, *args):
        r"""
        __init__(SingleLineText2d self, std::shared_ptr< OpenLxApp::SingleLineText2d > other) -> SingleLineText2d
        __init__(SingleLineText2d self, Mesh::SingleLineText2d * aObj) -> SingleLineText2d
        __init__(SingleLineText2d self, std::shared_ptr< OpenLxApp::Document > aDoc) -> SingleLineText2d
        """
        if self.__class__ == SingleLineText2d:
            _self = None
        else:
            _self = self
        _OpenLxApp.SingleLineText2d_swiginit(self, _OpenLxApp.new_SingleLineText2d(_self, *args))
    createIn = _swig_new_static_method(_OpenLxApp.SingleLineText2d_createIn)
    createFrom = _swig_new_static_method(_OpenLxApp.SingleLineText2d_createFrom)
    getText = _swig_new_instance_method(_OpenLxApp.SingleLineText2d_getText)
    getTextStyle = _swig_new_instance_method(_OpenLxApp.SingleLineText2d_getTextStyle)
    setTextStyle = _swig_new_instance_method(_OpenLxApp.SingleLineText2d_setTextStyle)
    setColor = _swig_new_instance_method(_OpenLxApp.SingleLineText2d_setColor)
    setFontBold = _swig_new_instance_method(_OpenLxApp.SingleLineText2d_setFontBold)
    setFontItalic = _swig_new_instance_method(_OpenLxApp.SingleLineText2d_setFontItalic)
    setFontName = _swig_new_instance_method(_OpenLxApp.SingleLineText2d_setFontName)
    setFontSize = _swig_new_instance_method(_OpenLxApp.SingleLineText2d_setFontSize)
    setFontStretch = _swig_new_instance_method(_OpenLxApp.SingleLineText2d_setFontStretch)
    setScale = _swig_new_instance_method(_OpenLxApp.SingleLineText2d_setScale)
    setText = _swig_new_instance_method(_OpenLxApp.SingleLineText2d_setText)
    __swig_destroy__ = _OpenLxApp.delete_SingleLineText2d
    def __disown__(self):
        self.this.disown()
        _OpenLxApp.disown_SingleLineText2d(self)
        return weakref.proxy(self)

# Register SingleLineText2d in _OpenLxApp:
_OpenLxApp.SingleLineText2d_swigregister(SingleLineText2d)
SingleLineText2d_getEntityType_Static = _OpenLxApp.SingleLineText2d_getEntityType_Static
SingleLineText2d_createIn = _OpenLxApp.SingleLineText2d_createIn
SingleLineText2d_createFrom = _OpenLxApp.SingleLineText2d_createFrom

class Root(DocObject):
    r"""Proxy of C++ OpenLxApp::Root class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getEntityType_Static = _swig_new_static_method(_OpenLxApp.Root_getEntityType_Static)
    assign = _swig_new_instance_method(_OpenLxApp.Root_assign)
    isEqual = _swig_new_instance_method(_OpenLxApp.Root_isEqual)
    __getCasted__ = _swig_new_instance_method(_OpenLxApp.Root___getCasted__)
    getGlobalId = _swig_new_instance_method(_OpenLxApp.Root_getGlobalId)
    setGlobalId = _swig_new_instance_method(_OpenLxApp.Root_setGlobalId)
    getId = _swig_new_instance_method(_OpenLxApp.Root_getId)
    setUserName = _swig_new_instance_method(_OpenLxApp.Root_setUserName)
    getUserName = _swig_new_instance_method(_OpenLxApp.Root_getUserName)
    __swig_destroy__ = _OpenLxApp.delete_Root

    def __init__(self, *args):
        r"""
        __init__(Root self, std::shared_ptr< OpenLxApp::Root > other) -> Root
        __init__(Root self, App::Root * aObj) -> Root
        __init__(Root self) -> Root
        """
        if self.__class__ == Root:
            _self = None
        else:
            _self = self
        _OpenLxApp.Root_swiginit(self, _OpenLxApp.new_Root(_self, *args))
    def __disown__(self):
        self.this.disown()
        _OpenLxApp.disown_Root(self)
        return weakref.proxy(self)

# Register Root in _OpenLxApp:
_OpenLxApp.Root_swigregister(Root)
Root_getEntityType_Static = _OpenLxApp.Root_getEntityType_Static

class ObjectDefinition(Root):
    r"""Proxy of C++ OpenLxApp::ObjectDefinition class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getEntityType_Static = _swig_new_static_method(_OpenLxApp.ObjectDefinition_getEntityType_Static)
    assign = _swig_new_instance_method(_OpenLxApp.ObjectDefinition_assign)
    isEqual = _swig_new_instance_method(_OpenLxApp.ObjectDefinition_isEqual)
    __getCasted__ = _swig_new_instance_method(_OpenLxApp.ObjectDefinition___getCasted__)
    getDecompositionObjects = _swig_new_instance_method(_OpenLxApp.ObjectDefinition_getDecompositionObjects)
    getAllDecompositionObjects = _swig_new_instance_method(_OpenLxApp.ObjectDefinition_getAllDecompositionObjects)
    getDecomposedObject = _swig_new_instance_method(_OpenLxApp.ObjectDefinition_getDecomposedObject)
    getAllDecomposedObjects = _swig_new_instance_method(_OpenLxApp.ObjectDefinition_getAllDecomposedObjects)
    addAggregationObject = _swig_new_instance_method(_OpenLxApp.ObjectDefinition_addAggregationObject)
    addAggregationObjects = _swig_new_instance_method(_OpenLxApp.ObjectDefinition_addAggregationObjects)
    removeAggregationObject = _swig_new_instance_method(_OpenLxApp.ObjectDefinition_removeAggregationObject)
    removeAggregationObjects = _swig_new_instance_method(_OpenLxApp.ObjectDefinition_removeAggregationObjects)
    getAggregationObjects = _swig_new_instance_method(_OpenLxApp.ObjectDefinition_getAggregationObjects)
    getAllAggregationObjects = _swig_new_instance_method(_OpenLxApp.ObjectDefinition_getAllAggregationObjects)
    getAggregatedObject = _swig_new_instance_method(_OpenLxApp.ObjectDefinition_getAggregatedObject)
    getAllAggregatedObjects = _swig_new_instance_method(_OpenLxApp.ObjectDefinition_getAllAggregatedObjects)
    addAssociationObject = _swig_new_instance_method(_OpenLxApp.ObjectDefinition_addAssociationObject)
    getAssociationObjects = _swig_new_instance_method(_OpenLxApp.ObjectDefinition_getAssociationObjects)
    getIfcPropertySets = _swig_new_instance_method(_OpenLxApp.ObjectDefinition_getIfcPropertySets)
    __swig_destroy__ = _OpenLxApp.delete_ObjectDefinition

    def __init__(self, *args):
        r"""
        __init__(ObjectDefinition self, std::shared_ptr< OpenLxApp::ObjectDefinition > other) -> ObjectDefinition
        __init__(ObjectDefinition self, App::ObjectDefinition * aObj) -> ObjectDefinition
        __init__(ObjectDefinition self) -> ObjectDefinition
        """
        if self.__class__ == ObjectDefinition:
            _self = None
        else:
            _self = self
        _OpenLxApp.ObjectDefinition_swiginit(self, _OpenLxApp.new_ObjectDefinition(_self, *args))
    def __disown__(self):
        self.this.disown()
        _OpenLxApp.disown_ObjectDefinition(self)
        return weakref.proxy(self)

# Register ObjectDefinition in _OpenLxApp:
_OpenLxApp.ObjectDefinition_swigregister(ObjectDefinition)
ObjectDefinition_getEntityType_Static = _OpenLxApp.ObjectDefinition_getEntityType_Static

class PropertySet(Root):
    r"""Proxy of C++ OpenLxApp::PropertySet class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getEntityType_Static = _swig_new_static_method(_OpenLxApp.PropertySet_getEntityType_Static)
    assign = _swig_new_instance_method(_OpenLxApp.PropertySet_assign)
    isEqual = _swig_new_instance_method(_OpenLxApp.PropertySet_isEqual)
    __getCasted__ = _swig_new_instance_method(_OpenLxApp.PropertySet___getCasted__)

    def __init__(self, *args):
        r"""
        __init__(PropertySet self, std::shared_ptr< OpenLxApp::PropertySet > other) -> PropertySet
        __init__(PropertySet self, App::PropertySet * aObj) -> PropertySet
        __init__(PropertySet self, std::shared_ptr< OpenLxApp::Document > aDoc) -> PropertySet
        """
        if self.__class__ == PropertySet:
            _self = None
        else:
            _self = self
        _OpenLxApp.PropertySet_swiginit(self, _OpenLxApp.new_PropertySet(_self, *args))
    createIn = _swig_new_static_method(_OpenLxApp.PropertySet_createIn)
    createFrom = _swig_new_static_method(_OpenLxApp.PropertySet_createFrom)
    __swig_destroy__ = _OpenLxApp.delete_PropertySet
    getHasProperties = _swig_new_instance_method(_OpenLxApp.PropertySet_getHasProperties)
    getPropertyEnums = _swig_new_instance_method(_OpenLxApp.PropertySet_getPropertyEnums)
    def __disown__(self):
        self.this.disown()
        _OpenLxApp.disown_PropertySet(self)
        return weakref.proxy(self)

# Register PropertySet in _OpenLxApp:
_OpenLxApp.PropertySet_swigregister(PropertySet)
PropertySet_getEntityType_Static = _OpenLxApp.PropertySet_getEntityType_Static
PropertySet_createIn = _OpenLxApp.PropertySet_createIn
PropertySet_createFrom = _OpenLxApp.PropertySet_createFrom

class SubElement(Root):
    r"""Proxy of C++ OpenLxApp::SubElement class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getEntityType_Static = _swig_new_static_method(_OpenLxApp.SubElement_getEntityType_Static)
    assign = _swig_new_instance_method(_OpenLxApp.SubElement_assign)
    isEqual = _swig_new_instance_method(_OpenLxApp.SubElement_isEqual)
    __getCasted__ = _swig_new_instance_method(_OpenLxApp.SubElement___getCasted__)
    createIn = _swig_new_static_method(_OpenLxApp.SubElement_createIn)
    createFrom = _swig_new_static_method(_OpenLxApp.SubElement_createFrom)
    __swig_destroy__ = _OpenLxApp.delete_SubElement
    getElement = _swig_new_instance_method(_OpenLxApp.SubElement_getElement)
    copy = _swig_new_instance_method(_OpenLxApp.SubElement_copy)
    setGeometry = _swig_new_instance_method(_OpenLxApp.SubElement_setGeometry)
    getGeometry = _swig_new_instance_method(_OpenLxApp.SubElement_getGeometry)
    getGeometryToWorldTransform = _swig_new_instance_method(_OpenLxApp.SubElement_getGeometryToWorldTransform)
    getBoundingBox = _swig_new_instance_method(_OpenLxApp.SubElement_getBoundingBox)
    getLocalPlacement = _swig_new_instance_method(_OpenLxApp.SubElement_getLocalPlacement)
    setLocalPlacement = _swig_new_instance_method(_OpenLxApp.SubElement_setLocalPlacement)
    getTransform = _swig_new_instance_method(_OpenLxApp.SubElement_getTransform)
    getLocalToWorldTransform = _swig_new_instance_method(_OpenLxApp.SubElement_getLocalToWorldTransform)
    setTransform = _swig_new_instance_method(_OpenLxApp.SubElement_setTransform)
    translate = _swig_new_instance_method(_OpenLxApp.SubElement_translate)
    rotate = _swig_new_instance_method(_OpenLxApp.SubElement_rotate)
    getLocalAxes = _swig_new_instance_method(_OpenLxApp.SubElement_getLocalAxes)
    setLocalAxes = _swig_new_instance_method(_OpenLxApp.SubElement_setLocalAxes)
    getShape = _swig_new_instance_method(_OpenLxApp.SubElement_getShape)
    getLocalShape = _swig_new_instance_method(_OpenLxApp.SubElement_getLocalShape)
    setOglMaterial = _swig_new_instance_method(_OpenLxApp.SubElement_setOglMaterial)
    getOglMaterial = _swig_new_instance_method(_OpenLxApp.SubElement_getOglMaterial)
    setAmbientColor = _swig_new_instance_method(_OpenLxApp.SubElement_setAmbientColor)
    setDiffuseColor = _swig_new_instance_method(_OpenLxApp.SubElement_setDiffuseColor)
    setSpecularColor = _swig_new_instance_method(_OpenLxApp.SubElement_setSpecularColor)
    setEmissiveColor = _swig_new_instance_method(_OpenLxApp.SubElement_setEmissiveColor)
    setReflectiveColor = _swig_new_instance_method(_OpenLxApp.SubElement_setReflectiveColor)
    setShininess = _swig_new_instance_method(_OpenLxApp.SubElement_setShininess)
    setTransparency = _swig_new_instance_method(_OpenLxApp.SubElement_setTransparency)
    setDrawStyle = _swig_new_instance_method(_OpenLxApp.SubElement_setDrawStyle)
    getDrawStyle = _swig_new_instance_method(_OpenLxApp.SubElement_getDrawStyle)
    setLineWidth = _swig_new_instance_method(_OpenLxApp.SubElement_setLineWidth)
    setTexture = _swig_new_instance_method(_OpenLxApp.SubElement_setTexture)
    setLengthAndCrossTexture = _swig_new_instance_method(_OpenLxApp.SubElement_setLengthAndCrossTexture)
    setPositionNb = _swig_new_instance_method(_OpenLxApp.SubElement_setPositionNb)
    getPositionNb = _swig_new_instance_method(_OpenLxApp.SubElement_getPositionNb)
    isVisible = _swig_new_instance_method(_OpenLxApp.SubElement_isVisible)
    setVisible = _swig_new_instance_method(_OpenLxApp.SubElement_setVisible)
    setAssociatedMaterial = _swig_new_instance_method(_OpenLxApp.SubElement_setAssociatedMaterial)
    getAssociatedMaterial = _swig_new_instance_method(_OpenLxApp.SubElement_getAssociatedMaterial)
    removeAssociatedMaterial = _swig_new_instance_method(_OpenLxApp.SubElement_removeAssociatedMaterial)
    registerPythonClass = _swig_new_instance_method(_OpenLxApp.SubElement_registerPythonClass)
    getGlobalClassId = _swig_new_instance_method(_OpenLxApp.SubElement_getGlobalClassId)
    registerPropertyInteger = _swig_new_instance_method(_OpenLxApp.SubElement_registerPropertyInteger)
    registerPropertyEnum = _swig_new_instance_method(_OpenLxApp.SubElement_registerPropertyEnum)
    registerPropertyDouble = _swig_new_instance_method(_OpenLxApp.SubElement_registerPropertyDouble)
    registerPropertyButton = _swig_new_instance_method(_OpenLxApp.SubElement_registerPropertyButton)
    registerPropertyBool = _swig_new_instance_method(_OpenLxApp.SubElement_registerPropertyBool)
    registerPropertyString = _swig_new_instance_method(_OpenLxApp.SubElement_registerPropertyString)
    registerPropertyColor = _swig_new_instance_method(_OpenLxApp.SubElement_registerPropertyColor)
    getProperty = _swig_new_instance_method(_OpenLxApp.SubElement_getProperty)
    getPropertyMap = _swig_new_instance_method(_OpenLxApp.SubElement_getPropertyMap)
    getPropertyInteger = _swig_new_instance_method(_OpenLxApp.SubElement_getPropertyInteger)
    getPropertyEnum = _swig_new_instance_method(_OpenLxApp.SubElement_getPropertyEnum)
    getPropertyDouble = _swig_new_instance_method(_OpenLxApp.SubElement_getPropertyDouble)
    getPropertyButton = _swig_new_instance_method(_OpenLxApp.SubElement_getPropertyButton)
    getPropertyBool = _swig_new_instance_method(_OpenLxApp.SubElement_getPropertyBool)
    getPropertyString = _swig_new_instance_method(_OpenLxApp.SubElement_getPropertyString)
    getPropertyColor = _swig_new_instance_method(_OpenLxApp.SubElement_getPropertyColor)
    isRegisteredProperty = _swig_new_instance_method(_OpenLxApp.SubElement_isRegisteredProperty)
    updatePythonProductVersion = _swig_new_instance_method(_OpenLxApp.SubElement_updatePythonProductVersion)
    getScriptVersion = _swig_new_instance_method(_OpenLxApp.SubElement_getScriptVersion)
    convertFromOldVersion = _swig_new_instance_method(_OpenLxApp.SubElement_convertFromOldVersion)
    isScriptItemVisible = _swig_new_instance_method(_OpenLxApp.SubElement_isScriptItemVisible)
    onPropertyChanged = _swig_new_instance_method(_OpenLxApp.SubElement_onPropertyChanged)
    onScaling = _swig_new_instance_method(_OpenLxApp.SubElement_onScaling)
    translateAfterScaled = _swig_new_instance_method(_OpenLxApp.SubElement_translateAfterScaled)
    setStandardManipulatorPolicy = _swig_new_instance_method(_OpenLxApp.SubElement_setStandardManipulatorPolicy)
    setPropertyHeader = _swig_new_instance_method(_OpenLxApp.SubElement_setPropertyHeader)
    setPropertyGroupName = _swig_new_instance_method(_OpenLxApp.SubElement_setPropertyGroupName)
    getPropertyHeader = _swig_new_instance_method(_OpenLxApp.SubElement_getPropertyHeader)
    getPropertyGroupName = _swig_new_instance_method(_OpenLxApp.SubElement_getPropertyGroupName)

    def __init__(self, *args):
        r"""
        __init__(SubElement self, std::shared_ptr< OpenLxApp::SubElement > other) -> SubElement
        __init__(SubElement self, App::SubElement * aObj) -> SubElement
        __init__(SubElement self, std::shared_ptr< OpenLxApp::Document > aDoc) -> SubElement
        __init__(SubElement self) -> SubElement
        """
        if self.__class__ == SubElement:
            _self = None
        else:
            _self = self
        _OpenLxApp.SubElement_swiginit(self, _OpenLxApp.new_SubElement(_self, *args))
    def __disown__(self):
        self.this.disown()
        _OpenLxApp.disown_SubElement(self)
        return weakref.proxy(self)

# Register SubElement in _OpenLxApp:
_OpenLxApp.SubElement_swigregister(SubElement)
SubElement_getEntityType_Static = _OpenLxApp.SubElement_getEntityType_Static
SubElement_createIn = _OpenLxApp.SubElement_createIn
SubElement_createFrom = _OpenLxApp.SubElement_createFrom

class Object(ObjectDefinition):
    r"""Proxy of C++ OpenLxApp::Object class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getEntityType_Static = _swig_new_static_method(_OpenLxApp.Object_getEntityType_Static)
    assign = _swig_new_instance_method(_OpenLxApp.Object_assign)
    isEqual = _swig_new_instance_method(_OpenLxApp.Object_isEqual)
    __getCasted__ = _swig_new_instance_method(_OpenLxApp.Object___getCasted__)
    __swig_destroy__ = _OpenLxApp.delete_Object

    def __init__(self, *args):
        r"""
        __init__(Object self, std::shared_ptr< OpenLxApp::Object > other) -> Object
        __init__(Object self, App::Object * aObj) -> Object
        __init__(Object self) -> Object
        """
        if self.__class__ == Object:
            _self = None
        else:
            _self = self
        _OpenLxApp.Object_swiginit(self, _OpenLxApp.new_Object(_self, *args))
    def __disown__(self):
        self.this.disown()
        _OpenLxApp.disown_Object(self)
        return weakref.proxy(self)

# Register Object in _OpenLxApp:
_OpenLxApp.Object_swigregister(Object)
Object_getEntityType_Static = _OpenLxApp.Object_getEntityType_Static

class Process(Object):
    r"""Proxy of C++ OpenLxApp::Process class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getEntityType_Static = _swig_new_static_method(_OpenLxApp.Process_getEntityType_Static)
    assign = _swig_new_instance_method(_OpenLxApp.Process_assign)
    isEqual = _swig_new_instance_method(_OpenLxApp.Process_isEqual)
    __getCasted__ = _swig_new_instance_method(_OpenLxApp.Process___getCasted__)
    createIn = _swig_new_static_method(_OpenLxApp.Process_createIn)
    createFrom = _swig_new_static_method(_OpenLxApp.Process_createFrom)
    __swig_destroy__ = _OpenLxApp.delete_Process

    def __init__(self, *args):
        r"""
        __init__(Process self, std::shared_ptr< OpenLxApp::Process > other) -> Process
        __init__(Process self, App::Process * aObj) -> Process
        __init__(Process self, std::shared_ptr< OpenLxApp::Document > aDoc) -> Process
        __init__(Process self) -> Process
        """
        if self.__class__ == Process:
            _self = None
        else:
            _self = self
        _OpenLxApp.Process_swiginit(self, _OpenLxApp.new_Process(_self, *args))
    def __disown__(self):
        self.this.disown()
        _OpenLxApp.disown_Process(self)
        return weakref.proxy(self)

# Register Process in _OpenLxApp:
_OpenLxApp.Process_swigregister(Process)
Process_getEntityType_Static = _OpenLxApp.Process_getEntityType_Static
Process_createIn = _OpenLxApp.Process_createIn
Process_createFrom = _OpenLxApp.Process_createFrom

class Task(Process):
    r"""Proxy of C++ OpenLxApp::Task class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getEntityType_Static = _swig_new_static_method(_OpenLxApp.Task_getEntityType_Static)
    assign = _swig_new_instance_method(_OpenLxApp.Task_assign)
    isEqual = _swig_new_instance_method(_OpenLxApp.Task_isEqual)
    __getCasted__ = _swig_new_instance_method(_OpenLxApp.Task___getCasted__)
    createIn = _swig_new_static_method(_OpenLxApp.Task_createIn)
    createFrom = _swig_new_static_method(_OpenLxApp.Task_createFrom)
    __swig_destroy__ = _OpenLxApp.delete_Task

    def __init__(self, *args):
        r"""
        __init__(Task self, std::shared_ptr< OpenLxApp::Task > other) -> Task
        __init__(Task self, App::Task * aObj) -> Task
        __init__(Task self, std::shared_ptr< OpenLxApp::Document > aDoc) -> Task
        __init__(Task self) -> Task
        """
        if self.__class__ == Task:
            _self = None
        else:
            _self = self
        _OpenLxApp.Task_swiginit(self, _OpenLxApp.new_Task(_self, *args))
    def __disown__(self):
        self.this.disown()
        _OpenLxApp.disown_Task(self)
        return weakref.proxy(self)

# Register Task in _OpenLxApp:
_OpenLxApp.Task_swigregister(Task)
Task_getEntityType_Static = _OpenLxApp.Task_getEntityType_Static
Task_createIn = _OpenLxApp.Task_createIn
Task_createFrom = _OpenLxApp.Task_createFrom

class Product(Object):
    r"""Proxy of C++ OpenLxApp::Product class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getEntityType_Static = _swig_new_static_method(_OpenLxApp.Product_getEntityType_Static)
    assign = _swig_new_instance_method(_OpenLxApp.Product_assign)
    isEqual = _swig_new_instance_method(_OpenLxApp.Product_isEqual)
    __getCasted__ = _swig_new_instance_method(_OpenLxApp.Product___getCasted__)
    setGeometry = _swig_new_instance_method(_OpenLxApp.Product_setGeometry)
    getGeometry = _swig_new_instance_method(_OpenLxApp.Product_getGeometry)
    getGeometryToWorldTransform = _swig_new_instance_method(_OpenLxApp.Product_getGeometryToWorldTransform)
    getBoundingBox = _swig_new_instance_method(_OpenLxApp.Product_getBoundingBox)
    getLocalPlacement = _swig_new_instance_method(_OpenLxApp.Product_getLocalPlacement)
    setLocalPlacement = _swig_new_instance_method(_OpenLxApp.Product_setLocalPlacement)
    getTransform = _swig_new_instance_method(_OpenLxApp.Product_getTransform)
    getLocalToWorldTransform = _swig_new_instance_method(_OpenLxApp.Product_getLocalToWorldTransform)
    setTransform = _swig_new_instance_method(_OpenLxApp.Product_setTransform)
    translate = _swig_new_instance_method(_OpenLxApp.Product_translate)
    rotate = _swig_new_instance_method(_OpenLxApp.Product_rotate)
    getLocalAxes = _swig_new_instance_method(_OpenLxApp.Product_getLocalAxes)
    setLocalAxes = _swig_new_instance_method(_OpenLxApp.Product_setLocalAxes)
    getShape = _swig_new_instance_method(_OpenLxApp.Product_getShape)
    getLocalShape = _swig_new_instance_method(_OpenLxApp.Product_getLocalShape)
    setOglMaterial = _swig_new_instance_method(_OpenLxApp.Product_setOglMaterial)
    getOglMaterial = _swig_new_instance_method(_OpenLxApp.Product_getOglMaterial)
    setAmbientColor = _swig_new_instance_method(_OpenLxApp.Product_setAmbientColor)
    setDiffuseColor = _swig_new_instance_method(_OpenLxApp.Product_setDiffuseColor)
    setSpecularColor = _swig_new_instance_method(_OpenLxApp.Product_setSpecularColor)
    setEmissiveColor = _swig_new_instance_method(_OpenLxApp.Product_setEmissiveColor)
    setReflectiveColor = _swig_new_instance_method(_OpenLxApp.Product_setReflectiveColor)
    setShininess = _swig_new_instance_method(_OpenLxApp.Product_setShininess)
    setTransparency = _swig_new_instance_method(_OpenLxApp.Product_setTransparency)
    setDrawStyle = _swig_new_instance_method(_OpenLxApp.Product_setDrawStyle)
    getDrawStyle = _swig_new_instance_method(_OpenLxApp.Product_getDrawStyle)
    setLineWidth = _swig_new_instance_method(_OpenLxApp.Product_setLineWidth)
    setTexture = _swig_new_instance_method(_OpenLxApp.Product_setTexture)
    setLengthAndCrossTexture = _swig_new_instance_method(_OpenLxApp.Product_setLengthAndCrossTexture)
    getSpatialStructure = _swig_new_instance_method(_OpenLxApp.Product_getSpatialStructure)
    setSpatialStructure = _swig_new_instance_method(_OpenLxApp.Product_setSpatialStructure)
    setPositionNb = _swig_new_instance_method(_OpenLxApp.Product_setPositionNb)
    getPositionNb = _swig_new_instance_method(_OpenLxApp.Product_getPositionNb)
    isVisible = _swig_new_instance_method(_OpenLxApp.Product_isVisible)
    setVisible = _swig_new_instance_method(_OpenLxApp.Product_setVisible)
    registerPythonClass = _swig_new_instance_method(_OpenLxApp.Product_registerPythonClass)
    getGlobalClassId = _swig_new_instance_method(_OpenLxApp.Product_getGlobalClassId)
    registerPropertyInteger = _swig_new_instance_method(_OpenLxApp.Product_registerPropertyInteger)
    registerPropertyEnum = _swig_new_instance_method(_OpenLxApp.Product_registerPropertyEnum)
    registerPropertyDouble = _swig_new_instance_method(_OpenLxApp.Product_registerPropertyDouble)
    registerPropertyButton = _swig_new_instance_method(_OpenLxApp.Product_registerPropertyButton)
    registerPropertyBool = _swig_new_instance_method(_OpenLxApp.Product_registerPropertyBool)
    registerPropertyString = _swig_new_instance_method(_OpenLxApp.Product_registerPropertyString)
    registerPropertyColor = _swig_new_instance_method(_OpenLxApp.Product_registerPropertyColor)
    getProperty = _swig_new_instance_method(_OpenLxApp.Product_getProperty)
    getPropertyMap = _swig_new_instance_method(_OpenLxApp.Product_getPropertyMap)
    getPropertyInteger = _swig_new_instance_method(_OpenLxApp.Product_getPropertyInteger)
    getPropertyEnum = _swig_new_instance_method(_OpenLxApp.Product_getPropertyEnum)
    getPropertyDouble = _swig_new_instance_method(_OpenLxApp.Product_getPropertyDouble)
    getPropertyButton = _swig_new_instance_method(_OpenLxApp.Product_getPropertyButton)
    getPropertyBool = _swig_new_instance_method(_OpenLxApp.Product_getPropertyBool)
    getPropertyString = _swig_new_instance_method(_OpenLxApp.Product_getPropertyString)
    getPropertyColor = _swig_new_instance_method(_OpenLxApp.Product_getPropertyColor)
    isRegisteredProperty = _swig_new_instance_method(_OpenLxApp.Product_isRegisteredProperty)
    updatePythonProductVersion = _swig_new_instance_method(_OpenLxApp.Product_updatePythonProductVersion)
    getScriptVersion = _swig_new_instance_method(_OpenLxApp.Product_getScriptVersion)
    convertFromOldVersion = _swig_new_instance_method(_OpenLxApp.Product_convertFromOldVersion)
    isScriptItemVisible = _swig_new_instance_method(_OpenLxApp.Product_isScriptItemVisible)
    onPropertyChanged = _swig_new_instance_method(_OpenLxApp.Product_onPropertyChanged)
    onScaling = _swig_new_instance_method(_OpenLxApp.Product_onScaling)
    translateAfterScaled = _swig_new_instance_method(_OpenLxApp.Product_translateAfterScaled)
    setStandardManipulatorPolicy = _swig_new_instance_method(_OpenLxApp.Product_setStandardManipulatorPolicy)
    setPropertyHeader = _swig_new_instance_method(_OpenLxApp.Product_setPropertyHeader)
    setPropertyGroupName = _swig_new_instance_method(_OpenLxApp.Product_setPropertyGroupName)
    getPropertyHeader = _swig_new_instance_method(_OpenLxApp.Product_getPropertyHeader)
    getPropertyGroupName = _swig_new_instance_method(_OpenLxApp.Product_getPropertyGroupName)
    getPropertyUser = _swig_new_instance_method(_OpenLxApp.Product_getPropertyUser)
    getPropertySetNames = _swig_new_instance_method(_OpenLxApp.Product_getPropertySetNames)
    getPropertySetByName = _swig_new_instance_method(_OpenLxApp.Product_getPropertySetByName)
    __swig_destroy__ = _OpenLxApp.delete_Product
    getIfcType = _swig_new_instance_method(_OpenLxApp.Product_getIfcType)
    getExternalPythonTypeObject = _swig_new_instance_method(_OpenLxApp.Product_getExternalPythonTypeObject)
    setExternalPythonTypeObject = _swig_new_instance_method(_OpenLxApp.Product_setExternalPythonTypeObject)
    removeExternalTypeObject = _swig_new_instance_method(_OpenLxApp.Product_removeExternalTypeObject)

    def __init__(self, *args):
        r"""
        __init__(Product self, std::shared_ptr< OpenLxApp::Product > other) -> Product
        __init__(Product self, App::Product * aObj) -> Product
        __init__(Product self) -> Product
        """
        if self.__class__ == Product:
            _self = None
        else:
            _self = self
        _OpenLxApp.Product_swiginit(self, _OpenLxApp.new_Product(_self, *args))
    def __disown__(self):
        self.this.disown()
        _OpenLxApp.disown_Product(self)
        return weakref.proxy(self)

# Register Product in _OpenLxApp:
_OpenLxApp.Product_swigregister(Product)
Product_getEntityType_Static = _OpenLxApp.Product_getEntityType_Static

class Element(Product):
    r"""Proxy of C++ OpenLxApp::Element class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getEntityType_Static = _swig_new_static_method(_OpenLxApp.Element_getEntityType_Static)
    assign = _swig_new_instance_method(_OpenLxApp.Element_assign)
    isEqual = _swig_new_instance_method(_OpenLxApp.Element_isEqual)
    __getCasted__ = _swig_new_instance_method(_OpenLxApp.Element___getCasted__)
    createIn = _swig_new_static_method(_OpenLxApp.Element_createIn)
    createFrom = _swig_new_static_method(_OpenLxApp.Element_createFrom)
    setPlacementRelativeTo = _swig_new_instance_method(_OpenLxApp.Element_setPlacementRelativeTo)
    getPlacementRelativeTo = _swig_new_instance_method(_OpenLxApp.Element_getPlacementRelativeTo)
    setLayer = _swig_new_instance_method(_OpenLxApp.Element_setLayer)
    getLayer = _swig_new_instance_method(_OpenLxApp.Element_getLayer)
    addOpeningElement = _swig_new_instance_method(_OpenLxApp.Element_addOpeningElement)
    removeOpeningElement = _swig_new_instance_method(_OpenLxApp.Element_removeOpeningElement)
    removeOpeningElements = _swig_new_instance_method(_OpenLxApp.Element_removeOpeningElements)
    getOpeningElements = _swig_new_instance_method(_OpenLxApp.Element_getOpeningElements)
    addParamCutHardElement = _swig_new_instance_method(_OpenLxApp.Element_addParamCutHardElement)
    addParamCutSoftElement = _swig_new_instance_method(_OpenLxApp.Element_addParamCutSoftElement)
    removeParamCutHardElement = _swig_new_instance_method(_OpenLxApp.Element_removeParamCutHardElement)
    removeParamCutSoftElement = _swig_new_instance_method(_OpenLxApp.Element_removeParamCutSoftElement)
    getParamCutHardElements = _swig_new_instance_method(_OpenLxApp.Element_getParamCutHardElements)
    getParamCutSoftElements = _swig_new_instance_method(_OpenLxApp.Element_getParamCutSoftElements)
    isParamCutHardElement = _swig_new_instance_method(_OpenLxApp.Element_isParamCutHardElement)
    isParamCutSoftElement = _swig_new_instance_method(_OpenLxApp.Element_isParamCutSoftElement)
    addSubElement = _swig_new_instance_method(_OpenLxApp.Element_addSubElement)
    getSubElements = _swig_new_instance_method(_OpenLxApp.Element_getSubElements)
    removeSubElement = _swig_new_instance_method(_OpenLxApp.Element_removeSubElement)
    removeSubElements = _swig_new_instance_method(_OpenLxApp.Element_removeSubElements)
    getFilledOpeningElement = _swig_new_instance_method(_OpenLxApp.Element_getFilledOpeningElement)
    getComponentType = _swig_new_instance_method(_OpenLxApp.Element_getComponentType)
    setAssociatedMaterial = _swig_new_instance_method(_OpenLxApp.Element_setAssociatedMaterial)
    removeAssociatedMaterial = _swig_new_instance_method(_OpenLxApp.Element_removeAssociatedMaterial)
    getAssociatedMaterial = _swig_new_instance_method(_OpenLxApp.Element_getAssociatedMaterial)
    isTemporary = _swig_new_instance_method(_OpenLxApp.Element_isTemporary)
    setTemporary = _swig_new_instance_method(_OpenLxApp.Element_setTemporary)
    getGroup = _swig_new_instance_method(_OpenLxApp.Element_getGroup)
    copy = _swig_new_instance_method(_OpenLxApp.Element_copy)
    get_Cdwk_SAT_Attributes = _swig_new_instance_method(_OpenLxApp.Element_get_Cdwk_SAT_Attributes)
    getTag = _swig_new_instance_method(_OpenLxApp.Element_getTag)
    setTag = _swig_new_instance_method(_OpenLxApp.Element_setTag)
    getCadworkGroup = _swig_new_instance_method(_OpenLxApp.Element_getCadworkGroup)
    setBoundingBoxEnabled = _swig_new_instance_method(_OpenLxApp.Element_setBoundingBoxEnabled)
    getCdwkAttributeData = _swig_new_instance_method(_OpenLxApp.Element_getCdwkAttributeData)
    setCdwkAttributeData = _swig_new_instance_method(_OpenLxApp.Element_setCdwkAttributeData)
    getAxisRepresentation = _swig_new_instance_method(_OpenLxApp.Element_getAxisRepresentation)
    setAxisRepresentation = _swig_new_instance_method(_OpenLxApp.Element_setAxisRepresentation)
    getSolidModelRepresentation = _swig_new_instance_method(_OpenLxApp.Element_getSolidModelRepresentation)
    setSolidModelRepresentation = _swig_new_instance_method(_OpenLxApp.Element_setSolidModelRepresentation)
    showAxisRepresentation = _swig_new_instance_method(_OpenLxApp.Element_showAxisRepresentation)
    showSolidModelRepresentation = _swig_new_instance_method(_OpenLxApp.Element_showSolidModelRepresentation)
    getElementsConnectedAtEnd = _swig_new_instance_method(_OpenLxApp.Element_getElementsConnectedAtEnd)
    getElementsConnectedAtStart = _swig_new_instance_method(_OpenLxApp.Element_getElementsConnectedAtStart)
    getJointsTypeAtEnd = _swig_new_instance_method(_OpenLxApp.Element_getJointsTypeAtEnd)
    getJointsTypeAtStart = _swig_new_instance_method(_OpenLxApp.Element_getJointsTypeAtStart)
    __setMiscAttributesFlags__ = _swig_new_instance_method(_OpenLxApp.Element___setMiscAttributesFlags__)
    __getMiscAttributesFlags__ = _swig_new_instance_method(_OpenLxApp.Element___getMiscAttributesFlags__)
    __setElementFlags__ = _swig_new_instance_method(_OpenLxApp.Element___setElementFlags__)
    __getElementFlags__ = _swig_new_instance_method(_OpenLxApp.Element___getElementFlags__)
    __swig_destroy__ = _OpenLxApp.delete_Element

    def __init__(self, *args):
        r"""
        __init__(Element self, std::shared_ptr< OpenLxApp::Element > other) -> Element
        __init__(Element self, App::Element * aObj) -> Element
        __init__(Element self, std::shared_ptr< OpenLxApp::Document > aDoc) -> Element
        __init__(Element self) -> Element
        """
        if self.__class__ == Element:
            _self = None
        else:
            _self = self
        _OpenLxApp.Element_swiginit(self, _OpenLxApp.new_Element(_self, *args))
    def __disown__(self):
        self.this.disown()
        _OpenLxApp.disown_Element(self)
        return weakref.proxy(self)

# Register Element in _OpenLxApp:
_OpenLxApp.Element_swigregister(Element)
Element_getEntityType_Static = _OpenLxApp.Element_getEntityType_Static
Element_createIn = _OpenLxApp.Element_createIn
Element_createFrom = _OpenLxApp.Element_createFrom

class Alignment(Element):
    r"""Proxy of C++ OpenLxApp::Alignment class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getEntityType_Static = _swig_new_static_method(_OpenLxApp.Alignment_getEntityType_Static)
    assign = _swig_new_instance_method(_OpenLxApp.Alignment_assign)
    isEqual = _swig_new_instance_method(_OpenLxApp.Alignment_isEqual)
    __getCasted__ = _swig_new_instance_method(_OpenLxApp.Alignment___getCasted__)
    createIn = _swig_new_static_method(_OpenLxApp.Alignment_createIn)
    createFrom = _swig_new_static_method(_OpenLxApp.Alignment_createFrom)
    PredefinedTypeEnum_USERDEFINED = _OpenLxApp.Alignment_PredefinedTypeEnum_USERDEFINED
    
    PredefinedTypeEnum_NOTDEFINED = _OpenLxApp.Alignment_PredefinedTypeEnum_NOTDEFINED
    
    setPredefinedType = _swig_new_instance_method(_OpenLxApp.Alignment_setPredefinedType)
    getPredefinedType = _swig_new_instance_method(_OpenLxApp.Alignment_getPredefinedType)
    __swig_destroy__ = _OpenLxApp.delete_Alignment

    def __init__(self, *args):
        r"""
        __init__(Alignment self, std::shared_ptr< OpenLxApp::Alignment > other) -> Alignment
        __init__(Alignment self, App::Alignment * aObj) -> Alignment
        __init__(Alignment self, std::shared_ptr< OpenLxApp::Document > aDoc) -> Alignment
        __init__(Alignment self) -> Alignment
        """
        if self.__class__ == Alignment:
            _self = None
        else:
            _self = self
        _OpenLxApp.Alignment_swiginit(self, _OpenLxApp.new_Alignment(_self, *args))
    def __disown__(self):
        self.this.disown()
        _OpenLxApp.disown_Alignment(self)
        return weakref.proxy(self)

# Register Alignment in _OpenLxApp:
_OpenLxApp.Alignment_swigregister(Alignment)
Alignment_getEntityType_Static = _OpenLxApp.Alignment_getEntityType_Static
Alignment_createIn = _OpenLxApp.Alignment_createIn
Alignment_createFrom = _OpenLxApp.Alignment_createFrom

class Annotation(Element):
    r"""Proxy of C++ OpenLxApp::Annotation class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getEntityType_Static = _swig_new_static_method(_OpenLxApp.Annotation_getEntityType_Static)
    assign = _swig_new_instance_method(_OpenLxApp.Annotation_assign)
    isEqual = _swig_new_instance_method(_OpenLxApp.Annotation_isEqual)
    __getCasted__ = _swig_new_instance_method(_OpenLxApp.Annotation___getCasted__)
    createIn = _swig_new_static_method(_OpenLxApp.Annotation_createIn)
    createFrom = _swig_new_static_method(_OpenLxApp.Annotation_createFrom)
    PredefinedTypeEnum_CONTOURLINE = _OpenLxApp.Annotation_PredefinedTypeEnum_CONTOURLINE
    
    PredefinedTypeEnum_DIMENSION = _OpenLxApp.Annotation_PredefinedTypeEnum_DIMENSION
    
    PredefinedTypeEnum_ISOBAR = _OpenLxApp.Annotation_PredefinedTypeEnum_ISOBAR
    
    PredefinedTypeEnum_ISOLUX = _OpenLxApp.Annotation_PredefinedTypeEnum_ISOLUX
    
    PredefinedTypeEnum_ISOTHERM = _OpenLxApp.Annotation_PredefinedTypeEnum_ISOTHERM
    
    PredefinedTypeEnum_LEADER = _OpenLxApp.Annotation_PredefinedTypeEnum_LEADER
    
    PredefinedTypeEnum_SURVEY = _OpenLxApp.Annotation_PredefinedTypeEnum_SURVEY
    
    PredefinedTypeEnum_SYMBOL = _OpenLxApp.Annotation_PredefinedTypeEnum_SYMBOL
    
    PredefinedTypeEnum_TEXT = _OpenLxApp.Annotation_PredefinedTypeEnum_TEXT
    
    PredefinedTypeEnum_USERDEFINED = _OpenLxApp.Annotation_PredefinedTypeEnum_USERDEFINED
    
    PredefinedTypeEnum_NOTDEFINED = _OpenLxApp.Annotation_PredefinedTypeEnum_NOTDEFINED
    
    setPredefinedType = _swig_new_instance_method(_OpenLxApp.Annotation_setPredefinedType)
    getPredefinedType = _swig_new_instance_method(_OpenLxApp.Annotation_getPredefinedType)
    __swig_destroy__ = _OpenLxApp.delete_Annotation

    def __init__(self, *args):
        r"""
        __init__(Annotation self, std::shared_ptr< OpenLxApp::Annotation > other) -> Annotation
        __init__(Annotation self, App::Annotation * aObj) -> Annotation
        __init__(Annotation self, std::shared_ptr< OpenLxApp::Document > aDoc) -> Annotation
        __init__(Annotation self) -> Annotation
        """
        if self.__class__ == Annotation:
            _self = None
        else:
            _self = self
        _OpenLxApp.Annotation_swiginit(self, _OpenLxApp.new_Annotation(_self, *args))
    def __disown__(self):
        self.this.disown()
        _OpenLxApp.disown_Annotation(self)
        return weakref.proxy(self)

# Register Annotation in _OpenLxApp:
_OpenLxApp.Annotation_swigregister(Annotation)
Annotation_getEntityType_Static = _OpenLxApp.Annotation_getEntityType_Static
Annotation_createIn = _OpenLxApp.Annotation_createIn
Annotation_createFrom = _OpenLxApp.Annotation_createFrom

class Beam(Element):
    r"""Proxy of C++ OpenLxApp::Beam class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getEntityType_Static = _swig_new_static_method(_OpenLxApp.Beam_getEntityType_Static)
    assign = _swig_new_instance_method(_OpenLxApp.Beam_assign)
    isEqual = _swig_new_instance_method(_OpenLxApp.Beam_isEqual)
    __getCasted__ = _swig_new_instance_method(_OpenLxApp.Beam___getCasted__)
    createIn = _swig_new_static_method(_OpenLxApp.Beam_createIn)
    createFrom = _swig_new_static_method(_OpenLxApp.Beam_createFrom)
    BeamTypeEnum_BEAM = _OpenLxApp.Beam_BeamTypeEnum_BEAM
    
    BeamTypeEnum_JOIST = _OpenLxApp.Beam_BeamTypeEnum_JOIST
    
    BeamTypeEnum_HOLLOWCORE = _OpenLxApp.Beam_BeamTypeEnum_HOLLOWCORE
    
    BeamTypeEnum_LINTEL = _OpenLxApp.Beam_BeamTypeEnum_LINTEL
    
    BeamTypeEnum_SPANDREL = _OpenLxApp.Beam_BeamTypeEnum_SPANDREL
    
    BeamTypeEnum_T_BEAM = _OpenLxApp.Beam_BeamTypeEnum_T_BEAM
    
    BeamTypeEnum_USERDEFINED = _OpenLxApp.Beam_BeamTypeEnum_USERDEFINED
    
    BeamTypeEnum_NOTDEFINED = _OpenLxApp.Beam_BeamTypeEnum_NOTDEFINED
    
    setPredefinedType = _swig_new_instance_method(_OpenLxApp.Beam_setPredefinedType)
    getPredefinedType = _swig_new_instance_method(_OpenLxApp.Beam_getPredefinedType)
    __swig_destroy__ = _OpenLxApp.delete_Beam
    buildFrom2Points = _swig_new_static_method(_OpenLxApp.Beam_buildFrom2Points)

    def __init__(self, *args):
        r"""
        __init__(Beam self, std::shared_ptr< OpenLxApp::Beam > other) -> Beam
        __init__(Beam self, App::Beam * aObj) -> Beam
        __init__(Beam self, std::shared_ptr< OpenLxApp::Document > aDoc) -> Beam
        __init__(Beam self) -> Beam
        """
        if self.__class__ == Beam:
            _self = None
        else:
            _self = self
        _OpenLxApp.Beam_swiginit(self, _OpenLxApp.new_Beam(_self, *args))
    def __disown__(self):
        self.this.disown()
        _OpenLxApp.disown_Beam(self)
        return weakref.proxy(self)

# Register Beam in _OpenLxApp:
_OpenLxApp.Beam_swigregister(Beam)
Beam_getEntityType_Static = _OpenLxApp.Beam_getEntityType_Static
Beam_createIn = _OpenLxApp.Beam_createIn
Beam_createFrom = _OpenLxApp.Beam_createFrom
Beam_buildFrom2Points = _OpenLxApp.Beam_buildFrom2Points

class BeamStandardCase(Beam):
    r"""Proxy of C++ OpenLxApp::BeamStandardCase class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getEntityType_Static = _swig_new_static_method(_OpenLxApp.BeamStandardCase_getEntityType_Static)
    assign = _swig_new_instance_method(_OpenLxApp.BeamStandardCase_assign)
    isEqual = _swig_new_instance_method(_OpenLxApp.BeamStandardCase_isEqual)
    __getCasted__ = _swig_new_instance_method(_OpenLxApp.BeamStandardCase___getCasted__)
    createIn = _swig_new_static_method(_OpenLxApp.BeamStandardCase_createIn)
    createFrom = _swig_new_static_method(_OpenLxApp.BeamStandardCase_createFrom)
    __swig_destroy__ = _OpenLxApp.delete_BeamStandardCase

    def __init__(self, *args):
        r"""
        __init__(BeamStandardCase self, std::shared_ptr< OpenLxApp::BeamStandardCase > other) -> BeamStandardCase
        __init__(BeamStandardCase self, App::BeamStandardCase * aObj) -> BeamStandardCase
        __init__(BeamStandardCase self, std::shared_ptr< OpenLxApp::Document > aDoc) -> BeamStandardCase
        __init__(BeamStandardCase self) -> BeamStandardCase
        """
        if self.__class__ == BeamStandardCase:
            _self = None
        else:
            _self = self
        _OpenLxApp.BeamStandardCase_swiginit(self, _OpenLxApp.new_BeamStandardCase(_self, *args))
    def __disown__(self):
        self.this.disown()
        _OpenLxApp.disown_BeamStandardCase(self)
        return weakref.proxy(self)

# Register BeamStandardCase in _OpenLxApp:
_OpenLxApp.BeamStandardCase_swigregister(BeamStandardCase)
BeamStandardCase_getEntityType_Static = _OpenLxApp.BeamStandardCase_getEntityType_Static
BeamStandardCase_createIn = _OpenLxApp.BeamStandardCase_createIn
BeamStandardCase_createFrom = _OpenLxApp.BeamStandardCase_createFrom

class Bearing(Element):
    r"""Proxy of C++ OpenLxApp::Bearing class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getEntityType_Static = _swig_new_static_method(_OpenLxApp.Bearing_getEntityType_Static)
    assign = _swig_new_instance_method(_OpenLxApp.Bearing_assign)
    isEqual = _swig_new_instance_method(_OpenLxApp.Bearing_isEqual)
    __getCasted__ = _swig_new_instance_method(_OpenLxApp.Bearing___getCasted__)
    createIn = _swig_new_static_method(_OpenLxApp.Bearing_createIn)
    createFrom = _swig_new_static_method(_OpenLxApp.Bearing_createFrom)
    PredefinedTypeEnum_CYLINDRICAL = _OpenLxApp.Bearing_PredefinedTypeEnum_CYLINDRICAL
    
    PredefinedTypeEnum_DISK = _OpenLxApp.Bearing_PredefinedTypeEnum_DISK
    
    PredefinedTypeEnum_ELASTOMERIC = _OpenLxApp.Bearing_PredefinedTypeEnum_ELASTOMERIC
    
    PredefinedTypeEnum_GUIDE = _OpenLxApp.Bearing_PredefinedTypeEnum_GUIDE
    
    PredefinedTypeEnum_POT = _OpenLxApp.Bearing_PredefinedTypeEnum_POT
    
    PredefinedTypeEnum_ROCKER = _OpenLxApp.Bearing_PredefinedTypeEnum_ROCKER
    
    PredefinedTypeEnum_ROLLER = _OpenLxApp.Bearing_PredefinedTypeEnum_ROLLER
    
    PredefinedTypeEnum_SPHERICAL = _OpenLxApp.Bearing_PredefinedTypeEnum_SPHERICAL
    
    PredefinedTypeEnum_USERDEFINED = _OpenLxApp.Bearing_PredefinedTypeEnum_USERDEFINED
    
    PredefinedTypeEnum_NOTDEFINED = _OpenLxApp.Bearing_PredefinedTypeEnum_NOTDEFINED
    
    setPredefinedType = _swig_new_instance_method(_OpenLxApp.Bearing_setPredefinedType)
    getPredefinedType = _swig_new_instance_method(_OpenLxApp.Bearing_getPredefinedType)
    __swig_destroy__ = _OpenLxApp.delete_Bearing

    def __init__(self, *args):
        r"""
        __init__(Bearing self, std::shared_ptr< OpenLxApp::Bearing > other) -> Bearing
        __init__(Bearing self, App::Bearing * aObj) -> Bearing
        __init__(Bearing self, std::shared_ptr< OpenLxApp::Document > aDoc) -> Bearing
        __init__(Bearing self) -> Bearing
        """
        if self.__class__ == Bearing:
            _self = None
        else:
            _self = self
        _OpenLxApp.Bearing_swiginit(self, _OpenLxApp.new_Bearing(_self, *args))
    def __disown__(self):
        self.this.disown()
        _OpenLxApp.disown_Bearing(self)
        return weakref.proxy(self)

# Register Bearing in _OpenLxApp:
_OpenLxApp.Bearing_swigregister(Bearing)
Bearing_getEntityType_Static = _OpenLxApp.Bearing_getEntityType_Static
Bearing_createIn = _OpenLxApp.Bearing_createIn
Bearing_createFrom = _OpenLxApp.Bearing_createFrom

class Borehole(Element):
    r"""Proxy of C++ OpenLxApp::Borehole class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getEntityType_Static = _swig_new_static_method(_OpenLxApp.Borehole_getEntityType_Static)
    assign = _swig_new_instance_method(_OpenLxApp.Borehole_assign)
    isEqual = _swig_new_instance_method(_OpenLxApp.Borehole_isEqual)
    __getCasted__ = _swig_new_instance_method(_OpenLxApp.Borehole___getCasted__)
    createIn = _swig_new_static_method(_OpenLxApp.Borehole_createIn)
    createFrom = _swig_new_static_method(_OpenLxApp.Borehole_createFrom)
    __swig_destroy__ = _OpenLxApp.delete_Borehole

    def __init__(self, *args):
        r"""
        __init__(Borehole self, std::shared_ptr< OpenLxApp::Borehole > other) -> Borehole
        __init__(Borehole self, App::Borehole * aObj) -> Borehole
        __init__(Borehole self, std::shared_ptr< OpenLxApp::Document > aDoc) -> Borehole
        __init__(Borehole self) -> Borehole
        """
        if self.__class__ == Borehole:
            _self = None
        else:
            _self = self
        _OpenLxApp.Borehole_swiginit(self, _OpenLxApp.new_Borehole(_self, *args))
    def __disown__(self):
        self.this.disown()
        _OpenLxApp.disown_Borehole(self)
        return weakref.proxy(self)

# Register Borehole in _OpenLxApp:
_OpenLxApp.Borehole_swigregister(Borehole)
Borehole_getEntityType_Static = _OpenLxApp.Borehole_getEntityType_Static
Borehole_createIn = _OpenLxApp.Borehole_createIn
Borehole_createFrom = _OpenLxApp.Borehole_createFrom

class BuildingElementProxy(Element):
    r"""Proxy of C++ OpenLxApp::BuildingElementProxy class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getEntityType_Static = _swig_new_static_method(_OpenLxApp.BuildingElementProxy_getEntityType_Static)
    assign = _swig_new_instance_method(_OpenLxApp.BuildingElementProxy_assign)
    isEqual = _swig_new_instance_method(_OpenLxApp.BuildingElementProxy_isEqual)
    __getCasted__ = _swig_new_instance_method(_OpenLxApp.BuildingElementProxy___getCasted__)
    createIn = _swig_new_static_method(_OpenLxApp.BuildingElementProxy_createIn)
    createFrom = _swig_new_static_method(_OpenLxApp.BuildingElementProxy_createFrom)
    BuildingElementProxyTypeEnum_COMPLEX = _OpenLxApp.BuildingElementProxy_BuildingElementProxyTypeEnum_COMPLEX
    
    BuildingElementProxyTypeEnum_ELEMENT = _OpenLxApp.BuildingElementProxy_BuildingElementProxyTypeEnum_ELEMENT
    
    BuildingElementProxyTypeEnum_PARTIAL = _OpenLxApp.BuildingElementProxy_BuildingElementProxyTypeEnum_PARTIAL
    
    BuildingElementProxyTypeEnum_PROVISIONFORVOID = _OpenLxApp.BuildingElementProxy_BuildingElementProxyTypeEnum_PROVISIONFORVOID
    
    BuildingElementProxyTypeEnum_USERDEFINED = _OpenLxApp.BuildingElementProxy_BuildingElementProxyTypeEnum_USERDEFINED
    
    BuildingElementProxyTypeEnum_NOTDEFINED = _OpenLxApp.BuildingElementProxy_BuildingElementProxyTypeEnum_NOTDEFINED
    
    setPredefinedType = _swig_new_instance_method(_OpenLxApp.BuildingElementProxy_setPredefinedType)
    getPredefinedType = _swig_new_instance_method(_OpenLxApp.BuildingElementProxy_getPredefinedType)
    __swig_destroy__ = _OpenLxApp.delete_BuildingElementProxy

    def __init__(self, *args):
        r"""
        __init__(BuildingElementProxy self, std::shared_ptr< OpenLxApp::BuildingElementProxy > other) -> BuildingElementProxy
        __init__(BuildingElementProxy self, App::BuildingElementProxy * aObj) -> BuildingElementProxy
        __init__(BuildingElementProxy self, std::shared_ptr< OpenLxApp::Document > aDoc) -> BuildingElementProxy
        __init__(BuildingElementProxy self) -> BuildingElementProxy
        """
        if self.__class__ == BuildingElementProxy:
            _self = None
        else:
            _self = self
        _OpenLxApp.BuildingElementProxy_swiginit(self, _OpenLxApp.new_BuildingElementProxy(_self, *args))
    def __disown__(self):
        self.this.disown()
        _OpenLxApp.disown_BuildingElementProxy(self)
        return weakref.proxy(self)

# Register BuildingElementProxy in _OpenLxApp:
_OpenLxApp.BuildingElementProxy_swigregister(BuildingElementProxy)
BuildingElementProxy_getEntityType_Static = _OpenLxApp.BuildingElementProxy_getEntityType_Static
BuildingElementProxy_createIn = _OpenLxApp.BuildingElementProxy_createIn
BuildingElementProxy_createFrom = _OpenLxApp.BuildingElementProxy_createFrom

class PythonElement(BuildingElementProxy):
    r"""Proxy of C++ OpenLxApp::PythonElement class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getEntityType_Static = _swig_new_static_method(_OpenLxApp.PythonElement_getEntityType_Static)
    assign = _swig_new_instance_method(_OpenLxApp.PythonElement_assign)
    isEqual = _swig_new_instance_method(_OpenLxApp.PythonElement_isEqual)
    __getCasted__ = _swig_new_instance_method(_OpenLxApp.PythonElement___getCasted__)
    createIn = _swig_new_static_method(_OpenLxApp.PythonElement_createIn)
    createFrom = _swig_new_static_method(_OpenLxApp.PythonElement_createFrom)
    __swig_destroy__ = _OpenLxApp.delete_PythonElement

    def __init__(self, *args):
        r"""
        __init__(PythonElement self, std::shared_ptr< OpenLxApp::PythonElement > other) -> PythonElement
        __init__(PythonElement self, App::BuildingElementProxy * aObj) -> PythonElement
        __init__(PythonElement self, std::shared_ptr< OpenLxApp::Document > aDoc) -> PythonElement
        __init__(PythonElement self) -> PythonElement
        """
        if self.__class__ == PythonElement:
            _self = None
        else:
            _self = self
        _OpenLxApp.PythonElement_swiginit(self, _OpenLxApp.new_PythonElement(_self, *args))
    def __disown__(self):
        self.this.disown()
        _OpenLxApp.disown_PythonElement(self)
        return weakref.proxy(self)

# Register PythonElement in _OpenLxApp:
_OpenLxApp.PythonElement_swigregister(PythonElement)
PythonElement_getEntityType_Static = _OpenLxApp.PythonElement_getEntityType_Static
PythonElement_createIn = _OpenLxApp.PythonElement_createIn
PythonElement_createFrom = _OpenLxApp.PythonElement_createFrom

class Chimney(Element):
    r"""Proxy of C++ OpenLxApp::Chimney class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getEntityType_Static = _swig_new_static_method(_OpenLxApp.Chimney_getEntityType_Static)
    assign = _swig_new_instance_method(_OpenLxApp.Chimney_assign)
    isEqual = _swig_new_instance_method(_OpenLxApp.Chimney_isEqual)
    __getCasted__ = _swig_new_instance_method(_OpenLxApp.Chimney___getCasted__)
    createIn = _swig_new_static_method(_OpenLxApp.Chimney_createIn)
    createFrom = _swig_new_static_method(_OpenLxApp.Chimney_createFrom)
    ChimneyTypeEnum_USERDEFINED = _OpenLxApp.Chimney_ChimneyTypeEnum_USERDEFINED
    
    ChimneyTypeEnum_NOTDEFINED = _OpenLxApp.Chimney_ChimneyTypeEnum_NOTDEFINED
    
    setPredefinedType = _swig_new_instance_method(_OpenLxApp.Chimney_setPredefinedType)
    getPredefinedType = _swig_new_instance_method(_OpenLxApp.Chimney_getPredefinedType)
    __swig_destroy__ = _OpenLxApp.delete_Chimney

    def __init__(self, *args):
        r"""
        __init__(Chimney self, std::shared_ptr< OpenLxApp::Chimney > other) -> Chimney
        __init__(Chimney self, App::Chimney * aObj) -> Chimney
        __init__(Chimney self, std::shared_ptr< OpenLxApp::Document > aDoc) -> Chimney
        __init__(Chimney self) -> Chimney
        """
        if self.__class__ == Chimney:
            _self = None
        else:
            _self = self
        _OpenLxApp.Chimney_swiginit(self, _OpenLxApp.new_Chimney(_self, *args))
    def __disown__(self):
        self.this.disown()
        _OpenLxApp.disown_Chimney(self)
        return weakref.proxy(self)

# Register Chimney in _OpenLxApp:
_OpenLxApp.Chimney_swigregister(Chimney)
Chimney_getEntityType_Static = _OpenLxApp.Chimney_getEntityType_Static
Chimney_createIn = _OpenLxApp.Chimney_createIn
Chimney_createFrom = _OpenLxApp.Chimney_createFrom

class CivilElement(Element):
    r"""Proxy of C++ OpenLxApp::CivilElement class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getEntityType_Static = _swig_new_static_method(_OpenLxApp.CivilElement_getEntityType_Static)
    assign = _swig_new_instance_method(_OpenLxApp.CivilElement_assign)
    isEqual = _swig_new_instance_method(_OpenLxApp.CivilElement_isEqual)
    __getCasted__ = _swig_new_instance_method(_OpenLxApp.CivilElement___getCasted__)
    createIn = _swig_new_static_method(_OpenLxApp.CivilElement_createIn)
    createFrom = _swig_new_static_method(_OpenLxApp.CivilElement_createFrom)
    __swig_destroy__ = _OpenLxApp.delete_CivilElement

    def __init__(self, *args):
        r"""
        __init__(CivilElement self, std::shared_ptr< OpenLxApp::CivilElement > other) -> CivilElement
        __init__(CivilElement self, App::CivilElement * aObj) -> CivilElement
        __init__(CivilElement self, std::shared_ptr< OpenLxApp::Document > aDoc) -> CivilElement
        __init__(CivilElement self) -> CivilElement
        """
        if self.__class__ == CivilElement:
            _self = None
        else:
            _self = self
        _OpenLxApp.CivilElement_swiginit(self, _OpenLxApp.new_CivilElement(_self, *args))
    def __disown__(self):
        self.this.disown()
        _OpenLxApp.disown_CivilElement(self)
        return weakref.proxy(self)

# Register CivilElement in _OpenLxApp:
_OpenLxApp.CivilElement_swigregister(CivilElement)
CivilElement_getEntityType_Static = _OpenLxApp.CivilElement_getEntityType_Static
CivilElement_createIn = _OpenLxApp.CivilElement_createIn
CivilElement_createFrom = _OpenLxApp.CivilElement_createFrom

class Column(Element):
    r"""Proxy of C++ OpenLxApp::Column class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getEntityType_Static = _swig_new_static_method(_OpenLxApp.Column_getEntityType_Static)
    assign = _swig_new_instance_method(_OpenLxApp.Column_assign)
    isEqual = _swig_new_instance_method(_OpenLxApp.Column_isEqual)
    __getCasted__ = _swig_new_instance_method(_OpenLxApp.Column___getCasted__)
    createIn = _swig_new_static_method(_OpenLxApp.Column_createIn)
    createFrom = _swig_new_static_method(_OpenLxApp.Column_createFrom)
    ColumnTypeEnum_COLUMN = _OpenLxApp.Column_ColumnTypeEnum_COLUMN
    
    ColumnTypeEnum_PILASTER = _OpenLxApp.Column_ColumnTypeEnum_PILASTER
    
    ColumnTypeEnum_USERDEFINED = _OpenLxApp.Column_ColumnTypeEnum_USERDEFINED
    
    ColumnTypeEnum_NOTDEFINED = _OpenLxApp.Column_ColumnTypeEnum_NOTDEFINED
    
    setPredefinedType = _swig_new_instance_method(_OpenLxApp.Column_setPredefinedType)
    getPredefinedType = _swig_new_instance_method(_OpenLxApp.Column_getPredefinedType)
    __swig_destroy__ = _OpenLxApp.delete_Column

    def __init__(self, *args):
        r"""
        __init__(Column self, std::shared_ptr< OpenLxApp::Column > other) -> Column
        __init__(Column self, App::Column * aObj) -> Column
        __init__(Column self, std::shared_ptr< OpenLxApp::Document > aDoc) -> Column
        __init__(Column self) -> Column
        """
        if self.__class__ == Column:
            _self = None
        else:
            _self = self
        _OpenLxApp.Column_swiginit(self, _OpenLxApp.new_Column(_self, *args))
    def __disown__(self):
        self.this.disown()
        _OpenLxApp.disown_Column(self)
        return weakref.proxy(self)

# Register Column in _OpenLxApp:
_OpenLxApp.Column_swigregister(Column)
Column_getEntityType_Static = _OpenLxApp.Column_getEntityType_Static
Column_createIn = _OpenLxApp.Column_createIn
Column_createFrom = _OpenLxApp.Column_createFrom

class ColumnStandardCase(Column):
    r"""Proxy of C++ OpenLxApp::ColumnStandardCase class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getEntityType_Static = _swig_new_static_method(_OpenLxApp.ColumnStandardCase_getEntityType_Static)
    assign = _swig_new_instance_method(_OpenLxApp.ColumnStandardCase_assign)
    isEqual = _swig_new_instance_method(_OpenLxApp.ColumnStandardCase_isEqual)
    __getCasted__ = _swig_new_instance_method(_OpenLxApp.ColumnStandardCase___getCasted__)
    createIn = _swig_new_static_method(_OpenLxApp.ColumnStandardCase_createIn)
    createFrom = _swig_new_static_method(_OpenLxApp.ColumnStandardCase_createFrom)
    __swig_destroy__ = _OpenLxApp.delete_ColumnStandardCase

    def __init__(self, *args):
        r"""
        __init__(ColumnStandardCase self, std::shared_ptr< OpenLxApp::ColumnStandardCase > other) -> ColumnStandardCase
        __init__(ColumnStandardCase self, App::ColumnStandardCase * aObj) -> ColumnStandardCase
        __init__(ColumnStandardCase self, std::shared_ptr< OpenLxApp::Document > aDoc) -> ColumnStandardCase
        __init__(ColumnStandardCase self) -> ColumnStandardCase
        """
        if self.__class__ == ColumnStandardCase:
            _self = None
        else:
            _self = self
        _OpenLxApp.ColumnStandardCase_swiginit(self, _OpenLxApp.new_ColumnStandardCase(_self, *args))
    def __disown__(self):
        self.this.disown()
        _OpenLxApp.disown_ColumnStandardCase(self)
        return weakref.proxy(self)

# Register ColumnStandardCase in _OpenLxApp:
_OpenLxApp.ColumnStandardCase_swigregister(ColumnStandardCase)
ColumnStandardCase_getEntityType_Static = _OpenLxApp.ColumnStandardCase_getEntityType_Static
ColumnStandardCase_createIn = _OpenLxApp.ColumnStandardCase_createIn
ColumnStandardCase_createFrom = _OpenLxApp.ColumnStandardCase_createFrom

class Course(Element):
    r"""Proxy of C++ OpenLxApp::Course class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getEntityType_Static = _swig_new_static_method(_OpenLxApp.Course_getEntityType_Static)
    assign = _swig_new_instance_method(_OpenLxApp.Course_assign)
    isEqual = _swig_new_instance_method(_OpenLxApp.Course_isEqual)
    __getCasted__ = _swig_new_instance_method(_OpenLxApp.Course___getCasted__)
    createIn = _swig_new_static_method(_OpenLxApp.Course_createIn)
    createFrom = _swig_new_static_method(_OpenLxApp.Course_createFrom)
    PredefinedTypeEnum_ARMOUR = _OpenLxApp.Course_PredefinedTypeEnum_ARMOUR
    
    PredefinedTypeEnum_BALLASTBED = _OpenLxApp.Course_PredefinedTypeEnum_BALLASTBED
    
    PredefinedTypeEnum_CORE = _OpenLxApp.Course_PredefinedTypeEnum_CORE
    
    PredefinedTypeEnum_FILTER = _OpenLxApp.Course_PredefinedTypeEnum_FILTER
    
    PredefinedTypeEnum_PAVEMENT = _OpenLxApp.Course_PredefinedTypeEnum_PAVEMENT
    
    PredefinedTypeEnum_PROTECTION = _OpenLxApp.Course_PredefinedTypeEnum_PROTECTION
    
    PredefinedTypeEnum_USERDEFINED = _OpenLxApp.Course_PredefinedTypeEnum_USERDEFINED
    
    PredefinedTypeEnum_NOTDEFINED = _OpenLxApp.Course_PredefinedTypeEnum_NOTDEFINED
    
    setPredefinedType = _swig_new_instance_method(_OpenLxApp.Course_setPredefinedType)
    getPredefinedType = _swig_new_instance_method(_OpenLxApp.Course_getPredefinedType)
    __swig_destroy__ = _OpenLxApp.delete_Course

    def __init__(self, *args):
        r"""
        __init__(Course self, std::shared_ptr< OpenLxApp::Course > other) -> Course
        __init__(Course self, App::Course * aObj) -> Course
        __init__(Course self, std::shared_ptr< OpenLxApp::Document > aDoc) -> Course
        __init__(Course self) -> Course
        """
        if self.__class__ == Course:
            _self = None
        else:
            _self = self
        _OpenLxApp.Course_swiginit(self, _OpenLxApp.new_Course(_self, *args))
    def __disown__(self):
        self.this.disown()
        _OpenLxApp.disown_Course(self)
        return weakref.proxy(self)

# Register Course in _OpenLxApp:
_OpenLxApp.Course_swigregister(Course)
Course_getEntityType_Static = _OpenLxApp.Course_getEntityType_Static
Course_createIn = _OpenLxApp.Course_createIn
Course_createFrom = _OpenLxApp.Course_createFrom

class Covering(Element):
    r"""Proxy of C++ OpenLxApp::Covering class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getEntityType_Static = _swig_new_static_method(_OpenLxApp.Covering_getEntityType_Static)
    assign = _swig_new_instance_method(_OpenLxApp.Covering_assign)
    isEqual = _swig_new_instance_method(_OpenLxApp.Covering_isEqual)
    __getCasted__ = _swig_new_instance_method(_OpenLxApp.Covering___getCasted__)
    createIn = _swig_new_static_method(_OpenLxApp.Covering_createIn)
    createFrom = _swig_new_static_method(_OpenLxApp.Covering_createFrom)
    CoveringTypeEnum_CEILING = _OpenLxApp.Covering_CoveringTypeEnum_CEILING
    
    CoveringTypeEnum_FLOORING = _OpenLxApp.Covering_CoveringTypeEnum_FLOORING
    
    CoveringTypeEnum_CLADDING = _OpenLxApp.Covering_CoveringTypeEnum_CLADDING
    
    CoveringTypeEnum_ROOFING = _OpenLxApp.Covering_CoveringTypeEnum_ROOFING
    
    CoveringTypeEnum_MOLDING = _OpenLxApp.Covering_CoveringTypeEnum_MOLDING
    
    CoveringTypeEnum_SKIRTINGBOARD = _OpenLxApp.Covering_CoveringTypeEnum_SKIRTINGBOARD
    
    CoveringTypeEnum_INSULATION = _OpenLxApp.Covering_CoveringTypeEnum_INSULATION
    
    CoveringTypeEnum_MEMBRANE = _OpenLxApp.Covering_CoveringTypeEnum_MEMBRANE
    
    CoveringTypeEnum_SLEEVING = _OpenLxApp.Covering_CoveringTypeEnum_SLEEVING
    
    CoveringTypeEnum_WRAPPING = _OpenLxApp.Covering_CoveringTypeEnum_WRAPPING
    
    CoveringTypeEnum_USERDEFINED = _OpenLxApp.Covering_CoveringTypeEnum_USERDEFINED
    
    CoveringTypeEnum_NOTDEFINED = _OpenLxApp.Covering_CoveringTypeEnum_NOTDEFINED
    
    setPredefinedType = _swig_new_instance_method(_OpenLxApp.Covering_setPredefinedType)
    getPredefinedType = _swig_new_instance_method(_OpenLxApp.Covering_getPredefinedType)
    __swig_destroy__ = _OpenLxApp.delete_Covering

    def __init__(self, *args):
        r"""
        __init__(Covering self, std::shared_ptr< OpenLxApp::Covering > other) -> Covering
        __init__(Covering self, App::Covering * aObj) -> Covering
        __init__(Covering self, std::shared_ptr< OpenLxApp::Document > aDoc) -> Covering
        __init__(Covering self) -> Covering
        """
        if self.__class__ == Covering:
            _self = None
        else:
            _self = self
        _OpenLxApp.Covering_swiginit(self, _OpenLxApp.new_Covering(_self, *args))
    def __disown__(self):
        self.this.disown()
        _OpenLxApp.disown_Covering(self)
        return weakref.proxy(self)

# Register Covering in _OpenLxApp:
_OpenLxApp.Covering_swigregister(Covering)
Covering_getEntityType_Static = _OpenLxApp.Covering_getEntityType_Static
Covering_createIn = _OpenLxApp.Covering_createIn
Covering_createFrom = _OpenLxApp.Covering_createFrom

class CurtainWall(Element):
    r"""Proxy of C++ OpenLxApp::CurtainWall class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getEntityType_Static = _swig_new_static_method(_OpenLxApp.CurtainWall_getEntityType_Static)
    assign = _swig_new_instance_method(_OpenLxApp.CurtainWall_assign)
    isEqual = _swig_new_instance_method(_OpenLxApp.CurtainWall_isEqual)
    __getCasted__ = _swig_new_instance_method(_OpenLxApp.CurtainWall___getCasted__)
    createIn = _swig_new_static_method(_OpenLxApp.CurtainWall_createIn)
    createFrom = _swig_new_static_method(_OpenLxApp.CurtainWall_createFrom)
    CurtainWallTypeEnum_USERDEFINED = _OpenLxApp.CurtainWall_CurtainWallTypeEnum_USERDEFINED
    
    CurtainWallTypeEnum_NOTDEFINED = _OpenLxApp.CurtainWall_CurtainWallTypeEnum_NOTDEFINED
    
    setPredefinedType = _swig_new_instance_method(_OpenLxApp.CurtainWall_setPredefinedType)
    getPredefinedType = _swig_new_instance_method(_OpenLxApp.CurtainWall_getPredefinedType)
    __swig_destroy__ = _OpenLxApp.delete_CurtainWall

    def __init__(self, *args):
        r"""
        __init__(CurtainWall self, std::shared_ptr< OpenLxApp::CurtainWall > other) -> CurtainWall
        __init__(CurtainWall self, App::CurtainWall * aObj) -> CurtainWall
        __init__(CurtainWall self, std::shared_ptr< OpenLxApp::Document > aDoc) -> CurtainWall
        __init__(CurtainWall self) -> CurtainWall
        """
        if self.__class__ == CurtainWall:
            _self = None
        else:
            _self = self
        _OpenLxApp.CurtainWall_swiginit(self, _OpenLxApp.new_CurtainWall(_self, *args))
    def __disown__(self):
        self.this.disown()
        _OpenLxApp.disown_CurtainWall(self)
        return weakref.proxy(self)

# Register CurtainWall in _OpenLxApp:
_OpenLxApp.CurtainWall_swigregister(CurtainWall)
CurtainWall_getEntityType_Static = _OpenLxApp.CurtainWall_getEntityType_Static
CurtainWall_createIn = _OpenLxApp.CurtainWall_createIn
CurtainWall_createFrom = _OpenLxApp.CurtainWall_createFrom

class DeepFoundation(Element):
    r"""Proxy of C++ OpenLxApp::DeepFoundation class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getEntityType_Static = _swig_new_static_method(_OpenLxApp.DeepFoundation_getEntityType_Static)
    assign = _swig_new_instance_method(_OpenLxApp.DeepFoundation_assign)
    isEqual = _swig_new_instance_method(_OpenLxApp.DeepFoundation_isEqual)
    __getCasted__ = _swig_new_instance_method(_OpenLxApp.DeepFoundation___getCasted__)
    createIn = _swig_new_static_method(_OpenLxApp.DeepFoundation_createIn)
    createFrom = _swig_new_static_method(_OpenLxApp.DeepFoundation_createFrom)
    __swig_destroy__ = _OpenLxApp.delete_DeepFoundation

    def __init__(self, *args):
        r"""
        __init__(DeepFoundation self, std::shared_ptr< OpenLxApp::DeepFoundation > other) -> DeepFoundation
        __init__(DeepFoundation self, App::DeepFoundation * aObj) -> DeepFoundation
        __init__(DeepFoundation self, std::shared_ptr< OpenLxApp::Document > aDoc) -> DeepFoundation
        __init__(DeepFoundation self) -> DeepFoundation
        """
        if self.__class__ == DeepFoundation:
            _self = None
        else:
            _self = self
        _OpenLxApp.DeepFoundation_swiginit(self, _OpenLxApp.new_DeepFoundation(_self, *args))
    def __disown__(self):
        self.this.disown()
        _OpenLxApp.disown_DeepFoundation(self)
        return weakref.proxy(self)

# Register DeepFoundation in _OpenLxApp:
_OpenLxApp.DeepFoundation_swigregister(DeepFoundation)
DeepFoundation_getEntityType_Static = _OpenLxApp.DeepFoundation_getEntityType_Static
DeepFoundation_createIn = _OpenLxApp.DeepFoundation_createIn
DeepFoundation_createFrom = _OpenLxApp.DeepFoundation_createFrom

class DistributionElement(Element):
    r"""Proxy of C++ OpenLxApp::DistributionElement class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getEntityType_Static = _swig_new_static_method(_OpenLxApp.DistributionElement_getEntityType_Static)
    assign = _swig_new_instance_method(_OpenLxApp.DistributionElement_assign)
    isEqual = _swig_new_instance_method(_OpenLxApp.DistributionElement_isEqual)
    __getCasted__ = _swig_new_instance_method(_OpenLxApp.DistributionElement___getCasted__)
    createIn = _swig_new_static_method(_OpenLxApp.DistributionElement_createIn)
    createFrom = _swig_new_static_method(_OpenLxApp.DistributionElement_createFrom)
    __swig_destroy__ = _OpenLxApp.delete_DistributionElement

    def __init__(self, *args):
        r"""
        __init__(DistributionElement self, std::shared_ptr< OpenLxApp::DistributionElement > other) -> DistributionElement
        __init__(DistributionElement self, App::DistributionElement * aObj) -> DistributionElement
        __init__(DistributionElement self, std::shared_ptr< OpenLxApp::Document > aDoc) -> DistributionElement
        __init__(DistributionElement self) -> DistributionElement
        """
        if self.__class__ == DistributionElement:
            _self = None
        else:
            _self = self
        _OpenLxApp.DistributionElement_swiginit(self, _OpenLxApp.new_DistributionElement(_self, *args))
    def __disown__(self):
        self.this.disown()
        _OpenLxApp.disown_DistributionElement(self)
        return weakref.proxy(self)

# Register DistributionElement in _OpenLxApp:
_OpenLxApp.DistributionElement_swigregister(DistributionElement)
DistributionElement_getEntityType_Static = _OpenLxApp.DistributionElement_getEntityType_Static
DistributionElement_createIn = _OpenLxApp.DistributionElement_createIn
DistributionElement_createFrom = _OpenLxApp.DistributionElement_createFrom

class DistributionFlowElement(DistributionElement):
    r"""Proxy of C++ OpenLxApp::DistributionFlowElement class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getEntityType_Static = _swig_new_static_method(_OpenLxApp.DistributionFlowElement_getEntityType_Static)
    assign = _swig_new_instance_method(_OpenLxApp.DistributionFlowElement_assign)
    isEqual = _swig_new_instance_method(_OpenLxApp.DistributionFlowElement_isEqual)
    __getCasted__ = _swig_new_instance_method(_OpenLxApp.DistributionFlowElement___getCasted__)
    createIn = _swig_new_static_method(_OpenLxApp.DistributionFlowElement_createIn)
    createFrom = _swig_new_static_method(_OpenLxApp.DistributionFlowElement_createFrom)
    __swig_destroy__ = _OpenLxApp.delete_DistributionFlowElement

    def __init__(self, *args):
        r"""
        __init__(DistributionFlowElement self, std::shared_ptr< OpenLxApp::DistributionFlowElement > other) -> DistributionFlowElement
        __init__(DistributionFlowElement self, App::DistributionFlowElement * aObj) -> DistributionFlowElement
        __init__(DistributionFlowElement self, std::shared_ptr< OpenLxApp::Document > aDoc) -> DistributionFlowElement
        __init__(DistributionFlowElement self) -> DistributionFlowElement
        """
        if self.__class__ == DistributionFlowElement:
            _self = None
        else:
            _self = self
        _OpenLxApp.DistributionFlowElement_swiginit(self, _OpenLxApp.new_DistributionFlowElement(_self, *args))
    def __disown__(self):
        self.this.disown()
        _OpenLxApp.disown_DistributionFlowElement(self)
        return weakref.proxy(self)

# Register DistributionFlowElement in _OpenLxApp:
_OpenLxApp.DistributionFlowElement_swigregister(DistributionFlowElement)
DistributionFlowElement_getEntityType_Static = _OpenLxApp.DistributionFlowElement_getEntityType_Static
DistributionFlowElement_createIn = _OpenLxApp.DistributionFlowElement_createIn
DistributionFlowElement_createFrom = _OpenLxApp.DistributionFlowElement_createFrom

class DistributionChamberElement(DistributionFlowElement):
    r"""Proxy of C++ OpenLxApp::DistributionChamberElement class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getEntityType_Static = _swig_new_static_method(_OpenLxApp.DistributionChamberElement_getEntityType_Static)
    assign = _swig_new_instance_method(_OpenLxApp.DistributionChamberElement_assign)
    isEqual = _swig_new_instance_method(_OpenLxApp.DistributionChamberElement_isEqual)
    __getCasted__ = _swig_new_instance_method(_OpenLxApp.DistributionChamberElement___getCasted__)
    createIn = _swig_new_static_method(_OpenLxApp.DistributionChamberElement_createIn)
    createFrom = _swig_new_static_method(_OpenLxApp.DistributionChamberElement_createFrom)
    __swig_destroy__ = _OpenLxApp.delete_DistributionChamberElement
    DistributionChamberElementTypeEnum_FORMEDDUCT = _OpenLxApp.DistributionChamberElement_DistributionChamberElementTypeEnum_FORMEDDUCT
    
    DistributionChamberElementTypeEnum_INSPECTIONCHAMBER = _OpenLxApp.DistributionChamberElement_DistributionChamberElementTypeEnum_INSPECTIONCHAMBER
    
    DistributionChamberElementTypeEnum_INSPECTIONPIT = _OpenLxApp.DistributionChamberElement_DistributionChamberElementTypeEnum_INSPECTIONPIT
    
    DistributionChamberElementTypeEnum_MANHOLE = _OpenLxApp.DistributionChamberElement_DistributionChamberElementTypeEnum_MANHOLE
    
    DistributionChamberElementTypeEnum_METERCHAMBER = _OpenLxApp.DistributionChamberElement_DistributionChamberElementTypeEnum_METERCHAMBER
    
    DistributionChamberElementTypeEnum_SUMP = _OpenLxApp.DistributionChamberElement_DistributionChamberElementTypeEnum_SUMP
    
    DistributionChamberElementTypeEnum_TRENCH = _OpenLxApp.DistributionChamberElement_DistributionChamberElementTypeEnum_TRENCH
    
    DistributionChamberElementTypeEnum_VALVECHAMBER = _OpenLxApp.DistributionChamberElement_DistributionChamberElementTypeEnum_VALVECHAMBER
    
    DistributionChamberElementTypeEnum_USERDEFINED = _OpenLxApp.DistributionChamberElement_DistributionChamberElementTypeEnum_USERDEFINED
    
    DistributionChamberElementTypeEnum_NOTDEFINED = _OpenLxApp.DistributionChamberElement_DistributionChamberElementTypeEnum_NOTDEFINED
    
    setPredefinedType = _swig_new_instance_method(_OpenLxApp.DistributionChamberElement_setPredefinedType)
    getPredefinedType = _swig_new_instance_method(_OpenLxApp.DistributionChamberElement_getPredefinedType)

    def __init__(self, *args):
        r"""
        __init__(DistributionChamberElement self, std::shared_ptr< OpenLxApp::DistributionChamberElement > other) -> DistributionChamberElement
        __init__(DistributionChamberElement self, App::DistributionChamberElement * aObj) -> DistributionChamberElement
        __init__(DistributionChamberElement self, std::shared_ptr< OpenLxApp::Document > aDoc) -> DistributionChamberElement
        __init__(DistributionChamberElement self) -> DistributionChamberElement
        """
        if self.__class__ == DistributionChamberElement:
            _self = None
        else:
            _self = self
        _OpenLxApp.DistributionChamberElement_swiginit(self, _OpenLxApp.new_DistributionChamberElement(_self, *args))
    def __disown__(self):
        self.this.disown()
        _OpenLxApp.disown_DistributionChamberElement(self)
        return weakref.proxy(self)

# Register DistributionChamberElement in _OpenLxApp:
_OpenLxApp.DistributionChamberElement_swigregister(DistributionChamberElement)
DistributionChamberElement_getEntityType_Static = _OpenLxApp.DistributionChamberElement_getEntityType_Static
DistributionChamberElement_createIn = _OpenLxApp.DistributionChamberElement_createIn
DistributionChamberElement_createFrom = _OpenLxApp.DistributionChamberElement_createFrom

class FlowSegment(DistributionFlowElement):
    r"""Proxy of C++ OpenLxApp::FlowSegment class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getEntityType_Static = _swig_new_static_method(_OpenLxApp.FlowSegment_getEntityType_Static)
    assign = _swig_new_instance_method(_OpenLxApp.FlowSegment_assign)
    isEqual = _swig_new_instance_method(_OpenLxApp.FlowSegment_isEqual)
    __getCasted__ = _swig_new_instance_method(_OpenLxApp.FlowSegment___getCasted__)
    createIn = _swig_new_static_method(_OpenLxApp.FlowSegment_createIn)
    createFrom = _swig_new_static_method(_OpenLxApp.FlowSegment_createFrom)
    __swig_destroy__ = _OpenLxApp.delete_FlowSegment

    def __init__(self, *args):
        r"""
        __init__(FlowSegment self, std::shared_ptr< OpenLxApp::FlowSegment > other) -> FlowSegment
        __init__(FlowSegment self, App::FlowSegment * aObj) -> FlowSegment
        __init__(FlowSegment self, std::shared_ptr< OpenLxApp::Document > aDoc) -> FlowSegment
        __init__(FlowSegment self) -> FlowSegment
        """
        if self.__class__ == FlowSegment:
            _self = None
        else:
            _self = self
        _OpenLxApp.FlowSegment_swiginit(self, _OpenLxApp.new_FlowSegment(_self, *args))
    def __disown__(self):
        self.this.disown()
        _OpenLxApp.disown_FlowSegment(self)
        return weakref.proxy(self)

# Register FlowSegment in _OpenLxApp:
_OpenLxApp.FlowSegment_swigregister(FlowSegment)
FlowSegment_getEntityType_Static = _OpenLxApp.FlowSegment_getEntityType_Static
FlowSegment_createIn = _OpenLxApp.FlowSegment_createIn
FlowSegment_createFrom = _OpenLxApp.FlowSegment_createFrom

class CableCarrierSegment(FlowSegment):
    r"""Proxy of C++ OpenLxApp::CableCarrierSegment class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getEntityType_Static = _swig_new_static_method(_OpenLxApp.CableCarrierSegment_getEntityType_Static)
    assign = _swig_new_instance_method(_OpenLxApp.CableCarrierSegment_assign)
    isEqual = _swig_new_instance_method(_OpenLxApp.CableCarrierSegment_isEqual)
    __getCasted__ = _swig_new_instance_method(_OpenLxApp.CableCarrierSegment___getCasted__)
    createIn = _swig_new_static_method(_OpenLxApp.CableCarrierSegment_createIn)
    createFrom = _swig_new_static_method(_OpenLxApp.CableCarrierSegment_createFrom)
    PredefinedTypeEnum_CABLELADDERSEGMENT = _OpenLxApp.CableCarrierSegment_PredefinedTypeEnum_CABLELADDERSEGMENT
    
    PredefinedTypeEnum_CABLETRAYSEGMENT = _OpenLxApp.CableCarrierSegment_PredefinedTypeEnum_CABLETRAYSEGMENT
    
    PredefinedTypeEnum_CABLETRUNKINGSEGMENT = _OpenLxApp.CableCarrierSegment_PredefinedTypeEnum_CABLETRUNKINGSEGMENT
    
    PredefinedTypeEnum_CONDUITSEGMENT = _OpenLxApp.CableCarrierSegment_PredefinedTypeEnum_CONDUITSEGMENT
    
    PredefinedTypeEnum_USERDEFINED = _OpenLxApp.CableCarrierSegment_PredefinedTypeEnum_USERDEFINED
    
    PredefinedTypeEnum_NOTDEFINED = _OpenLxApp.CableCarrierSegment_PredefinedTypeEnum_NOTDEFINED
    
    setPredefinedType = _swig_new_instance_method(_OpenLxApp.CableCarrierSegment_setPredefinedType)
    getPredefinedType = _swig_new_instance_method(_OpenLxApp.CableCarrierSegment_getPredefinedType)
    __swig_destroy__ = _OpenLxApp.delete_CableCarrierSegment

    def __init__(self, *args):
        r"""
        __init__(CableCarrierSegment self, std::shared_ptr< OpenLxApp::CableCarrierSegment > other) -> CableCarrierSegment
        __init__(CableCarrierSegment self, App::CableCarrierSegment * aObj) -> CableCarrierSegment
        __init__(CableCarrierSegment self, std::shared_ptr< OpenLxApp::Document > aDoc) -> CableCarrierSegment
        __init__(CableCarrierSegment self) -> CableCarrierSegment
        """
        if self.__class__ == CableCarrierSegment:
            _self = None
        else:
            _self = self
        _OpenLxApp.CableCarrierSegment_swiginit(self, _OpenLxApp.new_CableCarrierSegment(_self, *args))
    def __disown__(self):
        self.this.disown()
        _OpenLxApp.disown_CableCarrierSegment(self)
        return weakref.proxy(self)

# Register CableCarrierSegment in _OpenLxApp:
_OpenLxApp.CableCarrierSegment_swigregister(CableCarrierSegment)
CableCarrierSegment_getEntityType_Static = _OpenLxApp.CableCarrierSegment_getEntityType_Static
CableCarrierSegment_createIn = _OpenLxApp.CableCarrierSegment_createIn
CableCarrierSegment_createFrom = _OpenLxApp.CableCarrierSegment_createFrom

class CableSegment(FlowSegment):
    r"""Proxy of C++ OpenLxApp::CableSegment class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getEntityType_Static = _swig_new_static_method(_OpenLxApp.CableSegment_getEntityType_Static)
    assign = _swig_new_instance_method(_OpenLxApp.CableSegment_assign)
    isEqual = _swig_new_instance_method(_OpenLxApp.CableSegment_isEqual)
    __getCasted__ = _swig_new_instance_method(_OpenLxApp.CableSegment___getCasted__)
    createIn = _swig_new_static_method(_OpenLxApp.CableSegment_createIn)
    createFrom = _swig_new_static_method(_OpenLxApp.CableSegment_createFrom)
    PredefinedTypeEnum_BUSBARSEGMENT = _OpenLxApp.CableSegment_PredefinedTypeEnum_BUSBARSEGMENT
    
    PredefinedTypeEnum_CABLESEGMENT = _OpenLxApp.CableSegment_PredefinedTypeEnum_CABLESEGMENT
    
    PredefinedTypeEnum_CONDUCTORSEGMENT = _OpenLxApp.CableSegment_PredefinedTypeEnum_CONDUCTORSEGMENT
    
    PredefinedTypeEnum_CORESEGMENT = _OpenLxApp.CableSegment_PredefinedTypeEnum_CORESEGMENT
    
    PredefinedTypeEnum_USERDEFINED = _OpenLxApp.CableSegment_PredefinedTypeEnum_USERDEFINED
    
    PredefinedTypeEnum_NOTDEFINED = _OpenLxApp.CableSegment_PredefinedTypeEnum_NOTDEFINED
    
    setPredefinedType = _swig_new_instance_method(_OpenLxApp.CableSegment_setPredefinedType)
    getPredefinedType = _swig_new_instance_method(_OpenLxApp.CableSegment_getPredefinedType)
    __swig_destroy__ = _OpenLxApp.delete_CableSegment

    def __init__(self, *args):
        r"""
        __init__(CableSegment self, std::shared_ptr< OpenLxApp::CableSegment > other) -> CableSegment
        __init__(CableSegment self, App::CableSegment * aObj) -> CableSegment
        __init__(CableSegment self, std::shared_ptr< OpenLxApp::Document > aDoc) -> CableSegment
        __init__(CableSegment self) -> CableSegment
        """
        if self.__class__ == CableSegment:
            _self = None
        else:
            _self = self
        _OpenLxApp.CableSegment_swiginit(self, _OpenLxApp.new_CableSegment(_self, *args))
    def __disown__(self):
        self.this.disown()
        _OpenLxApp.disown_CableSegment(self)
        return weakref.proxy(self)

# Register CableSegment in _OpenLxApp:
_OpenLxApp.CableSegment_swigregister(CableSegment)
CableSegment_getEntityType_Static = _OpenLxApp.CableSegment_getEntityType_Static
CableSegment_createIn = _OpenLxApp.CableSegment_createIn
CableSegment_createFrom = _OpenLxApp.CableSegment_createFrom

class DuctSegment(FlowSegment):
    r"""Proxy of C++ OpenLxApp::DuctSegment class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getEntityType_Static = _swig_new_static_method(_OpenLxApp.DuctSegment_getEntityType_Static)
    assign = _swig_new_instance_method(_OpenLxApp.DuctSegment_assign)
    isEqual = _swig_new_instance_method(_OpenLxApp.DuctSegment_isEqual)
    __getCasted__ = _swig_new_instance_method(_OpenLxApp.DuctSegment___getCasted__)
    createIn = _swig_new_static_method(_OpenLxApp.DuctSegment_createIn)
    createFrom = _swig_new_static_method(_OpenLxApp.DuctSegment_createFrom)
    PredefinedTypeEnum_FLEXIBLESEGMENT = _OpenLxApp.DuctSegment_PredefinedTypeEnum_FLEXIBLESEGMENT
    
    PredefinedTypeEnum_RIGIDSEGMENT = _OpenLxApp.DuctSegment_PredefinedTypeEnum_RIGIDSEGMENT
    
    PredefinedTypeEnum_USERDEFINED = _OpenLxApp.DuctSegment_PredefinedTypeEnum_USERDEFINED
    
    PredefinedTypeEnum_NOTDEFINED = _OpenLxApp.DuctSegment_PredefinedTypeEnum_NOTDEFINED
    
    setPredefinedType = _swig_new_instance_method(_OpenLxApp.DuctSegment_setPredefinedType)
    getPredefinedType = _swig_new_instance_method(_OpenLxApp.DuctSegment_getPredefinedType)
    __swig_destroy__ = _OpenLxApp.delete_DuctSegment

    def __init__(self, *args):
        r"""
        __init__(DuctSegment self, std::shared_ptr< OpenLxApp::DuctSegment > other) -> DuctSegment
        __init__(DuctSegment self, App::DuctSegment * aObj) -> DuctSegment
        __init__(DuctSegment self, std::shared_ptr< OpenLxApp::Document > aDoc) -> DuctSegment
        __init__(DuctSegment self) -> DuctSegment
        """
        if self.__class__ == DuctSegment:
            _self = None
        else:
            _self = self
        _OpenLxApp.DuctSegment_swiginit(self, _OpenLxApp.new_DuctSegment(_self, *args))
    def __disown__(self):
        self.this.disown()
        _OpenLxApp.disown_DuctSegment(self)
        return weakref.proxy(self)

# Register DuctSegment in _OpenLxApp:
_OpenLxApp.DuctSegment_swigregister(DuctSegment)
DuctSegment_getEntityType_Static = _OpenLxApp.DuctSegment_getEntityType_Static
DuctSegment_createIn = _OpenLxApp.DuctSegment_createIn
DuctSegment_createFrom = _OpenLxApp.DuctSegment_createFrom

class PipeSegment(FlowSegment):
    r"""Proxy of C++ OpenLxApp::PipeSegment class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getEntityType_Static = _swig_new_static_method(_OpenLxApp.PipeSegment_getEntityType_Static)
    assign = _swig_new_instance_method(_OpenLxApp.PipeSegment_assign)
    isEqual = _swig_new_instance_method(_OpenLxApp.PipeSegment_isEqual)
    __getCasted__ = _swig_new_instance_method(_OpenLxApp.PipeSegment___getCasted__)
    createIn = _swig_new_static_method(_OpenLxApp.PipeSegment_createIn)
    createFrom = _swig_new_static_method(_OpenLxApp.PipeSegment_createFrom)
    PipeSegmentTypeEnum_CULVERT = _OpenLxApp.PipeSegment_PipeSegmentTypeEnum_CULVERT
    
    PipeSegmentTypeEnum_FLEXIBLESEGMENT = _OpenLxApp.PipeSegment_PipeSegmentTypeEnum_FLEXIBLESEGMENT
    
    PipeSegmentTypeEnum_RIGIDSEGMENT = _OpenLxApp.PipeSegment_PipeSegmentTypeEnum_RIGIDSEGMENT
    
    PipeSegmentTypeEnum_GUTTER = _OpenLxApp.PipeSegment_PipeSegmentTypeEnum_GUTTER
    
    PipeSegmentTypeEnum_SPOOL = _OpenLxApp.PipeSegment_PipeSegmentTypeEnum_SPOOL
    
    PipeSegmentTypeEnum_USERDEFINED = _OpenLxApp.PipeSegment_PipeSegmentTypeEnum_USERDEFINED
    
    PipeSegmentTypeEnum_NOTDEFINED = _OpenLxApp.PipeSegment_PipeSegmentTypeEnum_NOTDEFINED
    
    setPredefinedType = _swig_new_instance_method(_OpenLxApp.PipeSegment_setPredefinedType)
    getPredefinedType = _swig_new_instance_method(_OpenLxApp.PipeSegment_getPredefinedType)
    __swig_destroy__ = _OpenLxApp.delete_PipeSegment

    def __init__(self, *args):
        r"""
        __init__(PipeSegment self, std::shared_ptr< OpenLxApp::PipeSegment > other) -> PipeSegment
        __init__(PipeSegment self, App::PipeSegment * aObj) -> PipeSegment
        __init__(PipeSegment self, std::shared_ptr< OpenLxApp::Document > aDoc) -> PipeSegment
        __init__(PipeSegment self) -> PipeSegment
        """
        if self.__class__ == PipeSegment:
            _self = None
        else:
            _self = self
        _OpenLxApp.PipeSegment_swiginit(self, _OpenLxApp.new_PipeSegment(_self, *args))
    def __disown__(self):
        self.this.disown()
        _OpenLxApp.disown_PipeSegment(self)
        return weakref.proxy(self)

# Register PipeSegment in _OpenLxApp:
_OpenLxApp.PipeSegment_swigregister(PipeSegment)
PipeSegment_getEntityType_Static = _OpenLxApp.PipeSegment_getEntityType_Static
PipeSegment_createIn = _OpenLxApp.PipeSegment_createIn
PipeSegment_createFrom = _OpenLxApp.PipeSegment_createFrom

class FireSuppressionTerminal(DistributionFlowElement):
    r"""Proxy of C++ OpenLxApp::FireSuppressionTerminal class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getEntityType_Static = _swig_new_static_method(_OpenLxApp.FireSuppressionTerminal_getEntityType_Static)
    assign = _swig_new_instance_method(_OpenLxApp.FireSuppressionTerminal_assign)
    isEqual = _swig_new_instance_method(_OpenLxApp.FireSuppressionTerminal_isEqual)
    __getCasted__ = _swig_new_instance_method(_OpenLxApp.FireSuppressionTerminal___getCasted__)
    createIn = _swig_new_static_method(_OpenLxApp.FireSuppressionTerminal_createIn)
    createFrom = _swig_new_static_method(_OpenLxApp.FireSuppressionTerminal_createFrom)
    PredefinedTypeEnum_BREECHINGINLET = _OpenLxApp.FireSuppressionTerminal_PredefinedTypeEnum_BREECHINGINLET
    
    PredefinedTypeEnum_FIREHYDRANT = _OpenLxApp.FireSuppressionTerminal_PredefinedTypeEnum_FIREHYDRANT
    
    PredefinedTypeEnum_FIREMONITOR = _OpenLxApp.FireSuppressionTerminal_PredefinedTypeEnum_FIREMONITOR
    
    PredefinedTypeEnum_HOSEREEL = _OpenLxApp.FireSuppressionTerminal_PredefinedTypeEnum_HOSEREEL
    
    PredefinedTypeEnum_SPRINKLER = _OpenLxApp.FireSuppressionTerminal_PredefinedTypeEnum_SPRINKLER
    
    PredefinedTypeEnum_SPRINKLERDEFLECTOR = _OpenLxApp.FireSuppressionTerminal_PredefinedTypeEnum_SPRINKLERDEFLECTOR
    
    PredefinedTypeEnum_USERDEFINED = _OpenLxApp.FireSuppressionTerminal_PredefinedTypeEnum_USERDEFINED
    
    PredefinedTypeEnum_NOTDEFINED = _OpenLxApp.FireSuppressionTerminal_PredefinedTypeEnum_NOTDEFINED
    
    setPredefinedType = _swig_new_instance_method(_OpenLxApp.FireSuppressionTerminal_setPredefinedType)
    getPredefinedType = _swig_new_instance_method(_OpenLxApp.FireSuppressionTerminal_getPredefinedType)
    __swig_destroy__ = _OpenLxApp.delete_FireSuppressionTerminal

    def __init__(self, *args):
        r"""
        __init__(FireSuppressionTerminal self, std::shared_ptr< OpenLxApp::FireSuppressionTerminal > other) -> FireSuppressionTerminal
        __init__(FireSuppressionTerminal self, App::FireSuppressionTerminal * aObj) -> FireSuppressionTerminal
        __init__(FireSuppressionTerminal self, std::shared_ptr< OpenLxApp::Document > aDoc) -> FireSuppressionTerminal
        __init__(FireSuppressionTerminal self) -> FireSuppressionTerminal
        """
        if self.__class__ == FireSuppressionTerminal:
            _self = None
        else:
            _self = self
        _OpenLxApp.FireSuppressionTerminal_swiginit(self, _OpenLxApp.new_FireSuppressionTerminal(_self, *args))
    def __disown__(self):
        self.this.disown()
        _OpenLxApp.disown_FireSuppressionTerminal(self)
        return weakref.proxy(self)

# Register FireSuppressionTerminal in _OpenLxApp:
_OpenLxApp.FireSuppressionTerminal_swigregister(FireSuppressionTerminal)
FireSuppressionTerminal_getEntityType_Static = _OpenLxApp.FireSuppressionTerminal_getEntityType_Static
FireSuppressionTerminal_createIn = _OpenLxApp.FireSuppressionTerminal_createIn
FireSuppressionTerminal_createFrom = _OpenLxApp.FireSuppressionTerminal_createFrom

class Lamp(DistributionFlowElement):
    r"""Proxy of C++ OpenLxApp::Lamp class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getEntityType_Static = _swig_new_static_method(_OpenLxApp.Lamp_getEntityType_Static)
    assign = _swig_new_instance_method(_OpenLxApp.Lamp_assign)
    isEqual = _swig_new_instance_method(_OpenLxApp.Lamp_isEqual)
    __getCasted__ = _swig_new_instance_method(_OpenLxApp.Lamp___getCasted__)
    createIn = _swig_new_static_method(_OpenLxApp.Lamp_createIn)
    createFrom = _swig_new_static_method(_OpenLxApp.Lamp_createFrom)
    PredefinedTypeEnum_COMPACTFLUORESCENT = _OpenLxApp.Lamp_PredefinedTypeEnum_COMPACTFLUORESCENT
    
    PredefinedTypeEnum_FLUORESCENT = _OpenLxApp.Lamp_PredefinedTypeEnum_FLUORESCENT
    
    PredefinedTypeEnum_HALOGEN = _OpenLxApp.Lamp_PredefinedTypeEnum_HALOGEN
    
    PredefinedTypeEnum_HIGHPRESSUREMERCURY = _OpenLxApp.Lamp_PredefinedTypeEnum_HIGHPRESSUREMERCURY
    
    PredefinedTypeEnum_HIGHPRESSURESODIUM = _OpenLxApp.Lamp_PredefinedTypeEnum_HIGHPRESSURESODIUM
    
    PredefinedTypeEnum_LED = _OpenLxApp.Lamp_PredefinedTypeEnum_LED
    
    PredefinedTypeEnum_METALHALIDE = _OpenLxApp.Lamp_PredefinedTypeEnum_METALHALIDE
    
    PredefinedTypeEnum_OLED = _OpenLxApp.Lamp_PredefinedTypeEnum_OLED
    
    PredefinedTypeEnum_TUNGSTENFILAMENT = _OpenLxApp.Lamp_PredefinedTypeEnum_TUNGSTENFILAMENT
    
    PredefinedTypeEnum_USERDEFINED = _OpenLxApp.Lamp_PredefinedTypeEnum_USERDEFINED
    
    PredefinedTypeEnum_NOTDEFINED = _OpenLxApp.Lamp_PredefinedTypeEnum_NOTDEFINED
    
    setPredefinedType = _swig_new_instance_method(_OpenLxApp.Lamp_setPredefinedType)
    getPredefinedType = _swig_new_instance_method(_OpenLxApp.Lamp_getPredefinedType)
    __swig_destroy__ = _OpenLxApp.delete_Lamp

    def __init__(self, *args):
        r"""
        __init__(Lamp self, std::shared_ptr< OpenLxApp::Lamp > other) -> Lamp
        __init__(Lamp self, App::Lamp * aObj) -> Lamp
        __init__(Lamp self, std::shared_ptr< OpenLxApp::Document > aDoc) -> Lamp
        __init__(Lamp self) -> Lamp
        """
        if self.__class__ == Lamp:
            _self = None
        else:
            _self = self
        _OpenLxApp.Lamp_swiginit(self, _OpenLxApp.new_Lamp(_self, *args))
    def __disown__(self):
        self.this.disown()
        _OpenLxApp.disown_Lamp(self)
        return weakref.proxy(self)

# Register Lamp in _OpenLxApp:
_OpenLxApp.Lamp_swigregister(Lamp)
Lamp_getEntityType_Static = _OpenLxApp.Lamp_getEntityType_Static
Lamp_createIn = _OpenLxApp.Lamp_createIn
Lamp_createFrom = _OpenLxApp.Lamp_createFrom

class LightFixture(DistributionFlowElement):
    r"""Proxy of C++ OpenLxApp::LightFixture class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getEntityType_Static = _swig_new_static_method(_OpenLxApp.LightFixture_getEntityType_Static)
    assign = _swig_new_instance_method(_OpenLxApp.LightFixture_assign)
    isEqual = _swig_new_instance_method(_OpenLxApp.LightFixture_isEqual)
    __getCasted__ = _swig_new_instance_method(_OpenLxApp.LightFixture___getCasted__)
    createIn = _swig_new_static_method(_OpenLxApp.LightFixture_createIn)
    createFrom = _swig_new_static_method(_OpenLxApp.LightFixture_createFrom)
    PredefinedTypeEnum_DIRECTIONSOURCE = _OpenLxApp.LightFixture_PredefinedTypeEnum_DIRECTIONSOURCE
    
    PredefinedTypeEnum_POINTSOURCE = _OpenLxApp.LightFixture_PredefinedTypeEnum_POINTSOURCE
    
    PredefinedTypeEnum_SECURITYLIGHTING = _OpenLxApp.LightFixture_PredefinedTypeEnum_SECURITYLIGHTING
    
    PredefinedTypeEnum_USERDEFINED = _OpenLxApp.LightFixture_PredefinedTypeEnum_USERDEFINED
    
    PredefinedTypeEnum_NOTDEFINED = _OpenLxApp.LightFixture_PredefinedTypeEnum_NOTDEFINED
    
    setPredefinedType = _swig_new_instance_method(_OpenLxApp.LightFixture_setPredefinedType)
    getPredefinedType = _swig_new_instance_method(_OpenLxApp.LightFixture_getPredefinedType)
    __swig_destroy__ = _OpenLxApp.delete_LightFixture

    def __init__(self, *args):
        r"""
        __init__(LightFixture self, std::shared_ptr< OpenLxApp::LightFixture > other) -> LightFixture
        __init__(LightFixture self, App::LightFixture * aObj) -> LightFixture
        __init__(LightFixture self, std::shared_ptr< OpenLxApp::Document > aDoc) -> LightFixture
        __init__(LightFixture self) -> LightFixture
        """
        if self.__class__ == LightFixture:
            _self = None
        else:
            _self = self
        _OpenLxApp.LightFixture_swiginit(self, _OpenLxApp.new_LightFixture(_self, *args))
    def __disown__(self):
        self.this.disown()
        _OpenLxApp.disown_LightFixture(self)
        return weakref.proxy(self)

# Register LightFixture in _OpenLxApp:
_OpenLxApp.LightFixture_swigregister(LightFixture)
LightFixture_getEntityType_Static = _OpenLxApp.LightFixture_getEntityType_Static
LightFixture_createIn = _OpenLxApp.LightFixture_createIn
LightFixture_createFrom = _OpenLxApp.LightFixture_createFrom

class Outlet(DistributionFlowElement):
    r"""Proxy of C++ OpenLxApp::Outlet class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getEntityType_Static = _swig_new_static_method(_OpenLxApp.Outlet_getEntityType_Static)
    assign = _swig_new_instance_method(_OpenLxApp.Outlet_assign)
    isEqual = _swig_new_instance_method(_OpenLxApp.Outlet_isEqual)
    __getCasted__ = _swig_new_instance_method(_OpenLxApp.Outlet___getCasted__)
    createIn = _swig_new_static_method(_OpenLxApp.Outlet_createIn)
    createFrom = _swig_new_static_method(_OpenLxApp.Outlet_createFrom)
    PredefinedTypeEnum_AUDIOVISUALOUTLET = _OpenLxApp.Outlet_PredefinedTypeEnum_AUDIOVISUALOUTLET
    
    PredefinedTypeEnum_COMMUNICATIONSOUTLET = _OpenLxApp.Outlet_PredefinedTypeEnum_COMMUNICATIONSOUTLET
    
    PredefinedTypeEnum_DATAOUTLET = _OpenLxApp.Outlet_PredefinedTypeEnum_DATAOUTLET
    
    PredefinedTypeEnum_POWEROUTLET = _OpenLxApp.Outlet_PredefinedTypeEnum_POWEROUTLET
    
    PredefinedTypeEnum_TELEPHONEOUTLET = _OpenLxApp.Outlet_PredefinedTypeEnum_TELEPHONEOUTLET
    
    PredefinedTypeEnum_USERDEFINED = _OpenLxApp.Outlet_PredefinedTypeEnum_USERDEFINED
    
    PredefinedTypeEnum_NOTDEFINED = _OpenLxApp.Outlet_PredefinedTypeEnum_NOTDEFINED
    
    setPredefinedType = _swig_new_instance_method(_OpenLxApp.Outlet_setPredefinedType)
    getPredefinedType = _swig_new_instance_method(_OpenLxApp.Outlet_getPredefinedType)
    __swig_destroy__ = _OpenLxApp.delete_Outlet

    def __init__(self, *args):
        r"""
        __init__(Outlet self, std::shared_ptr< OpenLxApp::Outlet > other) -> Outlet
        __init__(Outlet self, App::Outlet * aObj) -> Outlet
        __init__(Outlet self, std::shared_ptr< OpenLxApp::Document > aDoc) -> Outlet
        __init__(Outlet self) -> Outlet
        """
        if self.__class__ == Outlet:
            _self = None
        else:
            _self = self
        _OpenLxApp.Outlet_swiginit(self, _OpenLxApp.new_Outlet(_self, *args))
    def __disown__(self):
        self.this.disown()
        _OpenLxApp.disown_Outlet(self)
        return weakref.proxy(self)

# Register Outlet in _OpenLxApp:
_OpenLxApp.Outlet_swigregister(Outlet)
Outlet_getEntityType_Static = _OpenLxApp.Outlet_getEntityType_Static
Outlet_createIn = _OpenLxApp.Outlet_createIn
Outlet_createFrom = _OpenLxApp.Outlet_createFrom

class PipeFitting(DistributionFlowElement):
    r"""Proxy of C++ OpenLxApp::PipeFitting class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getEntityType_Static = _swig_new_static_method(_OpenLxApp.PipeFitting_getEntityType_Static)
    assign = _swig_new_instance_method(_OpenLxApp.PipeFitting_assign)
    isEqual = _swig_new_instance_method(_OpenLxApp.PipeFitting_isEqual)
    __getCasted__ = _swig_new_instance_method(_OpenLxApp.PipeFitting___getCasted__)
    createIn = _swig_new_static_method(_OpenLxApp.PipeFitting_createIn)
    createFrom = _swig_new_static_method(_OpenLxApp.PipeFitting_createFrom)
    PredefinedTypeEnum_BEND = _OpenLxApp.PipeFitting_PredefinedTypeEnum_BEND
    
    PredefinedTypeEnum_CONNECTOR = _OpenLxApp.PipeFitting_PredefinedTypeEnum_CONNECTOR
    
    PredefinedTypeEnum_ENTRY = _OpenLxApp.PipeFitting_PredefinedTypeEnum_ENTRY
    
    PredefinedTypeEnum_EXIT = _OpenLxApp.PipeFitting_PredefinedTypeEnum_EXIT
    
    PredefinedTypeEnum_JUNCTION = _OpenLxApp.PipeFitting_PredefinedTypeEnum_JUNCTION
    
    PredefinedTypeEnum_OBSTRUCTION = _OpenLxApp.PipeFitting_PredefinedTypeEnum_OBSTRUCTION
    
    PredefinedTypeEnum_TRANSITION = _OpenLxApp.PipeFitting_PredefinedTypeEnum_TRANSITION
    
    PredefinedTypeEnum_USERDEFINED = _OpenLxApp.PipeFitting_PredefinedTypeEnum_USERDEFINED
    
    PredefinedTypeEnum_NOTDEFINED = _OpenLxApp.PipeFitting_PredefinedTypeEnum_NOTDEFINED
    
    setPredefinedType = _swig_new_instance_method(_OpenLxApp.PipeFitting_setPredefinedType)
    getPredefinedType = _swig_new_instance_method(_OpenLxApp.PipeFitting_getPredefinedType)
    __swig_destroy__ = _OpenLxApp.delete_PipeFitting

    def __init__(self, *args):
        r"""
        __init__(PipeFitting self, std::shared_ptr< OpenLxApp::PipeFitting > other) -> PipeFitting
        __init__(PipeFitting self, App::PipeFitting * aObj) -> PipeFitting
        __init__(PipeFitting self, std::shared_ptr< OpenLxApp::Document > aDoc) -> PipeFitting
        __init__(PipeFitting self) -> PipeFitting
        """
        if self.__class__ == PipeFitting:
            _self = None
        else:
            _self = self
        _OpenLxApp.PipeFitting_swiginit(self, _OpenLxApp.new_PipeFitting(_self, *args))
    def __disown__(self):
        self.this.disown()
        _OpenLxApp.disown_PipeFitting(self)
        return weakref.proxy(self)

# Register PipeFitting in _OpenLxApp:
_OpenLxApp.PipeFitting_swigregister(PipeFitting)
PipeFitting_getEntityType_Static = _OpenLxApp.PipeFitting_getEntityType_Static
PipeFitting_createIn = _OpenLxApp.PipeFitting_createIn
PipeFitting_createFrom = _OpenLxApp.PipeFitting_createFrom

class Signal(DistributionFlowElement):
    r"""Proxy of C++ OpenLxApp::Signal class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getEntityType_Static = _swig_new_static_method(_OpenLxApp.Signal_getEntityType_Static)
    assign = _swig_new_instance_method(_OpenLxApp.Signal_assign)
    isEqual = _swig_new_instance_method(_OpenLxApp.Signal_isEqual)
    __getCasted__ = _swig_new_instance_method(_OpenLxApp.Signal___getCasted__)
    createIn = _swig_new_static_method(_OpenLxApp.Signal_createIn)
    createFrom = _swig_new_static_method(_OpenLxApp.Signal_createFrom)
    PredefinedTypeEnum_AUDIO = _OpenLxApp.Signal_PredefinedTypeEnum_AUDIO
    
    PredefinedTypeEnum_MIXED = _OpenLxApp.Signal_PredefinedTypeEnum_MIXED
    
    PredefinedTypeEnum_VISUAL = _OpenLxApp.Signal_PredefinedTypeEnum_VISUAL
    
    PredefinedTypeEnum_USERDEFINED = _OpenLxApp.Signal_PredefinedTypeEnum_USERDEFINED
    
    PredefinedTypeEnum_NOTDEFINED = _OpenLxApp.Signal_PredefinedTypeEnum_NOTDEFINED
    
    setPredefinedType = _swig_new_instance_method(_OpenLxApp.Signal_setPredefinedType)
    getPredefinedType = _swig_new_instance_method(_OpenLxApp.Signal_getPredefinedType)
    __swig_destroy__ = _OpenLxApp.delete_Signal

    def __init__(self, *args):
        r"""
        __init__(Signal self, std::shared_ptr< OpenLxApp::Signal > other) -> Signal
        __init__(Signal self, App::Signal * aObj) -> Signal
        __init__(Signal self, std::shared_ptr< OpenLxApp::Document > aDoc) -> Signal
        __init__(Signal self) -> Signal
        """
        if self.__class__ == Signal:
            _self = None
        else:
            _self = self
        _OpenLxApp.Signal_swiginit(self, _OpenLxApp.new_Signal(_self, *args))
    def __disown__(self):
        self.this.disown()
        _OpenLxApp.disown_Signal(self)
        return weakref.proxy(self)

# Register Signal in _OpenLxApp:
_OpenLxApp.Signal_swigregister(Signal)
Signal_getEntityType_Static = _OpenLxApp.Signal_getEntityType_Static
Signal_createIn = _OpenLxApp.Signal_createIn
Signal_createFrom = _OpenLxApp.Signal_createFrom

class Valve(DistributionFlowElement):
    r"""Proxy of C++ OpenLxApp::Valve class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getEntityType_Static = _swig_new_static_method(_OpenLxApp.Valve_getEntityType_Static)
    assign = _swig_new_instance_method(_OpenLxApp.Valve_assign)
    isEqual = _swig_new_instance_method(_OpenLxApp.Valve_isEqual)
    __getCasted__ = _swig_new_instance_method(_OpenLxApp.Valve___getCasted__)
    createIn = _swig_new_static_method(_OpenLxApp.Valve_createIn)
    createFrom = _swig_new_static_method(_OpenLxApp.Valve_createFrom)
    PredefinedTypeEnum_AIRRELEASE = _OpenLxApp.Valve_PredefinedTypeEnum_AIRRELEASE
    
    PredefinedTypeEnum_ANTIVACUUM = _OpenLxApp.Valve_PredefinedTypeEnum_ANTIVACUUM
    
    PredefinedTypeEnum_CHANGEOVER = _OpenLxApp.Valve_PredefinedTypeEnum_CHANGEOVER
    
    PredefinedTypeEnum_CHECK = _OpenLxApp.Valve_PredefinedTypeEnum_CHECK
    
    PredefinedTypeEnum_COMMISSIONING = _OpenLxApp.Valve_PredefinedTypeEnum_COMMISSIONING
    
    PredefinedTypeEnum_DIVERTING = _OpenLxApp.Valve_PredefinedTypeEnum_DIVERTING
    
    PredefinedTypeEnum_DOUBLECHECK = _OpenLxApp.Valve_PredefinedTypeEnum_DOUBLECHECK
    
    PredefinedTypeEnum_DOUBLEREGULATING = _OpenLxApp.Valve_PredefinedTypeEnum_DOUBLEREGULATING
    
    PredefinedTypeEnum_DRAWOFFCOCK = _OpenLxApp.Valve_PredefinedTypeEnum_DRAWOFFCOCK
    
    PredefinedTypeEnum_FAUCET = _OpenLxApp.Valve_PredefinedTypeEnum_FAUCET
    
    PredefinedTypeEnum_FLUSHING = _OpenLxApp.Valve_PredefinedTypeEnum_FLUSHING
    
    PredefinedTypeEnum_GASCOCK = _OpenLxApp.Valve_PredefinedTypeEnum_GASCOCK
    
    PredefinedTypeEnum_GASTAP = _OpenLxApp.Valve_PredefinedTypeEnum_GASTAP
    
    PredefinedTypeEnum_ISOLATING = _OpenLxApp.Valve_PredefinedTypeEnum_ISOLATING
    
    PredefinedTypeEnum_MIXING = _OpenLxApp.Valve_PredefinedTypeEnum_MIXING
    
    PredefinedTypeEnum_PRESSUREREDUCING = _OpenLxApp.Valve_PredefinedTypeEnum_PRESSUREREDUCING
    
    PredefinedTypeEnum_PRESSURERELIEF = _OpenLxApp.Valve_PredefinedTypeEnum_PRESSURERELIEF
    
    PredefinedTypeEnum_REGULATING = _OpenLxApp.Valve_PredefinedTypeEnum_REGULATING
    
    PredefinedTypeEnum_SAFETYCUTOFF = _OpenLxApp.Valve_PredefinedTypeEnum_SAFETYCUTOFF
    
    PredefinedTypeEnum_STEAMTRAP = _OpenLxApp.Valve_PredefinedTypeEnum_STEAMTRAP
    
    PredefinedTypeEnum_STOPCOCK = _OpenLxApp.Valve_PredefinedTypeEnum_STOPCOCK
    
    PredefinedTypeEnum_USERDEFINED = _OpenLxApp.Valve_PredefinedTypeEnum_USERDEFINED
    
    PredefinedTypeEnum_NOTDEFINED = _OpenLxApp.Valve_PredefinedTypeEnum_NOTDEFINED
    
    setPredefinedType = _swig_new_instance_method(_OpenLxApp.Valve_setPredefinedType)
    getPredefinedType = _swig_new_instance_method(_OpenLxApp.Valve_getPredefinedType)
    __swig_destroy__ = _OpenLxApp.delete_Valve

    def __init__(self, *args):
        r"""
        __init__(Valve self, std::shared_ptr< OpenLxApp::Valve > other) -> Valve
        __init__(Valve self, App::Valve * aObj) -> Valve
        __init__(Valve self, std::shared_ptr< OpenLxApp::Document > aDoc) -> Valve
        __init__(Valve self) -> Valve
        """
        if self.__class__ == Valve:
            _self = None
        else:
            _self = self
        _OpenLxApp.Valve_swiginit(self, _OpenLxApp.new_Valve(_self, *args))
    def __disown__(self):
        self.this.disown()
        _OpenLxApp.disown_Valve(self)
        return weakref.proxy(self)

# Register Valve in _OpenLxApp:
_OpenLxApp.Valve_swigregister(Valve)
Valve_getEntityType_Static = _OpenLxApp.Valve_getEntityType_Static
Valve_createIn = _OpenLxApp.Valve_createIn
Valve_createFrom = _OpenLxApp.Valve_createFrom

class Door(Element):
    r"""Proxy of C++ OpenLxApp::Door class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getEntityType_Static = _swig_new_static_method(_OpenLxApp.Door_getEntityType_Static)
    assign = _swig_new_instance_method(_OpenLxApp.Door_assign)
    isEqual = _swig_new_instance_method(_OpenLxApp.Door_isEqual)
    __getCasted__ = _swig_new_instance_method(_OpenLxApp.Door___getCasted__)
    createIn = _swig_new_static_method(_OpenLxApp.Door_createIn)
    createFrom = _swig_new_static_method(_OpenLxApp.Door_createFrom)
    DoorTypeEnum_DOOR = _OpenLxApp.Door_DoorTypeEnum_DOOR
    
    DoorTypeEnum_GATE = _OpenLxApp.Door_DoorTypeEnum_GATE
    
    DoorTypeEnum_TRAPDOOR = _OpenLxApp.Door_DoorTypeEnum_TRAPDOOR
    
    DoorTypeEnum_USERDEFINED = _OpenLxApp.Door_DoorTypeEnum_USERDEFINED
    
    DoorTypeEnum_NOTDEFINED = _OpenLxApp.Door_DoorTypeEnum_NOTDEFINED
    
    setPredefinedType = _swig_new_instance_method(_OpenLxApp.Door_setPredefinedType)
    getPredefinedType = _swig_new_instance_method(_OpenLxApp.Door_getPredefinedType)
    __swig_destroy__ = _OpenLxApp.delete_Door

    def __init__(self, *args):
        r"""
        __init__(Door self, std::shared_ptr< OpenLxApp::Door > other) -> Door
        __init__(Door self, App::Door * aObj) -> Door
        __init__(Door self, std::shared_ptr< OpenLxApp::Document > aDoc) -> Door
        __init__(Door self) -> Door
        """
        if self.__class__ == Door:
            _self = None
        else:
            _self = self
        _OpenLxApp.Door_swiginit(self, _OpenLxApp.new_Door(_self, *args))
    def __disown__(self):
        self.this.disown()
        _OpenLxApp.disown_Door(self)
        return weakref.proxy(self)

# Register Door in _OpenLxApp:
_OpenLxApp.Door_swigregister(Door)
Door_getEntityType_Static = _OpenLxApp.Door_getEntityType_Static
Door_createIn = _OpenLxApp.Door_createIn
Door_createFrom = _OpenLxApp.Door_createFrom

class DoorStandardCase(Door):
    r"""Proxy of C++ OpenLxApp::DoorStandardCase class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getEntityType_Static = _swig_new_static_method(_OpenLxApp.DoorStandardCase_getEntityType_Static)
    assign = _swig_new_instance_method(_OpenLxApp.DoorStandardCase_assign)
    isEqual = _swig_new_instance_method(_OpenLxApp.DoorStandardCase_isEqual)
    __getCasted__ = _swig_new_instance_method(_OpenLxApp.DoorStandardCase___getCasted__)
    createIn = _swig_new_static_method(_OpenLxApp.DoorStandardCase_createIn)
    createFrom = _swig_new_static_method(_OpenLxApp.DoorStandardCase_createFrom)
    __swig_destroy__ = _OpenLxApp.delete_DoorStandardCase

    def __init__(self, *args):
        r"""
        __init__(DoorStandardCase self, std::shared_ptr< OpenLxApp::DoorStandardCase > other) -> DoorStandardCase
        __init__(DoorStandardCase self, App::DoorStandardCase * aObj) -> DoorStandardCase
        __init__(DoorStandardCase self, std::shared_ptr< OpenLxApp::Document > aDoc) -> DoorStandardCase
        __init__(DoorStandardCase self) -> DoorStandardCase
        """
        if self.__class__ == DoorStandardCase:
            _self = None
        else:
            _self = self
        _OpenLxApp.DoorStandardCase_swiginit(self, _OpenLxApp.new_DoorStandardCase(_self, *args))
    def __disown__(self):
        self.this.disown()
        _OpenLxApp.disown_DoorStandardCase(self)
        return weakref.proxy(self)

# Register DoorStandardCase in _OpenLxApp:
_OpenLxApp.DoorStandardCase_swigregister(DoorStandardCase)
DoorStandardCase_getEntityType_Static = _OpenLxApp.DoorStandardCase_getEntityType_Static
DoorStandardCase_createIn = _OpenLxApp.DoorStandardCase_createIn
DoorStandardCase_createFrom = _OpenLxApp.DoorStandardCase_createFrom

class EarthworksCut(Element):
    r"""Proxy of C++ OpenLxApp::EarthworksCut class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getEntityType_Static = _swig_new_static_method(_OpenLxApp.EarthworksCut_getEntityType_Static)
    assign = _swig_new_instance_method(_OpenLxApp.EarthworksCut_assign)
    isEqual = _swig_new_instance_method(_OpenLxApp.EarthworksCut_isEqual)
    __getCasted__ = _swig_new_instance_method(_OpenLxApp.EarthworksCut___getCasted__)
    createIn = _swig_new_static_method(_OpenLxApp.EarthworksCut_createIn)
    createFrom = _swig_new_static_method(_OpenLxApp.EarthworksCut_createFrom)
    PredefinedTypeEnum_BASE_EXCAVATION = _OpenLxApp.EarthworksCut_PredefinedTypeEnum_BASE_EXCAVATION
    
    PredefinedTypeEnum_CUT = _OpenLxApp.EarthworksCut_PredefinedTypeEnum_CUT
    
    PredefinedTypeEnum_DREDGING = _OpenLxApp.EarthworksCut_PredefinedTypeEnum_DREDGING
    
    PredefinedTypeEnum_EXCAVATION = _OpenLxApp.EarthworksCut_PredefinedTypeEnum_EXCAVATION
    
    PredefinedTypeEnum_OVEREXCAVATION = _OpenLxApp.EarthworksCut_PredefinedTypeEnum_OVEREXCAVATION
    
    PredefinedTypeEnum_PAVEMENTMILLING = _OpenLxApp.EarthworksCut_PredefinedTypeEnum_PAVEMENTMILLING
    
    PredefinedTypeEnum_STEPEXCAVATION = _OpenLxApp.EarthworksCut_PredefinedTypeEnum_STEPEXCAVATION
    
    PredefinedTypeEnum_TOPSOILREMOVAL = _OpenLxApp.EarthworksCut_PredefinedTypeEnum_TOPSOILREMOVAL
    
    PredefinedTypeEnum_TRENCH = _OpenLxApp.EarthworksCut_PredefinedTypeEnum_TRENCH
    
    PredefinedTypeEnum_USERDEFINED = _OpenLxApp.EarthworksCut_PredefinedTypeEnum_USERDEFINED
    
    PredefinedTypeEnum_NOTDEFINED = _OpenLxApp.EarthworksCut_PredefinedTypeEnum_NOTDEFINED
    
    setPredefinedType = _swig_new_instance_method(_OpenLxApp.EarthworksCut_setPredefinedType)
    getPredefinedType = _swig_new_instance_method(_OpenLxApp.EarthworksCut_getPredefinedType)
    __swig_destroy__ = _OpenLxApp.delete_EarthworksCut

    def __init__(self, *args):
        r"""
        __init__(EarthworksCut self, std::shared_ptr< OpenLxApp::EarthworksCut > other) -> EarthworksCut
        __init__(EarthworksCut self, App::EarthworksCut * aObj) -> EarthworksCut
        __init__(EarthworksCut self, std::shared_ptr< OpenLxApp::Document > aDoc) -> EarthworksCut
        __init__(EarthworksCut self) -> EarthworksCut
        """
        if self.__class__ == EarthworksCut:
            _self = None
        else:
            _self = self
        _OpenLxApp.EarthworksCut_swiginit(self, _OpenLxApp.new_EarthworksCut(_self, *args))
    def __disown__(self):
        self.this.disown()
        _OpenLxApp.disown_EarthworksCut(self)
        return weakref.proxy(self)

# Register EarthworksCut in _OpenLxApp:
_OpenLxApp.EarthworksCut_swigregister(EarthworksCut)
EarthworksCut_getEntityType_Static = _OpenLxApp.EarthworksCut_getEntityType_Static
EarthworksCut_createIn = _OpenLxApp.EarthworksCut_createIn
EarthworksCut_createFrom = _OpenLxApp.EarthworksCut_createFrom

class EarthworksFill(Element):
    r"""Proxy of C++ OpenLxApp::EarthworksFill class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getEntityType_Static = _swig_new_static_method(_OpenLxApp.EarthworksFill_getEntityType_Static)
    assign = _swig_new_instance_method(_OpenLxApp.EarthworksFill_assign)
    isEqual = _swig_new_instance_method(_OpenLxApp.EarthworksFill_isEqual)
    __getCasted__ = _swig_new_instance_method(_OpenLxApp.EarthworksFill___getCasted__)
    createIn = _swig_new_static_method(_OpenLxApp.EarthworksFill_createIn)
    createFrom = _swig_new_static_method(_OpenLxApp.EarthworksFill_createFrom)
    PredefinedTypeEnum_BACKFILL = _OpenLxApp.EarthworksFill_PredefinedTypeEnum_BACKFILL
    
    PredefinedTypeEnum_COUNTERWEIGHT = _OpenLxApp.EarthworksFill_PredefinedTypeEnum_COUNTERWEIGHT
    
    PredefinedTypeEnum_EMBANKMENT = _OpenLxApp.EarthworksFill_PredefinedTypeEnum_EMBANKMENT
    
    PredefinedTypeEnum_SLOPEFILL = _OpenLxApp.EarthworksFill_PredefinedTypeEnum_SLOPEFILL
    
    PredefinedTypeEnum_SUBGRADE = _OpenLxApp.EarthworksFill_PredefinedTypeEnum_SUBGRADE
    
    PredefinedTypeEnum_SUBGRADEBED = _OpenLxApp.EarthworksFill_PredefinedTypeEnum_SUBGRADEBED
    
    PredefinedTypeEnum_TRANSITIONSECTION = _OpenLxApp.EarthworksFill_PredefinedTypeEnum_TRANSITIONSECTION
    
    PredefinedTypeEnum_USERDEFINED = _OpenLxApp.EarthworksFill_PredefinedTypeEnum_USERDEFINED
    
    PredefinedTypeEnum_NOTDEFINED = _OpenLxApp.EarthworksFill_PredefinedTypeEnum_NOTDEFINED
    
    setPredefinedType = _swig_new_instance_method(_OpenLxApp.EarthworksFill_setPredefinedType)
    getPredefinedType = _swig_new_instance_method(_OpenLxApp.EarthworksFill_getPredefinedType)
    __swig_destroy__ = _OpenLxApp.delete_EarthworksFill

    def __init__(self, *args):
        r"""
        __init__(EarthworksFill self, std::shared_ptr< OpenLxApp::EarthworksFill > other) -> EarthworksFill
        __init__(EarthworksFill self, App::EarthworksFill * aObj) -> EarthworksFill
        __init__(EarthworksFill self, std::shared_ptr< OpenLxApp::Document > aDoc) -> EarthworksFill
        __init__(EarthworksFill self) -> EarthworksFill
        """
        if self.__class__ == EarthworksFill:
            _self = None
        else:
            _self = self
        _OpenLxApp.EarthworksFill_swiginit(self, _OpenLxApp.new_EarthworksFill(_self, *args))
    def __disown__(self):
        self.this.disown()
        _OpenLxApp.disown_EarthworksFill(self)
        return weakref.proxy(self)

# Register EarthworksFill in _OpenLxApp:
_OpenLxApp.EarthworksFill_swigregister(EarthworksFill)
EarthworksFill_getEntityType_Static = _OpenLxApp.EarthworksFill_getEntityType_Static
EarthworksFill_createIn = _OpenLxApp.EarthworksFill_createIn
EarthworksFill_createFrom = _OpenLxApp.EarthworksFill_createFrom

class ElementAssembly(Element):
    r"""Proxy of C++ OpenLxApp::ElementAssembly class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getEntityType_Static = _swig_new_static_method(_OpenLxApp.ElementAssembly_getEntityType_Static)
    assign = _swig_new_instance_method(_OpenLxApp.ElementAssembly_assign)
    isEqual = _swig_new_instance_method(_OpenLxApp.ElementAssembly_isEqual)
    __getCasted__ = _swig_new_instance_method(_OpenLxApp.ElementAssembly___getCasted__)
    createIn = _swig_new_static_method(_OpenLxApp.ElementAssembly_createIn)
    createFrom = _swig_new_static_method(_OpenLxApp.ElementAssembly_createFrom)
    ElementAssemblyTypeEnum_ACCESSORY_ASSEMBLY = _OpenLxApp.ElementAssembly_ElementAssemblyTypeEnum_ACCESSORY_ASSEMBLY
    
    ElementAssemblyTypeEnum_ARCH = _OpenLxApp.ElementAssembly_ElementAssemblyTypeEnum_ARCH
    
    ElementAssemblyTypeEnum_BEAM_GRID = _OpenLxApp.ElementAssembly_ElementAssemblyTypeEnum_BEAM_GRID
    
    ElementAssemblyTypeEnum_BRACED_FRAME = _OpenLxApp.ElementAssembly_ElementAssemblyTypeEnum_BRACED_FRAME
    
    ElementAssemblyTypeEnum_GIRDER = _OpenLxApp.ElementAssembly_ElementAssemblyTypeEnum_GIRDER
    
    ElementAssemblyTypeEnum_REINFORCEMENT_UNIT = _OpenLxApp.ElementAssembly_ElementAssemblyTypeEnum_REINFORCEMENT_UNIT
    
    ElementAssemblyTypeEnum_RIGID_FRAME = _OpenLxApp.ElementAssembly_ElementAssemblyTypeEnum_RIGID_FRAME
    
    ElementAssemblyTypeEnum_SLAB_FIELD = _OpenLxApp.ElementAssembly_ElementAssemblyTypeEnum_SLAB_FIELD
    
    ElementAssemblyTypeEnum_TRUSS = _OpenLxApp.ElementAssembly_ElementAssemblyTypeEnum_TRUSS
    
    ElementAssemblyTypeEnum_USERDEFINED = _OpenLxApp.ElementAssembly_ElementAssemblyTypeEnum_USERDEFINED
    
    ElementAssemblyTypeEnum_NOTDEFINED = _OpenLxApp.ElementAssembly_ElementAssemblyTypeEnum_NOTDEFINED
    
    setPredefinedType = _swig_new_instance_method(_OpenLxApp.ElementAssembly_setPredefinedType)
    getPredefinedType = _swig_new_instance_method(_OpenLxApp.ElementAssembly_getPredefinedType)
    addToAssembly = _swig_new_instance_method(_OpenLxApp.ElementAssembly_addToAssembly)
    removeFromAssembly = _swig_new_instance_method(_OpenLxApp.ElementAssembly_removeFromAssembly)
    getAssembledElements = _swig_new_instance_method(_OpenLxApp.ElementAssembly_getAssembledElements)
    __swig_destroy__ = _OpenLxApp.delete_ElementAssembly

    def __init__(self, *args):
        r"""
        __init__(ElementAssembly self, std::shared_ptr< OpenLxApp::ElementAssembly > other) -> ElementAssembly
        __init__(ElementAssembly self, App::ElementAssembly * aObj) -> ElementAssembly
        __init__(ElementAssembly self, std::shared_ptr< OpenLxApp::Document > aDoc) -> ElementAssembly
        __init__(ElementAssembly self) -> ElementAssembly
        """
        if self.__class__ == ElementAssembly:
            _self = None
        else:
            _self = self
        _OpenLxApp.ElementAssembly_swiginit(self, _OpenLxApp.new_ElementAssembly(_self, *args))
    def __disown__(self):
        self.this.disown()
        _OpenLxApp.disown_ElementAssembly(self)
        return weakref.proxy(self)

# Register ElementAssembly in _OpenLxApp:
_OpenLxApp.ElementAssembly_swigregister(ElementAssembly)
ElementAssembly_getEntityType_Static = _OpenLxApp.ElementAssembly_getEntityType_Static
ElementAssembly_createIn = _OpenLxApp.ElementAssembly_createIn
ElementAssembly_createFrom = _OpenLxApp.ElementAssembly_createFrom

class ElementComponent(Element):
    r"""Proxy of C++ OpenLxApp::ElementComponent class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getEntityType_Static = _swig_new_static_method(_OpenLxApp.ElementComponent_getEntityType_Static)
    assign = _swig_new_instance_method(_OpenLxApp.ElementComponent_assign)
    isEqual = _swig_new_instance_method(_OpenLxApp.ElementComponent_isEqual)
    __getCasted__ = _swig_new_instance_method(_OpenLxApp.ElementComponent___getCasted__)
    createIn = _swig_new_static_method(_OpenLxApp.ElementComponent_createIn)
    createFrom = _swig_new_static_method(_OpenLxApp.ElementComponent_createFrom)
    __swig_destroy__ = _OpenLxApp.delete_ElementComponent

    def __init__(self, *args):
        r"""
        __init__(ElementComponent self, std::shared_ptr< OpenLxApp::ElementComponent > other) -> ElementComponent
        __init__(ElementComponent self, App::ElementComponent * aObj) -> ElementComponent
        __init__(ElementComponent self, std::shared_ptr< OpenLxApp::Document > aDoc) -> ElementComponent
        __init__(ElementComponent self) -> ElementComponent
        """
        if self.__class__ == ElementComponent:
            _self = None
        else:
            _self = self
        _OpenLxApp.ElementComponent_swiginit(self, _OpenLxApp.new_ElementComponent(_self, *args))
    def __disown__(self):
        self.this.disown()
        _OpenLxApp.disown_ElementComponent(self)
        return weakref.proxy(self)

# Register ElementComponent in _OpenLxApp:
_OpenLxApp.ElementComponent_swigregister(ElementComponent)
ElementComponent_getEntityType_Static = _OpenLxApp.ElementComponent_getEntityType_Static
ElementComponent_createIn = _OpenLxApp.ElementComponent_createIn
ElementComponent_createFrom = _OpenLxApp.ElementComponent_createFrom

class DiscreteAccessory(ElementComponent):
    r"""Proxy of C++ OpenLxApp::DiscreteAccessory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getEntityType_Static = _swig_new_static_method(_OpenLxApp.DiscreteAccessory_getEntityType_Static)
    assign = _swig_new_instance_method(_OpenLxApp.DiscreteAccessory_assign)
    isEqual = _swig_new_instance_method(_OpenLxApp.DiscreteAccessory_isEqual)
    __getCasted__ = _swig_new_instance_method(_OpenLxApp.DiscreteAccessory___getCasted__)
    createIn = _swig_new_static_method(_OpenLxApp.DiscreteAccessory_createIn)
    createFrom = _swig_new_static_method(_OpenLxApp.DiscreteAccessory_createFrom)
    __swig_destroy__ = _OpenLxApp.delete_DiscreteAccessory

    def __init__(self, *args):
        r"""
        __init__(DiscreteAccessory self, std::shared_ptr< OpenLxApp::DiscreteAccessory > other) -> DiscreteAccessory
        __init__(DiscreteAccessory self, App::DiscreteAccessory * aObj) -> DiscreteAccessory
        __init__(DiscreteAccessory self, std::shared_ptr< OpenLxApp::Document > aDoc) -> DiscreteAccessory
        __init__(DiscreteAccessory self) -> DiscreteAccessory
        """
        if self.__class__ == DiscreteAccessory:
            _self = None
        else:
            _self = self
        _OpenLxApp.DiscreteAccessory_swiginit(self, _OpenLxApp.new_DiscreteAccessory(_self, *args))
    def __disown__(self):
        self.this.disown()
        _OpenLxApp.disown_DiscreteAccessory(self)
        return weakref.proxy(self)

# Register DiscreteAccessory in _OpenLxApp:
_OpenLxApp.DiscreteAccessory_swigregister(DiscreteAccessory)
DiscreteAccessory_getEntityType_Static = _OpenLxApp.DiscreteAccessory_getEntityType_Static
DiscreteAccessory_createIn = _OpenLxApp.DiscreteAccessory_createIn
DiscreteAccessory_createFrom = _OpenLxApp.DiscreteAccessory_createFrom

class ImpactProtectionDevice(ElementComponent):
    r"""Proxy of C++ OpenLxApp::ImpactProtectionDevice class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getEntityType_Static = _swig_new_static_method(_OpenLxApp.ImpactProtectionDevice_getEntityType_Static)
    assign = _swig_new_instance_method(_OpenLxApp.ImpactProtectionDevice_assign)
    isEqual = _swig_new_instance_method(_OpenLxApp.ImpactProtectionDevice_isEqual)
    __getCasted__ = _swig_new_instance_method(_OpenLxApp.ImpactProtectionDevice___getCasted__)
    createIn = _swig_new_static_method(_OpenLxApp.ImpactProtectionDevice_createIn)
    createFrom = _swig_new_static_method(_OpenLxApp.ImpactProtectionDevice_createFrom)
    PredefinedTypeEnum_BUMPER = _OpenLxApp.ImpactProtectionDevice_PredefinedTypeEnum_BUMPER
    
    PredefinedTypeEnum_CRASHCUSHION = _OpenLxApp.ImpactProtectionDevice_PredefinedTypeEnum_CRASHCUSHION
    
    PredefinedTypeEnum_DAMPINGSYSTEM = _OpenLxApp.ImpactProtectionDevice_PredefinedTypeEnum_DAMPINGSYSTEM
    
    PredefinedTypeEnum_FENDER = _OpenLxApp.ImpactProtectionDevice_PredefinedTypeEnum_FENDER
    
    PredefinedTypeEnum_USERDEFINED = _OpenLxApp.ImpactProtectionDevice_PredefinedTypeEnum_USERDEFINED
    
    PredefinedTypeEnum_NOTDEFINED = _OpenLxApp.ImpactProtectionDevice_PredefinedTypeEnum_NOTDEFINED
    
    setPredefinedType = _swig_new_instance_method(_OpenLxApp.ImpactProtectionDevice_setPredefinedType)
    getPredefinedType = _swig_new_instance_method(_OpenLxApp.ImpactProtectionDevice_getPredefinedType)
    __swig_destroy__ = _OpenLxApp.delete_ImpactProtectionDevice

    def __init__(self, *args):
        r"""
        __init__(ImpactProtectionDevice self, std::shared_ptr< OpenLxApp::ImpactProtectionDevice > other) -> ImpactProtectionDevice
        __init__(ImpactProtectionDevice self, App::ImpactProtectionDevice * aObj) -> ImpactProtectionDevice
        __init__(ImpactProtectionDevice self, std::shared_ptr< OpenLxApp::Document > aDoc) -> ImpactProtectionDevice
        __init__(ImpactProtectionDevice self) -> ImpactProtectionDevice
        """
        if self.__class__ == ImpactProtectionDevice:
            _self = None
        else:
            _self = self
        _OpenLxApp.ImpactProtectionDevice_swiginit(self, _OpenLxApp.new_ImpactProtectionDevice(_self, *args))
    def __disown__(self):
        self.this.disown()
        _OpenLxApp.disown_ImpactProtectionDevice(self)
        return weakref.proxy(self)

# Register ImpactProtectionDevice in _OpenLxApp:
_OpenLxApp.ImpactProtectionDevice_swigregister(ImpactProtectionDevice)
ImpactProtectionDevice_getEntityType_Static = _OpenLxApp.ImpactProtectionDevice_getEntityType_Static
ImpactProtectionDevice_createIn = _OpenLxApp.ImpactProtectionDevice_createIn
ImpactProtectionDevice_createFrom = _OpenLxApp.ImpactProtectionDevice_createFrom

class MechanicalFastener(ElementComponent):
    r"""Proxy of C++ OpenLxApp::MechanicalFastener class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getEntityType_Static = _swig_new_static_method(_OpenLxApp.MechanicalFastener_getEntityType_Static)
    assign = _swig_new_instance_method(_OpenLxApp.MechanicalFastener_assign)
    isEqual = _swig_new_instance_method(_OpenLxApp.MechanicalFastener_isEqual)
    __getCasted__ = _swig_new_instance_method(_OpenLxApp.MechanicalFastener___getCasted__)
    createIn = _swig_new_static_method(_OpenLxApp.MechanicalFastener_createIn)
    createFrom = _swig_new_static_method(_OpenLxApp.MechanicalFastener_createFrom)
    PredefinedTypeEnum_ANCHORBOLT = _OpenLxApp.MechanicalFastener_PredefinedTypeEnum_ANCHORBOLT
    
    PredefinedTypeEnum_BOLT = _OpenLxApp.MechanicalFastener_PredefinedTypeEnum_BOLT
    
    PredefinedTypeEnum_DOWEL = _OpenLxApp.MechanicalFastener_PredefinedTypeEnum_DOWEL
    
    PredefinedTypeEnum_NAIL = _OpenLxApp.MechanicalFastener_PredefinedTypeEnum_NAIL
    
    PredefinedTypeEnum_NAILPLATE = _OpenLxApp.MechanicalFastener_PredefinedTypeEnum_NAILPLATE
    
    PredefinedTypeEnum_RIVET = _OpenLxApp.MechanicalFastener_PredefinedTypeEnum_RIVET
    
    PredefinedTypeEnum_SCREW = _OpenLxApp.MechanicalFastener_PredefinedTypeEnum_SCREW
    
    PredefinedTypeEnum_SHEARCONNECTOR = _OpenLxApp.MechanicalFastener_PredefinedTypeEnum_SHEARCONNECTOR
    
    PredefinedTypeEnum_STAPLE = _OpenLxApp.MechanicalFastener_PredefinedTypeEnum_STAPLE
    
    PredefinedTypeEnum_STUDSHEARCONNECTOR = _OpenLxApp.MechanicalFastener_PredefinedTypeEnum_STUDSHEARCONNECTOR
    
    PredefinedTypeEnum_USERDEFINED = _OpenLxApp.MechanicalFastener_PredefinedTypeEnum_USERDEFINED
    
    PredefinedTypeEnum_NOTDEFINED = _OpenLxApp.MechanicalFastener_PredefinedTypeEnum_NOTDEFINED
    
    setPredefinedType = _swig_new_instance_method(_OpenLxApp.MechanicalFastener_setPredefinedType)
    getPredefinedType = _swig_new_instance_method(_OpenLxApp.MechanicalFastener_getPredefinedType)
    __swig_destroy__ = _OpenLxApp.delete_MechanicalFastener

    def __init__(self, *args):
        r"""
        __init__(MechanicalFastener self, std::shared_ptr< OpenLxApp::MechanicalFastener > other) -> MechanicalFastener
        __init__(MechanicalFastener self, App::MechanicalFastener * aObj) -> MechanicalFastener
        __init__(MechanicalFastener self, std::shared_ptr< OpenLxApp::Document > aDoc) -> MechanicalFastener
        __init__(MechanicalFastener self) -> MechanicalFastener
        """
        if self.__class__ == MechanicalFastener:
            _self = None
        else:
            _self = self
        _OpenLxApp.MechanicalFastener_swiginit(self, _OpenLxApp.new_MechanicalFastener(_self, *args))
    def __disown__(self):
        self.this.disown()
        _OpenLxApp.disown_MechanicalFastener(self)
        return weakref.proxy(self)

# Register MechanicalFastener in _OpenLxApp:
_OpenLxApp.MechanicalFastener_swigregister(MechanicalFastener)
MechanicalFastener_getEntityType_Static = _OpenLxApp.MechanicalFastener_getEntityType_Static
MechanicalFastener_createIn = _OpenLxApp.MechanicalFastener_createIn
MechanicalFastener_createFrom = _OpenLxApp.MechanicalFastener_createFrom

class Sign(ElementComponent):
    r"""Proxy of C++ OpenLxApp::Sign class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getEntityType_Static = _swig_new_static_method(_OpenLxApp.Sign_getEntityType_Static)
    assign = _swig_new_instance_method(_OpenLxApp.Sign_assign)
    isEqual = _swig_new_instance_method(_OpenLxApp.Sign_isEqual)
    __getCasted__ = _swig_new_instance_method(_OpenLxApp.Sign___getCasted__)
    createIn = _swig_new_static_method(_OpenLxApp.Sign_createIn)
    createFrom = _swig_new_static_method(_OpenLxApp.Sign_createFrom)
    PredefinedTypeEnum_MARKER = _OpenLxApp.Sign_PredefinedTypeEnum_MARKER
    
    PredefinedTypeEnum_MIRROR = _OpenLxApp.Sign_PredefinedTypeEnum_MIRROR
    
    PredefinedTypeEnum_PICTORAL = _OpenLxApp.Sign_PredefinedTypeEnum_PICTORAL
    
    PredefinedTypeEnum_USERDEFINED = _OpenLxApp.Sign_PredefinedTypeEnum_USERDEFINED
    
    PredefinedTypeEnum_NOTDEFINED = _OpenLxApp.Sign_PredefinedTypeEnum_NOTDEFINED
    
    setPredefinedType = _swig_new_instance_method(_OpenLxApp.Sign_setPredefinedType)
    getPredefinedType = _swig_new_instance_method(_OpenLxApp.Sign_getPredefinedType)
    __swig_destroy__ = _OpenLxApp.delete_Sign

    def __init__(self, *args):
        r"""
        __init__(Sign self, std::shared_ptr< OpenLxApp::Sign > other) -> Sign
        __init__(Sign self, App::Sign * aObj) -> Sign
        __init__(Sign self, std::shared_ptr< OpenLxApp::Document > aDoc) -> Sign
        __init__(Sign self) -> Sign
        """
        if self.__class__ == Sign:
            _self = None
        else:
            _self = self
        _OpenLxApp.Sign_swiginit(self, _OpenLxApp.new_Sign(_self, *args))
    def __disown__(self):
        self.this.disown()
        _OpenLxApp.disown_Sign(self)
        return weakref.proxy(self)

# Register Sign in _OpenLxApp:
_OpenLxApp.Sign_swigregister(Sign)
Sign_getEntityType_Static = _OpenLxApp.Sign_getEntityType_Static
Sign_createIn = _OpenLxApp.Sign_createIn
Sign_createFrom = _OpenLxApp.Sign_createFrom

class Footing(Element):
    r"""Proxy of C++ OpenLxApp::Footing class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getEntityType_Static = _swig_new_static_method(_OpenLxApp.Footing_getEntityType_Static)
    assign = _swig_new_instance_method(_OpenLxApp.Footing_assign)
    isEqual = _swig_new_instance_method(_OpenLxApp.Footing_isEqual)
    __getCasted__ = _swig_new_instance_method(_OpenLxApp.Footing___getCasted__)
    createIn = _swig_new_static_method(_OpenLxApp.Footing_createIn)
    createFrom = _swig_new_static_method(_OpenLxApp.Footing_createFrom)
    FootingTypeEnum_CAISSON_FOUNDATION = _OpenLxApp.Footing_FootingTypeEnum_CAISSON_FOUNDATION
    
    FootingTypeEnum_FOOTING_BEAM = _OpenLxApp.Footing_FootingTypeEnum_FOOTING_BEAM
    
    FootingTypeEnum_PAD_FOOTING = _OpenLxApp.Footing_FootingTypeEnum_PAD_FOOTING
    
    FootingTypeEnum_PILE_CAP = _OpenLxApp.Footing_FootingTypeEnum_PILE_CAP
    
    FootingTypeEnum_STRIP_FOOTING = _OpenLxApp.Footing_FootingTypeEnum_STRIP_FOOTING
    
    FootingTypeEnum_USERDEFINED = _OpenLxApp.Footing_FootingTypeEnum_USERDEFINED
    
    FootingTypeEnum_NOTDEFINED = _OpenLxApp.Footing_FootingTypeEnum_NOTDEFINED
    
    setPredefinedType = _swig_new_instance_method(_OpenLxApp.Footing_setPredefinedType)
    getPredefinedType = _swig_new_instance_method(_OpenLxApp.Footing_getPredefinedType)
    __swig_destroy__ = _OpenLxApp.delete_Footing

    def __init__(self, *args):
        r"""
        __init__(Footing self, std::shared_ptr< OpenLxApp::Footing > other) -> Footing
        __init__(Footing self, App::Footing * aObj) -> Footing
        __init__(Footing self, std::shared_ptr< OpenLxApp::Document > aDoc) -> Footing
        __init__(Footing self) -> Footing
        """
        if self.__class__ == Footing:
            _self = None
        else:
            _self = self
        _OpenLxApp.Footing_swiginit(self, _OpenLxApp.new_Footing(_self, *args))
    def __disown__(self):
        self.this.disown()
        _OpenLxApp.disown_Footing(self)
        return weakref.proxy(self)

# Register Footing in _OpenLxApp:
_OpenLxApp.Footing_swigregister(Footing)
Footing_getEntityType_Static = _OpenLxApp.Footing_getEntityType_Static
Footing_createIn = _OpenLxApp.Footing_createIn
Footing_createFrom = _OpenLxApp.Footing_createFrom

class GeotechnicalStratum(Element):
    r"""Proxy of C++ OpenLxApp::GeotechnicalStratum class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getEntityType_Static = _swig_new_static_method(_OpenLxApp.GeotechnicalStratum_getEntityType_Static)
    assign = _swig_new_instance_method(_OpenLxApp.GeotechnicalStratum_assign)
    isEqual = _swig_new_instance_method(_OpenLxApp.GeotechnicalStratum_isEqual)
    __getCasted__ = _swig_new_instance_method(_OpenLxApp.GeotechnicalStratum___getCasted__)
    createIn = _swig_new_static_method(_OpenLxApp.GeotechnicalStratum_createIn)
    createFrom = _swig_new_static_method(_OpenLxApp.GeotechnicalStratum_createFrom)
    PredefinedTypeEnum_BLOCKINGDEVICE = _OpenLxApp.GeotechnicalStratum_PredefinedTypeEnum_BLOCKINGDEVICE
    
    PredefinedTypeEnum_DERAILER = _OpenLxApp.GeotechnicalStratum_PredefinedTypeEnum_DERAILER
    
    PredefinedTypeEnum_FROG = _OpenLxApp.GeotechnicalStratum_PredefinedTypeEnum_FROG
    
    PredefinedTypeEnum_HALFSETOFBLADES = _OpenLxApp.GeotechnicalStratum_PredefinedTypeEnum_HALFSETOFBLADES
    
    PredefinedTypeEnum_SLEEPER = _OpenLxApp.GeotechnicalStratum_PredefinedTypeEnum_SLEEPER
    
    PredefinedTypeEnum_SPEEDREGULATOR = _OpenLxApp.GeotechnicalStratum_PredefinedTypeEnum_SPEEDREGULATOR
    
    PredefinedTypeEnum_TRACKENDOFALIGNMENT = _OpenLxApp.GeotechnicalStratum_PredefinedTypeEnum_TRACKENDOFALIGNMENT
    
    PredefinedTypeEnum_VEHICLESTOP = _OpenLxApp.GeotechnicalStratum_PredefinedTypeEnum_VEHICLESTOP
    
    PredefinedTypeEnum_USERDEFINED = _OpenLxApp.GeotechnicalStratum_PredefinedTypeEnum_USERDEFINED
    
    PredefinedTypeEnum_NOTDEFINED = _OpenLxApp.GeotechnicalStratum_PredefinedTypeEnum_NOTDEFINED
    
    setPredefinedType = _swig_new_instance_method(_OpenLxApp.GeotechnicalStratum_setPredefinedType)
    getPredefinedType = _swig_new_instance_method(_OpenLxApp.GeotechnicalStratum_getPredefinedType)
    __swig_destroy__ = _OpenLxApp.delete_GeotechnicalStratum

    def __init__(self, *args):
        r"""
        __init__(GeotechnicalStratum self, std::shared_ptr< OpenLxApp::GeotechnicalStratum > other) -> GeotechnicalStratum
        __init__(GeotechnicalStratum self, App::GeotechnicalStratum * aObj) -> GeotechnicalStratum
        __init__(GeotechnicalStratum self, std::shared_ptr< OpenLxApp::Document > aDoc) -> GeotechnicalStratum
        __init__(GeotechnicalStratum self) -> GeotechnicalStratum
        """
        if self.__class__ == GeotechnicalStratum:
            _self = None
        else:
            _self = self
        _OpenLxApp.GeotechnicalStratum_swiginit(self, _OpenLxApp.new_GeotechnicalStratum(_self, *args))
    def __disown__(self):
        self.this.disown()
        _OpenLxApp.disown_GeotechnicalStratum(self)
        return weakref.proxy(self)

# Register GeotechnicalStratum in _OpenLxApp:
_OpenLxApp.GeotechnicalStratum_swigregister(GeotechnicalStratum)
GeotechnicalStratum_getEntityType_Static = _OpenLxApp.GeotechnicalStratum_getEntityType_Static
GeotechnicalStratum_createIn = _OpenLxApp.GeotechnicalStratum_createIn
GeotechnicalStratum_createFrom = _OpenLxApp.GeotechnicalStratum_createFrom

class Kerb(Element):
    r"""Proxy of C++ OpenLxApp::Kerb class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getEntityType_Static = _swig_new_static_method(_OpenLxApp.Kerb_getEntityType_Static)
    assign = _swig_new_instance_method(_OpenLxApp.Kerb_assign)
    isEqual = _swig_new_instance_method(_OpenLxApp.Kerb_isEqual)
    __getCasted__ = _swig_new_instance_method(_OpenLxApp.Kerb___getCasted__)
    createIn = _swig_new_static_method(_OpenLxApp.Kerb_createIn)
    createFrom = _swig_new_static_method(_OpenLxApp.Kerb_createFrom)
    PredefinedTypeEnum_USERDEFINED = _OpenLxApp.Kerb_PredefinedTypeEnum_USERDEFINED
    
    PredefinedTypeEnum_NOTDEFINED = _OpenLxApp.Kerb_PredefinedTypeEnum_NOTDEFINED
    
    setPredefinedType = _swig_new_instance_method(_OpenLxApp.Kerb_setPredefinedType)
    getPredefinedType = _swig_new_instance_method(_OpenLxApp.Kerb_getPredefinedType)
    __swig_destroy__ = _OpenLxApp.delete_Kerb

    def __init__(self, *args):
        r"""
        __init__(Kerb self, std::shared_ptr< OpenLxApp::Kerb > other) -> Kerb
        __init__(Kerb self, App::Kerb * aObj) -> Kerb
        __init__(Kerb self, std::shared_ptr< OpenLxApp::Document > aDoc) -> Kerb
        __init__(Kerb self) -> Kerb
        """
        if self.__class__ == Kerb:
            _self = None
        else:
            _self = self
        _OpenLxApp.Kerb_swiginit(self, _OpenLxApp.new_Kerb(_self, *args))
    def __disown__(self):
        self.this.disown()
        _OpenLxApp.disown_Kerb(self)
        return weakref.proxy(self)

# Register Kerb in _OpenLxApp:
_OpenLxApp.Kerb_swigregister(Kerb)
Kerb_getEntityType_Static = _OpenLxApp.Kerb_getEntityType_Static
Kerb_createIn = _OpenLxApp.Kerb_createIn
Kerb_createFrom = _OpenLxApp.Kerb_createFrom

class Member(Element):
    r"""Proxy of C++ OpenLxApp::Member class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getEntityType_Static = _swig_new_static_method(_OpenLxApp.Member_getEntityType_Static)
    assign = _swig_new_instance_method(_OpenLxApp.Member_assign)
    isEqual = _swig_new_instance_method(_OpenLxApp.Member_isEqual)
    __getCasted__ = _swig_new_instance_method(_OpenLxApp.Member___getCasted__)
    createIn = _swig_new_static_method(_OpenLxApp.Member_createIn)
    createFrom = _swig_new_static_method(_OpenLxApp.Member_createFrom)
    __swig_destroy__ = _OpenLxApp.delete_Member
    MemberTypeEnum_BRACE = _OpenLxApp.Member_MemberTypeEnum_BRACE
    
    MemberTypeEnum_CHORD = _OpenLxApp.Member_MemberTypeEnum_CHORD
    
    MemberTypeEnum_COLLAR = _OpenLxApp.Member_MemberTypeEnum_COLLAR
    
    MemberTypeEnum_MEMBER = _OpenLxApp.Member_MemberTypeEnum_MEMBER
    
    MemberTypeEnum_MULLION = _OpenLxApp.Member_MemberTypeEnum_MULLION
    
    MemberTypeEnum_PLATE = _OpenLxApp.Member_MemberTypeEnum_PLATE
    
    MemberTypeEnum_POST = _OpenLxApp.Member_MemberTypeEnum_POST
    
    MemberTypeEnum_PURLIN = _OpenLxApp.Member_MemberTypeEnum_PURLIN
    
    MemberTypeEnum_RAFTER = _OpenLxApp.Member_MemberTypeEnum_RAFTER
    
    MemberTypeEnum_STRINGER = _OpenLxApp.Member_MemberTypeEnum_STRINGER
    
    MemberTypeEnum_STRUT = _OpenLxApp.Member_MemberTypeEnum_STRUT
    
    MemberTypeEnum_STUD = _OpenLxApp.Member_MemberTypeEnum_STUD
    
    MemberTypeEnum_USERDEFINED = _OpenLxApp.Member_MemberTypeEnum_USERDEFINED
    
    MemberTypeEnum_NOTDEFINED = _OpenLxApp.Member_MemberTypeEnum_NOTDEFINED
    
    setPredefinedType = _swig_new_instance_method(_OpenLxApp.Member_setPredefinedType)
    getPredefinedType = _swig_new_instance_method(_OpenLxApp.Member_getPredefinedType)

    def __init__(self, *args):
        r"""
        __init__(Member self, std::shared_ptr< OpenLxApp::Member > other) -> Member
        __init__(Member self, App::Member * aObj) -> Member
        __init__(Member self, std::shared_ptr< OpenLxApp::Document > aDoc) -> Member
        __init__(Member self) -> Member
        """
        if self.__class__ == Member:
            _self = None
        else:
            _self = self
        _OpenLxApp.Member_swiginit(self, _OpenLxApp.new_Member(_self, *args))
    def __disown__(self):
        self.this.disown()
        _OpenLxApp.disown_Member(self)
        return weakref.proxy(self)

# Register Member in _OpenLxApp:
_OpenLxApp.Member_swigregister(Member)
Member_getEntityType_Static = _OpenLxApp.Member_getEntityType_Static
Member_createIn = _OpenLxApp.Member_createIn
Member_createFrom = _OpenLxApp.Member_createFrom

class MemberStandardCase(Member):
    r"""Proxy of C++ OpenLxApp::MemberStandardCase class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getEntityType_Static = _swig_new_static_method(_OpenLxApp.MemberStandardCase_getEntityType_Static)
    assign = _swig_new_instance_method(_OpenLxApp.MemberStandardCase_assign)
    isEqual = _swig_new_instance_method(_OpenLxApp.MemberStandardCase_isEqual)
    __getCasted__ = _swig_new_instance_method(_OpenLxApp.MemberStandardCase___getCasted__)
    createIn = _swig_new_static_method(_OpenLxApp.MemberStandardCase_createIn)
    createFrom = _swig_new_static_method(_OpenLxApp.MemberStandardCase_createFrom)
    __swig_destroy__ = _OpenLxApp.delete_MemberStandardCase

    def __init__(self, *args):
        r"""
        __init__(MemberStandardCase self, std::shared_ptr< OpenLxApp::MemberStandardCase > other) -> MemberStandardCase
        __init__(MemberStandardCase self, App::MemberStandardCase * aObj) -> MemberStandardCase
        __init__(MemberStandardCase self, std::shared_ptr< OpenLxApp::Document > aDoc) -> MemberStandardCase
        __init__(MemberStandardCase self) -> MemberStandardCase
        """
        if self.__class__ == MemberStandardCase:
            _self = None
        else:
            _self = self
        _OpenLxApp.MemberStandardCase_swiginit(self, _OpenLxApp.new_MemberStandardCase(_self, *args))
    def __disown__(self):
        self.this.disown()
        _OpenLxApp.disown_MemberStandardCase(self)
        return weakref.proxy(self)

# Register MemberStandardCase in _OpenLxApp:
_OpenLxApp.MemberStandardCase_swigregister(MemberStandardCase)
MemberStandardCase_getEntityType_Static = _OpenLxApp.MemberStandardCase_getEntityType_Static
MemberStandardCase_createIn = _OpenLxApp.MemberStandardCase_createIn
MemberStandardCase_createFrom = _OpenLxApp.MemberStandardCase_createFrom

class MooringDevice(Element):
    r"""Proxy of C++ OpenLxApp::MooringDevice class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getEntityType_Static = _swig_new_static_method(_OpenLxApp.MooringDevice_getEntityType_Static)
    assign = _swig_new_instance_method(_OpenLxApp.MooringDevice_assign)
    isEqual = _swig_new_instance_method(_OpenLxApp.MooringDevice_isEqual)
    __getCasted__ = _swig_new_instance_method(_OpenLxApp.MooringDevice___getCasted__)
    createIn = _swig_new_static_method(_OpenLxApp.MooringDevice_createIn)
    createFrom = _swig_new_static_method(_OpenLxApp.MooringDevice_createFrom)
    PredefinedTypeEnum_BOLLARD = _OpenLxApp.MooringDevice_PredefinedTypeEnum_BOLLARD
    
    PredefinedTypeEnum_LINETENSIONER = _OpenLxApp.MooringDevice_PredefinedTypeEnum_LINETENSIONER
    
    PredefinedTypeEnum_MAGNETICDEVICE = _OpenLxApp.MooringDevice_PredefinedTypeEnum_MAGNETICDEVICE
    
    PredefinedTypeEnum_MOORINGHOOKS = _OpenLxApp.MooringDevice_PredefinedTypeEnum_MOORINGHOOKS
    
    PredefinedTypeEnum_VACUUMDEVICE = _OpenLxApp.MooringDevice_PredefinedTypeEnum_VACUUMDEVICE
    
    PredefinedTypeEnum_USERDEFINED = _OpenLxApp.MooringDevice_PredefinedTypeEnum_USERDEFINED
    
    PredefinedTypeEnum_NOTDEFINED = _OpenLxApp.MooringDevice_PredefinedTypeEnum_NOTDEFINED
    
    setPredefinedType = _swig_new_instance_method(_OpenLxApp.MooringDevice_setPredefinedType)
    getPredefinedType = _swig_new_instance_method(_OpenLxApp.MooringDevice_getPredefinedType)
    __swig_destroy__ = _OpenLxApp.delete_MooringDevice

    def __init__(self, *args):
        r"""
        __init__(MooringDevice self, std::shared_ptr< OpenLxApp::MooringDevice > other) -> MooringDevice
        __init__(MooringDevice self, App::MooringDevice * aObj) -> MooringDevice
        __init__(MooringDevice self, std::shared_ptr< OpenLxApp::Document > aDoc) -> MooringDevice
        __init__(MooringDevice self) -> MooringDevice
        """
        if self.__class__ == MooringDevice:
            _self = None
        else:
            _self = self
        _OpenLxApp.MooringDevice_swiginit(self, _OpenLxApp.new_MooringDevice(_self, *args))
    def __disown__(self):
        self.this.disown()
        _OpenLxApp.disown_MooringDevice(self)
        return weakref.proxy(self)

# Register MooringDevice in _OpenLxApp:
_OpenLxApp.MooringDevice_swigregister(MooringDevice)
MooringDevice_getEntityType_Static = _OpenLxApp.MooringDevice_getEntityType_Static
MooringDevice_createIn = _OpenLxApp.MooringDevice_createIn
MooringDevice_createFrom = _OpenLxApp.MooringDevice_createFrom

class NavigationElement(Element):
    r"""Proxy of C++ OpenLxApp::NavigationElement class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getEntityType_Static = _swig_new_static_method(_OpenLxApp.NavigationElement_getEntityType_Static)
    assign = _swig_new_instance_method(_OpenLxApp.NavigationElement_assign)
    isEqual = _swig_new_instance_method(_OpenLxApp.NavigationElement_isEqual)
    __getCasted__ = _swig_new_instance_method(_OpenLxApp.NavigationElement___getCasted__)
    createIn = _swig_new_static_method(_OpenLxApp.NavigationElement_createIn)
    createFrom = _swig_new_static_method(_OpenLxApp.NavigationElement_createFrom)
    PredefinedTypeEnum_BEACON = _OpenLxApp.NavigationElement_PredefinedTypeEnum_BEACON
    
    PredefinedTypeEnum_BUOY = _OpenLxApp.NavigationElement_PredefinedTypeEnum_BUOY
    
    PredefinedTypeEnum_USERDEFINED = _OpenLxApp.NavigationElement_PredefinedTypeEnum_USERDEFINED
    
    PredefinedTypeEnum_NOTDEFINED = _OpenLxApp.NavigationElement_PredefinedTypeEnum_NOTDEFINED
    
    setPredefinedType = _swig_new_instance_method(_OpenLxApp.NavigationElement_setPredefinedType)
    getPredefinedType = _swig_new_instance_method(_OpenLxApp.NavigationElement_getPredefinedType)
    __swig_destroy__ = _OpenLxApp.delete_NavigationElement

    def __init__(self, *args):
        r"""
        __init__(NavigationElement self, std::shared_ptr< OpenLxApp::NavigationElement > other) -> NavigationElement
        __init__(NavigationElement self, App::NavigationElement * aObj) -> NavigationElement
        __init__(NavigationElement self, std::shared_ptr< OpenLxApp::Document > aDoc) -> NavigationElement
        __init__(NavigationElement self) -> NavigationElement
        """
        if self.__class__ == NavigationElement:
            _self = None
        else:
            _self = self
        _OpenLxApp.NavigationElement_swiginit(self, _OpenLxApp.new_NavigationElement(_self, *args))
    def __disown__(self):
        self.this.disown()
        _OpenLxApp.disown_NavigationElement(self)
        return weakref.proxy(self)

# Register NavigationElement in _OpenLxApp:
_OpenLxApp.NavigationElement_swigregister(NavigationElement)
NavigationElement_getEntityType_Static = _OpenLxApp.NavigationElement_getEntityType_Static
NavigationElement_createIn = _OpenLxApp.NavigationElement_createIn
NavigationElement_createFrom = _OpenLxApp.NavigationElement_createFrom

class OpeningElement(Element):
    r"""Proxy of C++ OpenLxApp::OpeningElement class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getEntityType_Static = _swig_new_static_method(_OpenLxApp.OpeningElement_getEntityType_Static)
    assign = _swig_new_instance_method(_OpenLxApp.OpeningElement_assign)
    isEqual = _swig_new_instance_method(_OpenLxApp.OpeningElement_isEqual)
    __getCasted__ = _swig_new_instance_method(_OpenLxApp.OpeningElement___getCasted__)
    createIn = _swig_new_static_method(_OpenLxApp.OpeningElement_createIn)
    createFrom = _swig_new_static_method(_OpenLxApp.OpeningElement_createFrom)
    OpeningElementTypeEnum_OPENING = _OpenLxApp.OpeningElement_OpeningElementTypeEnum_OPENING
    
    OpeningElementTypeEnum_RECESS = _OpenLxApp.OpeningElement_OpeningElementTypeEnum_RECESS
    
    OpeningElementTypeEnum_USERDEFINED = _OpenLxApp.OpeningElement_OpeningElementTypeEnum_USERDEFINED
    
    OpeningElementTypeEnum_NOTDEFINED = _OpenLxApp.OpeningElement_OpeningElementTypeEnum_NOTDEFINED
    
    setPredefinedType = _swig_new_instance_method(_OpenLxApp.OpeningElement_setPredefinedType)
    getPredefinedType = _swig_new_instance_method(_OpenLxApp.OpeningElement_getPredefinedType)
    addFilling = _swig_new_instance_method(_OpenLxApp.OpeningElement_addFilling)
    getFillings = _swig_new_instance_method(_OpenLxApp.OpeningElement_getFillings)
    removeFilling = _swig_new_instance_method(_OpenLxApp.OpeningElement_removeFilling)
    removeFillings = _swig_new_instance_method(_OpenLxApp.OpeningElement_removeFillings)
    getVoidedElement = _swig_new_instance_method(_OpenLxApp.OpeningElement_getVoidedElement)
    __swig_destroy__ = _OpenLxApp.delete_OpeningElement

    def __init__(self, *args):
        r"""
        __init__(OpeningElement self, std::shared_ptr< OpenLxApp::OpeningElement > other) -> OpeningElement
        __init__(OpeningElement self, App::OpeningElement * aObj) -> OpeningElement
        __init__(OpeningElement self, std::shared_ptr< OpenLxApp::Document > aDoc) -> OpeningElement
        __init__(OpeningElement self) -> OpeningElement
        """
        if self.__class__ == OpeningElement:
            _self = None
        else:
            _self = self
        _OpenLxApp.OpeningElement_swiginit(self, _OpenLxApp.new_OpeningElement(_self, *args))
    def __disown__(self):
        self.this.disown()
        _OpenLxApp.disown_OpeningElement(self)
        return weakref.proxy(self)

# Register OpeningElement in _OpenLxApp:
_OpenLxApp.OpeningElement_swigregister(OpeningElement)
OpeningElement_getEntityType_Static = _OpenLxApp.OpeningElement_getEntityType_Static
OpeningElement_createIn = _OpenLxApp.OpeningElement_createIn
OpeningElement_createFrom = _OpenLxApp.OpeningElement_createFrom

class OpeningStandardCase(OpeningElement):
    r"""Proxy of C++ OpenLxApp::OpeningStandardCase class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getEntityType_Static = _swig_new_static_method(_OpenLxApp.OpeningStandardCase_getEntityType_Static)
    assign = _swig_new_instance_method(_OpenLxApp.OpeningStandardCase_assign)
    isEqual = _swig_new_instance_method(_OpenLxApp.OpeningStandardCase_isEqual)
    __getCasted__ = _swig_new_instance_method(_OpenLxApp.OpeningStandardCase___getCasted__)
    createIn = _swig_new_static_method(_OpenLxApp.OpeningStandardCase_createIn)
    createFrom = _swig_new_static_method(_OpenLxApp.OpeningStandardCase_createFrom)
    __swig_destroy__ = _OpenLxApp.delete_OpeningStandardCase
    setGeometry = _swig_new_instance_method(_OpenLxApp.OpeningStandardCase_setGeometry)

    def __init__(self, *args):
        r"""
        __init__(OpeningStandardCase self, std::shared_ptr< OpenLxApp::OpeningStandardCase > other) -> OpeningStandardCase
        __init__(OpeningStandardCase self, App::OpeningElement * aObj) -> OpeningStandardCase
        __init__(OpeningStandardCase self, std::shared_ptr< OpenLxApp::Document > aDoc) -> OpeningStandardCase
        __init__(OpeningStandardCase self) -> OpeningStandardCase
        """
        if self.__class__ == OpeningStandardCase:
            _self = None
        else:
            _self = self
        _OpenLxApp.OpeningStandardCase_swiginit(self, _OpenLxApp.new_OpeningStandardCase(_self, *args))
    def __disown__(self):
        self.this.disown()
        _OpenLxApp.disown_OpeningStandardCase(self)
        return weakref.proxy(self)

# Register OpeningStandardCase in _OpenLxApp:
_OpenLxApp.OpeningStandardCase_swigregister(OpeningStandardCase)
OpeningStandardCase_getEntityType_Static = _OpenLxApp.OpeningStandardCase_getEntityType_Static
OpeningStandardCase_createIn = _OpenLxApp.OpeningStandardCase_createIn
OpeningStandardCase_createFrom = _OpenLxApp.OpeningStandardCase_createFrom

class Pavement(Element):
    r"""Proxy of C++ OpenLxApp::Pavement class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getEntityType_Static = _swig_new_static_method(_OpenLxApp.Pavement_getEntityType_Static)
    assign = _swig_new_instance_method(_OpenLxApp.Pavement_assign)
    isEqual = _swig_new_instance_method(_OpenLxApp.Pavement_isEqual)
    __getCasted__ = _swig_new_instance_method(_OpenLxApp.Pavement___getCasted__)
    createIn = _swig_new_static_method(_OpenLxApp.Pavement_createIn)
    createFrom = _swig_new_static_method(_OpenLxApp.Pavement_createFrom)
    PredefinedTypeEnum_FLEXIBLE = _OpenLxApp.Pavement_PredefinedTypeEnum_FLEXIBLE
    
    PredefinedTypeEnum_RIGID = _OpenLxApp.Pavement_PredefinedTypeEnum_RIGID
    
    PredefinedTypeEnum_USERDEFINED = _OpenLxApp.Pavement_PredefinedTypeEnum_USERDEFINED
    
    PredefinedTypeEnum_NOTDEFINED = _OpenLxApp.Pavement_PredefinedTypeEnum_NOTDEFINED
    
    setPredefinedType = _swig_new_instance_method(_OpenLxApp.Pavement_setPredefinedType)
    getPredefinedType = _swig_new_instance_method(_OpenLxApp.Pavement_getPredefinedType)
    __swig_destroy__ = _OpenLxApp.delete_Pavement

    def __init__(self, *args):
        r"""
        __init__(Pavement self, std::shared_ptr< OpenLxApp::Pavement > other) -> Pavement
        __init__(Pavement self, App::Pavement * aObj) -> Pavement
        __init__(Pavement self, std::shared_ptr< OpenLxApp::Document > aDoc) -> Pavement
        __init__(Pavement self) -> Pavement
        """
        if self.__class__ == Pavement:
            _self = None
        else:
            _self = self
        _OpenLxApp.Pavement_swiginit(self, _OpenLxApp.new_Pavement(_self, *args))
    def __disown__(self):
        self.this.disown()
        _OpenLxApp.disown_Pavement(self)
        return weakref.proxy(self)

# Register Pavement in _OpenLxApp:
_OpenLxApp.Pavement_swigregister(Pavement)
Pavement_getEntityType_Static = _OpenLxApp.Pavement_getEntityType_Static
Pavement_createIn = _OpenLxApp.Pavement_createIn
Pavement_createFrom = _OpenLxApp.Pavement_createFrom

class Pile(Element):
    r"""Proxy of C++ OpenLxApp::Pile class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getEntityType_Static = _swig_new_static_method(_OpenLxApp.Pile_getEntityType_Static)
    assign = _swig_new_instance_method(_OpenLxApp.Pile_assign)
    isEqual = _swig_new_instance_method(_OpenLxApp.Pile_isEqual)
    __getCasted__ = _swig_new_instance_method(_OpenLxApp.Pile___getCasted__)
    createIn = _swig_new_static_method(_OpenLxApp.Pile_createIn)
    createFrom = _swig_new_static_method(_OpenLxApp.Pile_createFrom)
    PileTypeEnum_BORED = _OpenLxApp.Pile_PileTypeEnum_BORED
    
    PileTypeEnum_DRIVEN = _OpenLxApp.Pile_PileTypeEnum_DRIVEN
    
    PileTypeEnum_JETGROUTING = _OpenLxApp.Pile_PileTypeEnum_JETGROUTING
    
    PileTypeEnum_COHESION = _OpenLxApp.Pile_PileTypeEnum_COHESION
    
    PileTypeEnum_FRICTION = _OpenLxApp.Pile_PileTypeEnum_FRICTION
    
    PileTypeEnum_SUPPORT = _OpenLxApp.Pile_PileTypeEnum_SUPPORT
    
    PileTypeEnum_USERDEFINED = _OpenLxApp.Pile_PileTypeEnum_USERDEFINED
    
    PileTypeEnum_NOTDEFINED = _OpenLxApp.Pile_PileTypeEnum_NOTDEFINED
    
    setPredefinedType = _swig_new_instance_method(_OpenLxApp.Pile_setPredefinedType)
    getPredefinedType = _swig_new_instance_method(_OpenLxApp.Pile_getPredefinedType)
    __swig_destroy__ = _OpenLxApp.delete_Pile

    def __init__(self, *args):
        r"""
        __init__(Pile self, std::shared_ptr< OpenLxApp::Pile > other) -> Pile
        __init__(Pile self, App::Pile * aObj) -> Pile
        __init__(Pile self, std::shared_ptr< OpenLxApp::Document > aDoc) -> Pile
        __init__(Pile self) -> Pile
        """
        if self.__class__ == Pile:
            _self = None
        else:
            _self = self
        _OpenLxApp.Pile_swiginit(self, _OpenLxApp.new_Pile(_self, *args))
    def __disown__(self):
        self.this.disown()
        _OpenLxApp.disown_Pile(self)
        return weakref.proxy(self)

# Register Pile in _OpenLxApp:
_OpenLxApp.Pile_swigregister(Pile)
Pile_getEntityType_Static = _OpenLxApp.Pile_getEntityType_Static
Pile_createIn = _OpenLxApp.Pile_createIn
Pile_createFrom = _OpenLxApp.Pile_createFrom

class Plate(Element):
    r"""Proxy of C++ OpenLxApp::Plate class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getEntityType_Static = _swig_new_static_method(_OpenLxApp.Plate_getEntityType_Static)
    assign = _swig_new_instance_method(_OpenLxApp.Plate_assign)
    isEqual = _swig_new_instance_method(_OpenLxApp.Plate_isEqual)
    __getCasted__ = _swig_new_instance_method(_OpenLxApp.Plate___getCasted__)
    createIn = _swig_new_static_method(_OpenLxApp.Plate_createIn)
    createFrom = _swig_new_static_method(_OpenLxApp.Plate_createFrom)
    PlateTypeEnum_CURTAIN_PANEL = _OpenLxApp.Plate_PlateTypeEnum_CURTAIN_PANEL
    
    PlateTypeEnum_SHEET = _OpenLxApp.Plate_PlateTypeEnum_SHEET
    
    PlateTypeEnum_USERDEFINED = _OpenLxApp.Plate_PlateTypeEnum_USERDEFINED
    
    PlateTypeEnum_NOTDEFINED = _OpenLxApp.Plate_PlateTypeEnum_NOTDEFINED
    
    setPredefinedType = _swig_new_instance_method(_OpenLxApp.Plate_setPredefinedType)
    getPredefinedType = _swig_new_instance_method(_OpenLxApp.Plate_getPredefinedType)
    __swig_destroy__ = _OpenLxApp.delete_Plate

    def __init__(self, *args):
        r"""
        __init__(Plate self, std::shared_ptr< OpenLxApp::Plate > other) -> Plate
        __init__(Plate self, App::Plate * aObj) -> Plate
        __init__(Plate self, std::shared_ptr< OpenLxApp::Document > aDoc) -> Plate
        __init__(Plate self) -> Plate
        """
        if self.__class__ == Plate:
            _self = None
        else:
            _self = self
        _OpenLxApp.Plate_swiginit(self, _OpenLxApp.new_Plate(_self, *args))
    def __disown__(self):
        self.this.disown()
        _OpenLxApp.disown_Plate(self)
        return weakref.proxy(self)

# Register Plate in _OpenLxApp:
_OpenLxApp.Plate_swigregister(Plate)
Plate_getEntityType_Static = _OpenLxApp.Plate_getEntityType_Static
Plate_createIn = _OpenLxApp.Plate_createIn
Plate_createFrom = _OpenLxApp.Plate_createFrom

class PlateStandardCase(Plate):
    r"""Proxy of C++ OpenLxApp::PlateStandardCase class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getEntityType_Static = _swig_new_static_method(_OpenLxApp.PlateStandardCase_getEntityType_Static)
    assign = _swig_new_instance_method(_OpenLxApp.PlateStandardCase_assign)
    isEqual = _swig_new_instance_method(_OpenLxApp.PlateStandardCase_isEqual)
    __getCasted__ = _swig_new_instance_method(_OpenLxApp.PlateStandardCase___getCasted__)
    createIn = _swig_new_static_method(_OpenLxApp.PlateStandardCase_createIn)
    createFrom = _swig_new_static_method(_OpenLxApp.PlateStandardCase_createFrom)
    __swig_destroy__ = _OpenLxApp.delete_PlateStandardCase

    def __init__(self, *args):
        r"""
        __init__(PlateStandardCase self, std::shared_ptr< OpenLxApp::PlateStandardCase > other) -> PlateStandardCase
        __init__(PlateStandardCase self, App::PlateStandardCase * aObj) -> PlateStandardCase
        __init__(PlateStandardCase self, std::shared_ptr< OpenLxApp::Document > aDoc) -> PlateStandardCase
        __init__(PlateStandardCase self) -> PlateStandardCase
        """
        if self.__class__ == PlateStandardCase:
            _self = None
        else:
            _self = self
        _OpenLxApp.PlateStandardCase_swiginit(self, _OpenLxApp.new_PlateStandardCase(_self, *args))
    def __disown__(self):
        self.this.disown()
        _OpenLxApp.disown_PlateStandardCase(self)
        return weakref.proxy(self)

# Register PlateStandardCase in _OpenLxApp:
_OpenLxApp.PlateStandardCase_swigregister(PlateStandardCase)
PlateStandardCase_getEntityType_Static = _OpenLxApp.PlateStandardCase_getEntityType_Static
PlateStandardCase_createIn = _OpenLxApp.PlateStandardCase_createIn
PlateStandardCase_createFrom = _OpenLxApp.PlateStandardCase_createFrom

class Port(Element):
    r"""Proxy of C++ OpenLxApp::Port class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getEntityType_Static = _swig_new_static_method(_OpenLxApp.Port_getEntityType_Static)
    assign = _swig_new_instance_method(_OpenLxApp.Port_assign)
    isEqual = _swig_new_instance_method(_OpenLxApp.Port_isEqual)
    __getCasted__ = _swig_new_instance_method(_OpenLxApp.Port___getCasted__)
    createIn = _swig_new_static_method(_OpenLxApp.Port_createIn)
    createFrom = _swig_new_static_method(_OpenLxApp.Port_createFrom)
    __swig_destroy__ = _OpenLxApp.delete_Port

    def __init__(self, *args):
        r"""
        __init__(Port self, std::shared_ptr< OpenLxApp::Port > other) -> Port
        __init__(Port self, App::Port * aObj) -> Port
        __init__(Port self, std::shared_ptr< OpenLxApp::Document > aDoc) -> Port
        __init__(Port self) -> Port
        """
        if self.__class__ == Port:
            _self = None
        else:
            _self = self
        _OpenLxApp.Port_swiginit(self, _OpenLxApp.new_Port(_self, *args))
    def __disown__(self):
        self.this.disown()
        _OpenLxApp.disown_Port(self)
        return weakref.proxy(self)

# Register Port in _OpenLxApp:
_OpenLxApp.Port_swigregister(Port)
Port_getEntityType_Static = _OpenLxApp.Port_getEntityType_Static
Port_createIn = _OpenLxApp.Port_createIn
Port_createFrom = _OpenLxApp.Port_createFrom

class DistributionPort(Port):
    r"""Proxy of C++ OpenLxApp::DistributionPort class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getEntityType_Static = _swig_new_static_method(_OpenLxApp.DistributionPort_getEntityType_Static)
    assign = _swig_new_instance_method(_OpenLxApp.DistributionPort_assign)
    isEqual = _swig_new_instance_method(_OpenLxApp.DistributionPort_isEqual)
    __getCasted__ = _swig_new_instance_method(_OpenLxApp.DistributionPort___getCasted__)
    createIn = _swig_new_static_method(_OpenLxApp.DistributionPort_createIn)
    createFrom = _swig_new_static_method(_OpenLxApp.DistributionPort_createFrom)
    FlowDirectionEnum_SOURCE = _OpenLxApp.DistributionPort_FlowDirectionEnum_SOURCE
    
    FlowDirectionEnum_SINK = _OpenLxApp.DistributionPort_FlowDirectionEnum_SINK
    
    FlowDirectionEnum_SOURCEANDSINK = _OpenLxApp.DistributionPort_FlowDirectionEnum_SOURCEANDSINK
    
    FlowDirectionEnum_NOTDEFINED = _OpenLxApp.DistributionPort_FlowDirectionEnum_NOTDEFINED
    
    setFlowDirection = _swig_new_instance_method(_OpenLxApp.DistributionPort_setFlowDirection)
    getFlowDirection = _swig_new_instance_method(_OpenLxApp.DistributionPort_getFlowDirection)
    DistributionPortTypeEnum_CABLE = _OpenLxApp.DistributionPort_DistributionPortTypeEnum_CABLE
    
    DistributionPortTypeEnum_CABLECARRIER = _OpenLxApp.DistributionPort_DistributionPortTypeEnum_CABLECARRIER
    
    DistributionPortTypeEnum_DUCT = _OpenLxApp.DistributionPort_DistributionPortTypeEnum_DUCT
    
    DistributionPortTypeEnum_PIPE = _OpenLxApp.DistributionPort_DistributionPortTypeEnum_PIPE
    
    DistributionPortTypeEnum_USERDEFINED = _OpenLxApp.DistributionPort_DistributionPortTypeEnum_USERDEFINED
    
    DistributionPortTypeEnum_NOTDEFINED = _OpenLxApp.DistributionPort_DistributionPortTypeEnum_NOTDEFINED
    
    setPredefinedType = _swig_new_instance_method(_OpenLxApp.DistributionPort_setPredefinedType)
    getPredefinedType = _swig_new_instance_method(_OpenLxApp.DistributionPort_getPredefinedType)
    __swig_destroy__ = _OpenLxApp.delete_DistributionPort

    def __init__(self, *args):
        r"""
        __init__(DistributionPort self, std::shared_ptr< OpenLxApp::DistributionPort > other) -> DistributionPort
        __init__(DistributionPort self, App::DistributionPort * aObj) -> DistributionPort
        __init__(DistributionPort self, std::shared_ptr< OpenLxApp::Document > aDoc) -> DistributionPort
        __init__(DistributionPort self) -> DistributionPort
        """
        if self.__class__ == DistributionPort:
            _self = None
        else:
            _self = self
        _OpenLxApp.DistributionPort_swiginit(self, _OpenLxApp.new_DistributionPort(_self, *args))
    def __disown__(self):
        self.this.disown()
        _OpenLxApp.disown_DistributionPort(self)
        return weakref.proxy(self)

# Register DistributionPort in _OpenLxApp:
_OpenLxApp.DistributionPort_swigregister(DistributionPort)
DistributionPort_getEntityType_Static = _OpenLxApp.DistributionPort_getEntityType_Static
DistributionPort_createIn = _OpenLxApp.DistributionPort_createIn
DistributionPort_createFrom = _OpenLxApp.DistributionPort_createFrom

class Rail(Element):
    r"""Proxy of C++ OpenLxApp::Rail class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getEntityType_Static = _swig_new_static_method(_OpenLxApp.Rail_getEntityType_Static)
    assign = _swig_new_instance_method(_OpenLxApp.Rail_assign)
    isEqual = _swig_new_instance_method(_OpenLxApp.Rail_isEqual)
    __getCasted__ = _swig_new_instance_method(_OpenLxApp.Rail___getCasted__)
    createIn = _swig_new_static_method(_OpenLxApp.Rail_createIn)
    createFrom = _swig_new_static_method(_OpenLxApp.Rail_createFrom)
    PredefinedTypeEnum_BLADE = _OpenLxApp.Rail_PredefinedTypeEnum_BLADE
    
    PredefinedTypeEnum_CHECKRAIL = _OpenLxApp.Rail_PredefinedTypeEnum_CHECKRAIL
    
    PredefinedTypeEnum_GUARDRAIL = _OpenLxApp.Rail_PredefinedTypeEnum_GUARDRAIL
    
    PredefinedTypeEnum_RACKRAIL = _OpenLxApp.Rail_PredefinedTypeEnum_RACKRAIL
    
    PredefinedTypeEnum_RAIL = _OpenLxApp.Rail_PredefinedTypeEnum_RAIL
    
    PredefinedTypeEnum_STOCKRAIL = _OpenLxApp.Rail_PredefinedTypeEnum_STOCKRAIL
    
    PredefinedTypeEnum_USERDEFINED = _OpenLxApp.Rail_PredefinedTypeEnum_USERDEFINED
    
    PredefinedTypeEnum_NOTDEFINED = _OpenLxApp.Rail_PredefinedTypeEnum_NOTDEFINED
    
    setPredefinedType = _swig_new_instance_method(_OpenLxApp.Rail_setPredefinedType)
    getPredefinedType = _swig_new_instance_method(_OpenLxApp.Rail_getPredefinedType)
    __swig_destroy__ = _OpenLxApp.delete_Rail

    def __init__(self, *args):
        r"""
        __init__(Rail self, std::shared_ptr< OpenLxApp::Rail > other) -> Rail
        __init__(Rail self, App::Rail * aObj) -> Rail
        __init__(Rail self, std::shared_ptr< OpenLxApp::Document > aDoc) -> Rail
        __init__(Rail self) -> Rail
        """
        if self.__class__ == Rail:
            _self = None
        else:
            _self = self
        _OpenLxApp.Rail_swiginit(self, _OpenLxApp.new_Rail(_self, *args))
    def __disown__(self):
        self.this.disown()
        _OpenLxApp.disown_Rail(self)
        return weakref.proxy(self)

# Register Rail in _OpenLxApp:
_OpenLxApp.Rail_swigregister(Rail)
Rail_getEntityType_Static = _OpenLxApp.Rail_getEntityType_Static
Rail_createIn = _OpenLxApp.Rail_createIn
Rail_createFrom = _OpenLxApp.Rail_createFrom

class Railing(Element):
    r"""Proxy of C++ OpenLxApp::Railing class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getEntityType_Static = _swig_new_static_method(_OpenLxApp.Railing_getEntityType_Static)
    assign = _swig_new_instance_method(_OpenLxApp.Railing_assign)
    isEqual = _swig_new_instance_method(_OpenLxApp.Railing_isEqual)
    __getCasted__ = _swig_new_instance_method(_OpenLxApp.Railing___getCasted__)
    createIn = _swig_new_static_method(_OpenLxApp.Railing_createIn)
    createFrom = _swig_new_static_method(_OpenLxApp.Railing_createFrom)
    RailingTypeEnum_BALUSTRADE = _OpenLxApp.Railing_RailingTypeEnum_BALUSTRADE
    
    RailingTypeEnum_GUARDRAIL = _OpenLxApp.Railing_RailingTypeEnum_GUARDRAIL
    
    RailingTypeEnum_HANDRAIL = _OpenLxApp.Railing_RailingTypeEnum_HANDRAIL
    
    RailingTypeEnum_USERDEFINED = _OpenLxApp.Railing_RailingTypeEnum_USERDEFINED
    
    RailingTypeEnum_NOTDEFINED = _OpenLxApp.Railing_RailingTypeEnum_NOTDEFINED
    
    setPredefinedType = _swig_new_instance_method(_OpenLxApp.Railing_setPredefinedType)
    getPredefinedType = _swig_new_instance_method(_OpenLxApp.Railing_getPredefinedType)
    __swig_destroy__ = _OpenLxApp.delete_Railing

    def __init__(self, *args):
        r"""
        __init__(Railing self, std::shared_ptr< OpenLxApp::Railing > other) -> Railing
        __init__(Railing self, App::Railing * aObj) -> Railing
        __init__(Railing self, std::shared_ptr< OpenLxApp::Document > aDoc) -> Railing
        __init__(Railing self) -> Railing
        """
        if self.__class__ == Railing:
            _self = None
        else:
            _self = self
        _OpenLxApp.Railing_swiginit(self, _OpenLxApp.new_Railing(_self, *args))
    def __disown__(self):
        self.this.disown()
        _OpenLxApp.disown_Railing(self)
        return weakref.proxy(self)

# Register Railing in _OpenLxApp:
_OpenLxApp.Railing_swigregister(Railing)
Railing_getEntityType_Static = _OpenLxApp.Railing_getEntityType_Static
Railing_createIn = _OpenLxApp.Railing_createIn
Railing_createFrom = _OpenLxApp.Railing_createFrom

class Ramp(Element):
    r"""Proxy of C++ OpenLxApp::Ramp class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getEntityType_Static = _swig_new_static_method(_OpenLxApp.Ramp_getEntityType_Static)
    assign = _swig_new_instance_method(_OpenLxApp.Ramp_assign)
    isEqual = _swig_new_instance_method(_OpenLxApp.Ramp_isEqual)
    __getCasted__ = _swig_new_instance_method(_OpenLxApp.Ramp___getCasted__)
    createIn = _swig_new_static_method(_OpenLxApp.Ramp_createIn)
    createFrom = _swig_new_static_method(_OpenLxApp.Ramp_createFrom)
    RampTypeEnum_STRAIGHT_RUN_RAMP = _OpenLxApp.Ramp_RampTypeEnum_STRAIGHT_RUN_RAMP
    
    RampTypeEnum_TWO_STRAIGHT_RUN_RAMP = _OpenLxApp.Ramp_RampTypeEnum_TWO_STRAIGHT_RUN_RAMP
    
    RampTypeEnum_QUARTER_TURN_RAMP = _OpenLxApp.Ramp_RampTypeEnum_QUARTER_TURN_RAMP
    
    RampTypeEnum_TWO_QUARTER_TURN_RAMP = _OpenLxApp.Ramp_RampTypeEnum_TWO_QUARTER_TURN_RAMP
    
    RampTypeEnum_HALF_TURN_RAMP = _OpenLxApp.Ramp_RampTypeEnum_HALF_TURN_RAMP
    
    RampTypeEnum_SPIRAL_RAMP = _OpenLxApp.Ramp_RampTypeEnum_SPIRAL_RAMP
    
    RampTypeEnum_USERDEFINED = _OpenLxApp.Ramp_RampTypeEnum_USERDEFINED
    
    RampTypeEnum_NOTDEFINED = _OpenLxApp.Ramp_RampTypeEnum_NOTDEFINED
    
    setPredefinedType = _swig_new_instance_method(_OpenLxApp.Ramp_setPredefinedType)
    getPredefinedType = _swig_new_instance_method(_OpenLxApp.Ramp_getPredefinedType)
    __swig_destroy__ = _OpenLxApp.delete_Ramp

    def __init__(self, *args):
        r"""
        __init__(Ramp self, std::shared_ptr< OpenLxApp::Ramp > other) -> Ramp
        __init__(Ramp self, App::Ramp * aObj) -> Ramp
        __init__(Ramp self, std::shared_ptr< OpenLxApp::Document > aDoc) -> Ramp
        __init__(Ramp self) -> Ramp
        """
        if self.__class__ == Ramp:
            _self = None
        else:
            _self = self
        _OpenLxApp.Ramp_swiginit(self, _OpenLxApp.new_Ramp(_self, *args))
    def __disown__(self):
        self.this.disown()
        _OpenLxApp.disown_Ramp(self)
        return weakref.proxy(self)

# Register Ramp in _OpenLxApp:
_OpenLxApp.Ramp_swigregister(Ramp)
Ramp_getEntityType_Static = _OpenLxApp.Ramp_getEntityType_Static
Ramp_createIn = _OpenLxApp.Ramp_createIn
Ramp_createFrom = _OpenLxApp.Ramp_createFrom

class RampFlight(Element):
    r"""Proxy of C++ OpenLxApp::RampFlight class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getEntityType_Static = _swig_new_static_method(_OpenLxApp.RampFlight_getEntityType_Static)
    assign = _swig_new_instance_method(_OpenLxApp.RampFlight_assign)
    isEqual = _swig_new_instance_method(_OpenLxApp.RampFlight_isEqual)
    __getCasted__ = _swig_new_instance_method(_OpenLxApp.RampFlight___getCasted__)
    createIn = _swig_new_static_method(_OpenLxApp.RampFlight_createIn)
    createFrom = _swig_new_static_method(_OpenLxApp.RampFlight_createFrom)
    RampFlightTypeEnum_STRAIGHT = _OpenLxApp.RampFlight_RampFlightTypeEnum_STRAIGHT
    
    RampFlightTypeEnum_SPIRAL = _OpenLxApp.RampFlight_RampFlightTypeEnum_SPIRAL
    
    RampFlightTypeEnum_USERDEFINED = _OpenLxApp.RampFlight_RampFlightTypeEnum_USERDEFINED
    
    RampFlightTypeEnum_NOTDEFINED = _OpenLxApp.RampFlight_RampFlightTypeEnum_NOTDEFINED
    
    setPredefinedType = _swig_new_instance_method(_OpenLxApp.RampFlight_setPredefinedType)
    getPredefinedType = _swig_new_instance_method(_OpenLxApp.RampFlight_getPredefinedType)
    __swig_destroy__ = _OpenLxApp.delete_RampFlight

    def __init__(self, *args):
        r"""
        __init__(RampFlight self, std::shared_ptr< OpenLxApp::RampFlight > other) -> RampFlight
        __init__(RampFlight self, App::RampFlight * aObj) -> RampFlight
        __init__(RampFlight self, std::shared_ptr< OpenLxApp::Document > aDoc) -> RampFlight
        __init__(RampFlight self) -> RampFlight
        """
        if self.__class__ == RampFlight:
            _self = None
        else:
            _self = self
        _OpenLxApp.RampFlight_swiginit(self, _OpenLxApp.new_RampFlight(_self, *args))
    def __disown__(self):
        self.this.disown()
        _OpenLxApp.disown_RampFlight(self)
        return weakref.proxy(self)

# Register RampFlight in _OpenLxApp:
_OpenLxApp.RampFlight_swigregister(RampFlight)
RampFlight_getEntityType_Static = _OpenLxApp.RampFlight_getEntityType_Static
RampFlight_createIn = _OpenLxApp.RampFlight_createIn
RampFlight_createFrom = _OpenLxApp.RampFlight_createFrom

class ReinforcedSoil(Element):
    r"""Proxy of C++ OpenLxApp::ReinforcedSoil class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getEntityType_Static = _swig_new_static_method(_OpenLxApp.ReinforcedSoil_getEntityType_Static)
    assign = _swig_new_instance_method(_OpenLxApp.ReinforcedSoil_assign)
    isEqual = _swig_new_instance_method(_OpenLxApp.ReinforcedSoil_isEqual)
    __getCasted__ = _swig_new_instance_method(_OpenLxApp.ReinforcedSoil___getCasted__)
    createIn = _swig_new_static_method(_OpenLxApp.ReinforcedSoil_createIn)
    createFrom = _swig_new_static_method(_OpenLxApp.ReinforcedSoil_createFrom)
    PredefinedTypeEnum_DYNAMICALLYCOMPACTED = _OpenLxApp.ReinforcedSoil_PredefinedTypeEnum_DYNAMICALLYCOMPACTED
    
    PredefinedTypeEnum_GROUTED = _OpenLxApp.ReinforcedSoil_PredefinedTypeEnum_GROUTED
    
    PredefinedTypeEnum_REPLACED = _OpenLxApp.ReinforcedSoil_PredefinedTypeEnum_REPLACED
    
    PredefinedTypeEnum_ROLLERCOMPACTED = _OpenLxApp.ReinforcedSoil_PredefinedTypeEnum_ROLLERCOMPACTED
    
    PredefinedTypeEnum_SURCHARGEPRELOADED = _OpenLxApp.ReinforcedSoil_PredefinedTypeEnum_SURCHARGEPRELOADED
    
    PredefinedTypeEnum_VERTICALLYDRAINED = _OpenLxApp.ReinforcedSoil_PredefinedTypeEnum_VERTICALLYDRAINED
    
    PredefinedTypeEnum_USERDEFINED = _OpenLxApp.ReinforcedSoil_PredefinedTypeEnum_USERDEFINED
    
    PredefinedTypeEnum_NOTDEFINED = _OpenLxApp.ReinforcedSoil_PredefinedTypeEnum_NOTDEFINED
    
    setPredefinedType = _swig_new_instance_method(_OpenLxApp.ReinforcedSoil_setPredefinedType)
    getPredefinedType = _swig_new_instance_method(_OpenLxApp.ReinforcedSoil_getPredefinedType)
    __swig_destroy__ = _OpenLxApp.delete_ReinforcedSoil

    def __init__(self, *args):
        r"""
        __init__(ReinforcedSoil self, std::shared_ptr< OpenLxApp::ReinforcedSoil > other) -> ReinforcedSoil
        __init__(ReinforcedSoil self, App::ReinforcedSoil * aObj) -> ReinforcedSoil
        __init__(ReinforcedSoil self, std::shared_ptr< OpenLxApp::Document > aDoc) -> ReinforcedSoil
        __init__(ReinforcedSoil self) -> ReinforcedSoil
        """
        if self.__class__ == ReinforcedSoil:
            _self = None
        else:
            _self = self
        _OpenLxApp.ReinforcedSoil_swiginit(self, _OpenLxApp.new_ReinforcedSoil(_self, *args))
    def __disown__(self):
        self.this.disown()
        _OpenLxApp.disown_ReinforcedSoil(self)
        return weakref.proxy(self)

# Register ReinforcedSoil in _OpenLxApp:
_OpenLxApp.ReinforcedSoil_swigregister(ReinforcedSoil)
ReinforcedSoil_getEntityType_Static = _OpenLxApp.ReinforcedSoil_getEntityType_Static
ReinforcedSoil_createIn = _OpenLxApp.ReinforcedSoil_createIn
ReinforcedSoil_createFrom = _OpenLxApp.ReinforcedSoil_createFrom

class Roof(Element):
    r"""Proxy of C++ OpenLxApp::Roof class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getEntityType_Static = _swig_new_static_method(_OpenLxApp.Roof_getEntityType_Static)
    assign = _swig_new_instance_method(_OpenLxApp.Roof_assign)
    isEqual = _swig_new_instance_method(_OpenLxApp.Roof_isEqual)
    __getCasted__ = _swig_new_instance_method(_OpenLxApp.Roof___getCasted__)
    createIn = _swig_new_static_method(_OpenLxApp.Roof_createIn)
    createFrom = _swig_new_static_method(_OpenLxApp.Roof_createFrom)
    RoofTypeEnum_FLAT_ROOF = _OpenLxApp.Roof_RoofTypeEnum_FLAT_ROOF
    
    RoofTypeEnum_SHED_ROOF = _OpenLxApp.Roof_RoofTypeEnum_SHED_ROOF
    
    RoofTypeEnum_GABLE_ROOF = _OpenLxApp.Roof_RoofTypeEnum_GABLE_ROOF
    
    RoofTypeEnum_HIP_ROOF = _OpenLxApp.Roof_RoofTypeEnum_HIP_ROOF
    
    RoofTypeEnum_HIPPED_GABLE_ROOF = _OpenLxApp.Roof_RoofTypeEnum_HIPPED_GABLE_ROOF
    
    RoofTypeEnum_GAMBREL_ROOF = _OpenLxApp.Roof_RoofTypeEnum_GAMBREL_ROOF
    
    RoofTypeEnum_MANSARD_ROOF = _OpenLxApp.Roof_RoofTypeEnum_MANSARD_ROOF
    
    RoofTypeEnum_BARREL_ROOF = _OpenLxApp.Roof_RoofTypeEnum_BARREL_ROOF
    
    RoofTypeEnum_RAINBOW_ROOF = _OpenLxApp.Roof_RoofTypeEnum_RAINBOW_ROOF
    
    RoofTypeEnum_BUTTERFLY_ROOF = _OpenLxApp.Roof_RoofTypeEnum_BUTTERFLY_ROOF
    
    RoofTypeEnum_PAVILION_ROOF = _OpenLxApp.Roof_RoofTypeEnum_PAVILION_ROOF
    
    RoofTypeEnum_DOME_ROOF = _OpenLxApp.Roof_RoofTypeEnum_DOME_ROOF
    
    RoofTypeEnum_FREEFORM = _OpenLxApp.Roof_RoofTypeEnum_FREEFORM
    
    RoofTypeEnum_USERDEFINED = _OpenLxApp.Roof_RoofTypeEnum_USERDEFINED
    
    RoofTypeEnum_NOTDEFINED = _OpenLxApp.Roof_RoofTypeEnum_NOTDEFINED
    
    setPredefinedType = _swig_new_instance_method(_OpenLxApp.Roof_setPredefinedType)
    getPredefinedType = _swig_new_instance_method(_OpenLxApp.Roof_getPredefinedType)
    __swig_destroy__ = _OpenLxApp.delete_Roof

    def __init__(self, *args):
        r"""
        __init__(Roof self, std::shared_ptr< OpenLxApp::Roof > other) -> Roof
        __init__(Roof self, App::Roof * aObj) -> Roof
        __init__(Roof self, std::shared_ptr< OpenLxApp::Document > aDoc) -> Roof
        __init__(Roof self) -> Roof
        """
        if self.__class__ == Roof:
            _self = None
        else:
            _self = self
        _OpenLxApp.Roof_swiginit(self, _OpenLxApp.new_Roof(_self, *args))
    def __disown__(self):
        self.this.disown()
        _OpenLxApp.disown_Roof(self)
        return weakref.proxy(self)

# Register Roof in _OpenLxApp:
_OpenLxApp.Roof_swigregister(Roof)
Roof_getEntityType_Static = _OpenLxApp.Roof_getEntityType_Static
Roof_createIn = _OpenLxApp.Roof_createIn
Roof_createFrom = _OpenLxApp.Roof_createFrom

class Slab(Element):
    r"""Proxy of C++ OpenLxApp::Slab class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getEntityType_Static = _swig_new_static_method(_OpenLxApp.Slab_getEntityType_Static)
    assign = _swig_new_instance_method(_OpenLxApp.Slab_assign)
    isEqual = _swig_new_instance_method(_OpenLxApp.Slab_isEqual)
    __getCasted__ = _swig_new_instance_method(_OpenLxApp.Slab___getCasted__)
    createIn = _swig_new_static_method(_OpenLxApp.Slab_createIn)
    createFrom = _swig_new_static_method(_OpenLxApp.Slab_createFrom)
    SlabTypeEnum_FLOOR = _OpenLxApp.Slab_SlabTypeEnum_FLOOR
    
    SlabTypeEnum_ROOF = _OpenLxApp.Slab_SlabTypeEnum_ROOF
    
    SlabTypeEnum_LANDING = _OpenLxApp.Slab_SlabTypeEnum_LANDING
    
    SlabTypeEnum_BASESLAB = _OpenLxApp.Slab_SlabTypeEnum_BASESLAB
    
    SlabTypeEnum_USERDEFINED = _OpenLxApp.Slab_SlabTypeEnum_USERDEFINED
    
    SlabTypeEnum_NOTDEFINED = _OpenLxApp.Slab_SlabTypeEnum_NOTDEFINED
    
    SlabTypeEnum_APPROACH_SLAB = _OpenLxApp.Slab_SlabTypeEnum_APPROACH_SLAB
    
    SlabTypeEnum_PAVING = _OpenLxApp.Slab_SlabTypeEnum_PAVING
    
    SlabTypeEnum_SIDEWALK = _OpenLxApp.Slab_SlabTypeEnum_SIDEWALK
    
    SlabTypeEnum_WEARING = _OpenLxApp.Slab_SlabTypeEnum_WEARING
    
    setPredefinedType = _swig_new_instance_method(_OpenLxApp.Slab_setPredefinedType)
    getPredefinedType = _swig_new_instance_method(_OpenLxApp.Slab_getPredefinedType)
    __swig_destroy__ = _OpenLxApp.delete_Slab

    def __init__(self, *args):
        r"""
        __init__(Slab self, std::shared_ptr< OpenLxApp::Slab > other) -> Slab
        __init__(Slab self, App::Slab * aObj) -> Slab
        __init__(Slab self, std::shared_ptr< OpenLxApp::Document > aDoc) -> Slab
        __init__(Slab self) -> Slab
        """
        if self.__class__ == Slab:
            _self = None
        else:
            _self = self
        _OpenLxApp.Slab_swiginit(self, _OpenLxApp.new_Slab(_self, *args))
    def __disown__(self):
        self.this.disown()
        _OpenLxApp.disown_Slab(self)
        return weakref.proxy(self)

# Register Slab in _OpenLxApp:
_OpenLxApp.Slab_swigregister(Slab)
Slab_getEntityType_Static = _OpenLxApp.Slab_getEntityType_Static
Slab_createIn = _OpenLxApp.Slab_createIn
Slab_createFrom = _OpenLxApp.Slab_createFrom

class SlabElementedCase(Slab):
    r"""Proxy of C++ OpenLxApp::SlabElementedCase class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getEntityType_Static = _swig_new_static_method(_OpenLxApp.SlabElementedCase_getEntityType_Static)
    assign = _swig_new_instance_method(_OpenLxApp.SlabElementedCase_assign)
    isEqual = _swig_new_instance_method(_OpenLxApp.SlabElementedCase_isEqual)
    __getCasted__ = _swig_new_instance_method(_OpenLxApp.SlabElementedCase___getCasted__)
    createIn = _swig_new_static_method(_OpenLxApp.SlabElementedCase_createIn)
    createFrom = _swig_new_static_method(_OpenLxApp.SlabElementedCase_createFrom)
    __swig_destroy__ = _OpenLxApp.delete_SlabElementedCase

    def __init__(self, *args):
        r"""
        __init__(SlabElementedCase self, std::shared_ptr< OpenLxApp::SlabElementedCase > other) -> SlabElementedCase
        __init__(SlabElementedCase self, App::SlabElementedCase * aObj) -> SlabElementedCase
        __init__(SlabElementedCase self, std::shared_ptr< OpenLxApp::Document > aDoc) -> SlabElementedCase
        __init__(SlabElementedCase self) -> SlabElementedCase
        """
        if self.__class__ == SlabElementedCase:
            _self = None
        else:
            _self = self
        _OpenLxApp.SlabElementedCase_swiginit(self, _OpenLxApp.new_SlabElementedCase(_self, *args))
    def __disown__(self):
        self.this.disown()
        _OpenLxApp.disown_SlabElementedCase(self)
        return weakref.proxy(self)

# Register SlabElementedCase in _OpenLxApp:
_OpenLxApp.SlabElementedCase_swigregister(SlabElementedCase)
SlabElementedCase_getEntityType_Static = _OpenLxApp.SlabElementedCase_getEntityType_Static
SlabElementedCase_createIn = _OpenLxApp.SlabElementedCase_createIn
SlabElementedCase_createFrom = _OpenLxApp.SlabElementedCase_createFrom

class SlabStandardCase(Slab):
    r"""Proxy of C++ OpenLxApp::SlabStandardCase class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getEntityType_Static = _swig_new_static_method(_OpenLxApp.SlabStandardCase_getEntityType_Static)
    assign = _swig_new_instance_method(_OpenLxApp.SlabStandardCase_assign)
    isEqual = _swig_new_instance_method(_OpenLxApp.SlabStandardCase_isEqual)
    __getCasted__ = _swig_new_instance_method(_OpenLxApp.SlabStandardCase___getCasted__)
    createIn = _swig_new_static_method(_OpenLxApp.SlabStandardCase_createIn)
    createFrom = _swig_new_static_method(_OpenLxApp.SlabStandardCase_createFrom)
    __swig_destroy__ = _OpenLxApp.delete_SlabStandardCase
    setGeometry = _swig_new_instance_method(_OpenLxApp.SlabStandardCase_setGeometry)

    def __init__(self, *args):
        r"""
        __init__(SlabStandardCase self, std::shared_ptr< OpenLxApp::SlabStandardCase > other) -> SlabStandardCase
        __init__(SlabStandardCase self, App::Slab * aObj) -> SlabStandardCase
        __init__(SlabStandardCase self, std::shared_ptr< OpenLxApp::Document > aDoc) -> SlabStandardCase
        __init__(SlabStandardCase self) -> SlabStandardCase
        """
        if self.__class__ == SlabStandardCase:
            _self = None
        else:
            _self = self
        _OpenLxApp.SlabStandardCase_swiginit(self, _OpenLxApp.new_SlabStandardCase(_self, *args))
    def __disown__(self):
        self.this.disown()
        _OpenLxApp.disown_SlabStandardCase(self)
        return weakref.proxy(self)

# Register SlabStandardCase in _OpenLxApp:
_OpenLxApp.SlabStandardCase_swigregister(SlabStandardCase)
SlabStandardCase_getEntityType_Static = _OpenLxApp.SlabStandardCase_getEntityType_Static
SlabStandardCase_createIn = _OpenLxApp.SlabStandardCase_createIn
SlabStandardCase_createFrom = _OpenLxApp.SlabStandardCase_createFrom

class Stair(Element):
    r"""Proxy of C++ OpenLxApp::Stair class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getEntityType_Static = _swig_new_static_method(_OpenLxApp.Stair_getEntityType_Static)
    assign = _swig_new_instance_method(_OpenLxApp.Stair_assign)
    isEqual = _swig_new_instance_method(_OpenLxApp.Stair_isEqual)
    __getCasted__ = _swig_new_instance_method(_OpenLxApp.Stair___getCasted__)
    createIn = _swig_new_static_method(_OpenLxApp.Stair_createIn)
    createFrom = _swig_new_static_method(_OpenLxApp.Stair_createFrom)
    StairTypeEnum_STRAIGHT_RUN_STAIR = _OpenLxApp.Stair_StairTypeEnum_STRAIGHT_RUN_STAIR
    
    StairTypeEnum_TWO_STRAIGHT_RUN_STAIR = _OpenLxApp.Stair_StairTypeEnum_TWO_STRAIGHT_RUN_STAIR
    
    StairTypeEnum_QUARTER_WINDING_STAIR = _OpenLxApp.Stair_StairTypeEnum_QUARTER_WINDING_STAIR
    
    StairTypeEnum_QUARTER_TURN_STAIR = _OpenLxApp.Stair_StairTypeEnum_QUARTER_TURN_STAIR
    
    StairTypeEnum_HALF_WINDING_STAIR = _OpenLxApp.Stair_StairTypeEnum_HALF_WINDING_STAIR
    
    StairTypeEnum_HALF_TURN_STAIR = _OpenLxApp.Stair_StairTypeEnum_HALF_TURN_STAIR
    
    StairTypeEnum_TWO_QUARTER_WINDING_STAIR = _OpenLxApp.Stair_StairTypeEnum_TWO_QUARTER_WINDING_STAIR
    
    StairTypeEnum_TWO_QUARTER_TURN_STAIR = _OpenLxApp.Stair_StairTypeEnum_TWO_QUARTER_TURN_STAIR
    
    StairTypeEnum_THREE_QUARTER_WINDING_STAIR = _OpenLxApp.Stair_StairTypeEnum_THREE_QUARTER_WINDING_STAIR
    
    StairTypeEnum_THREE_QUARTER_TURN_STAIR = _OpenLxApp.Stair_StairTypeEnum_THREE_QUARTER_TURN_STAIR
    
    StairTypeEnum_SPIRAL_STAIR = _OpenLxApp.Stair_StairTypeEnum_SPIRAL_STAIR
    
    StairTypeEnum_DOUBLE_RETURN_STAIR = _OpenLxApp.Stair_StairTypeEnum_DOUBLE_RETURN_STAIR
    
    StairTypeEnum_CURVED_RUN_STAIR = _OpenLxApp.Stair_StairTypeEnum_CURVED_RUN_STAIR
    
    StairTypeEnum_TWO_CURVED_RUN_STAIR = _OpenLxApp.Stair_StairTypeEnum_TWO_CURVED_RUN_STAIR
    
    StairTypeEnum_USERDEFINED = _OpenLxApp.Stair_StairTypeEnum_USERDEFINED
    
    StairTypeEnum_NOTDEFINED = _OpenLxApp.Stair_StairTypeEnum_NOTDEFINED
    
    setPredefinedType = _swig_new_instance_method(_OpenLxApp.Stair_setPredefinedType)
    getPredefinedType = _swig_new_instance_method(_OpenLxApp.Stair_getPredefinedType)
    __swig_destroy__ = _OpenLxApp.delete_Stair

    def __init__(self, *args):
        r"""
        __init__(Stair self, std::shared_ptr< OpenLxApp::Stair > other) -> Stair
        __init__(Stair self, App::Stair * aObj) -> Stair
        __init__(Stair self, std::shared_ptr< OpenLxApp::Document > aDoc) -> Stair
        __init__(Stair self) -> Stair
        """
        if self.__class__ == Stair:
            _self = None
        else:
            _self = self
        _OpenLxApp.Stair_swiginit(self, _OpenLxApp.new_Stair(_self, *args))
    def __disown__(self):
        self.this.disown()
        _OpenLxApp.disown_Stair(self)
        return weakref.proxy(self)

# Register Stair in _OpenLxApp:
_OpenLxApp.Stair_swigregister(Stair)
Stair_getEntityType_Static = _OpenLxApp.Stair_getEntityType_Static
Stair_createIn = _OpenLxApp.Stair_createIn
Stair_createFrom = _OpenLxApp.Stair_createFrom

class StairFlight(Element):
    r"""Proxy of C++ OpenLxApp::StairFlight class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getEntityType_Static = _swig_new_static_method(_OpenLxApp.StairFlight_getEntityType_Static)
    assign = _swig_new_instance_method(_OpenLxApp.StairFlight_assign)
    isEqual = _swig_new_instance_method(_OpenLxApp.StairFlight_isEqual)
    __getCasted__ = _swig_new_instance_method(_OpenLxApp.StairFlight___getCasted__)
    createIn = _swig_new_static_method(_OpenLxApp.StairFlight_createIn)
    createFrom = _swig_new_static_method(_OpenLxApp.StairFlight_createFrom)
    StairFlightTypeEnum_USERDEFINED = _OpenLxApp.StairFlight_StairFlightTypeEnum_USERDEFINED
    
    StairFlightTypeEnum_NOTDEFINED = _OpenLxApp.StairFlight_StairFlightTypeEnum_NOTDEFINED
    
    setPredefinedType = _swig_new_instance_method(_OpenLxApp.StairFlight_setPredefinedType)
    getPredefinedType = _swig_new_instance_method(_OpenLxApp.StairFlight_getPredefinedType)
    __swig_destroy__ = _OpenLxApp.delete_StairFlight

    def __init__(self, *args):
        r"""
        __init__(StairFlight self, std::shared_ptr< OpenLxApp::StairFlight > other) -> StairFlight
        __init__(StairFlight self, App::StairFlight * aObj) -> StairFlight
        __init__(StairFlight self, std::shared_ptr< OpenLxApp::Document > aDoc) -> StairFlight
        __init__(StairFlight self) -> StairFlight
        """
        if self.__class__ == StairFlight:
            _self = None
        else:
            _self = self
        _OpenLxApp.StairFlight_swiginit(self, _OpenLxApp.new_StairFlight(_self, *args))
    def __disown__(self):
        self.this.disown()
        _OpenLxApp.disown_StairFlight(self)
        return weakref.proxy(self)

# Register StairFlight in _OpenLxApp:
_OpenLxApp.StairFlight_swigregister(StairFlight)
StairFlight_getEntityType_Static = _OpenLxApp.StairFlight_getEntityType_Static
StairFlight_createIn = _OpenLxApp.StairFlight_createIn
StairFlight_createFrom = _OpenLxApp.StairFlight_createFrom

class SurfaceFeature(Element):
    r"""Proxy of C++ OpenLxApp::SurfaceFeature class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getEntityType_Static = _swig_new_static_method(_OpenLxApp.SurfaceFeature_getEntityType_Static)
    assign = _swig_new_instance_method(_OpenLxApp.SurfaceFeature_assign)
    isEqual = _swig_new_instance_method(_OpenLxApp.SurfaceFeature_isEqual)
    __getCasted__ = _swig_new_instance_method(_OpenLxApp.SurfaceFeature___getCasted__)
    createIn = _swig_new_static_method(_OpenLxApp.SurfaceFeature_createIn)
    createFrom = _swig_new_static_method(_OpenLxApp.SurfaceFeature_createFrom)
    PredefinedTypeEnum_DEFECT = _OpenLxApp.SurfaceFeature_PredefinedTypeEnum_DEFECT
    
    PredefinedTypeEnum_HATCHMARKING = _OpenLxApp.SurfaceFeature_PredefinedTypeEnum_HATCHMARKING
    
    PredefinedTypeEnum_LINEMARKING = _OpenLxApp.SurfaceFeature_PredefinedTypeEnum_LINEMARKING
    
    PredefinedTypeEnum_MARK = _OpenLxApp.SurfaceFeature_PredefinedTypeEnum_MARK
    
    PredefinedTypeEnum_NONSKIDSURFACING = _OpenLxApp.SurfaceFeature_PredefinedTypeEnum_NONSKIDSURFACING
    
    PredefinedTypeEnum_PAVEMENTSURFACEMARKING = _OpenLxApp.SurfaceFeature_PredefinedTypeEnum_PAVEMENTSURFACEMARKING
    
    PredefinedTypeEnum_RUMBLESTRIP = _OpenLxApp.SurfaceFeature_PredefinedTypeEnum_RUMBLESTRIP
    
    PredefinedTypeEnum_SYMBOLMARKING = _OpenLxApp.SurfaceFeature_PredefinedTypeEnum_SYMBOLMARKING
    
    PredefinedTypeEnum_TAG = _OpenLxApp.SurfaceFeature_PredefinedTypeEnum_TAG
    
    PredefinedTypeEnum_TRANSVERSERUMBLESTRIP = _OpenLxApp.SurfaceFeature_PredefinedTypeEnum_TRANSVERSERUMBLESTRIP
    
    PredefinedTypeEnum_TREATMENT = _OpenLxApp.SurfaceFeature_PredefinedTypeEnum_TREATMENT
    
    PredefinedTypeEnum_USERDEFINED = _OpenLxApp.SurfaceFeature_PredefinedTypeEnum_USERDEFINED
    
    PredefinedTypeEnum_NOTDEFINED = _OpenLxApp.SurfaceFeature_PredefinedTypeEnum_NOTDEFINED
    
    setPredefinedType = _swig_new_instance_method(_OpenLxApp.SurfaceFeature_setPredefinedType)
    getPredefinedType = _swig_new_instance_method(_OpenLxApp.SurfaceFeature_getPredefinedType)
    __swig_destroy__ = _OpenLxApp.delete_SurfaceFeature

    def __init__(self, *args):
        r"""
        __init__(SurfaceFeature self, std::shared_ptr< OpenLxApp::SurfaceFeature > other) -> SurfaceFeature
        __init__(SurfaceFeature self, App::SurfaceFeature * aObj) -> SurfaceFeature
        __init__(SurfaceFeature self, std::shared_ptr< OpenLxApp::Document > aDoc) -> SurfaceFeature
        __init__(SurfaceFeature self) -> SurfaceFeature
        """
        if self.__class__ == SurfaceFeature:
            _self = None
        else:
            _self = self
        _OpenLxApp.SurfaceFeature_swiginit(self, _OpenLxApp.new_SurfaceFeature(_self, *args))
    def __disown__(self):
        self.this.disown()
        _OpenLxApp.disown_SurfaceFeature(self)
        return weakref.proxy(self)

# Register SurfaceFeature in _OpenLxApp:
_OpenLxApp.SurfaceFeature_swigregister(SurfaceFeature)
SurfaceFeature_getEntityType_Static = _OpenLxApp.SurfaceFeature_getEntityType_Static
SurfaceFeature_createIn = _OpenLxApp.SurfaceFeature_createIn
SurfaceFeature_createFrom = _OpenLxApp.SurfaceFeature_createFrom

class TrackElement(Element):
    r"""Proxy of C++ OpenLxApp::TrackElement class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getEntityType_Static = _swig_new_static_method(_OpenLxApp.TrackElement_getEntityType_Static)
    assign = _swig_new_instance_method(_OpenLxApp.TrackElement_assign)
    isEqual = _swig_new_instance_method(_OpenLxApp.TrackElement_isEqual)
    __getCasted__ = _swig_new_instance_method(_OpenLxApp.TrackElement___getCasted__)
    createIn = _swig_new_static_method(_OpenLxApp.TrackElement_createIn)
    createFrom = _swig_new_static_method(_OpenLxApp.TrackElement_createFrom)
    PredefinedTypeEnum_BLOCKINGDEVICE = _OpenLxApp.TrackElement_PredefinedTypeEnum_BLOCKINGDEVICE
    
    PredefinedTypeEnum_DERAILER = _OpenLxApp.TrackElement_PredefinedTypeEnum_DERAILER
    
    PredefinedTypeEnum_FROG = _OpenLxApp.TrackElement_PredefinedTypeEnum_FROG
    
    PredefinedTypeEnum_HALFSETOFBLADES = _OpenLxApp.TrackElement_PredefinedTypeEnum_HALFSETOFBLADES
    
    PredefinedTypeEnum_SLEEPER = _OpenLxApp.TrackElement_PredefinedTypeEnum_SLEEPER
    
    PredefinedTypeEnum_SPEEDREGULATOR = _OpenLxApp.TrackElement_PredefinedTypeEnum_SPEEDREGULATOR
    
    PredefinedTypeEnum_TRACKENDOFALIGNMENT = _OpenLxApp.TrackElement_PredefinedTypeEnum_TRACKENDOFALIGNMENT
    
    PredefinedTypeEnum_VEHICLESTOP = _OpenLxApp.TrackElement_PredefinedTypeEnum_VEHICLESTOP
    
    PredefinedTypeEnum_USERDEFINED = _OpenLxApp.TrackElement_PredefinedTypeEnum_USERDEFINED
    
    PredefinedTypeEnum_NOTDEFINED = _OpenLxApp.TrackElement_PredefinedTypeEnum_NOTDEFINED
    
    setPredefinedType = _swig_new_instance_method(_OpenLxApp.TrackElement_setPredefinedType)
    getPredefinedType = _swig_new_instance_method(_OpenLxApp.TrackElement_getPredefinedType)
    __swig_destroy__ = _OpenLxApp.delete_TrackElement

    def __init__(self, *args):
        r"""
        __init__(TrackElement self, std::shared_ptr< OpenLxApp::TrackElement > other) -> TrackElement
        __init__(TrackElement self, App::TrackElement * aObj) -> TrackElement
        __init__(TrackElement self, std::shared_ptr< OpenLxApp::Document > aDoc) -> TrackElement
        __init__(TrackElement self) -> TrackElement
        """
        if self.__class__ == TrackElement:
            _self = None
        else:
            _self = self
        _OpenLxApp.TrackElement_swiginit(self, _OpenLxApp.new_TrackElement(_self, *args))
    def __disown__(self):
        self.this.disown()
        _OpenLxApp.disown_TrackElement(self)
        return weakref.proxy(self)

# Register TrackElement in _OpenLxApp:
_OpenLxApp.TrackElement_swigregister(TrackElement)
TrackElement_getEntityType_Static = _OpenLxApp.TrackElement_getEntityType_Static
TrackElement_createIn = _OpenLxApp.TrackElement_createIn
TrackElement_createFrom = _OpenLxApp.TrackElement_createFrom

class Wall(Element):
    r"""Proxy of C++ OpenLxApp::Wall class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getEntityType_Static = _swig_new_static_method(_OpenLxApp.Wall_getEntityType_Static)
    assign = _swig_new_instance_method(_OpenLxApp.Wall_assign)
    isEqual = _swig_new_instance_method(_OpenLxApp.Wall_isEqual)
    __getCasted__ = _swig_new_instance_method(_OpenLxApp.Wall___getCasted__)
    createIn = _swig_new_static_method(_OpenLxApp.Wall_createIn)
    createFrom = _swig_new_static_method(_OpenLxApp.Wall_createFrom)
    WallTypeEnum_MOVABLE = _OpenLxApp.Wall_WallTypeEnum_MOVABLE
    
    WallTypeEnum_PARAPET = _OpenLxApp.Wall_WallTypeEnum_PARAPET
    
    WallTypeEnum_PARTITIONING = _OpenLxApp.Wall_WallTypeEnum_PARTITIONING
    
    WallTypeEnum_PLUMBINGWALL = _OpenLxApp.Wall_WallTypeEnum_PLUMBINGWALL
    
    WallTypeEnum_SHEAR = _OpenLxApp.Wall_WallTypeEnum_SHEAR
    
    WallTypeEnum_SOLIDWALL = _OpenLxApp.Wall_WallTypeEnum_SOLIDWALL
    
    WallTypeEnum_STANDARD = _OpenLxApp.Wall_WallTypeEnum_STANDARD
    
    WallTypeEnum_POLYGONAL = _OpenLxApp.Wall_WallTypeEnum_POLYGONAL
    
    WallTypeEnum_ELEMENTEDWALL = _OpenLxApp.Wall_WallTypeEnum_ELEMENTEDWALL
    
    WallTypeEnum_USERDEFINED = _OpenLxApp.Wall_WallTypeEnum_USERDEFINED
    
    WallTypeEnum_NOTDEFINED = _OpenLxApp.Wall_WallTypeEnum_NOTDEFINED
    
    setPredefinedType = _swig_new_instance_method(_OpenLxApp.Wall_setPredefinedType)
    getPredefinedType = _swig_new_instance_method(_OpenLxApp.Wall_getPredefinedType)
    __swig_destroy__ = _OpenLxApp.delete_Wall

    def __init__(self, *args):
        r"""
        __init__(Wall self, std::shared_ptr< OpenLxApp::Wall > other) -> Wall
        __init__(Wall self, App::Wall * aObj) -> Wall
        __init__(Wall self, std::shared_ptr< OpenLxApp::Document > aDoc) -> Wall
        __init__(Wall self) -> Wall
        """
        if self.__class__ == Wall:
            _self = None
        else:
            _self = self
        _OpenLxApp.Wall_swiginit(self, _OpenLxApp.new_Wall(_self, *args))
    def __disown__(self):
        self.this.disown()
        _OpenLxApp.disown_Wall(self)
        return weakref.proxy(self)

# Register Wall in _OpenLxApp:
_OpenLxApp.Wall_swigregister(Wall)
Wall_getEntityType_Static = _OpenLxApp.Wall_getEntityType_Static
Wall_createIn = _OpenLxApp.Wall_createIn
Wall_createFrom = _OpenLxApp.Wall_createFrom

class WallElementedCase(Wall):
    r"""Proxy of C++ OpenLxApp::WallElementedCase class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getEntityType_Static = _swig_new_static_method(_OpenLxApp.WallElementedCase_getEntityType_Static)
    assign = _swig_new_instance_method(_OpenLxApp.WallElementedCase_assign)
    isEqual = _swig_new_instance_method(_OpenLxApp.WallElementedCase_isEqual)
    __getCasted__ = _swig_new_instance_method(_OpenLxApp.WallElementedCase___getCasted__)
    createIn = _swig_new_static_method(_OpenLxApp.WallElementedCase_createIn)
    createFrom = _swig_new_static_method(_OpenLxApp.WallElementedCase_createFrom)
    __swig_destroy__ = _OpenLxApp.delete_WallElementedCase

    def __init__(self, *args):
        r"""
        __init__(WallElementedCase self, std::shared_ptr< OpenLxApp::WallElementedCase > other) -> WallElementedCase
        __init__(WallElementedCase self, App::WallElementedCase * aObj) -> WallElementedCase
        __init__(WallElementedCase self, std::shared_ptr< OpenLxApp::Document > aDoc) -> WallElementedCase
        __init__(WallElementedCase self) -> WallElementedCase
        """
        if self.__class__ == WallElementedCase:
            _self = None
        else:
            _self = self
        _OpenLxApp.WallElementedCase_swiginit(self, _OpenLxApp.new_WallElementedCase(_self, *args))
    def __disown__(self):
        self.this.disown()
        _OpenLxApp.disown_WallElementedCase(self)
        return weakref.proxy(self)

# Register WallElementedCase in _OpenLxApp:
_OpenLxApp.WallElementedCase_swigregister(WallElementedCase)
WallElementedCase_getEntityType_Static = _OpenLxApp.WallElementedCase_getEntityType_Static
WallElementedCase_createIn = _OpenLxApp.WallElementedCase_createIn
WallElementedCase_createFrom = _OpenLxApp.WallElementedCase_createFrom

class WallStandardCase(Wall):
    r"""Proxy of C++ OpenLxApp::WallStandardCase class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getEntityType_Static = _swig_new_static_method(_OpenLxApp.WallStandardCase_getEntityType_Static)
    assign = _swig_new_instance_method(_OpenLxApp.WallStandardCase_assign)
    isEqual = _swig_new_instance_method(_OpenLxApp.WallStandardCase_isEqual)
    __getCasted__ = _swig_new_instance_method(_OpenLxApp.WallStandardCase___getCasted__)
    createIn = _swig_new_static_method(_OpenLxApp.WallStandardCase_createIn)
    createFrom = _swig_new_static_method(_OpenLxApp.WallStandardCase_createFrom)
    __swig_destroy__ = _OpenLxApp.delete_WallStandardCase
    setGeometry = _swig_new_instance_method(_OpenLxApp.WallStandardCase_setGeometry)

    def __init__(self, *args):
        r"""
        __init__(WallStandardCase self, std::shared_ptr< OpenLxApp::WallStandardCase > other) -> WallStandardCase
        __init__(WallStandardCase self, App::WallStandardCase * aObj) -> WallStandardCase
        __init__(WallStandardCase self, std::shared_ptr< OpenLxApp::Document > aDoc) -> WallStandardCase
        __init__(WallStandardCase self) -> WallStandardCase
        """
        if self.__class__ == WallStandardCase:
            _self = None
        else:
            _self = self
        _OpenLxApp.WallStandardCase_swiginit(self, _OpenLxApp.new_WallStandardCase(_self, *args))
    def __disown__(self):
        self.this.disown()
        _OpenLxApp.disown_WallStandardCase(self)
        return weakref.proxy(self)

# Register WallStandardCase in _OpenLxApp:
_OpenLxApp.WallStandardCase_swigregister(WallStandardCase)
WallStandardCase_getEntityType_Static = _OpenLxApp.WallStandardCase_getEntityType_Static
WallStandardCase_createIn = _OpenLxApp.WallStandardCase_createIn
WallStandardCase_createFrom = _OpenLxApp.WallStandardCase_createFrom

class Window(Element):
    r"""Proxy of C++ OpenLxApp::Window class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getEntityType_Static = _swig_new_static_method(_OpenLxApp.Window_getEntityType_Static)
    assign = _swig_new_instance_method(_OpenLxApp.Window_assign)
    isEqual = _swig_new_instance_method(_OpenLxApp.Window_isEqual)
    __getCasted__ = _swig_new_instance_method(_OpenLxApp.Window___getCasted__)
    createIn = _swig_new_static_method(_OpenLxApp.Window_createIn)
    createFrom = _swig_new_static_method(_OpenLxApp.Window_createFrom)
    WindowTypeEnum_WINDOW = _OpenLxApp.Window_WindowTypeEnum_WINDOW
    
    WindowTypeEnum_SKYLIGHT = _OpenLxApp.Window_WindowTypeEnum_SKYLIGHT
    
    WindowTypeEnum_LIGHTDOME = _OpenLxApp.Window_WindowTypeEnum_LIGHTDOME
    
    WindowTypeEnum_USERDEFINED = _OpenLxApp.Window_WindowTypeEnum_USERDEFINED
    
    WindowTypeEnum_NOTDEFINED = _OpenLxApp.Window_WindowTypeEnum_NOTDEFINED
    
    setPredefinedType = _swig_new_instance_method(_OpenLxApp.Window_setPredefinedType)
    getPredefinedType = _swig_new_instance_method(_OpenLxApp.Window_getPredefinedType)
    __swig_destroy__ = _OpenLxApp.delete_Window

    def __init__(self, *args):
        r"""
        __init__(Window self, std::shared_ptr< OpenLxApp::Window > other) -> Window
        __init__(Window self, App::Window * aObj) -> Window
        __init__(Window self, std::shared_ptr< OpenLxApp::Document > aDoc) -> Window
        __init__(Window self) -> Window
        """
        if self.__class__ == Window:
            _self = None
        else:
            _self = self
        _OpenLxApp.Window_swiginit(self, _OpenLxApp.new_Window(_self, *args))
    def __disown__(self):
        self.this.disown()
        _OpenLxApp.disown_Window(self)
        return weakref.proxy(self)

# Register Window in _OpenLxApp:
_OpenLxApp.Window_swigregister(Window)
Window_getEntityType_Static = _OpenLxApp.Window_getEntityType_Static
Window_createIn = _OpenLxApp.Window_createIn
Window_createFrom = _OpenLxApp.Window_createFrom

class WindowStandardCase(Window):
    r"""Proxy of C++ OpenLxApp::WindowStandardCase class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getEntityType_Static = _swig_new_static_method(_OpenLxApp.WindowStandardCase_getEntityType_Static)
    assign = _swig_new_instance_method(_OpenLxApp.WindowStandardCase_assign)
    isEqual = _swig_new_instance_method(_OpenLxApp.WindowStandardCase_isEqual)
    __getCasted__ = _swig_new_instance_method(_OpenLxApp.WindowStandardCase___getCasted__)
    createIn = _swig_new_static_method(_OpenLxApp.WindowStandardCase_createIn)
    createFrom = _swig_new_static_method(_OpenLxApp.WindowStandardCase_createFrom)
    __swig_destroy__ = _OpenLxApp.delete_WindowStandardCase

    def __init__(self, *args):
        r"""
        __init__(WindowStandardCase self, std::shared_ptr< OpenLxApp::WindowStandardCase > other) -> WindowStandardCase
        __init__(WindowStandardCase self, App::WindowStandardCase * aObj) -> WindowStandardCase
        __init__(WindowStandardCase self, std::shared_ptr< OpenLxApp::Document > aDoc) -> WindowStandardCase
        __init__(WindowStandardCase self) -> WindowStandardCase
        """
        if self.__class__ == WindowStandardCase:
            _self = None
        else:
            _self = self
        _OpenLxApp.WindowStandardCase_swiginit(self, _OpenLxApp.new_WindowStandardCase(_self, *args))
    def __disown__(self):
        self.this.disown()
        _OpenLxApp.disown_WindowStandardCase(self)
        return weakref.proxy(self)

# Register WindowStandardCase in _OpenLxApp:
_OpenLxApp.WindowStandardCase_swigregister(WindowStandardCase)
WindowStandardCase_getEntityType_Static = _OpenLxApp.WindowStandardCase_getEntityType_Static
WindowStandardCase_createIn = _OpenLxApp.WindowStandardCase_createIn
WindowStandardCase_createFrom = _OpenLxApp.WindowStandardCase_createFrom

class SpatialElement(Element):
    r"""Proxy of C++ OpenLxApp::SpatialElement class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getEntityType_Static = _swig_new_static_method(_OpenLxApp.SpatialElement_getEntityType_Static)
    assign = _swig_new_instance_method(_OpenLxApp.SpatialElement_assign)
    isEqual = _swig_new_instance_method(_OpenLxApp.SpatialElement_isEqual)
    __getCasted__ = _swig_new_instance_method(_OpenLxApp.SpatialElement___getCasted__)
    __swig_destroy__ = _OpenLxApp.delete_SpatialElement

    def __init__(self, *args):
        r"""
        __init__(SpatialElement self, std::shared_ptr< OpenLxApp::SpatialElement > other) -> SpatialElement
        __init__(SpatialElement self, App::SpatialElement * aObj) -> SpatialElement
        __init__(SpatialElement self) -> SpatialElement
        """
        if self.__class__ == SpatialElement:
            _self = None
        else:
            _self = self
        _OpenLxApp.SpatialElement_swiginit(self, _OpenLxApp.new_SpatialElement(_self, *args))
    def __disown__(self):
        self.this.disown()
        _OpenLxApp.disown_SpatialElement(self)
        return weakref.proxy(self)

# Register SpatialElement in _OpenLxApp:
_OpenLxApp.SpatialElement_swigregister(SpatialElement)
SpatialElement_getEntityType_Static = _OpenLxApp.SpatialElement_getEntityType_Static

class ExternalSpatialStructureElement(SpatialElement):
    r"""Proxy of C++ OpenLxApp::ExternalSpatialStructureElement class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getEntityType_Static = _swig_new_static_method(_OpenLxApp.ExternalSpatialStructureElement_getEntityType_Static)
    assign = _swig_new_instance_method(_OpenLxApp.ExternalSpatialStructureElement_assign)
    isEqual = _swig_new_instance_method(_OpenLxApp.ExternalSpatialStructureElement_isEqual)
    __getCasted__ = _swig_new_instance_method(_OpenLxApp.ExternalSpatialStructureElement___getCasted__)
    __swig_destroy__ = _OpenLxApp.delete_ExternalSpatialStructureElement

    def __init__(self, *args):
        r"""
        __init__(ExternalSpatialStructureElement self, std::shared_ptr< OpenLxApp::ExternalSpatialStructureElement > other) -> ExternalSpatialStructureElement
        __init__(ExternalSpatialStructureElement self, App::ExternalSpatialStructureElement * aObj) -> ExternalSpatialStructureElement
        __init__(ExternalSpatialStructureElement self) -> ExternalSpatialStructureElement
        """
        if self.__class__ == ExternalSpatialStructureElement:
            _self = None
        else:
            _self = self
        _OpenLxApp.ExternalSpatialStructureElement_swiginit(self, _OpenLxApp.new_ExternalSpatialStructureElement(_self, *args))
    def __disown__(self):
        self.this.disown()
        _OpenLxApp.disown_ExternalSpatialStructureElement(self)
        return weakref.proxy(self)

# Register ExternalSpatialStructureElement in _OpenLxApp:
_OpenLxApp.ExternalSpatialStructureElement_swigregister(ExternalSpatialStructureElement)
ExternalSpatialStructureElement_getEntityType_Static = _OpenLxApp.ExternalSpatialStructureElement_getEntityType_Static

class ExternalSpatialElement(ExternalSpatialStructureElement):
    r"""Proxy of C++ OpenLxApp::ExternalSpatialElement class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getEntityType_Static = _swig_new_static_method(_OpenLxApp.ExternalSpatialElement_getEntityType_Static)
    assign = _swig_new_instance_method(_OpenLxApp.ExternalSpatialElement_assign)
    isEqual = _swig_new_instance_method(_OpenLxApp.ExternalSpatialElement_isEqual)
    __getCasted__ = _swig_new_instance_method(_OpenLxApp.ExternalSpatialElement___getCasted__)
    createIn = _swig_new_static_method(_OpenLxApp.ExternalSpatialElement_createIn)
    createFrom = _swig_new_static_method(_OpenLxApp.ExternalSpatialElement_createFrom)
    __swig_destroy__ = _OpenLxApp.delete_ExternalSpatialElement

    def __init__(self, *args):
        r"""
        __init__(ExternalSpatialElement self, std::shared_ptr< OpenLxApp::ExternalSpatialElement > other) -> ExternalSpatialElement
        __init__(ExternalSpatialElement self, App::ExternalSpatialElement * aObj) -> ExternalSpatialElement
        __init__(ExternalSpatialElement self, std::shared_ptr< OpenLxApp::Document > aDoc) -> ExternalSpatialElement
        __init__(ExternalSpatialElement self) -> ExternalSpatialElement
        """
        if self.__class__ == ExternalSpatialElement:
            _self = None
        else:
            _self = self
        _OpenLxApp.ExternalSpatialElement_swiginit(self, _OpenLxApp.new_ExternalSpatialElement(_self, *args))
    def __disown__(self):
        self.this.disown()
        _OpenLxApp.disown_ExternalSpatialElement(self)
        return weakref.proxy(self)

# Register ExternalSpatialElement in _OpenLxApp:
_OpenLxApp.ExternalSpatialElement_swigregister(ExternalSpatialElement)
ExternalSpatialElement_getEntityType_Static = _OpenLxApp.ExternalSpatialElement_getEntityType_Static
ExternalSpatialElement_createIn = _OpenLxApp.ExternalSpatialElement_createIn
ExternalSpatialElement_createFrom = _OpenLxApp.ExternalSpatialElement_createFrom

class SpatialStructureElement(SpatialElement):
    r"""Proxy of C++ OpenLxApp::SpatialStructureElement class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getEntityType_Static = _swig_new_static_method(_OpenLxApp.SpatialStructureElement_getEntityType_Static)
    assign = _swig_new_instance_method(_OpenLxApp.SpatialStructureElement_assign)
    isEqual = _swig_new_instance_method(_OpenLxApp.SpatialStructureElement_isEqual)
    __getCasted__ = _swig_new_instance_method(_OpenLxApp.SpatialStructureElement___getCasted__)
    __swig_destroy__ = _OpenLxApp.delete_SpatialStructureElement
    addElement = _swig_new_instance_method(_OpenLxApp.SpatialStructureElement_addElement)

    def __init__(self, *args):
        r"""
        __init__(SpatialStructureElement self, std::shared_ptr< OpenLxApp::SpatialStructureElement > other) -> SpatialStructureElement
        __init__(SpatialStructureElement self, App::SpatialStructureElement * aObj) -> SpatialStructureElement
        __init__(SpatialStructureElement self) -> SpatialStructureElement
        """
        if self.__class__ == SpatialStructureElement:
            _self = None
        else:
            _self = self
        _OpenLxApp.SpatialStructureElement_swiginit(self, _OpenLxApp.new_SpatialStructureElement(_self, *args))
    def __disown__(self):
        self.this.disown()
        _OpenLxApp.disown_SpatialStructureElement(self)
        return weakref.proxy(self)

# Register SpatialStructureElement in _OpenLxApp:
_OpenLxApp.SpatialStructureElement_swigregister(SpatialStructureElement)
SpatialStructureElement_getEntityType_Static = _OpenLxApp.SpatialStructureElement_getEntityType_Static

class Building(SpatialStructureElement):
    r"""Proxy of C++ OpenLxApp::Building class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getEntityType_Static = _swig_new_static_method(_OpenLxApp.Building_getEntityType_Static)
    assign = _swig_new_instance_method(_OpenLxApp.Building_assign)
    isEqual = _swig_new_instance_method(_OpenLxApp.Building_isEqual)
    __getCasted__ = _swig_new_instance_method(_OpenLxApp.Building___getCasted__)
    createIn = _swig_new_static_method(_OpenLxApp.Building_createIn)
    createFrom = _swig_new_static_method(_OpenLxApp.Building_createFrom)
    __swig_destroy__ = _OpenLxApp.delete_Building
    addBuildingStorey = _swig_new_instance_method(_OpenLxApp.Building_addBuildingStorey)
    getBuildingStoreys = _swig_new_instance_method(_OpenLxApp.Building_getBuildingStoreys)

    def __init__(self, *args):
        r"""
        __init__(Building self, std::shared_ptr< OpenLxApp::Building > other) -> Building
        __init__(Building self, App::Building * aObj) -> Building
        __init__(Building self, std::shared_ptr< OpenLxApp::Document > aDoc) -> Building
        __init__(Building self) -> Building
        """
        if self.__class__ == Building:
            _self = None
        else:
            _self = self
        _OpenLxApp.Building_swiginit(self, _OpenLxApp.new_Building(_self, *args))
    def __disown__(self):
        self.this.disown()
        _OpenLxApp.disown_Building(self)
        return weakref.proxy(self)

# Register Building in _OpenLxApp:
_OpenLxApp.Building_swigregister(Building)
Building_getEntityType_Static = _OpenLxApp.Building_getEntityType_Static
Building_createIn = _OpenLxApp.Building_createIn
Building_createFrom = _OpenLxApp.Building_createFrom

class BuildingStorey(SpatialStructureElement):
    r"""Proxy of C++ OpenLxApp::BuildingStorey class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getEntityType_Static = _swig_new_static_method(_OpenLxApp.BuildingStorey_getEntityType_Static)
    assign = _swig_new_instance_method(_OpenLxApp.BuildingStorey_assign)
    isEqual = _swig_new_instance_method(_OpenLxApp.BuildingStorey_isEqual)
    __getCasted__ = _swig_new_instance_method(_OpenLxApp.BuildingStorey___getCasted__)
    createIn = _swig_new_static_method(_OpenLxApp.BuildingStorey_createIn)
    createFrom = _swig_new_static_method(_OpenLxApp.BuildingStorey_createFrom)
    __swig_destroy__ = _OpenLxApp.delete_BuildingStorey

    def __init__(self, *args):
        r"""
        __init__(BuildingStorey self, std::shared_ptr< OpenLxApp::BuildingStorey > other) -> BuildingStorey
        __init__(BuildingStorey self, App::BuildingStorey * aObj) -> BuildingStorey
        __init__(BuildingStorey self, std::shared_ptr< OpenLxApp::Document > aDoc) -> BuildingStorey
        __init__(BuildingStorey self) -> BuildingStorey
        """
        if self.__class__ == BuildingStorey:
            _self = None
        else:
            _self = self
        _OpenLxApp.BuildingStorey_swiginit(self, _OpenLxApp.new_BuildingStorey(_self, *args))
    def __disown__(self):
        self.this.disown()
        _OpenLxApp.disown_BuildingStorey(self)
        return weakref.proxy(self)

# Register BuildingStorey in _OpenLxApp:
_OpenLxApp.BuildingStorey_swigregister(BuildingStorey)
BuildingStorey_getEntityType_Static = _OpenLxApp.BuildingStorey_getEntityType_Static
BuildingStorey_createIn = _OpenLxApp.BuildingStorey_createIn
BuildingStorey_createFrom = _OpenLxApp.BuildingStorey_createFrom

class Site(SpatialStructureElement):
    r"""Proxy of C++ OpenLxApp::Site class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getEntityType_Static = _swig_new_static_method(_OpenLxApp.Site_getEntityType_Static)
    assign = _swig_new_instance_method(_OpenLxApp.Site_assign)
    isEqual = _swig_new_instance_method(_OpenLxApp.Site_isEqual)
    __getCasted__ = _swig_new_instance_method(_OpenLxApp.Site___getCasted__)
    createIn = _swig_new_static_method(_OpenLxApp.Site_createIn)
    createFrom = _swig_new_static_method(_OpenLxApp.Site_createFrom)
    __swig_destroy__ = _OpenLxApp.delete_Site
    addBuilding = _swig_new_instance_method(_OpenLxApp.Site_addBuilding)
    getBuildings = _swig_new_instance_method(_OpenLxApp.Site_getBuildings)

    def __init__(self, *args):
        r"""
        __init__(Site self, std::shared_ptr< OpenLxApp::Site > other) -> Site
        __init__(Site self, App::Site * aObj) -> Site
        __init__(Site self, std::shared_ptr< OpenLxApp::Document > aDoc) -> Site
        __init__(Site self) -> Site
        """
        if self.__class__ == Site:
            _self = None
        else:
            _self = self
        _OpenLxApp.Site_swiginit(self, _OpenLxApp.new_Site(_self, *args))
    def __disown__(self):
        self.this.disown()
        _OpenLxApp.disown_Site(self)
        return weakref.proxy(self)

# Register Site in _OpenLxApp:
_OpenLxApp.Site_swigregister(Site)
Site_getEntityType_Static = _OpenLxApp.Site_getEntityType_Static
Site_createIn = _OpenLxApp.Site_createIn
Site_createFrom = _OpenLxApp.Site_createFrom

class Space(SpatialStructureElement):
    r"""Proxy of C++ OpenLxApp::Space class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getEntityType_Static = _swig_new_static_method(_OpenLxApp.Space_getEntityType_Static)
    assign = _swig_new_instance_method(_OpenLxApp.Space_assign)
    isEqual = _swig_new_instance_method(_OpenLxApp.Space_isEqual)
    __getCasted__ = _swig_new_instance_method(_OpenLxApp.Space___getCasted__)
    createIn = _swig_new_static_method(_OpenLxApp.Space_createIn)
    createFrom = _swig_new_static_method(_OpenLxApp.Space_createFrom)
    __swig_destroy__ = _OpenLxApp.delete_Space

    def __init__(self, *args):
        r"""
        __init__(Space self, std::shared_ptr< OpenLxApp::Space > other) -> Space
        __init__(Space self, App::Space * aObj) -> Space
        __init__(Space self, std::shared_ptr< OpenLxApp::Document > aDoc) -> Space
        __init__(Space self) -> Space
        """
        if self.__class__ == Space:
            _self = None
        else:
            _self = self
        _OpenLxApp.Space_swiginit(self, _OpenLxApp.new_Space(_self, *args))
    def __disown__(self):
        self.this.disown()
        _OpenLxApp.disown_Space(self)
        return weakref.proxy(self)

# Register Space in _OpenLxApp:
_OpenLxApp.Space_swigregister(Space)
Space_getEntityType_Static = _OpenLxApp.Space_getEntityType_Static
Space_createIn = _OpenLxApp.Space_createIn
Space_createFrom = _OpenLxApp.Space_createFrom

class SpatialZone(SpatialElement):
    r"""Proxy of C++ OpenLxApp::SpatialZone class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getEntityType_Static = _swig_new_static_method(_OpenLxApp.SpatialZone_getEntityType_Static)
    assign = _swig_new_instance_method(_OpenLxApp.SpatialZone_assign)
    isEqual = _swig_new_instance_method(_OpenLxApp.SpatialZone_isEqual)
    __getCasted__ = _swig_new_instance_method(_OpenLxApp.SpatialZone___getCasted__)
    createIn = _swig_new_static_method(_OpenLxApp.SpatialZone_createIn)
    createFrom = _swig_new_static_method(_OpenLxApp.SpatialZone_createFrom)
    __swig_destroy__ = _OpenLxApp.delete_SpatialZone

    def __init__(self, *args):
        r"""
        __init__(SpatialZone self, std::shared_ptr< OpenLxApp::SpatialZone > other) -> SpatialZone
        __init__(SpatialZone self, App::SpatialZone * aObj) -> SpatialZone
        __init__(SpatialZone self, std::shared_ptr< OpenLxApp::Document > aDoc) -> SpatialZone
        __init__(SpatialZone self) -> SpatialZone
        """
        if self.__class__ == SpatialZone:
            _self = None
        else:
            _self = self
        _OpenLxApp.SpatialZone_swiginit(self, _OpenLxApp.new_SpatialZone(_self, *args))
    def __disown__(self):
        self.this.disown()
        _OpenLxApp.disown_SpatialZone(self)
        return weakref.proxy(self)

# Register SpatialZone in _OpenLxApp:
_OpenLxApp.SpatialZone_swigregister(SpatialZone)
SpatialZone_getEntityType_Static = _OpenLxApp.SpatialZone_getEntityType_Static
SpatialZone_createIn = _OpenLxApp.SpatialZone_createIn
SpatialZone_createFrom = _OpenLxApp.SpatialZone_createFrom

checkElementsIntersect = _OpenLxApp.checkElementsIntersect
checkElementsTouch = _OpenLxApp.checkElementsTouch
bop_cut = _OpenLxApp.bop_cut
bop_common = _OpenLxApp.bop_common
bop_cutWithPlane = _OpenLxApp.bop_cutWithPlane
bop_splitByPlane = _OpenLxApp.bop_splitByPlane
bop_sectionWithPlane = _OpenLxApp.bop_sectionWithPlane
bop_section = _OpenLxApp.bop_section
bop_fuse = _OpenLxApp.bop_fuse
bop_startTimer = _OpenLxApp.bop_startTimer
bop_stopTimer = _OpenLxApp.bop_stopTimer
bop_elapsedTime = _OpenLxApp.bop_elapsedTime
createLineSegment = _OpenLxApp.createLineSegment
createArc3PointsSegment = _OpenLxApp.createArc3PointsSegment
createTangentArcSegment = _OpenLxApp.createTangentArcSegment
createStraight = _OpenLxApp.createStraight
createArc3Points = _OpenLxApp.createArc3Points
createTangentArc = _OpenLxApp.createTangentArc
createOffsetCurveFromWire = _OpenLxApp.createOffsetCurveFromWire
createCompositeCurveFromWire = _OpenLxApp.createCompositeCurveFromWire
createPolylineFromWire = _OpenLxApp.createPolylineFromWire
createBoundedCurveFromEdge = _OpenLxApp.createBoundedCurveFromEdge
createExtrudedAreaSolid = _OpenLxApp.createExtrudedAreaSolid
createFacetedBrep = _OpenLxApp.createFacetedBrep
createAdvancedBrep = _OpenLxApp.createAdvancedBrep
createRectangularTrimmedPlane = _OpenLxApp.createRectangularTrimmedPlane
createCurveBoundedPlaneFromFace = _OpenLxApp.createCurveBoundedPlaneFromFace
createFaceBasedSurfaceModel = _OpenLxApp.createFaceBasedSurfaceModel
setShapeProfileParams = _OpenLxApp.setShapeProfileParams
createArbitraryClosedProfileDef = _OpenLxApp.createArbitraryClosedProfileDef
createArbitraryOpenProfileDef = _OpenLxApp.createArbitraryOpenProfileDef
createArbitraryProfileDefWithVoids = _OpenLxApp.createArbitraryProfileDefWithVoids
class ActiveScript(object):
    r"""Proxy of C++ OpenLxApp::ActiveScript class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(ActiveScript self) -> ActiveScript"""
        _OpenLxApp.ActiveScript_swiginit(self, _OpenLxApp.new_ActiveScript())
    __swig_destroy__ = _OpenLxApp.delete_ActiveScript
    getFilePath = _swig_new_instance_method(_OpenLxApp.ActiveScript_getFilePath)
    getScriptId = _swig_new_instance_method(_OpenLxApp.ActiveScript_getScriptId)
    isDragAndDropped = _swig_new_instance_method(_OpenLxApp.ActiveScript_isDragAndDropped)
    getInsertionPoint = _swig_new_instance_method(_OpenLxApp.ActiveScript_getInsertionPoint)
    getDroppedOnElement = _swig_new_instance_method(_OpenLxApp.ActiveScript_getDroppedOnElement)

# Register ActiveScript in _OpenLxApp:
_OpenLxApp.ActiveScript_swigregister(ActiveScript)
class LoadPlugins(object):
    r"""Proxy of C++ OpenLxApp::LoadPlugins class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(LoadPlugins self) -> LoadPlugins"""
        _OpenLxApp.LoadPlugins_swiginit(self, _OpenLxApp.new_LoadPlugins())
    ElementExtension = property(_OpenLxApp.LoadPlugins_ElementExtension_get, _OpenLxApp.LoadPlugins_ElementExtension_set, doc=r"""ElementExtension : bool""")
    ElementExtensionGui = property(_OpenLxApp.LoadPlugins_ElementExtensionGui_get, _OpenLxApp.LoadPlugins_ElementExtensionGui_set, doc=r"""ElementExtensionGui : bool""")
    VPFreeExport = property(_OpenLxApp.LoadPlugins_VPFreeExport_get, _OpenLxApp.LoadPlugins_VPFreeExport_set, doc=r"""VPFreeExport : bool""")
    CdwkVariant = property(_OpenLxApp.LoadPlugins_CdwkVariant_get, _OpenLxApp.LoadPlugins_CdwkVariant_set, doc=r"""CdwkVariant : bool""")
    CdwkVariantGui = property(_OpenLxApp.LoadPlugins_CdwkVariantGui_get, _OpenLxApp.LoadPlugins_CdwkVariantGui_set, doc=r"""CdwkVariantGui : bool""")
    __swig_destroy__ = _OpenLxApp.delete_LoadPlugins

# Register LoadPlugins in _OpenLxApp:
_OpenLxApp.LoadPlugins_swigregister(LoadPlugins)
class Application(object):
    r"""Proxy of C++ OpenLxApp::Application class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Application self) -> Application"""
        _OpenLxApp.Application_swiginit(self, _OpenLxApp.new_Application())
    __swig_destroy__ = _OpenLxApp.delete_Application
    getInstance = _swig_new_static_method(_OpenLxApp.Application_getInstance)
    release = _swig_new_static_method(_OpenLxApp.Application_release)
    newDocument = _swig_new_instance_method(_OpenLxApp.Application_newDocument)
    newVariantTransferDocument = _swig_new_instance_method(_OpenLxApp.Application_newVariantTransferDocument)
    closeDocument = _swig_new_instance_method(_OpenLxApp.Application_closeDocument)
    closeAllDocuments = _swig_new_instance_method(_OpenLxApp.Application_closeAllDocuments)
    getActiveDocument = _swig_new_instance_method(_OpenLxApp.Application_getActiveDocument)
    getActiveScript = _swig_new_instance_method(_OpenLxApp.Application_getActiveScript)
    closeApplication = _swig_new_instance_method(_OpenLxApp.Application_closeApplication)
    setAlternativeLookupPath = _swig_new_instance_method(_OpenLxApp.Application_setAlternativeLookupPath)
    initQt = _swig_new_static_method(_OpenLxApp.Application_initQt)
    setPluginsToLoad = _swig_new_static_method(_OpenLxApp.Application_setPluginsToLoad)
    s_lp = property(_OpenLxApp.Application_s_lp_get, _OpenLxApp.Application_s_lp_set, doc=r"""s_lp : OpenLxApp::LoadPlugins""")

# Register Application in _OpenLxApp:
_OpenLxApp.Application_swigregister(Application)
Application_getInstance = _OpenLxApp.Application_getInstance
Application_release = _OpenLxApp.Application_release
Application_initQt = _OpenLxApp.Application_initQt
Application_setPluginsToLoad = _OpenLxApp.Application_setPluginsToLoad
cvar = _OpenLxApp.cvar

class Document(object):
    r"""Proxy of C++ OpenLxApp::Document class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getName = _swig_new_instance_method(_OpenLxApp.Document_getName)
    setCompany = _swig_new_instance_method(_OpenLxApp.Document_setCompany)
    setComment = _swig_new_instance_method(_OpenLxApp.Document_setComment)
    setCreatedBy = _swig_new_instance_method(_OpenLxApp.Document_setCreatedBy)
    beginEditing = _swig_new_instance_method(_OpenLxApp.Document_beginEditing)
    endEditing = _swig_new_instance_method(_OpenLxApp.Document_endEditing)
    isEditing = _swig_new_instance_method(_OpenLxApp.Document_isEditing)
    addObject = _swig_new_instance_method(_OpenLxApp.Document_addObject)
    removeObject = _swig_new_instance_method(_OpenLxApp.Document_removeObject)
    deleteObject = _swig_new_instance_method(_OpenLxApp.Document_deleteObject)
    deleteObjects = _swig_new_instance_method(_OpenLxApp.Document_deleteObjects)
    copyObjectsFrom = _swig_new_instance_method(_OpenLxApp.Document_copyObjectsFrom)
    recompute = _swig_new_instance_method(_OpenLxApp.Document_recompute)
    attachDocumentObserver = _swig_new_instance_method(_OpenLxApp.Document_attachDocumentObserver)
    detachDocumentObserver = _swig_new_instance_method(_OpenLxApp.Document_detachDocumentObserver)
    saveAs = _swig_new_instance_method(_OpenLxApp.Document_saveAs)
    saveAs2dl = _swig_new_instance_method(_OpenLxApp.Document_saveAs2dl)
    saveForWeb = _swig_new_instance_method(_OpenLxApp.Document_saveForWeb)
    createAutomaticWedgeMesh = _swig_new_instance_method(_OpenLxApp.Document_createAutomaticWedgeMesh)
    getZeropointXYZ = _swig_new_instance_method(_OpenLxApp.Document_getZeropointXYZ)
    setZeropointXYZ = _swig_new_instance_method(_OpenLxApp.Document_setZeropointXYZ)
    getZeropointLok = _swig_new_instance_method(_OpenLxApp.Document_getZeropointLok)
    setZeropointLok = _swig_new_instance_method(_OpenLxApp.Document_setZeropointLok)
    getZeropointAngle = _swig_new_instance_method(_OpenLxApp.Document_getZeropointAngle)
    setZeropointAngle = _swig_new_instance_method(_OpenLxApp.Document_setZeropointAngle)
    getTmpDirectory = _swig_new_instance_method(_OpenLxApp.Document_getTmpDirectory)
    addVariant = _swig_new_instance_method(_OpenLxApp.Document_addVariant)
    import2dvFile = _swig_new_instance_method(_OpenLxApp.Document_import2dvFile)
    runCommand = _swig_new_instance_method(_OpenLxApp.Document_runCommand)
    getCommandNames = _swig_new_static_method(_OpenLxApp.Document_getCommandNames)
    getLayer = _swig_new_instance_method(_OpenLxApp.Document_getLayer)
    getAuxiliaryLayer = _swig_new_instance_method(_OpenLxApp.Document_getAuxiliaryLayer)
    getStoreyLayer = _swig_new_instance_method(_OpenLxApp.Document_getStoreyLayer)
    getLayerNumbers = _swig_new_instance_method(_OpenLxApp.Document_getLayerNumbers)
    addLayer = _swig_new_instance_method(_OpenLxApp.Document_addLayer)
    getLayerName = _swig_new_instance_method(_OpenLxApp.Document_getLayerName)
    setLayerName = _swig_new_instance_method(_OpenLxApp.Document_setLayerName)
    setLayerVisible = _swig_new_instance_method(_OpenLxApp.Document_setLayerVisible)
    getLayerVisible = _swig_new_instance_method(_OpenLxApp.Document_getLayerVisible)
    setLayerFrozen = _swig_new_instance_method(_OpenLxApp.Document_setLayerFrozen)
    getLayerFrozen = _swig_new_instance_method(_OpenLxApp.Document_getLayerFrozen)
    getIfcLayer = _swig_new_instance_method(_OpenLxApp.Document_getIfcLayer)
    getElementByGlobalId = _swig_new_instance_method(_OpenLxApp.Document_getElementByGlobalId)
    getElements = _swig_new_instance_method(_OpenLxApp.Document_getElements)
    getRootByGlobalId = _swig_new_instance_method(_OpenLxApp.Document_getRootByGlobalId)
    getRoots = _swig_new_instance_method(_OpenLxApp.Document_getRoots)
    getObjects = _swig_new_instance_method(_OpenLxApp.Document_getObjects)
    getElementsByBimNumber = _swig_new_instance_method(_OpenLxApp.Document_getElementsByBimNumber)
    getElementsByBimColor = _swig_new_instance_method(_OpenLxApp.Document_getElementsByBimColor)
    getSpatialElements = _swig_new_instance_method(_OpenLxApp.Document_getSpatialElements)
    getSites = _swig_new_instance_method(_OpenLxApp.Document_getSites)
    getBuildings = _swig_new_instance_method(_OpenLxApp.Document_getBuildings)
    getBuildingStoreys = _swig_new_instance_method(_OpenLxApp.Document_getBuildingStoreys)
    getSpaces = _swig_new_instance_method(_OpenLxApp.Document_getSpaces)
    getActiveElement = _swig_new_instance_method(_OpenLxApp.Document_getActiveElement)
    getActiveSite = _swig_new_instance_method(_OpenLxApp.Document_getActiveSite)
    getActiveBuilding = _swig_new_instance_method(_OpenLxApp.Document_getActiveBuilding)
    getActiveBuildingStorey = _swig_new_instance_method(_OpenLxApp.Document_getActiveBuildingStorey)
    getActivePointStyle = _swig_new_instance_method(_OpenLxApp.Document_getActivePointStyle)
    getActiveCurveStyle = _swig_new_instance_method(_OpenLxApp.Document_getActiveCurveStyle)
    getActiveSurfaceStyle = _swig_new_instance_method(_OpenLxApp.Document_getActiveSurfaceStyle)
    getActiveTextStyle = _swig_new_instance_method(_OpenLxApp.Document_getActiveTextStyle)
    getActiveDimensionStyle = _swig_new_instance_method(_OpenLxApp.Document_getActiveDimensionStyle)
    getActiveAuxiliaryCurveStyle = _swig_new_instance_method(_OpenLxApp.Document_getActiveAuxiliaryCurveStyle)
    getActiveSpineStyle = _swig_new_instance_method(_OpenLxApp.Document_getActiveSpineStyle)
    getActiveExtrusionStyle = _swig_new_instance_method(_OpenLxApp.Document_getActiveExtrusionStyle)
    setActivePointStyle = _swig_new_instance_method(_OpenLxApp.Document_setActivePointStyle)
    setActiveCurveStyle = _swig_new_instance_method(_OpenLxApp.Document_setActiveCurveStyle)
    setActiveSurfaceStyle = _swig_new_instance_method(_OpenLxApp.Document_setActiveSurfaceStyle)
    setActiveTextStyle = _swig_new_instance_method(_OpenLxApp.Document_setActiveTextStyle)
    setActiveDimensionStyle = _swig_new_instance_method(_OpenLxApp.Document_setActiveDimensionStyle)
    setActiveAuxiliaryCurveStyle = _swig_new_instance_method(_OpenLxApp.Document_setActiveAuxiliaryCurveStyle)
    setActiveSpineStyle = _swig_new_instance_method(_OpenLxApp.Document_setActiveSpineStyle)
    setActiveExtrusionStyle = _swig_new_instance_method(_OpenLxApp.Document_setActiveExtrusionStyle)
    getTasks = _swig_new_instance_method(_OpenLxApp.Document_getTasks)
    setTasks = _swig_new_instance_method(_OpenLxApp.Document_setTasks)
    setActiveFacility = _swig_new_instance_method(_OpenLxApp.Document_setActiveFacility)
    set_WCS = _swig_new_instance_method(_OpenLxApp.Document_set_WCS)
    reset_WCS = _swig_new_instance_method(_OpenLxApp.Document_reset_WCS)
    getRotationZ_WCS = _swig_new_instance_method(_OpenLxApp.Document_getRotationZ_WCS)
    getLocation_WCS = _swig_new_instance_method(_OpenLxApp.Document_getLocation_WCS)
    getGlobalX_WCS = _swig_new_instance_method(_OpenLxApp.Document_getGlobalX_WCS)
    getGlobalY_WCS = _swig_new_instance_method(_OpenLxApp.Document_getGlobalY_WCS)
    getGlobalZ_WCS = _swig_new_instance_method(_OpenLxApp.Document_getGlobalZ_WCS)
    registerPythonScript = _swig_new_instance_method(_OpenLxApp.Document_registerPythonScript)
    assign = _swig_new_instance_method(_OpenLxApp.Document_assign)
    isEqual = _swig_new_instance_method(_OpenLxApp.Document_isEqual)
    __swig_destroy__ = _OpenLxApp.delete_Document
    create = _swig_new_instance_method(_OpenLxApp.Document_create)
    commandSet = property(_OpenLxApp.Document_commandSet_get, _OpenLxApp.Document_commandSet_set, doc=r"""commandSet : std::set<(std::string,std::less<(std::string)>,std::allocator<(std::string)>)>""")

    def __init__(self, *args):
        r"""
        __init__(Document self, String name, String typeName=L"") -> Document
        __init__(Document self, App::Document * appDoc, String name) -> Document
        __init__(Document self, Document other) -> Document
        __init__(Document self, App::Document * aDoc) -> Document
        __init__(Document self) -> Document
        """
        _OpenLxApp.Document_swiginit(self, _OpenLxApp.new_Document(*args))
    startTimer = _swig_new_static_method(_OpenLxApp.Document_startTimer)
    stopTimer = _swig_new_static_method(_OpenLxApp.Document_stopTimer)
    elapsedTime = _swig_new_static_method(_OpenLxApp.Document_elapsedTime)
    elapsedTimeForTextures = _swig_new_static_method(_OpenLxApp.Document_elapsedTimeForTextures)
    elapsedTimeForLocalAxes = _swig_new_static_method(_OpenLxApp.Document_elapsedTimeForLocalAxes)
    getRecomputeCount = _swig_new_static_method(_OpenLxApp.Document_getRecomputeCount)
    __getInternalDoc__ = _swig_new_instance_method(_OpenLxApp.Document___getInternalDoc__)
    __addTextureTimeInMS__ = _swig_new_static_method(_OpenLxApp.Document___addTextureTimeInMS__)
    __addSetLocalAxesTimeInMS__ = _swig_new_static_method(_OpenLxApp.Document___addSetLocalAxesTimeInMS__)
    __addRecomputeCount__ = _swig_new_static_method(_OpenLxApp.Document___addRecomputeCount__)
    is_ok_for_sdk = _swig_new_static_method(_OpenLxApp.Document_is_ok_for_sdk)

# Register Document in _OpenLxApp:
_OpenLxApp.Document_swigregister(Document)
Document_getCommandNames = _OpenLxApp.Document_getCommandNames
Document_startTimer = _OpenLxApp.Document_startTimer
Document_stopTimer = _OpenLxApp.Document_stopTimer
Document_elapsedTime = _OpenLxApp.Document_elapsedTime
Document_elapsedTimeForTextures = _OpenLxApp.Document_elapsedTimeForTextures
Document_elapsedTimeForLocalAxes = _OpenLxApp.Document_elapsedTimeForLocalAxes
Document_getRecomputeCount = _OpenLxApp.Document_getRecomputeCount
Document___addTextureTimeInMS__ = _OpenLxApp.Document___addTextureTimeInMS__
Document___addSetLocalAxesTimeInMS__ = _OpenLxApp.Document___addSetLocalAxesTimeInMS__
Document___addRecomputeCount__ = _OpenLxApp.Document___addRecomputeCount__
Document_is_ok_for_sdk = _OpenLxApp.Document_is_ok_for_sdk

class DocumentChanges(object):
    r"""Proxy of C++ OpenLxApp::DocumentChanges class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    RECOMPUTED = _OpenLxApp.DocumentChanges_RECOMPUTED
    
    MESSAGE_BY_NAME = _OpenLxApp.DocumentChanges_MESSAGE_BY_NAME
    
    MESSAGE_BY_ID = _OpenLxApp.DocumentChanges_MESSAGE_BY_ID
    
    Why = property(_OpenLxApp.DocumentChanges_Why_get, _OpenLxApp.DocumentChanges_Why_set, doc=r"""Why : enum $unnamed28$""")
    MsgName = property(_OpenLxApp.DocumentChanges_MsgName_get, _OpenLxApp.DocumentChanges_MsgName_set, doc=r"""MsgName : std::string""")
    MsgId = property(_OpenLxApp.DocumentChanges_MsgId_get, _OpenLxApp.DocumentChanges_MsgId_set, doc=r"""MsgId : int""")
    Value = property(_OpenLxApp.DocumentChanges_Value_get, _OpenLxApp.DocumentChanges_Value_set, doc=r"""Value : Core::Variant""")
    NewObjects = property(_OpenLxApp.DocumentChanges_NewObjects_get, _OpenLxApp.DocumentChanges_NewObjects_set, doc=r"""NewObjects : std::vector<(std::shared_ptr<(OpenLxApp::DocObject)>,std::allocator<(std::shared_ptr<(OpenLxApp::DocObject)>)>)>""")
    ModifiedObjects = property(_OpenLxApp.DocumentChanges_ModifiedObjects_get, _OpenLxApp.DocumentChanges_ModifiedObjects_set, doc=r"""ModifiedObjects : std::vector<(std::shared_ptr<(OpenLxApp::DocObject)>,std::allocator<(std::shared_ptr<(OpenLxApp::DocObject)>)>)>""")
    DeletedObjects = property(_OpenLxApp.DocumentChanges_DeletedObjects_get, _OpenLxApp.DocumentChanges_DeletedObjects_set, doc=r"""DeletedObjects : std::vector<(std::shared_ptr<(OpenLxApp::DocObject)>,std::allocator<(std::shared_ptr<(OpenLxApp::DocObject)>)>)>""")
    ErroneousObjects = property(_OpenLxApp.DocumentChanges_ErroneousObjects_get, _OpenLxApp.DocumentChanges_ErroneousObjects_set, doc=r"""ErroneousObjects : std::map<(std::shared_ptr<(OpenLxApp::DocObject)>,std::vector<(std::string,std::allocator<(std::string)>)>,std::less<(std::shared_ptr<(OpenLxApp::DocObject)>)>,std::allocator<(std::pair<(q(const).std::shared_ptr<(OpenLxApp::DocObject)>,std::vector<(std::string,std::allocator<(std::string)>)>)>)>)>""")

    def __init__(self):
        r"""__init__(DocumentChanges self) -> DocumentChanges"""
        _OpenLxApp.DocumentChanges_swiginit(self, _OpenLxApp.new_DocumentChanges())
    __swig_destroy__ = _OpenLxApp.delete_DocumentChanges

# Register DocumentChanges in _OpenLxApp:
_OpenLxApp.DocumentChanges_swigregister(DocumentChanges)
class DocumentObserver(object):
    r"""Proxy of C++ OpenLxApp::DocumentObserver class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(DocumentObserver self) -> DocumentObserver"""
        if self.__class__ == DocumentObserver:
            _self = None
        else:
            _self = self
        _OpenLxApp.DocumentObserver_swiginit(self, _OpenLxApp.new_DocumentObserver(_self, ))
    __swig_destroy__ = _OpenLxApp.delete_DocumentObserver
    def __disown__(self):
        self.this.disown()
        _OpenLxApp.disown_DocumentObserver(self)
        return weakref.proxy(self)

# Register DocumentObserver in _OpenLxApp:
_OpenLxApp.DocumentObserver_swigregister(DocumentObserver)
class ZeropointTool(object):
    r"""Proxy of C++ OpenLxApp::ZeropointTool class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    convertCoordinatesToLngLat = _swig_new_static_method(_OpenLxApp.ZeropointTool_convertCoordinatesToLngLat)

    def __init__(self):
        r"""__init__(ZeropointTool self) -> ZeropointTool"""
        _OpenLxApp.ZeropointTool_swiginit(self, _OpenLxApp.new_ZeropointTool())
    __swig_destroy__ = _OpenLxApp.delete_ZeropointTool

# Register ZeropointTool in _OpenLxApp:
_OpenLxApp.ZeropointTool_swigregister(ZeropointTool)
ZeropointTool_convertCoordinatesToLngLat = _OpenLxApp.ZeropointTool_convertCoordinatesToLngLat

getOpenLxVersion = _OpenLxApp.getOpenLxVersion
getLexocadVersion = _OpenLxApp.getLexocadVersion
getCurrentScriptFilePath = _OpenLxApp.getCurrentScriptFilePath
addScriptJob = _OpenLxApp.addScriptJob
setCadworkUser = _OpenLxApp.setCadworkUser
installPythonPackage = _OpenLxApp.installPythonPackage
projectOrthoPhoto = _OpenLxApp.projectOrthoPhoto
projectImage = _OpenLxApp.projectImage
getAcisBodyCopy = _OpenLxApp.getAcisBodyCopy
getBimColor = _OpenLxApp.getBimColor
getBimCut = _OpenLxApp.getBimCut
getBimLane = _OpenLxApp.getBimLane
getBimName = _OpenLxApp.getBimName
getBimNumber = _OpenLxApp.getBimNumber
getBimPreset = _OpenLxApp.getBimPreset
getBimZone = _OpenLxApp.getBimZone
getStoreyElevation = _OpenLxApp.getStoreyElevation
getStoreyNumber = _OpenLxApp.getStoreyNumber
getBuildingNumber = _OpenLxApp.getBuildingNumber
setBimLane = _OpenLxApp.setBimLane
setComponentByColor = _OpenLxApp.setComponentByColor
setImportIFCColor = _OpenLxApp.setImportIFCColor
setNewComponentByColorAndName = _OpenLxApp.setNewComponentByColorAndName
setStoreyNumber = _OpenLxApp.setStoreyNumber
addLxUserPropertyText = _OpenLxApp.addLxUserPropertyText
addIfcPropertyText = _OpenLxApp.addIfcPropertyText
addLxUserPropertyList = _OpenLxApp.addLxUserPropertyList
addIfcPropertyList = _OpenLxApp.addIfcPropertyList
addLxPropertySet = _OpenLxApp.addLxPropertySet
addIfcPropertySet = _OpenLxApp.addIfcPropertySet
assignLxPropertySetsToComponent = _OpenLxApp.assignLxPropertySetsToComponent
assignIfcPropertySetsToComponent = _OpenLxApp.assignIfcPropertySetsToComponent
assignValuesToLxProperties = _OpenLxApp.assignValuesToLxProperties
assignValuesToIfcProperties = _OpenLxApp.assignValuesToIfcProperties
getValueOfPropertyDescriptor = _OpenLxApp.getValueOfPropertyDescriptor
class Exporter(object):
    r"""Proxy of C++ OpenLxApp::Exporter class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, aDoc):
        r"""__init__(Exporter self, std::shared_ptr< OpenLxApp::Document > aDoc) -> Exporter"""
        if self.__class__ == Exporter:
            _self = None
        else:
            _self = self
        _OpenLxApp.Exporter_swiginit(self, _OpenLxApp.new_Exporter(_self, aDoc))
    exportFile = _swig_new_instance_method(_OpenLxApp.Exporter_exportFile)
    setSilentMode = _swig_new_instance_method(_OpenLxApp.Exporter_setSilentMode)
    isInSilentMode = _swig_new_instance_method(_OpenLxApp.Exporter_isInSilentMode)
    __swig_destroy__ = _OpenLxApp.delete_Exporter
    def __disown__(self):
        self.this.disown()
        _OpenLxApp.disown_Exporter(self)
        return weakref.proxy(self)

# Register Exporter in _OpenLxApp:
_OpenLxApp.Exporter_swigregister(Exporter)
class C3DZ_Exporter(Exporter):
    r"""Proxy of C++ OpenLxApp::C3DZ_Exporter class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, aDoc):
        r"""__init__(C3DZ_Exporter self, std::shared_ptr< OpenLxApp::Document > aDoc) -> C3DZ_Exporter"""
        if self.__class__ == C3DZ_Exporter:
            _self = None
        else:
            _self = self
        _OpenLxApp.C3DZ_Exporter_swiginit(self, _OpenLxApp.new_C3DZ_Exporter(_self, aDoc))
    __swig_destroy__ = _OpenLxApp.delete_C3DZ_Exporter
    createIn = _swig_new_static_method(_OpenLxApp.C3DZ_Exporter_createIn)
    setExportToClipboard = _swig_new_instance_method(_OpenLxApp.C3DZ_Exporter_setExportToClipboard)
    getExportToClipboard = _swig_new_instance_method(_OpenLxApp.C3DZ_Exporter_getExportToClipboard)
    setShowDialog = _swig_new_instance_method(_OpenLxApp.C3DZ_Exporter_setShowDialog)
    getShowDialog = _swig_new_instance_method(_OpenLxApp.C3DZ_Exporter_getShowDialog)
    setSelectedOnly = _swig_new_instance_method(_OpenLxApp.C3DZ_Exporter_setSelectedOnly)
    getSelectedOnly = _swig_new_instance_method(_OpenLxApp.C3DZ_Exporter_getSelectedOnly)
    setActivePoint = _swig_new_instance_method(_OpenLxApp.C3DZ_Exporter_setActivePoint)
    getActivePoint = _swig_new_instance_method(_OpenLxApp.C3DZ_Exporter_getActivePoint)
    setExportVersion = _swig_new_instance_method(_OpenLxApp.C3DZ_Exporter_setExportVersion)
    getExportVersion = _swig_new_instance_method(_OpenLxApp.C3DZ_Exporter_getExportVersion)
    setTextMode = _swig_new_instance_method(_OpenLxApp.C3DZ_Exporter_setTextMode)
    getTextMode = _swig_new_instance_method(_OpenLxApp.C3DZ_Exporter_getTextMode)
    exportFile = _swig_new_instance_method(_OpenLxApp.C3DZ_Exporter_exportFile)
    def __disown__(self):
        self.this.disown()
        _OpenLxApp.disown_C3DZ_Exporter(self)
        return weakref.proxy(self)

# Register C3DZ_Exporter in _OpenLxApp:
_OpenLxApp.C3DZ_Exporter_swigregister(C3DZ_Exporter)
C3DZ_Exporter_createIn = _OpenLxApp.C3DZ_Exporter_createIn

class IFC_Exporter(Exporter):
    r"""Proxy of C++ OpenLxApp::IFC_Exporter class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, aDoc):
        r"""__init__(IFC_Exporter self, std::shared_ptr< OpenLxApp::Document > aDoc) -> IFC_Exporter"""
        if self.__class__ == IFC_Exporter:
            _self = None
        else:
            _self = self
        _OpenLxApp.IFC_Exporter_swiginit(self, _OpenLxApp.new_IFC_Exporter(_self, aDoc))
    __swig_destroy__ = _OpenLxApp.delete_IFC_Exporter
    createIn = _swig_new_static_method(_OpenLxApp.IFC_Exporter_createIn)
    buildModel = _swig_new_instance_method(_OpenLxApp.IFC_Exporter_buildModel)
    getModel = _swig_new_instance_method(_OpenLxApp.IFC_Exporter_getModel)
    setCheckComplexity = _swig_new_instance_method(_OpenLxApp.IFC_Exporter_setCheckComplexity)
    getCheckComplexity = _swig_new_instance_method(_OpenLxApp.IFC_Exporter_getCheckComplexity)
    setIfcVersion = _swig_new_instance_method(_OpenLxApp.IFC_Exporter_setIfcVersion)
    getIfcVersion = _swig_new_instance_method(_OpenLxApp.IFC_Exporter_getIfcVersion)
    setExportUndefinedElements = _swig_new_instance_method(_OpenLxApp.IFC_Exporter_setExportUndefinedElements)
    getExportUndefinedElements = _swig_new_instance_method(_OpenLxApp.IFC_Exporter_getExportUndefinedElements)
    setExport2dLayers = _swig_new_instance_method(_OpenLxApp.IFC_Exporter_setExport2dLayers)
    getExport2dLayers = _swig_new_instance_method(_OpenLxApp.IFC_Exporter_getExport2dLayers)
    setExportLxPrefix = _swig_new_instance_method(_OpenLxApp.IFC_Exporter_setExportLxPrefix)
    getExportLxPrefix = _swig_new_instance_method(_OpenLxApp.IFC_Exporter_getExportLxPrefix)
    exportFile = _swig_new_instance_method(_OpenLxApp.IFC_Exporter_exportFile)
    def __disown__(self):
        self.this.disown()
        _OpenLxApp.disown_IFC_Exporter(self)
        return weakref.proxy(self)

# Register IFC_Exporter in _OpenLxApp:
_OpenLxApp.IFC_Exporter_swigregister(IFC_Exporter)
IFC_Exporter_createIn = _OpenLxApp.IFC_Exporter_createIn

class IV_Exporter(Exporter):
    r"""Proxy of C++ OpenLxApp::IV_Exporter class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, aDoc):
        r"""__init__(IV_Exporter self, std::shared_ptr< OpenLxApp::Document > aDoc) -> IV_Exporter"""
        if self.__class__ == IV_Exporter:
            _self = None
        else:
            _self = self
        _OpenLxApp.IV_Exporter_swiginit(self, _OpenLxApp.new_IV_Exporter(_self, aDoc))
    __swig_destroy__ = _OpenLxApp.delete_IV_Exporter
    createIn = _swig_new_static_method(_OpenLxApp.IV_Exporter_createIn)
    exportFile = _swig_new_instance_method(_OpenLxApp.IV_Exporter_exportFile)
    def __disown__(self):
        self.this.disown()
        _OpenLxApp.disown_IV_Exporter(self)
        return weakref.proxy(self)

# Register IV_Exporter in _OpenLxApp:
_OpenLxApp.IV_Exporter_swigregister(IV_Exporter)
IV_Exporter_createIn = _OpenLxApp.IV_Exporter_createIn

class OBJ_Exporter(Exporter):
    r"""Proxy of C++ OpenLxApp::OBJ_Exporter class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, aDoc):
        r"""__init__(OBJ_Exporter self, std::shared_ptr< OpenLxApp::Document > aDoc) -> OBJ_Exporter"""
        if self.__class__ == OBJ_Exporter:
            _self = None
        else:
            _self = self
        _OpenLxApp.OBJ_Exporter_swiginit(self, _OpenLxApp.new_OBJ_Exporter(_self, aDoc))
    __swig_destroy__ = _OpenLxApp.delete_OBJ_Exporter
    createIn = _swig_new_static_method(_OpenLxApp.OBJ_Exporter_createIn)
    CoordinateOrder_DEFAULT = _OpenLxApp.OBJ_Exporter_CoordinateOrder_DEFAULT
    
    CoordinateOrder_YXMODE = _OpenLxApp.OBJ_Exporter_CoordinateOrder_YXMODE
    
    CoordinateOrder_ESRIMODE = _OpenLxApp.OBJ_Exporter_CoordinateOrder_ESRIMODE
    
    setHeader = _swig_new_instance_method(_OpenLxApp.OBJ_Exporter_setHeader)
    setWithMaterials = _swig_new_instance_method(_OpenLxApp.OBJ_Exporter_setWithMaterials)
    setMerge = _swig_new_instance_method(_OpenLxApp.OBJ_Exporter_setMerge)
    setCoordinateOrder = _swig_new_instance_method(_OpenLxApp.OBJ_Exporter_setCoordinateOrder)
    getHeader = _swig_new_instance_method(_OpenLxApp.OBJ_Exporter_getHeader)
    getWithMaterials = _swig_new_instance_method(_OpenLxApp.OBJ_Exporter_getWithMaterials)
    getMerge = _swig_new_instance_method(_OpenLxApp.OBJ_Exporter_getMerge)
    getCoordinateOrder = _swig_new_instance_method(_OpenLxApp.OBJ_Exporter_getCoordinateOrder)
    exportFile = _swig_new_instance_method(_OpenLxApp.OBJ_Exporter_exportFile)
    def __disown__(self):
        self.this.disown()
        _OpenLxApp.disown_OBJ_Exporter(self)
        return weakref.proxy(self)

# Register OBJ_Exporter in _OpenLxApp:
_OpenLxApp.OBJ_Exporter_swigregister(OBJ_Exporter)
OBJ_Exporter_createIn = _OpenLxApp.OBJ_Exporter_createIn

class SAT_Exporter(Exporter):
    r"""Proxy of C++ OpenLxApp::SAT_Exporter class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, aDoc):
        r"""__init__(SAT_Exporter self, std::shared_ptr< OpenLxApp::Document > aDoc) -> SAT_Exporter"""
        if self.__class__ == SAT_Exporter:
            _self = None
        else:
            _self = self
        _OpenLxApp.SAT_Exporter_swiginit(self, _OpenLxApp.new_SAT_Exporter(_self, aDoc))
    __swig_destroy__ = _OpenLxApp.delete_SAT_Exporter
    createIn = _swig_new_static_method(_OpenLxApp.SAT_Exporter_createIn)
    exportFile = _swig_new_instance_method(_OpenLxApp.SAT_Exporter_exportFile)
    setAcisVersion = _swig_new_instance_method(_OpenLxApp.SAT_Exporter_setAcisVersion)
    getAcisVersion = _swig_new_instance_method(_OpenLxApp.SAT_Exporter_getAcisVersion)
    def __disown__(self):
        self.this.disown()
        _OpenLxApp.disown_SAT_Exporter(self)
        return weakref.proxy(self)

# Register SAT_Exporter in _OpenLxApp:
_OpenLxApp.SAT_Exporter_swigregister(SAT_Exporter)
SAT_Exporter_createIn = _OpenLxApp.SAT_Exporter_createIn

class WebGL_Exporter(Exporter):
    r"""Proxy of C++ OpenLxApp::WebGL_Exporter class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, aDoc):
        r"""__init__(WebGL_Exporter self, std::shared_ptr< OpenLxApp::Document > aDoc) -> WebGL_Exporter"""
        if self.__class__ == WebGL_Exporter:
            _self = None
        else:
            _self = self
        _OpenLxApp.WebGL_Exporter_swiginit(self, _OpenLxApp.new_WebGL_Exporter(_self, aDoc))
    __swig_destroy__ = _OpenLxApp.delete_WebGL_Exporter
    createIn = _swig_new_static_method(_OpenLxApp.WebGL_Exporter_createIn)
    setSingleHtmlFile = _swig_new_instance_method(_OpenLxApp.WebGL_Exporter_setSingleHtmlFile)
    getSingleHtmlFile = _swig_new_instance_method(_OpenLxApp.WebGL_Exporter_getSingleHtmlFile)
    exportFile = _swig_new_instance_method(_OpenLxApp.WebGL_Exporter_exportFile)
    def __disown__(self):
        self.this.disown()
        _OpenLxApp.disown_WebGL_Exporter(self)
        return weakref.proxy(self)

# Register WebGL_Exporter in _OpenLxApp:
_OpenLxApp.WebGL_Exporter_swigregister(WebGL_Exporter)
WebGL_Exporter_createIn = _OpenLxApp.WebGL_Exporter_createIn

class Importer(object):
    r"""Proxy of C++ OpenLxApp::Importer class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, aDoc):
        r"""__init__(Importer self, std::shared_ptr< OpenLxApp::Document > aDoc) -> Importer"""
        if self.__class__ == Importer:
            _self = None
        else:
            _self = self
        _OpenLxApp.Importer_swiginit(self, _OpenLxApp.new_Importer(_self, aDoc))
    importFile = _swig_new_instance_method(_OpenLxApp.Importer_importFile)
    setSilentMode = _swig_new_instance_method(_OpenLxApp.Importer_setSilentMode)
    isInSilentMode = _swig_new_instance_method(_OpenLxApp.Importer_isInSilentMode)
    __swig_destroy__ = _OpenLxApp.delete_Importer
    getImportedElems = _swig_new_instance_method(_OpenLxApp.Importer_getImportedElems)
    init = _swig_new_instance_method(_OpenLxApp.Importer_init)
    def __disown__(self):
        self.this.disown()
        _OpenLxApp.disown_Importer(self)
        return weakref.proxy(self)

# Register Importer in _OpenLxApp:
_OpenLxApp.Importer_swigregister(Importer)
class IV_Importer(Importer):
    r"""Proxy of C++ OpenLxApp::IV_Importer class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, aDoc):
        r"""__init__(IV_Importer self, std::shared_ptr< OpenLxApp::Document > aDoc) -> IV_Importer"""
        if self.__class__ == IV_Importer:
            _self = None
        else:
            _self = self
        _OpenLxApp.IV_Importer_swiginit(self, _OpenLxApp.new_IV_Importer(_self, aDoc))
    __swig_destroy__ = _OpenLxApp.delete_IV_Importer
    createIn = _swig_new_static_method(_OpenLxApp.IV_Importer_createIn)
    importFile = _swig_new_instance_method(_OpenLxApp.IV_Importer_importFile)
    getImportedElems = _swig_new_instance_method(_OpenLxApp.IV_Importer_getImportedElems)
    getCreateLayer = _swig_new_instance_method(_OpenLxApp.IV_Importer_getCreateLayer)
    setCreateLayer = _swig_new_instance_method(_OpenLxApp.IV_Importer_setCreateLayer)
    getAsExtenalFile = _swig_new_instance_method(_OpenLxApp.IV_Importer_getAsExtenalFile)
    setAsExternalFile = _swig_new_instance_method(_OpenLxApp.IV_Importer_setAsExternalFile)
    def __disown__(self):
        self.this.disown()
        _OpenLxApp.disown_IV_Importer(self)
        return weakref.proxy(self)

# Register IV_Importer in _OpenLxApp:
_OpenLxApp.IV_Importer_swigregister(IV_Importer)
IV_Importer_createIn = _OpenLxApp.IV_Importer_createIn

class IFC_Importer(Importer):
    r"""Proxy of C++ OpenLxApp::IFC_Importer class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, aDoc):
        r"""__init__(IFC_Importer self, std::shared_ptr< OpenLxApp::Document > aDoc) -> IFC_Importer"""
        if self.__class__ == IFC_Importer:
            _self = None
        else:
            _self = self
        _OpenLxApp.IFC_Importer_swiginit(self, _OpenLxApp.new_IFC_Importer(_self, aDoc))
    __swig_destroy__ = _OpenLxApp.delete_IFC_Importer
    createIn = _swig_new_static_method(_OpenLxApp.IFC_Importer_createIn)
    importFile = _swig_new_instance_method(_OpenLxApp.IFC_Importer_importFile)
    getImportedElems = _swig_new_instance_method(_OpenLxApp.IFC_Importer_getImportedElems)
    getDataBridge = _swig_new_instance_method(_OpenLxApp.IFC_Importer_getDataBridge)
    getModel = _swig_new_instance_method(_OpenLxApp.IFC_Importer_getModel)
    def __disown__(self):
        self.this.disown()
        _OpenLxApp.disown_IFC_Importer(self)
        return weakref.proxy(self)

# Register IFC_Importer in _OpenLxApp:
_OpenLxApp.IFC_Importer_swigregister(IFC_Importer)
IFC_Importer_createIn = _OpenLxApp.IFC_Importer_createIn

castToAdvancedBrep = _OpenLxApp.castToAdvancedBrep
castToAlignment = _OpenLxApp.castToAlignment
castToAnnotation = _OpenLxApp.castToAnnotation
castToArbitraryClosedProfileDef = _OpenLxApp.castToArbitraryClosedProfileDef
castToBeam = _OpenLxApp.castToBeam
castToBeamStandardCase = _OpenLxApp.castToBeamStandardCase
castToBearing = _OpenLxApp.castToBearing
castToBezierCurve = _OpenLxApp.castToBezierCurve
castToBlock = _OpenLxApp.castToBlock
castToBooleanClippingResult = _OpenLxApp.castToBooleanClippingResult
castToBorehole = _OpenLxApp.castToBorehole
castToBoundedCurve = _OpenLxApp.castToBoundedCurve
castToBoundedSurface = _OpenLxApp.castToBoundedSurface
castToBuilding = _OpenLxApp.castToBuilding
castToBuildingElementProxy = _OpenLxApp.castToBuildingElementProxy
castToBuildingStorey = _OpenLxApp.castToBuildingStorey
castToCableCarrierSegment = _OpenLxApp.castToCableCarrierSegment
castToCableSegment = _OpenLxApp.castToCableSegment
castToCartesianPoint = _OpenLxApp.castToCartesianPoint
castToChimney = _OpenLxApp.castToChimney
castToCircle = _OpenLxApp.castToCircle
castToCivilElement = _OpenLxApp.castToCivilElement
castToColumn = _OpenLxApp.castToColumn
castToColumnStandardCase = _OpenLxApp.castToColumnStandardCase
castToComponentType = _OpenLxApp.castToComponentType
castToCompositeCurve = _OpenLxApp.castToCompositeCurve
castToCompositeCurveSegment = _OpenLxApp.castToCompositeCurveSegment
castToConic = _OpenLxApp.castToConic
castToCourse = _OpenLxApp.castToCourse
castToCovering = _OpenLxApp.castToCovering
castToCurtainWall = _OpenLxApp.castToCurtainWall
castToCurve = _OpenLxApp.castToCurve
castToCurveBoundedPlane = _OpenLxApp.castToCurveBoundedPlane
castToDeepFoundation = _OpenLxApp.castToDeepFoundation
castToDiscreteAccessory = _OpenLxApp.castToDiscreteAccessory
castToDistributionChamberElement = _OpenLxApp.castToDistributionChamberElement
castToDistributionElement = _OpenLxApp.castToDistributionElement
castToDistributionFlowElement = _OpenLxApp.castToDistributionFlowElement
castToDistributionPort = _OpenLxApp.castToDistributionPort
castToDoor = _OpenLxApp.castToDoor
castToDoorStandardCase = _OpenLxApp.castToDoorStandardCase
castToDuctSegment = _OpenLxApp.castToDuctSegment
castToEarthworksCut = _OpenLxApp.castToEarthworksCut
castToEarthworksFill = _OpenLxApp.castToEarthworksFill
castToElement = _OpenLxApp.castToElement
castToElementarySurface = _OpenLxApp.castToElementarySurface
castToElementAssembly = _OpenLxApp.castToElementAssembly
castToElementComponent = _OpenLxApp.castToElementComponent
castToEllipse = _OpenLxApp.castToEllipse
castToExternalSpatialElement = _OpenLxApp.castToExternalSpatialElement
castToExternalSpatialStructureElement = _OpenLxApp.castToExternalSpatialStructureElement
castToExtrudedAreaSolid = _OpenLxApp.castToExtrudedAreaSolid
castToFacetedBrep = _OpenLxApp.castToFacetedBrep
castToFireSuppressionTerminal = _OpenLxApp.castToFireSuppressionTerminal
castToFlowSegment = _OpenLxApp.castToFlowSegment
castToFooting = _OpenLxApp.castToFooting
castToGeometry = _OpenLxApp.castToGeometry
castToGeometryProxy = _OpenLxApp.castToGeometryProxy
castToGeotechnicalStratum = _OpenLxApp.castToGeotechnicalStratum
castToImpactProtectionDevice = _OpenLxApp.castToImpactProtectionDevice
castToInventorImport = _OpenLxApp.castToInventorImport
castToKerb = _OpenLxApp.castToKerb
castToLamp = _OpenLxApp.castToLamp
castToLightFixture = _OpenLxApp.castToLightFixture
castToLine = _OpenLxApp.castToLine
castToMaterial = _OpenLxApp.castToMaterial
castToMaterialConstituent = _OpenLxApp.castToMaterialConstituent
castToMaterialConstituentSet = _OpenLxApp.castToMaterialConstituentSet
castToMaterialDefinition = _OpenLxApp.castToMaterialDefinition
castToMaterialSelect = _OpenLxApp.castToMaterialSelect
castToMechanicalFastener = _OpenLxApp.castToMechanicalFastener
castToMember = _OpenLxApp.castToMember
castToMemberStandardCase = _OpenLxApp.castToMemberStandardCase
castToMooringDevice = _OpenLxApp.castToMooringDevice
castToNavigationElement = _OpenLxApp.castToNavigationElement
castToOpeningElement = _OpenLxApp.castToOpeningElement
castToOpeningStandardCase = _OpenLxApp.castToOpeningStandardCase
castToOutlet = _OpenLxApp.castToOutlet
castToPavement = _OpenLxApp.castToPavement
castToPile = _OpenLxApp.castToPile
castToPipeFitting = _OpenLxApp.castToPipeFitting
castToPipeSegment = _OpenLxApp.castToPipeSegment
castToPlane = _OpenLxApp.castToPlane
castToPlate = _OpenLxApp.castToPlate
castToPlateStandardCase = _OpenLxApp.castToPlateStandardCase
castToPolygonMesh = _OpenLxApp.castToPolygonMesh
castToPolyline = _OpenLxApp.castToPolyline
castToPort = _OpenLxApp.castToPort
castToProduct = _OpenLxApp.castToProduct
castToPropertyButton = _OpenLxApp.castToPropertyButton
castToPropertyColor = _OpenLxApp.castToPropertyColor
castToPropertyDouble = _OpenLxApp.castToPropertyDouble
castToPropertyEnum = _OpenLxApp.castToPropertyEnum
castToPropertyInteger = _OpenLxApp.castToPropertyInteger
castToPropertyObject = _OpenLxApp.castToPropertyObject
castToPropertyObjectVector = _OpenLxApp.castToPropertyObjectVector
castToPropertyPoint = _OpenLxApp.castToPropertyPoint
castToPropertyPointVector = _OpenLxApp.castToPropertyPointVector
castToPropertyString = _OpenLxApp.castToPropertyString
castToPropertyUser = _OpenLxApp.castToPropertyUser
castToPythonElement = _OpenLxApp.castToPythonElement
castToRail = _OpenLxApp.castToRail
castToRailing = _OpenLxApp.castToRailing
castToRamp = _OpenLxApp.castToRamp
castToRampFlight = _OpenLxApp.castToRampFlight
castToReinforcedSoil = _OpenLxApp.castToReinforcedSoil
castToRightCircularCone = _OpenLxApp.castToRightCircularCone
castToRightCircularCylinder = _OpenLxApp.castToRightCircularCylinder
castToRoof = _OpenLxApp.castToRoof
castToRoot = _OpenLxApp.castToRoot
castToShellBasedSurfaceModel = _OpenLxApp.castToShellBasedSurfaceModel
castToSign = _OpenLxApp.castToSign
castToSignal = _OpenLxApp.castToSignal
castToSingleLineText2d = _OpenLxApp.castToSingleLineText2d
castToSite = _OpenLxApp.castToSite
castToSlab = _OpenLxApp.castToSlab
castToSlabElementedCase = _OpenLxApp.castToSlabElementedCase
castToSlabStandardCase = _OpenLxApp.castToSlabStandardCase
castToSpace = _OpenLxApp.castToSpace
castToSpatialElement = _OpenLxApp.castToSpatialElement
castToSpatialStructureElement = _OpenLxApp.castToSpatialStructureElement
castToSpatialZone = _OpenLxApp.castToSpatialZone
castToSphere = _OpenLxApp.castToSphere
castToStair = _OpenLxApp.castToStair
castToStairFlight = _OpenLxApp.castToStairFlight
castToSubElement = _OpenLxApp.castToSubElement
castToSurface = _OpenLxApp.castToSurface
castToSurfaceFeature = _OpenLxApp.castToSurfaceFeature
castToSweptDiskSolid = _OpenLxApp.castToSweptDiskSolid
castToTrackElement = _OpenLxApp.castToTrackElement
castToTrimmedCurve = _OpenLxApp.castToTrimmedCurve
castToValve = _OpenLxApp.castToValve
castToWall = _OpenLxApp.castToWall
castToWallElementedCase = _OpenLxApp.castToWallElementedCase
castToWallStandardCase = _OpenLxApp.castToWallStandardCase
castToWindow = _OpenLxApp.castToWindow
castToWindowStandardCase = _OpenLxApp.castToWindowStandardCase
class map_String_Property(object):
    r"""Proxy of C++ std::map< std::string,std::shared_ptr< OpenLxApp::Property > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_OpenLxApp.map_String_Property_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_OpenLxApp.map_String_Property___nonzero__)
    __bool__ = _swig_new_instance_method(_OpenLxApp.map_String_Property___bool__)
    __len__ = _swig_new_instance_method(_OpenLxApp.map_String_Property___len__)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()
    __getitem__ = _swig_new_instance_method(_OpenLxApp.map_String_Property___getitem__)
    __delitem__ = _swig_new_instance_method(_OpenLxApp.map_String_Property___delitem__)
    has_key = _swig_new_instance_method(_OpenLxApp.map_String_Property_has_key)
    keys = _swig_new_instance_method(_OpenLxApp.map_String_Property_keys)
    values = _swig_new_instance_method(_OpenLxApp.map_String_Property_values)
    items = _swig_new_instance_method(_OpenLxApp.map_String_Property_items)
    __contains__ = _swig_new_instance_method(_OpenLxApp.map_String_Property___contains__)
    key_iterator = _swig_new_instance_method(_OpenLxApp.map_String_Property_key_iterator)
    value_iterator = _swig_new_instance_method(_OpenLxApp.map_String_Property_value_iterator)
    __setitem__ = _swig_new_instance_method(_OpenLxApp.map_String_Property___setitem__)
    asdict = _swig_new_instance_method(_OpenLxApp.map_String_Property_asdict)

    def __init__(self, *args):
        r"""
        __init__(map_String_Property self, std::less< std::string > const & other) -> map_String_Property
        __init__(map_String_Property self) -> map_String_Property
        __init__(map_String_Property self, map_String_Property other) -> map_String_Property
        """
        _OpenLxApp.map_String_Property_swiginit(self, _OpenLxApp.new_map_String_Property(*args))
    empty = _swig_new_instance_method(_OpenLxApp.map_String_Property_empty)
    size = _swig_new_instance_method(_OpenLxApp.map_String_Property_size)
    swap = _swig_new_instance_method(_OpenLxApp.map_String_Property_swap)
    begin = _swig_new_instance_method(_OpenLxApp.map_String_Property_begin)
    end = _swig_new_instance_method(_OpenLxApp.map_String_Property_end)
    rbegin = _swig_new_instance_method(_OpenLxApp.map_String_Property_rbegin)
    rend = _swig_new_instance_method(_OpenLxApp.map_String_Property_rend)
    clear = _swig_new_instance_method(_OpenLxApp.map_String_Property_clear)
    get_allocator = _swig_new_instance_method(_OpenLxApp.map_String_Property_get_allocator)
    count = _swig_new_instance_method(_OpenLxApp.map_String_Property_count)
    erase = _swig_new_instance_method(_OpenLxApp.map_String_Property_erase)
    find = _swig_new_instance_method(_OpenLxApp.map_String_Property_find)
    lower_bound = _swig_new_instance_method(_OpenLxApp.map_String_Property_lower_bound)
    upper_bound = _swig_new_instance_method(_OpenLxApp.map_String_Property_upper_bound)
    __swig_destroy__ = _OpenLxApp.delete_map_String_Property

# Register map_String_Property in _OpenLxApp:
_OpenLxApp.map_String_Property_swigregister(map_String_Property)
class set_Element(object):
    r"""Proxy of C++ std::set< std::shared_ptr< OpenLxApp::Element > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_OpenLxApp.set_Element_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_OpenLxApp.set_Element___nonzero__)
    __bool__ = _swig_new_instance_method(_OpenLxApp.set_Element___bool__)
    __len__ = _swig_new_instance_method(_OpenLxApp.set_Element___len__)
    append = _swig_new_instance_method(_OpenLxApp.set_Element_append)
    __contains__ = _swig_new_instance_method(_OpenLxApp.set_Element___contains__)
    __getitem__ = _swig_new_instance_method(_OpenLxApp.set_Element___getitem__)
    add = _swig_new_instance_method(_OpenLxApp.set_Element_add)
    discard = _swig_new_instance_method(_OpenLxApp.set_Element_discard)

    def __init__(self, *args):
        r"""
        __init__(set_Element self, std::less< std::shared_ptr< OpenLxApp::Element > > const & other) -> set_Element
        __init__(set_Element self) -> set_Element
        __init__(set_Element self, set_Element other) -> set_Element
        """
        _OpenLxApp.set_Element_swiginit(self, _OpenLxApp.new_set_Element(*args))
    empty = _swig_new_instance_method(_OpenLxApp.set_Element_empty)
    size = _swig_new_instance_method(_OpenLxApp.set_Element_size)
    clear = _swig_new_instance_method(_OpenLxApp.set_Element_clear)
    swap = _swig_new_instance_method(_OpenLxApp.set_Element_swap)
    count = _swig_new_instance_method(_OpenLxApp.set_Element_count)
    begin = _swig_new_instance_method(_OpenLxApp.set_Element_begin)
    end = _swig_new_instance_method(_OpenLxApp.set_Element_end)
    rbegin = _swig_new_instance_method(_OpenLxApp.set_Element_rbegin)
    rend = _swig_new_instance_method(_OpenLxApp.set_Element_rend)
    erase = _swig_new_instance_method(_OpenLxApp.set_Element_erase)
    find = _swig_new_instance_method(_OpenLxApp.set_Element_find)
    lower_bound = _swig_new_instance_method(_OpenLxApp.set_Element_lower_bound)
    upper_bound = _swig_new_instance_method(_OpenLxApp.set_Element_upper_bound)
    equal_range = _swig_new_instance_method(_OpenLxApp.set_Element_equal_range)
    insert = _swig_new_instance_method(_OpenLxApp.set_Element_insert)
    __swig_destroy__ = _OpenLxApp.delete_set_Element

# Register set_Element in _OpenLxApp:
_OpenLxApp.set_Element_swigregister(set_Element)
class set_OpeningElement(object):
    r"""Proxy of C++ std::set< std::shared_ptr< OpenLxApp::OpeningElement > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_OpenLxApp.set_OpeningElement_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_OpenLxApp.set_OpeningElement___nonzero__)
    __bool__ = _swig_new_instance_method(_OpenLxApp.set_OpeningElement___bool__)
    __len__ = _swig_new_instance_method(_OpenLxApp.set_OpeningElement___len__)
    append = _swig_new_instance_method(_OpenLxApp.set_OpeningElement_append)
    __contains__ = _swig_new_instance_method(_OpenLxApp.set_OpeningElement___contains__)
    __getitem__ = _swig_new_instance_method(_OpenLxApp.set_OpeningElement___getitem__)
    add = _swig_new_instance_method(_OpenLxApp.set_OpeningElement_add)
    discard = _swig_new_instance_method(_OpenLxApp.set_OpeningElement_discard)

    def __init__(self, *args):
        r"""
        __init__(set_OpeningElement self, std::less< std::shared_ptr< OpenLxApp::OpeningElement > > const & other) -> set_OpeningElement
        __init__(set_OpeningElement self) -> set_OpeningElement
        __init__(set_OpeningElement self, set_OpeningElement other) -> set_OpeningElement
        """
        _OpenLxApp.set_OpeningElement_swiginit(self, _OpenLxApp.new_set_OpeningElement(*args))
    empty = _swig_new_instance_method(_OpenLxApp.set_OpeningElement_empty)
    size = _swig_new_instance_method(_OpenLxApp.set_OpeningElement_size)
    clear = _swig_new_instance_method(_OpenLxApp.set_OpeningElement_clear)
    swap = _swig_new_instance_method(_OpenLxApp.set_OpeningElement_swap)
    count = _swig_new_instance_method(_OpenLxApp.set_OpeningElement_count)
    begin = _swig_new_instance_method(_OpenLxApp.set_OpeningElement_begin)
    end = _swig_new_instance_method(_OpenLxApp.set_OpeningElement_end)
    rbegin = _swig_new_instance_method(_OpenLxApp.set_OpeningElement_rbegin)
    rend = _swig_new_instance_method(_OpenLxApp.set_OpeningElement_rend)
    erase = _swig_new_instance_method(_OpenLxApp.set_OpeningElement_erase)
    find = _swig_new_instance_method(_OpenLxApp.set_OpeningElement_find)
    lower_bound = _swig_new_instance_method(_OpenLxApp.set_OpeningElement_lower_bound)
    upper_bound = _swig_new_instance_method(_OpenLxApp.set_OpeningElement_upper_bound)
    equal_range = _swig_new_instance_method(_OpenLxApp.set_OpeningElement_equal_range)
    insert = _swig_new_instance_method(_OpenLxApp.set_OpeningElement_insert)
    __swig_destroy__ = _OpenLxApp.delete_set_OpeningElement

# Register set_OpeningElement in _OpenLxApp:
_OpenLxApp.set_OpeningElement_swigregister(set_OpeningElement)
class set_SubElement(object):
    r"""Proxy of C++ std::set< std::shared_ptr< OpenLxApp::SubElement > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_OpenLxApp.set_SubElement_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_OpenLxApp.set_SubElement___nonzero__)
    __bool__ = _swig_new_instance_method(_OpenLxApp.set_SubElement___bool__)
    __len__ = _swig_new_instance_method(_OpenLxApp.set_SubElement___len__)
    append = _swig_new_instance_method(_OpenLxApp.set_SubElement_append)
    __contains__ = _swig_new_instance_method(_OpenLxApp.set_SubElement___contains__)
    __getitem__ = _swig_new_instance_method(_OpenLxApp.set_SubElement___getitem__)
    add = _swig_new_instance_method(_OpenLxApp.set_SubElement_add)
    discard = _swig_new_instance_method(_OpenLxApp.set_SubElement_discard)

    def __init__(self, *args):
        r"""
        __init__(set_SubElement self, std::less< std::shared_ptr< OpenLxApp::SubElement > > const & other) -> set_SubElement
        __init__(set_SubElement self) -> set_SubElement
        __init__(set_SubElement self, set_SubElement other) -> set_SubElement
        """
        _OpenLxApp.set_SubElement_swiginit(self, _OpenLxApp.new_set_SubElement(*args))
    empty = _swig_new_instance_method(_OpenLxApp.set_SubElement_empty)
    size = _swig_new_instance_method(_OpenLxApp.set_SubElement_size)
    clear = _swig_new_instance_method(_OpenLxApp.set_SubElement_clear)
    swap = _swig_new_instance_method(_OpenLxApp.set_SubElement_swap)
    count = _swig_new_instance_method(_OpenLxApp.set_SubElement_count)
    begin = _swig_new_instance_method(_OpenLxApp.set_SubElement_begin)
    end = _swig_new_instance_method(_OpenLxApp.set_SubElement_end)
    rbegin = _swig_new_instance_method(_OpenLxApp.set_SubElement_rbegin)
    rend = _swig_new_instance_method(_OpenLxApp.set_SubElement_rend)
    erase = _swig_new_instance_method(_OpenLxApp.set_SubElement_erase)
    find = _swig_new_instance_method(_OpenLxApp.set_SubElement_find)
    lower_bound = _swig_new_instance_method(_OpenLxApp.set_SubElement_lower_bound)
    upper_bound = _swig_new_instance_method(_OpenLxApp.set_SubElement_upper_bound)
    equal_range = _swig_new_instance_method(_OpenLxApp.set_SubElement_equal_range)
    insert = _swig_new_instance_method(_OpenLxApp.set_SubElement_insert)
    __swig_destroy__ = _OpenLxApp.delete_set_SubElement

# Register set_SubElement in _OpenLxApp:
_OpenLxApp.set_SubElement_swigregister(set_SubElement)
class set_Group(object):
    r"""Proxy of C++ std::set< std::shared_ptr< OpenLxApp::Group > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_OpenLxApp.set_Group_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_OpenLxApp.set_Group___nonzero__)
    __bool__ = _swig_new_instance_method(_OpenLxApp.set_Group___bool__)
    __len__ = _swig_new_instance_method(_OpenLxApp.set_Group___len__)
    append = _swig_new_instance_method(_OpenLxApp.set_Group_append)
    __contains__ = _swig_new_instance_method(_OpenLxApp.set_Group___contains__)
    __getitem__ = _swig_new_instance_method(_OpenLxApp.set_Group___getitem__)
    add = _swig_new_instance_method(_OpenLxApp.set_Group_add)
    discard = _swig_new_instance_method(_OpenLxApp.set_Group_discard)

    def __init__(self, *args):
        r"""
        __init__(set_Group self, std::less< std::shared_ptr< OpenLxApp::Group > > const & other) -> set_Group
        __init__(set_Group self) -> set_Group
        __init__(set_Group self, set_Group other) -> set_Group
        """
        _OpenLxApp.set_Group_swiginit(self, _OpenLxApp.new_set_Group(*args))
    empty = _swig_new_instance_method(_OpenLxApp.set_Group_empty)
    size = _swig_new_instance_method(_OpenLxApp.set_Group_size)
    clear = _swig_new_instance_method(_OpenLxApp.set_Group_clear)
    swap = _swig_new_instance_method(_OpenLxApp.set_Group_swap)
    count = _swig_new_instance_method(_OpenLxApp.set_Group_count)
    begin = _swig_new_instance_method(_OpenLxApp.set_Group_begin)
    end = _swig_new_instance_method(_OpenLxApp.set_Group_end)
    rbegin = _swig_new_instance_method(_OpenLxApp.set_Group_rbegin)
    rend = _swig_new_instance_method(_OpenLxApp.set_Group_rend)
    erase = _swig_new_instance_method(_OpenLxApp.set_Group_erase)
    find = _swig_new_instance_method(_OpenLxApp.set_Group_find)
    lower_bound = _swig_new_instance_method(_OpenLxApp.set_Group_lower_bound)
    upper_bound = _swig_new_instance_method(_OpenLxApp.set_Group_upper_bound)
    equal_range = _swig_new_instance_method(_OpenLxApp.set_Group_equal_range)
    insert = _swig_new_instance_method(_OpenLxApp.set_Group_insert)
    __swig_destroy__ = _OpenLxApp.delete_set_Group

# Register set_Group in _OpenLxApp:
_OpenLxApp.set_Group_swigregister(set_Group)
class set_Layer(object):
    r"""Proxy of C++ std::set< std::shared_ptr< OpenLxApp::Layer > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_OpenLxApp.set_Layer_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_OpenLxApp.set_Layer___nonzero__)
    __bool__ = _swig_new_instance_method(_OpenLxApp.set_Layer___bool__)
    __len__ = _swig_new_instance_method(_OpenLxApp.set_Layer___len__)
    append = _swig_new_instance_method(_OpenLxApp.set_Layer_append)
    __contains__ = _swig_new_instance_method(_OpenLxApp.set_Layer___contains__)
    __getitem__ = _swig_new_instance_method(_OpenLxApp.set_Layer___getitem__)
    add = _swig_new_instance_method(_OpenLxApp.set_Layer_add)
    discard = _swig_new_instance_method(_OpenLxApp.set_Layer_discard)

    def __init__(self, *args):
        r"""
        __init__(set_Layer self, std::less< std::shared_ptr< OpenLxApp::Layer > > const & other) -> set_Layer
        __init__(set_Layer self) -> set_Layer
        __init__(set_Layer self, set_Layer other) -> set_Layer
        """
        _OpenLxApp.set_Layer_swiginit(self, _OpenLxApp.new_set_Layer(*args))
    empty = _swig_new_instance_method(_OpenLxApp.set_Layer_empty)
    size = _swig_new_instance_method(_OpenLxApp.set_Layer_size)
    clear = _swig_new_instance_method(_OpenLxApp.set_Layer_clear)
    swap = _swig_new_instance_method(_OpenLxApp.set_Layer_swap)
    count = _swig_new_instance_method(_OpenLxApp.set_Layer_count)
    begin = _swig_new_instance_method(_OpenLxApp.set_Layer_begin)
    end = _swig_new_instance_method(_OpenLxApp.set_Layer_end)
    rbegin = _swig_new_instance_method(_OpenLxApp.set_Layer_rbegin)
    rend = _swig_new_instance_method(_OpenLxApp.set_Layer_rend)
    erase = _swig_new_instance_method(_OpenLxApp.set_Layer_erase)
    find = _swig_new_instance_method(_OpenLxApp.set_Layer_find)
    lower_bound = _swig_new_instance_method(_OpenLxApp.set_Layer_lower_bound)
    upper_bound = _swig_new_instance_method(_OpenLxApp.set_Layer_upper_bound)
    equal_range = _swig_new_instance_method(_OpenLxApp.set_Layer_equal_range)
    insert = _swig_new_instance_method(_OpenLxApp.set_Layer_insert)
    __swig_destroy__ = _OpenLxApp.delete_set_Layer

# Register set_Layer in _OpenLxApp:
_OpenLxApp.set_Layer_swigregister(set_Layer)
class set_LayerIfc(object):
    r"""Proxy of C++ std::set< std::shared_ptr< OpenLxApp::LayerIfc > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_OpenLxApp.set_LayerIfc_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_OpenLxApp.set_LayerIfc___nonzero__)
    __bool__ = _swig_new_instance_method(_OpenLxApp.set_LayerIfc___bool__)
    __len__ = _swig_new_instance_method(_OpenLxApp.set_LayerIfc___len__)
    append = _swig_new_instance_method(_OpenLxApp.set_LayerIfc_append)
    __contains__ = _swig_new_instance_method(_OpenLxApp.set_LayerIfc___contains__)
    __getitem__ = _swig_new_instance_method(_OpenLxApp.set_LayerIfc___getitem__)
    add = _swig_new_instance_method(_OpenLxApp.set_LayerIfc_add)
    discard = _swig_new_instance_method(_OpenLxApp.set_LayerIfc_discard)

    def __init__(self, *args):
        r"""
        __init__(set_LayerIfc self, std::less< std::shared_ptr< OpenLxApp::LayerIfc > > const & other) -> set_LayerIfc
        __init__(set_LayerIfc self) -> set_LayerIfc
        __init__(set_LayerIfc self, set_LayerIfc other) -> set_LayerIfc
        """
        _OpenLxApp.set_LayerIfc_swiginit(self, _OpenLxApp.new_set_LayerIfc(*args))
    empty = _swig_new_instance_method(_OpenLxApp.set_LayerIfc_empty)
    size = _swig_new_instance_method(_OpenLxApp.set_LayerIfc_size)
    clear = _swig_new_instance_method(_OpenLxApp.set_LayerIfc_clear)
    swap = _swig_new_instance_method(_OpenLxApp.set_LayerIfc_swap)
    count = _swig_new_instance_method(_OpenLxApp.set_LayerIfc_count)
    begin = _swig_new_instance_method(_OpenLxApp.set_LayerIfc_begin)
    end = _swig_new_instance_method(_OpenLxApp.set_LayerIfc_end)
    rbegin = _swig_new_instance_method(_OpenLxApp.set_LayerIfc_rbegin)
    rend = _swig_new_instance_method(_OpenLxApp.set_LayerIfc_rend)
    erase = _swig_new_instance_method(_OpenLxApp.set_LayerIfc_erase)
    find = _swig_new_instance_method(_OpenLxApp.set_LayerIfc_find)
    lower_bound = _swig_new_instance_method(_OpenLxApp.set_LayerIfc_lower_bound)
    upper_bound = _swig_new_instance_method(_OpenLxApp.set_LayerIfc_upper_bound)
    equal_range = _swig_new_instance_method(_OpenLxApp.set_LayerIfc_equal_range)
    insert = _swig_new_instance_method(_OpenLxApp.set_LayerIfc_insert)
    __swig_destroy__ = _OpenLxApp.delete_set_LayerIfc

# Register set_LayerIfc in _OpenLxApp:
_OpenLxApp.set_LayerIfc_swigregister(set_LayerIfc)
class set_Task(object):
    r"""Proxy of C++ std::set< std::shared_ptr< OpenLxApp::Task > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_OpenLxApp.set_Task_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_OpenLxApp.set_Task___nonzero__)
    __bool__ = _swig_new_instance_method(_OpenLxApp.set_Task___bool__)
    __len__ = _swig_new_instance_method(_OpenLxApp.set_Task___len__)
    append = _swig_new_instance_method(_OpenLxApp.set_Task_append)
    __contains__ = _swig_new_instance_method(_OpenLxApp.set_Task___contains__)
    __getitem__ = _swig_new_instance_method(_OpenLxApp.set_Task___getitem__)
    add = _swig_new_instance_method(_OpenLxApp.set_Task_add)
    discard = _swig_new_instance_method(_OpenLxApp.set_Task_discard)

    def __init__(self, *args):
        r"""
        __init__(set_Task self, std::less< std::shared_ptr< OpenLxApp::Task > > const & other) -> set_Task
        __init__(set_Task self) -> set_Task
        __init__(set_Task self, set_Task other) -> set_Task
        """
        _OpenLxApp.set_Task_swiginit(self, _OpenLxApp.new_set_Task(*args))
    empty = _swig_new_instance_method(_OpenLxApp.set_Task_empty)
    size = _swig_new_instance_method(_OpenLxApp.set_Task_size)
    clear = _swig_new_instance_method(_OpenLxApp.set_Task_clear)
    swap = _swig_new_instance_method(_OpenLxApp.set_Task_swap)
    count = _swig_new_instance_method(_OpenLxApp.set_Task_count)
    begin = _swig_new_instance_method(_OpenLxApp.set_Task_begin)
    end = _swig_new_instance_method(_OpenLxApp.set_Task_end)
    rbegin = _swig_new_instance_method(_OpenLxApp.set_Task_rbegin)
    rend = _swig_new_instance_method(_OpenLxApp.set_Task_rend)
    erase = _swig_new_instance_method(_OpenLxApp.set_Task_erase)
    find = _swig_new_instance_method(_OpenLxApp.set_Task_find)
    lower_bound = _swig_new_instance_method(_OpenLxApp.set_Task_lower_bound)
    upper_bound = _swig_new_instance_method(_OpenLxApp.set_Task_upper_bound)
    equal_range = _swig_new_instance_method(_OpenLxApp.set_Task_equal_range)
    insert = _swig_new_instance_method(_OpenLxApp.set_Task_insert)
    __swig_destroy__ = _OpenLxApp.delete_set_Task

# Register set_Task in _OpenLxApp:
_OpenLxApp.set_Task_swigregister(set_Task)
class vector_Alignment(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< OpenLxApp::Alignment > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_OpenLxApp.vector_Alignment_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_OpenLxApp.vector_Alignment___nonzero__)
    __bool__ = _swig_new_instance_method(_OpenLxApp.vector_Alignment___bool__)
    __len__ = _swig_new_instance_method(_OpenLxApp.vector_Alignment___len__)
    __getslice__ = _swig_new_instance_method(_OpenLxApp.vector_Alignment___getslice__)
    __setslice__ = _swig_new_instance_method(_OpenLxApp.vector_Alignment___setslice__)
    __delslice__ = _swig_new_instance_method(_OpenLxApp.vector_Alignment___delslice__)
    __delitem__ = _swig_new_instance_method(_OpenLxApp.vector_Alignment___delitem__)
    __getitem__ = _swig_new_instance_method(_OpenLxApp.vector_Alignment___getitem__)
    __setitem__ = _swig_new_instance_method(_OpenLxApp.vector_Alignment___setitem__)
    pop = _swig_new_instance_method(_OpenLxApp.vector_Alignment_pop)
    append = _swig_new_instance_method(_OpenLxApp.vector_Alignment_append)
    empty = _swig_new_instance_method(_OpenLxApp.vector_Alignment_empty)
    size = _swig_new_instance_method(_OpenLxApp.vector_Alignment_size)
    swap = _swig_new_instance_method(_OpenLxApp.vector_Alignment_swap)
    begin = _swig_new_instance_method(_OpenLxApp.vector_Alignment_begin)
    end = _swig_new_instance_method(_OpenLxApp.vector_Alignment_end)
    rbegin = _swig_new_instance_method(_OpenLxApp.vector_Alignment_rbegin)
    rend = _swig_new_instance_method(_OpenLxApp.vector_Alignment_rend)
    clear = _swig_new_instance_method(_OpenLxApp.vector_Alignment_clear)
    get_allocator = _swig_new_instance_method(_OpenLxApp.vector_Alignment_get_allocator)
    pop_back = _swig_new_instance_method(_OpenLxApp.vector_Alignment_pop_back)
    erase = _swig_new_instance_method(_OpenLxApp.vector_Alignment_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_Alignment self) -> vector_Alignment
        __init__(vector_Alignment self, vector_Alignment other) -> vector_Alignment
        __init__(vector_Alignment self, std::vector< std::shared_ptr< OpenLxApp::Alignment > >::size_type size) -> vector_Alignment
        __init__(vector_Alignment self, std::vector< std::shared_ptr< OpenLxApp::Alignment > >::size_type size, std::vector< std::shared_ptr< OpenLxApp::Alignment > >::value_type const & value) -> vector_Alignment
        """
        _OpenLxApp.vector_Alignment_swiginit(self, _OpenLxApp.new_vector_Alignment(*args))
    push_back = _swig_new_instance_method(_OpenLxApp.vector_Alignment_push_back)
    front = _swig_new_instance_method(_OpenLxApp.vector_Alignment_front)
    back = _swig_new_instance_method(_OpenLxApp.vector_Alignment_back)
    assign = _swig_new_instance_method(_OpenLxApp.vector_Alignment_assign)
    resize = _swig_new_instance_method(_OpenLxApp.vector_Alignment_resize)
    insert = _swig_new_instance_method(_OpenLxApp.vector_Alignment_insert)
    reserve = _swig_new_instance_method(_OpenLxApp.vector_Alignment_reserve)
    capacity = _swig_new_instance_method(_OpenLxApp.vector_Alignment_capacity)
    __swig_destroy__ = _OpenLxApp.delete_vector_Alignment

# Register vector_Alignment in _OpenLxApp:
_OpenLxApp.vector_Alignment_swigregister(vector_Alignment)
class vector_Annotation(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< OpenLxApp::Annotation > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_OpenLxApp.vector_Annotation_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_OpenLxApp.vector_Annotation___nonzero__)
    __bool__ = _swig_new_instance_method(_OpenLxApp.vector_Annotation___bool__)
    __len__ = _swig_new_instance_method(_OpenLxApp.vector_Annotation___len__)
    __getslice__ = _swig_new_instance_method(_OpenLxApp.vector_Annotation___getslice__)
    __setslice__ = _swig_new_instance_method(_OpenLxApp.vector_Annotation___setslice__)
    __delslice__ = _swig_new_instance_method(_OpenLxApp.vector_Annotation___delslice__)
    __delitem__ = _swig_new_instance_method(_OpenLxApp.vector_Annotation___delitem__)
    __getitem__ = _swig_new_instance_method(_OpenLxApp.vector_Annotation___getitem__)
    __setitem__ = _swig_new_instance_method(_OpenLxApp.vector_Annotation___setitem__)
    pop = _swig_new_instance_method(_OpenLxApp.vector_Annotation_pop)
    append = _swig_new_instance_method(_OpenLxApp.vector_Annotation_append)
    empty = _swig_new_instance_method(_OpenLxApp.vector_Annotation_empty)
    size = _swig_new_instance_method(_OpenLxApp.vector_Annotation_size)
    swap = _swig_new_instance_method(_OpenLxApp.vector_Annotation_swap)
    begin = _swig_new_instance_method(_OpenLxApp.vector_Annotation_begin)
    end = _swig_new_instance_method(_OpenLxApp.vector_Annotation_end)
    rbegin = _swig_new_instance_method(_OpenLxApp.vector_Annotation_rbegin)
    rend = _swig_new_instance_method(_OpenLxApp.vector_Annotation_rend)
    clear = _swig_new_instance_method(_OpenLxApp.vector_Annotation_clear)
    get_allocator = _swig_new_instance_method(_OpenLxApp.vector_Annotation_get_allocator)
    pop_back = _swig_new_instance_method(_OpenLxApp.vector_Annotation_pop_back)
    erase = _swig_new_instance_method(_OpenLxApp.vector_Annotation_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_Annotation self) -> vector_Annotation
        __init__(vector_Annotation self, vector_Annotation other) -> vector_Annotation
        __init__(vector_Annotation self, std::vector< std::shared_ptr< OpenLxApp::Annotation > >::size_type size) -> vector_Annotation
        __init__(vector_Annotation self, std::vector< std::shared_ptr< OpenLxApp::Annotation > >::size_type size, std::vector< std::shared_ptr< OpenLxApp::Annotation > >::value_type const & value) -> vector_Annotation
        """
        _OpenLxApp.vector_Annotation_swiginit(self, _OpenLxApp.new_vector_Annotation(*args))
    push_back = _swig_new_instance_method(_OpenLxApp.vector_Annotation_push_back)
    front = _swig_new_instance_method(_OpenLxApp.vector_Annotation_front)
    back = _swig_new_instance_method(_OpenLxApp.vector_Annotation_back)
    assign = _swig_new_instance_method(_OpenLxApp.vector_Annotation_assign)
    resize = _swig_new_instance_method(_OpenLxApp.vector_Annotation_resize)
    insert = _swig_new_instance_method(_OpenLxApp.vector_Annotation_insert)
    reserve = _swig_new_instance_method(_OpenLxApp.vector_Annotation_reserve)
    capacity = _swig_new_instance_method(_OpenLxApp.vector_Annotation_capacity)
    __swig_destroy__ = _OpenLxApp.delete_vector_Annotation

# Register vector_Annotation in _OpenLxApp:
_OpenLxApp.vector_Annotation_swigregister(vector_Annotation)
class vector_AdvancedBrep(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< OpenLxApp::AdvancedBrep > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_OpenLxApp.vector_AdvancedBrep_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_OpenLxApp.vector_AdvancedBrep___nonzero__)
    __bool__ = _swig_new_instance_method(_OpenLxApp.vector_AdvancedBrep___bool__)
    __len__ = _swig_new_instance_method(_OpenLxApp.vector_AdvancedBrep___len__)
    __getslice__ = _swig_new_instance_method(_OpenLxApp.vector_AdvancedBrep___getslice__)
    __setslice__ = _swig_new_instance_method(_OpenLxApp.vector_AdvancedBrep___setslice__)
    __delslice__ = _swig_new_instance_method(_OpenLxApp.vector_AdvancedBrep___delslice__)
    __delitem__ = _swig_new_instance_method(_OpenLxApp.vector_AdvancedBrep___delitem__)
    __getitem__ = _swig_new_instance_method(_OpenLxApp.vector_AdvancedBrep___getitem__)
    __setitem__ = _swig_new_instance_method(_OpenLxApp.vector_AdvancedBrep___setitem__)
    pop = _swig_new_instance_method(_OpenLxApp.vector_AdvancedBrep_pop)
    append = _swig_new_instance_method(_OpenLxApp.vector_AdvancedBrep_append)
    empty = _swig_new_instance_method(_OpenLxApp.vector_AdvancedBrep_empty)
    size = _swig_new_instance_method(_OpenLxApp.vector_AdvancedBrep_size)
    swap = _swig_new_instance_method(_OpenLxApp.vector_AdvancedBrep_swap)
    begin = _swig_new_instance_method(_OpenLxApp.vector_AdvancedBrep_begin)
    end = _swig_new_instance_method(_OpenLxApp.vector_AdvancedBrep_end)
    rbegin = _swig_new_instance_method(_OpenLxApp.vector_AdvancedBrep_rbegin)
    rend = _swig_new_instance_method(_OpenLxApp.vector_AdvancedBrep_rend)
    clear = _swig_new_instance_method(_OpenLxApp.vector_AdvancedBrep_clear)
    get_allocator = _swig_new_instance_method(_OpenLxApp.vector_AdvancedBrep_get_allocator)
    pop_back = _swig_new_instance_method(_OpenLxApp.vector_AdvancedBrep_pop_back)
    erase = _swig_new_instance_method(_OpenLxApp.vector_AdvancedBrep_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_AdvancedBrep self) -> vector_AdvancedBrep
        __init__(vector_AdvancedBrep self, vector_AdvancedBrep other) -> vector_AdvancedBrep
        __init__(vector_AdvancedBrep self, std::vector< std::shared_ptr< OpenLxApp::AdvancedBrep > >::size_type size) -> vector_AdvancedBrep
        __init__(vector_AdvancedBrep self, std::vector< std::shared_ptr< OpenLxApp::AdvancedBrep > >::size_type size, std::vector< std::shared_ptr< OpenLxApp::AdvancedBrep > >::value_type const & value) -> vector_AdvancedBrep
        """
        _OpenLxApp.vector_AdvancedBrep_swiginit(self, _OpenLxApp.new_vector_AdvancedBrep(*args))
    push_back = _swig_new_instance_method(_OpenLxApp.vector_AdvancedBrep_push_back)
    front = _swig_new_instance_method(_OpenLxApp.vector_AdvancedBrep_front)
    back = _swig_new_instance_method(_OpenLxApp.vector_AdvancedBrep_back)
    assign = _swig_new_instance_method(_OpenLxApp.vector_AdvancedBrep_assign)
    resize = _swig_new_instance_method(_OpenLxApp.vector_AdvancedBrep_resize)
    insert = _swig_new_instance_method(_OpenLxApp.vector_AdvancedBrep_insert)
    reserve = _swig_new_instance_method(_OpenLxApp.vector_AdvancedBrep_reserve)
    capacity = _swig_new_instance_method(_OpenLxApp.vector_AdvancedBrep_capacity)
    __swig_destroy__ = _OpenLxApp.delete_vector_AdvancedBrep

# Register vector_AdvancedBrep in _OpenLxApp:
_OpenLxApp.vector_AdvancedBrep_swigregister(vector_AdvancedBrep)
class vector_ArbitraryClosedProfileDef(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< OpenLxApp::ArbitraryClosedProfileDef > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_OpenLxApp.vector_ArbitraryClosedProfileDef_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_OpenLxApp.vector_ArbitraryClosedProfileDef___nonzero__)
    __bool__ = _swig_new_instance_method(_OpenLxApp.vector_ArbitraryClosedProfileDef___bool__)
    __len__ = _swig_new_instance_method(_OpenLxApp.vector_ArbitraryClosedProfileDef___len__)
    __getslice__ = _swig_new_instance_method(_OpenLxApp.vector_ArbitraryClosedProfileDef___getslice__)
    __setslice__ = _swig_new_instance_method(_OpenLxApp.vector_ArbitraryClosedProfileDef___setslice__)
    __delslice__ = _swig_new_instance_method(_OpenLxApp.vector_ArbitraryClosedProfileDef___delslice__)
    __delitem__ = _swig_new_instance_method(_OpenLxApp.vector_ArbitraryClosedProfileDef___delitem__)
    __getitem__ = _swig_new_instance_method(_OpenLxApp.vector_ArbitraryClosedProfileDef___getitem__)
    __setitem__ = _swig_new_instance_method(_OpenLxApp.vector_ArbitraryClosedProfileDef___setitem__)
    pop = _swig_new_instance_method(_OpenLxApp.vector_ArbitraryClosedProfileDef_pop)
    append = _swig_new_instance_method(_OpenLxApp.vector_ArbitraryClosedProfileDef_append)
    empty = _swig_new_instance_method(_OpenLxApp.vector_ArbitraryClosedProfileDef_empty)
    size = _swig_new_instance_method(_OpenLxApp.vector_ArbitraryClosedProfileDef_size)
    swap = _swig_new_instance_method(_OpenLxApp.vector_ArbitraryClosedProfileDef_swap)
    begin = _swig_new_instance_method(_OpenLxApp.vector_ArbitraryClosedProfileDef_begin)
    end = _swig_new_instance_method(_OpenLxApp.vector_ArbitraryClosedProfileDef_end)
    rbegin = _swig_new_instance_method(_OpenLxApp.vector_ArbitraryClosedProfileDef_rbegin)
    rend = _swig_new_instance_method(_OpenLxApp.vector_ArbitraryClosedProfileDef_rend)
    clear = _swig_new_instance_method(_OpenLxApp.vector_ArbitraryClosedProfileDef_clear)
    get_allocator = _swig_new_instance_method(_OpenLxApp.vector_ArbitraryClosedProfileDef_get_allocator)
    pop_back = _swig_new_instance_method(_OpenLxApp.vector_ArbitraryClosedProfileDef_pop_back)
    erase = _swig_new_instance_method(_OpenLxApp.vector_ArbitraryClosedProfileDef_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_ArbitraryClosedProfileDef self) -> vector_ArbitraryClosedProfileDef
        __init__(vector_ArbitraryClosedProfileDef self, vector_ArbitraryClosedProfileDef other) -> vector_ArbitraryClosedProfileDef
        __init__(vector_ArbitraryClosedProfileDef self, std::vector< std::shared_ptr< OpenLxApp::ArbitraryClosedProfileDef > >::size_type size) -> vector_ArbitraryClosedProfileDef
        __init__(vector_ArbitraryClosedProfileDef self, std::vector< std::shared_ptr< OpenLxApp::ArbitraryClosedProfileDef > >::size_type size, std::vector< std::shared_ptr< OpenLxApp::ArbitraryClosedProfileDef > >::value_type const & value) -> vector_ArbitraryClosedProfileDef
        """
        _OpenLxApp.vector_ArbitraryClosedProfileDef_swiginit(self, _OpenLxApp.new_vector_ArbitraryClosedProfileDef(*args))
    push_back = _swig_new_instance_method(_OpenLxApp.vector_ArbitraryClosedProfileDef_push_back)
    front = _swig_new_instance_method(_OpenLxApp.vector_ArbitraryClosedProfileDef_front)
    back = _swig_new_instance_method(_OpenLxApp.vector_ArbitraryClosedProfileDef_back)
    assign = _swig_new_instance_method(_OpenLxApp.vector_ArbitraryClosedProfileDef_assign)
    resize = _swig_new_instance_method(_OpenLxApp.vector_ArbitraryClosedProfileDef_resize)
    insert = _swig_new_instance_method(_OpenLxApp.vector_ArbitraryClosedProfileDef_insert)
    reserve = _swig_new_instance_method(_OpenLxApp.vector_ArbitraryClosedProfileDef_reserve)
    capacity = _swig_new_instance_method(_OpenLxApp.vector_ArbitraryClosedProfileDef_capacity)
    __swig_destroy__ = _OpenLxApp.delete_vector_ArbitraryClosedProfileDef

# Register vector_ArbitraryClosedProfileDef in _OpenLxApp:
_OpenLxApp.vector_ArbitraryClosedProfileDef_swigregister(vector_ArbitraryClosedProfileDef)
class vector_ArbitraryOpenProfileDef(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< OpenLxApp::ArbitraryOpenProfileDef > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_OpenLxApp.vector_ArbitraryOpenProfileDef_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_OpenLxApp.vector_ArbitraryOpenProfileDef___nonzero__)
    __bool__ = _swig_new_instance_method(_OpenLxApp.vector_ArbitraryOpenProfileDef___bool__)
    __len__ = _swig_new_instance_method(_OpenLxApp.vector_ArbitraryOpenProfileDef___len__)
    __getslice__ = _swig_new_instance_method(_OpenLxApp.vector_ArbitraryOpenProfileDef___getslice__)
    __setslice__ = _swig_new_instance_method(_OpenLxApp.vector_ArbitraryOpenProfileDef___setslice__)
    __delslice__ = _swig_new_instance_method(_OpenLxApp.vector_ArbitraryOpenProfileDef___delslice__)
    __delitem__ = _swig_new_instance_method(_OpenLxApp.vector_ArbitraryOpenProfileDef___delitem__)
    __getitem__ = _swig_new_instance_method(_OpenLxApp.vector_ArbitraryOpenProfileDef___getitem__)
    __setitem__ = _swig_new_instance_method(_OpenLxApp.vector_ArbitraryOpenProfileDef___setitem__)
    pop = _swig_new_instance_method(_OpenLxApp.vector_ArbitraryOpenProfileDef_pop)
    append = _swig_new_instance_method(_OpenLxApp.vector_ArbitraryOpenProfileDef_append)
    empty = _swig_new_instance_method(_OpenLxApp.vector_ArbitraryOpenProfileDef_empty)
    size = _swig_new_instance_method(_OpenLxApp.vector_ArbitraryOpenProfileDef_size)
    swap = _swig_new_instance_method(_OpenLxApp.vector_ArbitraryOpenProfileDef_swap)
    begin = _swig_new_instance_method(_OpenLxApp.vector_ArbitraryOpenProfileDef_begin)
    end = _swig_new_instance_method(_OpenLxApp.vector_ArbitraryOpenProfileDef_end)
    rbegin = _swig_new_instance_method(_OpenLxApp.vector_ArbitraryOpenProfileDef_rbegin)
    rend = _swig_new_instance_method(_OpenLxApp.vector_ArbitraryOpenProfileDef_rend)
    clear = _swig_new_instance_method(_OpenLxApp.vector_ArbitraryOpenProfileDef_clear)
    get_allocator = _swig_new_instance_method(_OpenLxApp.vector_ArbitraryOpenProfileDef_get_allocator)
    pop_back = _swig_new_instance_method(_OpenLxApp.vector_ArbitraryOpenProfileDef_pop_back)
    erase = _swig_new_instance_method(_OpenLxApp.vector_ArbitraryOpenProfileDef_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_ArbitraryOpenProfileDef self) -> vector_ArbitraryOpenProfileDef
        __init__(vector_ArbitraryOpenProfileDef self, vector_ArbitraryOpenProfileDef other) -> vector_ArbitraryOpenProfileDef
        __init__(vector_ArbitraryOpenProfileDef self, std::vector< std::shared_ptr< OpenLxApp::ArbitraryOpenProfileDef > >::size_type size) -> vector_ArbitraryOpenProfileDef
        __init__(vector_ArbitraryOpenProfileDef self, std::vector< std::shared_ptr< OpenLxApp::ArbitraryOpenProfileDef > >::size_type size, std::vector< std::shared_ptr< OpenLxApp::ArbitraryOpenProfileDef > >::value_type const & value) -> vector_ArbitraryOpenProfileDef
        """
        _OpenLxApp.vector_ArbitraryOpenProfileDef_swiginit(self, _OpenLxApp.new_vector_ArbitraryOpenProfileDef(*args))
    push_back = _swig_new_instance_method(_OpenLxApp.vector_ArbitraryOpenProfileDef_push_back)
    front = _swig_new_instance_method(_OpenLxApp.vector_ArbitraryOpenProfileDef_front)
    back = _swig_new_instance_method(_OpenLxApp.vector_ArbitraryOpenProfileDef_back)
    assign = _swig_new_instance_method(_OpenLxApp.vector_ArbitraryOpenProfileDef_assign)
    resize = _swig_new_instance_method(_OpenLxApp.vector_ArbitraryOpenProfileDef_resize)
    insert = _swig_new_instance_method(_OpenLxApp.vector_ArbitraryOpenProfileDef_insert)
    reserve = _swig_new_instance_method(_OpenLxApp.vector_ArbitraryOpenProfileDef_reserve)
    capacity = _swig_new_instance_method(_OpenLxApp.vector_ArbitraryOpenProfileDef_capacity)
    __swig_destroy__ = _OpenLxApp.delete_vector_ArbitraryOpenProfileDef

# Register vector_ArbitraryOpenProfileDef in _OpenLxApp:
_OpenLxApp.vector_ArbitraryOpenProfileDef_swigregister(vector_ArbitraryOpenProfileDef)
class vector_ArbitraryProfileDefWithVoids(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< OpenLxApp::ArbitraryProfileDefWithVoids > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_OpenLxApp.vector_ArbitraryProfileDefWithVoids_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_OpenLxApp.vector_ArbitraryProfileDefWithVoids___nonzero__)
    __bool__ = _swig_new_instance_method(_OpenLxApp.vector_ArbitraryProfileDefWithVoids___bool__)
    __len__ = _swig_new_instance_method(_OpenLxApp.vector_ArbitraryProfileDefWithVoids___len__)
    __getslice__ = _swig_new_instance_method(_OpenLxApp.vector_ArbitraryProfileDefWithVoids___getslice__)
    __setslice__ = _swig_new_instance_method(_OpenLxApp.vector_ArbitraryProfileDefWithVoids___setslice__)
    __delslice__ = _swig_new_instance_method(_OpenLxApp.vector_ArbitraryProfileDefWithVoids___delslice__)
    __delitem__ = _swig_new_instance_method(_OpenLxApp.vector_ArbitraryProfileDefWithVoids___delitem__)
    __getitem__ = _swig_new_instance_method(_OpenLxApp.vector_ArbitraryProfileDefWithVoids___getitem__)
    __setitem__ = _swig_new_instance_method(_OpenLxApp.vector_ArbitraryProfileDefWithVoids___setitem__)
    pop = _swig_new_instance_method(_OpenLxApp.vector_ArbitraryProfileDefWithVoids_pop)
    append = _swig_new_instance_method(_OpenLxApp.vector_ArbitraryProfileDefWithVoids_append)
    empty = _swig_new_instance_method(_OpenLxApp.vector_ArbitraryProfileDefWithVoids_empty)
    size = _swig_new_instance_method(_OpenLxApp.vector_ArbitraryProfileDefWithVoids_size)
    swap = _swig_new_instance_method(_OpenLxApp.vector_ArbitraryProfileDefWithVoids_swap)
    begin = _swig_new_instance_method(_OpenLxApp.vector_ArbitraryProfileDefWithVoids_begin)
    end = _swig_new_instance_method(_OpenLxApp.vector_ArbitraryProfileDefWithVoids_end)
    rbegin = _swig_new_instance_method(_OpenLxApp.vector_ArbitraryProfileDefWithVoids_rbegin)
    rend = _swig_new_instance_method(_OpenLxApp.vector_ArbitraryProfileDefWithVoids_rend)
    clear = _swig_new_instance_method(_OpenLxApp.vector_ArbitraryProfileDefWithVoids_clear)
    get_allocator = _swig_new_instance_method(_OpenLxApp.vector_ArbitraryProfileDefWithVoids_get_allocator)
    pop_back = _swig_new_instance_method(_OpenLxApp.vector_ArbitraryProfileDefWithVoids_pop_back)
    erase = _swig_new_instance_method(_OpenLxApp.vector_ArbitraryProfileDefWithVoids_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_ArbitraryProfileDefWithVoids self) -> vector_ArbitraryProfileDefWithVoids
        __init__(vector_ArbitraryProfileDefWithVoids self, vector_ArbitraryProfileDefWithVoids other) -> vector_ArbitraryProfileDefWithVoids
        __init__(vector_ArbitraryProfileDefWithVoids self, std::vector< std::shared_ptr< OpenLxApp::ArbitraryProfileDefWithVoids > >::size_type size) -> vector_ArbitraryProfileDefWithVoids
        __init__(vector_ArbitraryProfileDefWithVoids self, std::vector< std::shared_ptr< OpenLxApp::ArbitraryProfileDefWithVoids > >::size_type size, std::vector< std::shared_ptr< OpenLxApp::ArbitraryProfileDefWithVoids > >::value_type const & value) -> vector_ArbitraryProfileDefWithVoids
        """
        _OpenLxApp.vector_ArbitraryProfileDefWithVoids_swiginit(self, _OpenLxApp.new_vector_ArbitraryProfileDefWithVoids(*args))
    push_back = _swig_new_instance_method(_OpenLxApp.vector_ArbitraryProfileDefWithVoids_push_back)
    front = _swig_new_instance_method(_OpenLxApp.vector_ArbitraryProfileDefWithVoids_front)
    back = _swig_new_instance_method(_OpenLxApp.vector_ArbitraryProfileDefWithVoids_back)
    assign = _swig_new_instance_method(_OpenLxApp.vector_ArbitraryProfileDefWithVoids_assign)
    resize = _swig_new_instance_method(_OpenLxApp.vector_ArbitraryProfileDefWithVoids_resize)
    insert = _swig_new_instance_method(_OpenLxApp.vector_ArbitraryProfileDefWithVoids_insert)
    reserve = _swig_new_instance_method(_OpenLxApp.vector_ArbitraryProfileDefWithVoids_reserve)
    capacity = _swig_new_instance_method(_OpenLxApp.vector_ArbitraryProfileDefWithVoids_capacity)
    __swig_destroy__ = _OpenLxApp.delete_vector_ArbitraryProfileDefWithVoids

# Register vector_ArbitraryProfileDefWithVoids in _OpenLxApp:
_OpenLxApp.vector_ArbitraryProfileDefWithVoids_swigregister(vector_ArbitraryProfileDefWithVoids)
class vector_Beam(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< OpenLxApp::Beam > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_OpenLxApp.vector_Beam_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_OpenLxApp.vector_Beam___nonzero__)
    __bool__ = _swig_new_instance_method(_OpenLxApp.vector_Beam___bool__)
    __len__ = _swig_new_instance_method(_OpenLxApp.vector_Beam___len__)
    __getslice__ = _swig_new_instance_method(_OpenLxApp.vector_Beam___getslice__)
    __setslice__ = _swig_new_instance_method(_OpenLxApp.vector_Beam___setslice__)
    __delslice__ = _swig_new_instance_method(_OpenLxApp.vector_Beam___delslice__)
    __delitem__ = _swig_new_instance_method(_OpenLxApp.vector_Beam___delitem__)
    __getitem__ = _swig_new_instance_method(_OpenLxApp.vector_Beam___getitem__)
    __setitem__ = _swig_new_instance_method(_OpenLxApp.vector_Beam___setitem__)
    pop = _swig_new_instance_method(_OpenLxApp.vector_Beam_pop)
    append = _swig_new_instance_method(_OpenLxApp.vector_Beam_append)
    empty = _swig_new_instance_method(_OpenLxApp.vector_Beam_empty)
    size = _swig_new_instance_method(_OpenLxApp.vector_Beam_size)
    swap = _swig_new_instance_method(_OpenLxApp.vector_Beam_swap)
    begin = _swig_new_instance_method(_OpenLxApp.vector_Beam_begin)
    end = _swig_new_instance_method(_OpenLxApp.vector_Beam_end)
    rbegin = _swig_new_instance_method(_OpenLxApp.vector_Beam_rbegin)
    rend = _swig_new_instance_method(_OpenLxApp.vector_Beam_rend)
    clear = _swig_new_instance_method(_OpenLxApp.vector_Beam_clear)
    get_allocator = _swig_new_instance_method(_OpenLxApp.vector_Beam_get_allocator)
    pop_back = _swig_new_instance_method(_OpenLxApp.vector_Beam_pop_back)
    erase = _swig_new_instance_method(_OpenLxApp.vector_Beam_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_Beam self) -> vector_Beam
        __init__(vector_Beam self, vector_Beam other) -> vector_Beam
        __init__(vector_Beam self, std::vector< std::shared_ptr< OpenLxApp::Beam > >::size_type size) -> vector_Beam
        __init__(vector_Beam self, std::vector< std::shared_ptr< OpenLxApp::Beam > >::size_type size, std::vector< std::shared_ptr< OpenLxApp::Beam > >::value_type const & value) -> vector_Beam
        """
        _OpenLxApp.vector_Beam_swiginit(self, _OpenLxApp.new_vector_Beam(*args))
    push_back = _swig_new_instance_method(_OpenLxApp.vector_Beam_push_back)
    front = _swig_new_instance_method(_OpenLxApp.vector_Beam_front)
    back = _swig_new_instance_method(_OpenLxApp.vector_Beam_back)
    assign = _swig_new_instance_method(_OpenLxApp.vector_Beam_assign)
    resize = _swig_new_instance_method(_OpenLxApp.vector_Beam_resize)
    insert = _swig_new_instance_method(_OpenLxApp.vector_Beam_insert)
    reserve = _swig_new_instance_method(_OpenLxApp.vector_Beam_reserve)
    capacity = _swig_new_instance_method(_OpenLxApp.vector_Beam_capacity)
    __swig_destroy__ = _OpenLxApp.delete_vector_Beam

# Register vector_Beam in _OpenLxApp:
_OpenLxApp.vector_Beam_swigregister(vector_Beam)
class vector_BeamStandardCase(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< OpenLxApp::BeamStandardCase > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_OpenLxApp.vector_BeamStandardCase_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_OpenLxApp.vector_BeamStandardCase___nonzero__)
    __bool__ = _swig_new_instance_method(_OpenLxApp.vector_BeamStandardCase___bool__)
    __len__ = _swig_new_instance_method(_OpenLxApp.vector_BeamStandardCase___len__)
    __getslice__ = _swig_new_instance_method(_OpenLxApp.vector_BeamStandardCase___getslice__)
    __setslice__ = _swig_new_instance_method(_OpenLxApp.vector_BeamStandardCase___setslice__)
    __delslice__ = _swig_new_instance_method(_OpenLxApp.vector_BeamStandardCase___delslice__)
    __delitem__ = _swig_new_instance_method(_OpenLxApp.vector_BeamStandardCase___delitem__)
    __getitem__ = _swig_new_instance_method(_OpenLxApp.vector_BeamStandardCase___getitem__)
    __setitem__ = _swig_new_instance_method(_OpenLxApp.vector_BeamStandardCase___setitem__)
    pop = _swig_new_instance_method(_OpenLxApp.vector_BeamStandardCase_pop)
    append = _swig_new_instance_method(_OpenLxApp.vector_BeamStandardCase_append)
    empty = _swig_new_instance_method(_OpenLxApp.vector_BeamStandardCase_empty)
    size = _swig_new_instance_method(_OpenLxApp.vector_BeamStandardCase_size)
    swap = _swig_new_instance_method(_OpenLxApp.vector_BeamStandardCase_swap)
    begin = _swig_new_instance_method(_OpenLxApp.vector_BeamStandardCase_begin)
    end = _swig_new_instance_method(_OpenLxApp.vector_BeamStandardCase_end)
    rbegin = _swig_new_instance_method(_OpenLxApp.vector_BeamStandardCase_rbegin)
    rend = _swig_new_instance_method(_OpenLxApp.vector_BeamStandardCase_rend)
    clear = _swig_new_instance_method(_OpenLxApp.vector_BeamStandardCase_clear)
    get_allocator = _swig_new_instance_method(_OpenLxApp.vector_BeamStandardCase_get_allocator)
    pop_back = _swig_new_instance_method(_OpenLxApp.vector_BeamStandardCase_pop_back)
    erase = _swig_new_instance_method(_OpenLxApp.vector_BeamStandardCase_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_BeamStandardCase self) -> vector_BeamStandardCase
        __init__(vector_BeamStandardCase self, vector_BeamStandardCase other) -> vector_BeamStandardCase
        __init__(vector_BeamStandardCase self, std::vector< std::shared_ptr< OpenLxApp::BeamStandardCase > >::size_type size) -> vector_BeamStandardCase
        __init__(vector_BeamStandardCase self, std::vector< std::shared_ptr< OpenLxApp::BeamStandardCase > >::size_type size, std::vector< std::shared_ptr< OpenLxApp::BeamStandardCase > >::value_type const & value) -> vector_BeamStandardCase
        """
        _OpenLxApp.vector_BeamStandardCase_swiginit(self, _OpenLxApp.new_vector_BeamStandardCase(*args))
    push_back = _swig_new_instance_method(_OpenLxApp.vector_BeamStandardCase_push_back)
    front = _swig_new_instance_method(_OpenLxApp.vector_BeamStandardCase_front)
    back = _swig_new_instance_method(_OpenLxApp.vector_BeamStandardCase_back)
    assign = _swig_new_instance_method(_OpenLxApp.vector_BeamStandardCase_assign)
    resize = _swig_new_instance_method(_OpenLxApp.vector_BeamStandardCase_resize)
    insert = _swig_new_instance_method(_OpenLxApp.vector_BeamStandardCase_insert)
    reserve = _swig_new_instance_method(_OpenLxApp.vector_BeamStandardCase_reserve)
    capacity = _swig_new_instance_method(_OpenLxApp.vector_BeamStandardCase_capacity)
    __swig_destroy__ = _OpenLxApp.delete_vector_BeamStandardCase

# Register vector_BeamStandardCase in _OpenLxApp:
_OpenLxApp.vector_BeamStandardCase_swigregister(vector_BeamStandardCase)
class vector_Bearing(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< OpenLxApp::Bearing > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_OpenLxApp.vector_Bearing_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_OpenLxApp.vector_Bearing___nonzero__)
    __bool__ = _swig_new_instance_method(_OpenLxApp.vector_Bearing___bool__)
    __len__ = _swig_new_instance_method(_OpenLxApp.vector_Bearing___len__)
    __getslice__ = _swig_new_instance_method(_OpenLxApp.vector_Bearing___getslice__)
    __setslice__ = _swig_new_instance_method(_OpenLxApp.vector_Bearing___setslice__)
    __delslice__ = _swig_new_instance_method(_OpenLxApp.vector_Bearing___delslice__)
    __delitem__ = _swig_new_instance_method(_OpenLxApp.vector_Bearing___delitem__)
    __getitem__ = _swig_new_instance_method(_OpenLxApp.vector_Bearing___getitem__)
    __setitem__ = _swig_new_instance_method(_OpenLxApp.vector_Bearing___setitem__)
    pop = _swig_new_instance_method(_OpenLxApp.vector_Bearing_pop)
    append = _swig_new_instance_method(_OpenLxApp.vector_Bearing_append)
    empty = _swig_new_instance_method(_OpenLxApp.vector_Bearing_empty)
    size = _swig_new_instance_method(_OpenLxApp.vector_Bearing_size)
    swap = _swig_new_instance_method(_OpenLxApp.vector_Bearing_swap)
    begin = _swig_new_instance_method(_OpenLxApp.vector_Bearing_begin)
    end = _swig_new_instance_method(_OpenLxApp.vector_Bearing_end)
    rbegin = _swig_new_instance_method(_OpenLxApp.vector_Bearing_rbegin)
    rend = _swig_new_instance_method(_OpenLxApp.vector_Bearing_rend)
    clear = _swig_new_instance_method(_OpenLxApp.vector_Bearing_clear)
    get_allocator = _swig_new_instance_method(_OpenLxApp.vector_Bearing_get_allocator)
    pop_back = _swig_new_instance_method(_OpenLxApp.vector_Bearing_pop_back)
    erase = _swig_new_instance_method(_OpenLxApp.vector_Bearing_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_Bearing self) -> vector_Bearing
        __init__(vector_Bearing self, vector_Bearing other) -> vector_Bearing
        __init__(vector_Bearing self, std::vector< std::shared_ptr< OpenLxApp::Bearing > >::size_type size) -> vector_Bearing
        __init__(vector_Bearing self, std::vector< std::shared_ptr< OpenLxApp::Bearing > >::size_type size, std::vector< std::shared_ptr< OpenLxApp::Bearing > >::value_type const & value) -> vector_Bearing
        """
        _OpenLxApp.vector_Bearing_swiginit(self, _OpenLxApp.new_vector_Bearing(*args))
    push_back = _swig_new_instance_method(_OpenLxApp.vector_Bearing_push_back)
    front = _swig_new_instance_method(_OpenLxApp.vector_Bearing_front)
    back = _swig_new_instance_method(_OpenLxApp.vector_Bearing_back)
    assign = _swig_new_instance_method(_OpenLxApp.vector_Bearing_assign)
    resize = _swig_new_instance_method(_OpenLxApp.vector_Bearing_resize)
    insert = _swig_new_instance_method(_OpenLxApp.vector_Bearing_insert)
    reserve = _swig_new_instance_method(_OpenLxApp.vector_Bearing_reserve)
    capacity = _swig_new_instance_method(_OpenLxApp.vector_Bearing_capacity)
    __swig_destroy__ = _OpenLxApp.delete_vector_Bearing

# Register vector_Bearing in _OpenLxApp:
_OpenLxApp.vector_Bearing_swigregister(vector_Bearing)
class vector_BezierCurve(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< OpenLxApp::BezierCurve > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_OpenLxApp.vector_BezierCurve_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_OpenLxApp.vector_BezierCurve___nonzero__)
    __bool__ = _swig_new_instance_method(_OpenLxApp.vector_BezierCurve___bool__)
    __len__ = _swig_new_instance_method(_OpenLxApp.vector_BezierCurve___len__)
    __getslice__ = _swig_new_instance_method(_OpenLxApp.vector_BezierCurve___getslice__)
    __setslice__ = _swig_new_instance_method(_OpenLxApp.vector_BezierCurve___setslice__)
    __delslice__ = _swig_new_instance_method(_OpenLxApp.vector_BezierCurve___delslice__)
    __delitem__ = _swig_new_instance_method(_OpenLxApp.vector_BezierCurve___delitem__)
    __getitem__ = _swig_new_instance_method(_OpenLxApp.vector_BezierCurve___getitem__)
    __setitem__ = _swig_new_instance_method(_OpenLxApp.vector_BezierCurve___setitem__)
    pop = _swig_new_instance_method(_OpenLxApp.vector_BezierCurve_pop)
    append = _swig_new_instance_method(_OpenLxApp.vector_BezierCurve_append)
    empty = _swig_new_instance_method(_OpenLxApp.vector_BezierCurve_empty)
    size = _swig_new_instance_method(_OpenLxApp.vector_BezierCurve_size)
    swap = _swig_new_instance_method(_OpenLxApp.vector_BezierCurve_swap)
    begin = _swig_new_instance_method(_OpenLxApp.vector_BezierCurve_begin)
    end = _swig_new_instance_method(_OpenLxApp.vector_BezierCurve_end)
    rbegin = _swig_new_instance_method(_OpenLxApp.vector_BezierCurve_rbegin)
    rend = _swig_new_instance_method(_OpenLxApp.vector_BezierCurve_rend)
    clear = _swig_new_instance_method(_OpenLxApp.vector_BezierCurve_clear)
    get_allocator = _swig_new_instance_method(_OpenLxApp.vector_BezierCurve_get_allocator)
    pop_back = _swig_new_instance_method(_OpenLxApp.vector_BezierCurve_pop_back)
    erase = _swig_new_instance_method(_OpenLxApp.vector_BezierCurve_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_BezierCurve self) -> vector_BezierCurve
        __init__(vector_BezierCurve self, vector_BezierCurve other) -> vector_BezierCurve
        __init__(vector_BezierCurve self, std::vector< std::shared_ptr< OpenLxApp::BezierCurve > >::size_type size) -> vector_BezierCurve
        __init__(vector_BezierCurve self, std::vector< std::shared_ptr< OpenLxApp::BezierCurve > >::size_type size, std::vector< std::shared_ptr< OpenLxApp::BezierCurve > >::value_type const & value) -> vector_BezierCurve
        """
        _OpenLxApp.vector_BezierCurve_swiginit(self, _OpenLxApp.new_vector_BezierCurve(*args))
    push_back = _swig_new_instance_method(_OpenLxApp.vector_BezierCurve_push_back)
    front = _swig_new_instance_method(_OpenLxApp.vector_BezierCurve_front)
    back = _swig_new_instance_method(_OpenLxApp.vector_BezierCurve_back)
    assign = _swig_new_instance_method(_OpenLxApp.vector_BezierCurve_assign)
    resize = _swig_new_instance_method(_OpenLxApp.vector_BezierCurve_resize)
    insert = _swig_new_instance_method(_OpenLxApp.vector_BezierCurve_insert)
    reserve = _swig_new_instance_method(_OpenLxApp.vector_BezierCurve_reserve)
    capacity = _swig_new_instance_method(_OpenLxApp.vector_BezierCurve_capacity)
    __swig_destroy__ = _OpenLxApp.delete_vector_BezierCurve

# Register vector_BezierCurve in _OpenLxApp:
_OpenLxApp.vector_BezierCurve_swigregister(vector_BezierCurve)
class vector_Block(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< OpenLxApp::Block > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_OpenLxApp.vector_Block_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_OpenLxApp.vector_Block___nonzero__)
    __bool__ = _swig_new_instance_method(_OpenLxApp.vector_Block___bool__)
    __len__ = _swig_new_instance_method(_OpenLxApp.vector_Block___len__)
    __getslice__ = _swig_new_instance_method(_OpenLxApp.vector_Block___getslice__)
    __setslice__ = _swig_new_instance_method(_OpenLxApp.vector_Block___setslice__)
    __delslice__ = _swig_new_instance_method(_OpenLxApp.vector_Block___delslice__)
    __delitem__ = _swig_new_instance_method(_OpenLxApp.vector_Block___delitem__)
    __getitem__ = _swig_new_instance_method(_OpenLxApp.vector_Block___getitem__)
    __setitem__ = _swig_new_instance_method(_OpenLxApp.vector_Block___setitem__)
    pop = _swig_new_instance_method(_OpenLxApp.vector_Block_pop)
    append = _swig_new_instance_method(_OpenLxApp.vector_Block_append)
    empty = _swig_new_instance_method(_OpenLxApp.vector_Block_empty)
    size = _swig_new_instance_method(_OpenLxApp.vector_Block_size)
    swap = _swig_new_instance_method(_OpenLxApp.vector_Block_swap)
    begin = _swig_new_instance_method(_OpenLxApp.vector_Block_begin)
    end = _swig_new_instance_method(_OpenLxApp.vector_Block_end)
    rbegin = _swig_new_instance_method(_OpenLxApp.vector_Block_rbegin)
    rend = _swig_new_instance_method(_OpenLxApp.vector_Block_rend)
    clear = _swig_new_instance_method(_OpenLxApp.vector_Block_clear)
    get_allocator = _swig_new_instance_method(_OpenLxApp.vector_Block_get_allocator)
    pop_back = _swig_new_instance_method(_OpenLxApp.vector_Block_pop_back)
    erase = _swig_new_instance_method(_OpenLxApp.vector_Block_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_Block self) -> vector_Block
        __init__(vector_Block self, vector_Block other) -> vector_Block
        __init__(vector_Block self, std::vector< std::shared_ptr< OpenLxApp::Block > >::size_type size) -> vector_Block
        __init__(vector_Block self, std::vector< std::shared_ptr< OpenLxApp::Block > >::size_type size, std::vector< std::shared_ptr< OpenLxApp::Block > >::value_type const & value) -> vector_Block
        """
        _OpenLxApp.vector_Block_swiginit(self, _OpenLxApp.new_vector_Block(*args))
    push_back = _swig_new_instance_method(_OpenLxApp.vector_Block_push_back)
    front = _swig_new_instance_method(_OpenLxApp.vector_Block_front)
    back = _swig_new_instance_method(_OpenLxApp.vector_Block_back)
    assign = _swig_new_instance_method(_OpenLxApp.vector_Block_assign)
    resize = _swig_new_instance_method(_OpenLxApp.vector_Block_resize)
    insert = _swig_new_instance_method(_OpenLxApp.vector_Block_insert)
    reserve = _swig_new_instance_method(_OpenLxApp.vector_Block_reserve)
    capacity = _swig_new_instance_method(_OpenLxApp.vector_Block_capacity)
    __swig_destroy__ = _OpenLxApp.delete_vector_Block

# Register vector_Block in _OpenLxApp:
_OpenLxApp.vector_Block_swigregister(vector_Block)
class vector_BooleanClippingResult(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< OpenLxApp::BooleanClippingResult > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_OpenLxApp.vector_BooleanClippingResult_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_OpenLxApp.vector_BooleanClippingResult___nonzero__)
    __bool__ = _swig_new_instance_method(_OpenLxApp.vector_BooleanClippingResult___bool__)
    __len__ = _swig_new_instance_method(_OpenLxApp.vector_BooleanClippingResult___len__)
    __getslice__ = _swig_new_instance_method(_OpenLxApp.vector_BooleanClippingResult___getslice__)
    __setslice__ = _swig_new_instance_method(_OpenLxApp.vector_BooleanClippingResult___setslice__)
    __delslice__ = _swig_new_instance_method(_OpenLxApp.vector_BooleanClippingResult___delslice__)
    __delitem__ = _swig_new_instance_method(_OpenLxApp.vector_BooleanClippingResult___delitem__)
    __getitem__ = _swig_new_instance_method(_OpenLxApp.vector_BooleanClippingResult___getitem__)
    __setitem__ = _swig_new_instance_method(_OpenLxApp.vector_BooleanClippingResult___setitem__)
    pop = _swig_new_instance_method(_OpenLxApp.vector_BooleanClippingResult_pop)
    append = _swig_new_instance_method(_OpenLxApp.vector_BooleanClippingResult_append)
    empty = _swig_new_instance_method(_OpenLxApp.vector_BooleanClippingResult_empty)
    size = _swig_new_instance_method(_OpenLxApp.vector_BooleanClippingResult_size)
    swap = _swig_new_instance_method(_OpenLxApp.vector_BooleanClippingResult_swap)
    begin = _swig_new_instance_method(_OpenLxApp.vector_BooleanClippingResult_begin)
    end = _swig_new_instance_method(_OpenLxApp.vector_BooleanClippingResult_end)
    rbegin = _swig_new_instance_method(_OpenLxApp.vector_BooleanClippingResult_rbegin)
    rend = _swig_new_instance_method(_OpenLxApp.vector_BooleanClippingResult_rend)
    clear = _swig_new_instance_method(_OpenLxApp.vector_BooleanClippingResult_clear)
    get_allocator = _swig_new_instance_method(_OpenLxApp.vector_BooleanClippingResult_get_allocator)
    pop_back = _swig_new_instance_method(_OpenLxApp.vector_BooleanClippingResult_pop_back)
    erase = _swig_new_instance_method(_OpenLxApp.vector_BooleanClippingResult_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_BooleanClippingResult self) -> vector_BooleanClippingResult
        __init__(vector_BooleanClippingResult self, vector_BooleanClippingResult other) -> vector_BooleanClippingResult
        __init__(vector_BooleanClippingResult self, std::vector< std::shared_ptr< OpenLxApp::BooleanClippingResult > >::size_type size) -> vector_BooleanClippingResult
        __init__(vector_BooleanClippingResult self, std::vector< std::shared_ptr< OpenLxApp::BooleanClippingResult > >::size_type size, std::vector< std::shared_ptr< OpenLxApp::BooleanClippingResult > >::value_type const & value) -> vector_BooleanClippingResult
        """
        _OpenLxApp.vector_BooleanClippingResult_swiginit(self, _OpenLxApp.new_vector_BooleanClippingResult(*args))
    push_back = _swig_new_instance_method(_OpenLxApp.vector_BooleanClippingResult_push_back)
    front = _swig_new_instance_method(_OpenLxApp.vector_BooleanClippingResult_front)
    back = _swig_new_instance_method(_OpenLxApp.vector_BooleanClippingResult_back)
    assign = _swig_new_instance_method(_OpenLxApp.vector_BooleanClippingResult_assign)
    resize = _swig_new_instance_method(_OpenLxApp.vector_BooleanClippingResult_resize)
    insert = _swig_new_instance_method(_OpenLxApp.vector_BooleanClippingResult_insert)
    reserve = _swig_new_instance_method(_OpenLxApp.vector_BooleanClippingResult_reserve)
    capacity = _swig_new_instance_method(_OpenLxApp.vector_BooleanClippingResult_capacity)
    __swig_destroy__ = _OpenLxApp.delete_vector_BooleanClippingResult

# Register vector_BooleanClippingResult in _OpenLxApp:
_OpenLxApp.vector_BooleanClippingResult_swigregister(vector_BooleanClippingResult)
class vector_Borehole(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< OpenLxApp::Borehole > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_OpenLxApp.vector_Borehole_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_OpenLxApp.vector_Borehole___nonzero__)
    __bool__ = _swig_new_instance_method(_OpenLxApp.vector_Borehole___bool__)
    __len__ = _swig_new_instance_method(_OpenLxApp.vector_Borehole___len__)
    __getslice__ = _swig_new_instance_method(_OpenLxApp.vector_Borehole___getslice__)
    __setslice__ = _swig_new_instance_method(_OpenLxApp.vector_Borehole___setslice__)
    __delslice__ = _swig_new_instance_method(_OpenLxApp.vector_Borehole___delslice__)
    __delitem__ = _swig_new_instance_method(_OpenLxApp.vector_Borehole___delitem__)
    __getitem__ = _swig_new_instance_method(_OpenLxApp.vector_Borehole___getitem__)
    __setitem__ = _swig_new_instance_method(_OpenLxApp.vector_Borehole___setitem__)
    pop = _swig_new_instance_method(_OpenLxApp.vector_Borehole_pop)
    append = _swig_new_instance_method(_OpenLxApp.vector_Borehole_append)
    empty = _swig_new_instance_method(_OpenLxApp.vector_Borehole_empty)
    size = _swig_new_instance_method(_OpenLxApp.vector_Borehole_size)
    swap = _swig_new_instance_method(_OpenLxApp.vector_Borehole_swap)
    begin = _swig_new_instance_method(_OpenLxApp.vector_Borehole_begin)
    end = _swig_new_instance_method(_OpenLxApp.vector_Borehole_end)
    rbegin = _swig_new_instance_method(_OpenLxApp.vector_Borehole_rbegin)
    rend = _swig_new_instance_method(_OpenLxApp.vector_Borehole_rend)
    clear = _swig_new_instance_method(_OpenLxApp.vector_Borehole_clear)
    get_allocator = _swig_new_instance_method(_OpenLxApp.vector_Borehole_get_allocator)
    pop_back = _swig_new_instance_method(_OpenLxApp.vector_Borehole_pop_back)
    erase = _swig_new_instance_method(_OpenLxApp.vector_Borehole_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_Borehole self) -> vector_Borehole
        __init__(vector_Borehole self, vector_Borehole other) -> vector_Borehole
        __init__(vector_Borehole self, std::vector< std::shared_ptr< OpenLxApp::Borehole > >::size_type size) -> vector_Borehole
        __init__(vector_Borehole self, std::vector< std::shared_ptr< OpenLxApp::Borehole > >::size_type size, std::vector< std::shared_ptr< OpenLxApp::Borehole > >::value_type const & value) -> vector_Borehole
        """
        _OpenLxApp.vector_Borehole_swiginit(self, _OpenLxApp.new_vector_Borehole(*args))
    push_back = _swig_new_instance_method(_OpenLxApp.vector_Borehole_push_back)
    front = _swig_new_instance_method(_OpenLxApp.vector_Borehole_front)
    back = _swig_new_instance_method(_OpenLxApp.vector_Borehole_back)
    assign = _swig_new_instance_method(_OpenLxApp.vector_Borehole_assign)
    resize = _swig_new_instance_method(_OpenLxApp.vector_Borehole_resize)
    insert = _swig_new_instance_method(_OpenLxApp.vector_Borehole_insert)
    reserve = _swig_new_instance_method(_OpenLxApp.vector_Borehole_reserve)
    capacity = _swig_new_instance_method(_OpenLxApp.vector_Borehole_capacity)
    __swig_destroy__ = _OpenLxApp.delete_vector_Borehole

# Register vector_Borehole in _OpenLxApp:
_OpenLxApp.vector_Borehole_swigregister(vector_Borehole)
class vector_BoundedCurve(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< OpenLxApp::BoundedCurve > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_OpenLxApp.vector_BoundedCurve_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_OpenLxApp.vector_BoundedCurve___nonzero__)
    __bool__ = _swig_new_instance_method(_OpenLxApp.vector_BoundedCurve___bool__)
    __len__ = _swig_new_instance_method(_OpenLxApp.vector_BoundedCurve___len__)
    __getslice__ = _swig_new_instance_method(_OpenLxApp.vector_BoundedCurve___getslice__)
    __setslice__ = _swig_new_instance_method(_OpenLxApp.vector_BoundedCurve___setslice__)
    __delslice__ = _swig_new_instance_method(_OpenLxApp.vector_BoundedCurve___delslice__)
    __delitem__ = _swig_new_instance_method(_OpenLxApp.vector_BoundedCurve___delitem__)
    __getitem__ = _swig_new_instance_method(_OpenLxApp.vector_BoundedCurve___getitem__)
    __setitem__ = _swig_new_instance_method(_OpenLxApp.vector_BoundedCurve___setitem__)
    pop = _swig_new_instance_method(_OpenLxApp.vector_BoundedCurve_pop)
    append = _swig_new_instance_method(_OpenLxApp.vector_BoundedCurve_append)
    empty = _swig_new_instance_method(_OpenLxApp.vector_BoundedCurve_empty)
    size = _swig_new_instance_method(_OpenLxApp.vector_BoundedCurve_size)
    swap = _swig_new_instance_method(_OpenLxApp.vector_BoundedCurve_swap)
    begin = _swig_new_instance_method(_OpenLxApp.vector_BoundedCurve_begin)
    end = _swig_new_instance_method(_OpenLxApp.vector_BoundedCurve_end)
    rbegin = _swig_new_instance_method(_OpenLxApp.vector_BoundedCurve_rbegin)
    rend = _swig_new_instance_method(_OpenLxApp.vector_BoundedCurve_rend)
    clear = _swig_new_instance_method(_OpenLxApp.vector_BoundedCurve_clear)
    get_allocator = _swig_new_instance_method(_OpenLxApp.vector_BoundedCurve_get_allocator)
    pop_back = _swig_new_instance_method(_OpenLxApp.vector_BoundedCurve_pop_back)
    erase = _swig_new_instance_method(_OpenLxApp.vector_BoundedCurve_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_BoundedCurve self) -> vector_BoundedCurve
        __init__(vector_BoundedCurve self, vector_BoundedCurve other) -> vector_BoundedCurve
        __init__(vector_BoundedCurve self, std::vector< std::shared_ptr< OpenLxApp::BoundedCurve > >::size_type size) -> vector_BoundedCurve
        __init__(vector_BoundedCurve self, std::vector< std::shared_ptr< OpenLxApp::BoundedCurve > >::size_type size, std::vector< std::shared_ptr< OpenLxApp::BoundedCurve > >::value_type const & value) -> vector_BoundedCurve
        """
        _OpenLxApp.vector_BoundedCurve_swiginit(self, _OpenLxApp.new_vector_BoundedCurve(*args))
    push_back = _swig_new_instance_method(_OpenLxApp.vector_BoundedCurve_push_back)
    front = _swig_new_instance_method(_OpenLxApp.vector_BoundedCurve_front)
    back = _swig_new_instance_method(_OpenLxApp.vector_BoundedCurve_back)
    assign = _swig_new_instance_method(_OpenLxApp.vector_BoundedCurve_assign)
    resize = _swig_new_instance_method(_OpenLxApp.vector_BoundedCurve_resize)
    insert = _swig_new_instance_method(_OpenLxApp.vector_BoundedCurve_insert)
    reserve = _swig_new_instance_method(_OpenLxApp.vector_BoundedCurve_reserve)
    capacity = _swig_new_instance_method(_OpenLxApp.vector_BoundedCurve_capacity)
    __swig_destroy__ = _OpenLxApp.delete_vector_BoundedCurve

# Register vector_BoundedCurve in _OpenLxApp:
_OpenLxApp.vector_BoundedCurve_swigregister(vector_BoundedCurve)
class vector_BoundedSurface(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< OpenLxApp::BoundedSurface > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_OpenLxApp.vector_BoundedSurface_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_OpenLxApp.vector_BoundedSurface___nonzero__)
    __bool__ = _swig_new_instance_method(_OpenLxApp.vector_BoundedSurface___bool__)
    __len__ = _swig_new_instance_method(_OpenLxApp.vector_BoundedSurface___len__)
    __getslice__ = _swig_new_instance_method(_OpenLxApp.vector_BoundedSurface___getslice__)
    __setslice__ = _swig_new_instance_method(_OpenLxApp.vector_BoundedSurface___setslice__)
    __delslice__ = _swig_new_instance_method(_OpenLxApp.vector_BoundedSurface___delslice__)
    __delitem__ = _swig_new_instance_method(_OpenLxApp.vector_BoundedSurface___delitem__)
    __getitem__ = _swig_new_instance_method(_OpenLxApp.vector_BoundedSurface___getitem__)
    __setitem__ = _swig_new_instance_method(_OpenLxApp.vector_BoundedSurface___setitem__)
    pop = _swig_new_instance_method(_OpenLxApp.vector_BoundedSurface_pop)
    append = _swig_new_instance_method(_OpenLxApp.vector_BoundedSurface_append)
    empty = _swig_new_instance_method(_OpenLxApp.vector_BoundedSurface_empty)
    size = _swig_new_instance_method(_OpenLxApp.vector_BoundedSurface_size)
    swap = _swig_new_instance_method(_OpenLxApp.vector_BoundedSurface_swap)
    begin = _swig_new_instance_method(_OpenLxApp.vector_BoundedSurface_begin)
    end = _swig_new_instance_method(_OpenLxApp.vector_BoundedSurface_end)
    rbegin = _swig_new_instance_method(_OpenLxApp.vector_BoundedSurface_rbegin)
    rend = _swig_new_instance_method(_OpenLxApp.vector_BoundedSurface_rend)
    clear = _swig_new_instance_method(_OpenLxApp.vector_BoundedSurface_clear)
    get_allocator = _swig_new_instance_method(_OpenLxApp.vector_BoundedSurface_get_allocator)
    pop_back = _swig_new_instance_method(_OpenLxApp.vector_BoundedSurface_pop_back)
    erase = _swig_new_instance_method(_OpenLxApp.vector_BoundedSurface_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_BoundedSurface self) -> vector_BoundedSurface
        __init__(vector_BoundedSurface self, vector_BoundedSurface other) -> vector_BoundedSurface
        __init__(vector_BoundedSurface self, std::vector< std::shared_ptr< OpenLxApp::BoundedSurface > >::size_type size) -> vector_BoundedSurface
        __init__(vector_BoundedSurface self, std::vector< std::shared_ptr< OpenLxApp::BoundedSurface > >::size_type size, std::vector< std::shared_ptr< OpenLxApp::BoundedSurface > >::value_type const & value) -> vector_BoundedSurface
        """
        _OpenLxApp.vector_BoundedSurface_swiginit(self, _OpenLxApp.new_vector_BoundedSurface(*args))
    push_back = _swig_new_instance_method(_OpenLxApp.vector_BoundedSurface_push_back)
    front = _swig_new_instance_method(_OpenLxApp.vector_BoundedSurface_front)
    back = _swig_new_instance_method(_OpenLxApp.vector_BoundedSurface_back)
    assign = _swig_new_instance_method(_OpenLxApp.vector_BoundedSurface_assign)
    resize = _swig_new_instance_method(_OpenLxApp.vector_BoundedSurface_resize)
    insert = _swig_new_instance_method(_OpenLxApp.vector_BoundedSurface_insert)
    reserve = _swig_new_instance_method(_OpenLxApp.vector_BoundedSurface_reserve)
    capacity = _swig_new_instance_method(_OpenLxApp.vector_BoundedSurface_capacity)
    __swig_destroy__ = _OpenLxApp.delete_vector_BoundedSurface

# Register vector_BoundedSurface in _OpenLxApp:
_OpenLxApp.vector_BoundedSurface_swigregister(vector_BoundedSurface)
class vector_Building(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< OpenLxApp::Building > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_OpenLxApp.vector_Building_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_OpenLxApp.vector_Building___nonzero__)
    __bool__ = _swig_new_instance_method(_OpenLxApp.vector_Building___bool__)
    __len__ = _swig_new_instance_method(_OpenLxApp.vector_Building___len__)
    __getslice__ = _swig_new_instance_method(_OpenLxApp.vector_Building___getslice__)
    __setslice__ = _swig_new_instance_method(_OpenLxApp.vector_Building___setslice__)
    __delslice__ = _swig_new_instance_method(_OpenLxApp.vector_Building___delslice__)
    __delitem__ = _swig_new_instance_method(_OpenLxApp.vector_Building___delitem__)
    __getitem__ = _swig_new_instance_method(_OpenLxApp.vector_Building___getitem__)
    __setitem__ = _swig_new_instance_method(_OpenLxApp.vector_Building___setitem__)
    pop = _swig_new_instance_method(_OpenLxApp.vector_Building_pop)
    append = _swig_new_instance_method(_OpenLxApp.vector_Building_append)
    empty = _swig_new_instance_method(_OpenLxApp.vector_Building_empty)
    size = _swig_new_instance_method(_OpenLxApp.vector_Building_size)
    swap = _swig_new_instance_method(_OpenLxApp.vector_Building_swap)
    begin = _swig_new_instance_method(_OpenLxApp.vector_Building_begin)
    end = _swig_new_instance_method(_OpenLxApp.vector_Building_end)
    rbegin = _swig_new_instance_method(_OpenLxApp.vector_Building_rbegin)
    rend = _swig_new_instance_method(_OpenLxApp.vector_Building_rend)
    clear = _swig_new_instance_method(_OpenLxApp.vector_Building_clear)
    get_allocator = _swig_new_instance_method(_OpenLxApp.vector_Building_get_allocator)
    pop_back = _swig_new_instance_method(_OpenLxApp.vector_Building_pop_back)
    erase = _swig_new_instance_method(_OpenLxApp.vector_Building_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_Building self) -> vector_Building
        __init__(vector_Building self, vector_Building other) -> vector_Building
        __init__(vector_Building self, std::vector< std::shared_ptr< OpenLxApp::Building > >::size_type size) -> vector_Building
        __init__(vector_Building self, std::vector< std::shared_ptr< OpenLxApp::Building > >::size_type size, std::vector< std::shared_ptr< OpenLxApp::Building > >::value_type const & value) -> vector_Building
        """
        _OpenLxApp.vector_Building_swiginit(self, _OpenLxApp.new_vector_Building(*args))
    push_back = _swig_new_instance_method(_OpenLxApp.vector_Building_push_back)
    front = _swig_new_instance_method(_OpenLxApp.vector_Building_front)
    back = _swig_new_instance_method(_OpenLxApp.vector_Building_back)
    assign = _swig_new_instance_method(_OpenLxApp.vector_Building_assign)
    resize = _swig_new_instance_method(_OpenLxApp.vector_Building_resize)
    insert = _swig_new_instance_method(_OpenLxApp.vector_Building_insert)
    reserve = _swig_new_instance_method(_OpenLxApp.vector_Building_reserve)
    capacity = _swig_new_instance_method(_OpenLxApp.vector_Building_capacity)
    __swig_destroy__ = _OpenLxApp.delete_vector_Building

# Register vector_Building in _OpenLxApp:
_OpenLxApp.vector_Building_swigregister(vector_Building)
class vector_BuildingElementProxy(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< OpenLxApp::BuildingElementProxy > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_OpenLxApp.vector_BuildingElementProxy_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_OpenLxApp.vector_BuildingElementProxy___nonzero__)
    __bool__ = _swig_new_instance_method(_OpenLxApp.vector_BuildingElementProxy___bool__)
    __len__ = _swig_new_instance_method(_OpenLxApp.vector_BuildingElementProxy___len__)
    __getslice__ = _swig_new_instance_method(_OpenLxApp.vector_BuildingElementProxy___getslice__)
    __setslice__ = _swig_new_instance_method(_OpenLxApp.vector_BuildingElementProxy___setslice__)
    __delslice__ = _swig_new_instance_method(_OpenLxApp.vector_BuildingElementProxy___delslice__)
    __delitem__ = _swig_new_instance_method(_OpenLxApp.vector_BuildingElementProxy___delitem__)
    __getitem__ = _swig_new_instance_method(_OpenLxApp.vector_BuildingElementProxy___getitem__)
    __setitem__ = _swig_new_instance_method(_OpenLxApp.vector_BuildingElementProxy___setitem__)
    pop = _swig_new_instance_method(_OpenLxApp.vector_BuildingElementProxy_pop)
    append = _swig_new_instance_method(_OpenLxApp.vector_BuildingElementProxy_append)
    empty = _swig_new_instance_method(_OpenLxApp.vector_BuildingElementProxy_empty)
    size = _swig_new_instance_method(_OpenLxApp.vector_BuildingElementProxy_size)
    swap = _swig_new_instance_method(_OpenLxApp.vector_BuildingElementProxy_swap)
    begin = _swig_new_instance_method(_OpenLxApp.vector_BuildingElementProxy_begin)
    end = _swig_new_instance_method(_OpenLxApp.vector_BuildingElementProxy_end)
    rbegin = _swig_new_instance_method(_OpenLxApp.vector_BuildingElementProxy_rbegin)
    rend = _swig_new_instance_method(_OpenLxApp.vector_BuildingElementProxy_rend)
    clear = _swig_new_instance_method(_OpenLxApp.vector_BuildingElementProxy_clear)
    get_allocator = _swig_new_instance_method(_OpenLxApp.vector_BuildingElementProxy_get_allocator)
    pop_back = _swig_new_instance_method(_OpenLxApp.vector_BuildingElementProxy_pop_back)
    erase = _swig_new_instance_method(_OpenLxApp.vector_BuildingElementProxy_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_BuildingElementProxy self) -> vector_BuildingElementProxy
        __init__(vector_BuildingElementProxy self, vector_BuildingElementProxy other) -> vector_BuildingElementProxy
        __init__(vector_BuildingElementProxy self, std::vector< std::shared_ptr< OpenLxApp::BuildingElementProxy > >::size_type size) -> vector_BuildingElementProxy
        __init__(vector_BuildingElementProxy self, std::vector< std::shared_ptr< OpenLxApp::BuildingElementProxy > >::size_type size, std::vector< std::shared_ptr< OpenLxApp::BuildingElementProxy > >::value_type const & value) -> vector_BuildingElementProxy
        """
        _OpenLxApp.vector_BuildingElementProxy_swiginit(self, _OpenLxApp.new_vector_BuildingElementProxy(*args))
    push_back = _swig_new_instance_method(_OpenLxApp.vector_BuildingElementProxy_push_back)
    front = _swig_new_instance_method(_OpenLxApp.vector_BuildingElementProxy_front)
    back = _swig_new_instance_method(_OpenLxApp.vector_BuildingElementProxy_back)
    assign = _swig_new_instance_method(_OpenLxApp.vector_BuildingElementProxy_assign)
    resize = _swig_new_instance_method(_OpenLxApp.vector_BuildingElementProxy_resize)
    insert = _swig_new_instance_method(_OpenLxApp.vector_BuildingElementProxy_insert)
    reserve = _swig_new_instance_method(_OpenLxApp.vector_BuildingElementProxy_reserve)
    capacity = _swig_new_instance_method(_OpenLxApp.vector_BuildingElementProxy_capacity)
    __swig_destroy__ = _OpenLxApp.delete_vector_BuildingElementProxy

# Register vector_BuildingElementProxy in _OpenLxApp:
_OpenLxApp.vector_BuildingElementProxy_swigregister(vector_BuildingElementProxy)
class vector_BuildingStorey(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< OpenLxApp::BuildingStorey > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_OpenLxApp.vector_BuildingStorey_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_OpenLxApp.vector_BuildingStorey___nonzero__)
    __bool__ = _swig_new_instance_method(_OpenLxApp.vector_BuildingStorey___bool__)
    __len__ = _swig_new_instance_method(_OpenLxApp.vector_BuildingStorey___len__)
    __getslice__ = _swig_new_instance_method(_OpenLxApp.vector_BuildingStorey___getslice__)
    __setslice__ = _swig_new_instance_method(_OpenLxApp.vector_BuildingStorey___setslice__)
    __delslice__ = _swig_new_instance_method(_OpenLxApp.vector_BuildingStorey___delslice__)
    __delitem__ = _swig_new_instance_method(_OpenLxApp.vector_BuildingStorey___delitem__)
    __getitem__ = _swig_new_instance_method(_OpenLxApp.vector_BuildingStorey___getitem__)
    __setitem__ = _swig_new_instance_method(_OpenLxApp.vector_BuildingStorey___setitem__)
    pop = _swig_new_instance_method(_OpenLxApp.vector_BuildingStorey_pop)
    append = _swig_new_instance_method(_OpenLxApp.vector_BuildingStorey_append)
    empty = _swig_new_instance_method(_OpenLxApp.vector_BuildingStorey_empty)
    size = _swig_new_instance_method(_OpenLxApp.vector_BuildingStorey_size)
    swap = _swig_new_instance_method(_OpenLxApp.vector_BuildingStorey_swap)
    begin = _swig_new_instance_method(_OpenLxApp.vector_BuildingStorey_begin)
    end = _swig_new_instance_method(_OpenLxApp.vector_BuildingStorey_end)
    rbegin = _swig_new_instance_method(_OpenLxApp.vector_BuildingStorey_rbegin)
    rend = _swig_new_instance_method(_OpenLxApp.vector_BuildingStorey_rend)
    clear = _swig_new_instance_method(_OpenLxApp.vector_BuildingStorey_clear)
    get_allocator = _swig_new_instance_method(_OpenLxApp.vector_BuildingStorey_get_allocator)
    pop_back = _swig_new_instance_method(_OpenLxApp.vector_BuildingStorey_pop_back)
    erase = _swig_new_instance_method(_OpenLxApp.vector_BuildingStorey_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_BuildingStorey self) -> vector_BuildingStorey
        __init__(vector_BuildingStorey self, vector_BuildingStorey other) -> vector_BuildingStorey
        __init__(vector_BuildingStorey self, std::vector< std::shared_ptr< OpenLxApp::BuildingStorey > >::size_type size) -> vector_BuildingStorey
        __init__(vector_BuildingStorey self, std::vector< std::shared_ptr< OpenLxApp::BuildingStorey > >::size_type size, std::vector< std::shared_ptr< OpenLxApp::BuildingStorey > >::value_type const & value) -> vector_BuildingStorey
        """
        _OpenLxApp.vector_BuildingStorey_swiginit(self, _OpenLxApp.new_vector_BuildingStorey(*args))
    push_back = _swig_new_instance_method(_OpenLxApp.vector_BuildingStorey_push_back)
    front = _swig_new_instance_method(_OpenLxApp.vector_BuildingStorey_front)
    back = _swig_new_instance_method(_OpenLxApp.vector_BuildingStorey_back)
    assign = _swig_new_instance_method(_OpenLxApp.vector_BuildingStorey_assign)
    resize = _swig_new_instance_method(_OpenLxApp.vector_BuildingStorey_resize)
    insert = _swig_new_instance_method(_OpenLxApp.vector_BuildingStorey_insert)
    reserve = _swig_new_instance_method(_OpenLxApp.vector_BuildingStorey_reserve)
    capacity = _swig_new_instance_method(_OpenLxApp.vector_BuildingStorey_capacity)
    __swig_destroy__ = _OpenLxApp.delete_vector_BuildingStorey

# Register vector_BuildingStorey in _OpenLxApp:
_OpenLxApp.vector_BuildingStorey_swigregister(vector_BuildingStorey)
class vector_CableCarrierSegment(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< OpenLxApp::CableCarrierSegment > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_OpenLxApp.vector_CableCarrierSegment_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_OpenLxApp.vector_CableCarrierSegment___nonzero__)
    __bool__ = _swig_new_instance_method(_OpenLxApp.vector_CableCarrierSegment___bool__)
    __len__ = _swig_new_instance_method(_OpenLxApp.vector_CableCarrierSegment___len__)
    __getslice__ = _swig_new_instance_method(_OpenLxApp.vector_CableCarrierSegment___getslice__)
    __setslice__ = _swig_new_instance_method(_OpenLxApp.vector_CableCarrierSegment___setslice__)
    __delslice__ = _swig_new_instance_method(_OpenLxApp.vector_CableCarrierSegment___delslice__)
    __delitem__ = _swig_new_instance_method(_OpenLxApp.vector_CableCarrierSegment___delitem__)
    __getitem__ = _swig_new_instance_method(_OpenLxApp.vector_CableCarrierSegment___getitem__)
    __setitem__ = _swig_new_instance_method(_OpenLxApp.vector_CableCarrierSegment___setitem__)
    pop = _swig_new_instance_method(_OpenLxApp.vector_CableCarrierSegment_pop)
    append = _swig_new_instance_method(_OpenLxApp.vector_CableCarrierSegment_append)
    empty = _swig_new_instance_method(_OpenLxApp.vector_CableCarrierSegment_empty)
    size = _swig_new_instance_method(_OpenLxApp.vector_CableCarrierSegment_size)
    swap = _swig_new_instance_method(_OpenLxApp.vector_CableCarrierSegment_swap)
    begin = _swig_new_instance_method(_OpenLxApp.vector_CableCarrierSegment_begin)
    end = _swig_new_instance_method(_OpenLxApp.vector_CableCarrierSegment_end)
    rbegin = _swig_new_instance_method(_OpenLxApp.vector_CableCarrierSegment_rbegin)
    rend = _swig_new_instance_method(_OpenLxApp.vector_CableCarrierSegment_rend)
    clear = _swig_new_instance_method(_OpenLxApp.vector_CableCarrierSegment_clear)
    get_allocator = _swig_new_instance_method(_OpenLxApp.vector_CableCarrierSegment_get_allocator)
    pop_back = _swig_new_instance_method(_OpenLxApp.vector_CableCarrierSegment_pop_back)
    erase = _swig_new_instance_method(_OpenLxApp.vector_CableCarrierSegment_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_CableCarrierSegment self) -> vector_CableCarrierSegment
        __init__(vector_CableCarrierSegment self, vector_CableCarrierSegment other) -> vector_CableCarrierSegment
        __init__(vector_CableCarrierSegment self, std::vector< std::shared_ptr< OpenLxApp::CableCarrierSegment > >::size_type size) -> vector_CableCarrierSegment
        __init__(vector_CableCarrierSegment self, std::vector< std::shared_ptr< OpenLxApp::CableCarrierSegment > >::size_type size, std::vector< std::shared_ptr< OpenLxApp::CableCarrierSegment > >::value_type const & value) -> vector_CableCarrierSegment
        """
        _OpenLxApp.vector_CableCarrierSegment_swiginit(self, _OpenLxApp.new_vector_CableCarrierSegment(*args))
    push_back = _swig_new_instance_method(_OpenLxApp.vector_CableCarrierSegment_push_back)
    front = _swig_new_instance_method(_OpenLxApp.vector_CableCarrierSegment_front)
    back = _swig_new_instance_method(_OpenLxApp.vector_CableCarrierSegment_back)
    assign = _swig_new_instance_method(_OpenLxApp.vector_CableCarrierSegment_assign)
    resize = _swig_new_instance_method(_OpenLxApp.vector_CableCarrierSegment_resize)
    insert = _swig_new_instance_method(_OpenLxApp.vector_CableCarrierSegment_insert)
    reserve = _swig_new_instance_method(_OpenLxApp.vector_CableCarrierSegment_reserve)
    capacity = _swig_new_instance_method(_OpenLxApp.vector_CableCarrierSegment_capacity)
    __swig_destroy__ = _OpenLxApp.delete_vector_CableCarrierSegment

# Register vector_CableCarrierSegment in _OpenLxApp:
_OpenLxApp.vector_CableCarrierSegment_swigregister(vector_CableCarrierSegment)
class vector_CableSegment(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< OpenLxApp::CableSegment > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_OpenLxApp.vector_CableSegment_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_OpenLxApp.vector_CableSegment___nonzero__)
    __bool__ = _swig_new_instance_method(_OpenLxApp.vector_CableSegment___bool__)
    __len__ = _swig_new_instance_method(_OpenLxApp.vector_CableSegment___len__)
    __getslice__ = _swig_new_instance_method(_OpenLxApp.vector_CableSegment___getslice__)
    __setslice__ = _swig_new_instance_method(_OpenLxApp.vector_CableSegment___setslice__)
    __delslice__ = _swig_new_instance_method(_OpenLxApp.vector_CableSegment___delslice__)
    __delitem__ = _swig_new_instance_method(_OpenLxApp.vector_CableSegment___delitem__)
    __getitem__ = _swig_new_instance_method(_OpenLxApp.vector_CableSegment___getitem__)
    __setitem__ = _swig_new_instance_method(_OpenLxApp.vector_CableSegment___setitem__)
    pop = _swig_new_instance_method(_OpenLxApp.vector_CableSegment_pop)
    append = _swig_new_instance_method(_OpenLxApp.vector_CableSegment_append)
    empty = _swig_new_instance_method(_OpenLxApp.vector_CableSegment_empty)
    size = _swig_new_instance_method(_OpenLxApp.vector_CableSegment_size)
    swap = _swig_new_instance_method(_OpenLxApp.vector_CableSegment_swap)
    begin = _swig_new_instance_method(_OpenLxApp.vector_CableSegment_begin)
    end = _swig_new_instance_method(_OpenLxApp.vector_CableSegment_end)
    rbegin = _swig_new_instance_method(_OpenLxApp.vector_CableSegment_rbegin)
    rend = _swig_new_instance_method(_OpenLxApp.vector_CableSegment_rend)
    clear = _swig_new_instance_method(_OpenLxApp.vector_CableSegment_clear)
    get_allocator = _swig_new_instance_method(_OpenLxApp.vector_CableSegment_get_allocator)
    pop_back = _swig_new_instance_method(_OpenLxApp.vector_CableSegment_pop_back)
    erase = _swig_new_instance_method(_OpenLxApp.vector_CableSegment_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_CableSegment self) -> vector_CableSegment
        __init__(vector_CableSegment self, vector_CableSegment other) -> vector_CableSegment
        __init__(vector_CableSegment self, std::vector< std::shared_ptr< OpenLxApp::CableSegment > >::size_type size) -> vector_CableSegment
        __init__(vector_CableSegment self, std::vector< std::shared_ptr< OpenLxApp::CableSegment > >::size_type size, std::vector< std::shared_ptr< OpenLxApp::CableSegment > >::value_type const & value) -> vector_CableSegment
        """
        _OpenLxApp.vector_CableSegment_swiginit(self, _OpenLxApp.new_vector_CableSegment(*args))
    push_back = _swig_new_instance_method(_OpenLxApp.vector_CableSegment_push_back)
    front = _swig_new_instance_method(_OpenLxApp.vector_CableSegment_front)
    back = _swig_new_instance_method(_OpenLxApp.vector_CableSegment_back)
    assign = _swig_new_instance_method(_OpenLxApp.vector_CableSegment_assign)
    resize = _swig_new_instance_method(_OpenLxApp.vector_CableSegment_resize)
    insert = _swig_new_instance_method(_OpenLxApp.vector_CableSegment_insert)
    reserve = _swig_new_instance_method(_OpenLxApp.vector_CableSegment_reserve)
    capacity = _swig_new_instance_method(_OpenLxApp.vector_CableSegment_capacity)
    __swig_destroy__ = _OpenLxApp.delete_vector_CableSegment

# Register vector_CableSegment in _OpenLxApp:
_OpenLxApp.vector_CableSegment_swigregister(vector_CableSegment)
class vector_CartesianPoint(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< OpenLxApp::CartesianPoint > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_OpenLxApp.vector_CartesianPoint_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_OpenLxApp.vector_CartesianPoint___nonzero__)
    __bool__ = _swig_new_instance_method(_OpenLxApp.vector_CartesianPoint___bool__)
    __len__ = _swig_new_instance_method(_OpenLxApp.vector_CartesianPoint___len__)
    __getslice__ = _swig_new_instance_method(_OpenLxApp.vector_CartesianPoint___getslice__)
    __setslice__ = _swig_new_instance_method(_OpenLxApp.vector_CartesianPoint___setslice__)
    __delslice__ = _swig_new_instance_method(_OpenLxApp.vector_CartesianPoint___delslice__)
    __delitem__ = _swig_new_instance_method(_OpenLxApp.vector_CartesianPoint___delitem__)
    __getitem__ = _swig_new_instance_method(_OpenLxApp.vector_CartesianPoint___getitem__)
    __setitem__ = _swig_new_instance_method(_OpenLxApp.vector_CartesianPoint___setitem__)
    pop = _swig_new_instance_method(_OpenLxApp.vector_CartesianPoint_pop)
    append = _swig_new_instance_method(_OpenLxApp.vector_CartesianPoint_append)
    empty = _swig_new_instance_method(_OpenLxApp.vector_CartesianPoint_empty)
    size = _swig_new_instance_method(_OpenLxApp.vector_CartesianPoint_size)
    swap = _swig_new_instance_method(_OpenLxApp.vector_CartesianPoint_swap)
    begin = _swig_new_instance_method(_OpenLxApp.vector_CartesianPoint_begin)
    end = _swig_new_instance_method(_OpenLxApp.vector_CartesianPoint_end)
    rbegin = _swig_new_instance_method(_OpenLxApp.vector_CartesianPoint_rbegin)
    rend = _swig_new_instance_method(_OpenLxApp.vector_CartesianPoint_rend)
    clear = _swig_new_instance_method(_OpenLxApp.vector_CartesianPoint_clear)
    get_allocator = _swig_new_instance_method(_OpenLxApp.vector_CartesianPoint_get_allocator)
    pop_back = _swig_new_instance_method(_OpenLxApp.vector_CartesianPoint_pop_back)
    erase = _swig_new_instance_method(_OpenLxApp.vector_CartesianPoint_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_CartesianPoint self) -> vector_CartesianPoint
        __init__(vector_CartesianPoint self, vector_CartesianPoint other) -> vector_CartesianPoint
        __init__(vector_CartesianPoint self, std::vector< std::shared_ptr< OpenLxApp::CartesianPoint > >::size_type size) -> vector_CartesianPoint
        __init__(vector_CartesianPoint self, std::vector< std::shared_ptr< OpenLxApp::CartesianPoint > >::size_type size, std::vector< std::shared_ptr< OpenLxApp::CartesianPoint > >::value_type const & value) -> vector_CartesianPoint
        """
        _OpenLxApp.vector_CartesianPoint_swiginit(self, _OpenLxApp.new_vector_CartesianPoint(*args))
    push_back = _swig_new_instance_method(_OpenLxApp.vector_CartesianPoint_push_back)
    front = _swig_new_instance_method(_OpenLxApp.vector_CartesianPoint_front)
    back = _swig_new_instance_method(_OpenLxApp.vector_CartesianPoint_back)
    assign = _swig_new_instance_method(_OpenLxApp.vector_CartesianPoint_assign)
    resize = _swig_new_instance_method(_OpenLxApp.vector_CartesianPoint_resize)
    insert = _swig_new_instance_method(_OpenLxApp.vector_CartesianPoint_insert)
    reserve = _swig_new_instance_method(_OpenLxApp.vector_CartesianPoint_reserve)
    capacity = _swig_new_instance_method(_OpenLxApp.vector_CartesianPoint_capacity)
    __swig_destroy__ = _OpenLxApp.delete_vector_CartesianPoint

# Register vector_CartesianPoint in _OpenLxApp:
_OpenLxApp.vector_CartesianPoint_swigregister(vector_CartesianPoint)
class vector_Circle(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< OpenLxApp::Circle > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_OpenLxApp.vector_Circle_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_OpenLxApp.vector_Circle___nonzero__)
    __bool__ = _swig_new_instance_method(_OpenLxApp.vector_Circle___bool__)
    __len__ = _swig_new_instance_method(_OpenLxApp.vector_Circle___len__)
    __getslice__ = _swig_new_instance_method(_OpenLxApp.vector_Circle___getslice__)
    __setslice__ = _swig_new_instance_method(_OpenLxApp.vector_Circle___setslice__)
    __delslice__ = _swig_new_instance_method(_OpenLxApp.vector_Circle___delslice__)
    __delitem__ = _swig_new_instance_method(_OpenLxApp.vector_Circle___delitem__)
    __getitem__ = _swig_new_instance_method(_OpenLxApp.vector_Circle___getitem__)
    __setitem__ = _swig_new_instance_method(_OpenLxApp.vector_Circle___setitem__)
    pop = _swig_new_instance_method(_OpenLxApp.vector_Circle_pop)
    append = _swig_new_instance_method(_OpenLxApp.vector_Circle_append)
    empty = _swig_new_instance_method(_OpenLxApp.vector_Circle_empty)
    size = _swig_new_instance_method(_OpenLxApp.vector_Circle_size)
    swap = _swig_new_instance_method(_OpenLxApp.vector_Circle_swap)
    begin = _swig_new_instance_method(_OpenLxApp.vector_Circle_begin)
    end = _swig_new_instance_method(_OpenLxApp.vector_Circle_end)
    rbegin = _swig_new_instance_method(_OpenLxApp.vector_Circle_rbegin)
    rend = _swig_new_instance_method(_OpenLxApp.vector_Circle_rend)
    clear = _swig_new_instance_method(_OpenLxApp.vector_Circle_clear)
    get_allocator = _swig_new_instance_method(_OpenLxApp.vector_Circle_get_allocator)
    pop_back = _swig_new_instance_method(_OpenLxApp.vector_Circle_pop_back)
    erase = _swig_new_instance_method(_OpenLxApp.vector_Circle_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_Circle self) -> vector_Circle
        __init__(vector_Circle self, vector_Circle other) -> vector_Circle
        __init__(vector_Circle self, std::vector< std::shared_ptr< OpenLxApp::Circle > >::size_type size) -> vector_Circle
        __init__(vector_Circle self, std::vector< std::shared_ptr< OpenLxApp::Circle > >::size_type size, std::vector< std::shared_ptr< OpenLxApp::Circle > >::value_type const & value) -> vector_Circle
        """
        _OpenLxApp.vector_Circle_swiginit(self, _OpenLxApp.new_vector_Circle(*args))
    push_back = _swig_new_instance_method(_OpenLxApp.vector_Circle_push_back)
    front = _swig_new_instance_method(_OpenLxApp.vector_Circle_front)
    back = _swig_new_instance_method(_OpenLxApp.vector_Circle_back)
    assign = _swig_new_instance_method(_OpenLxApp.vector_Circle_assign)
    resize = _swig_new_instance_method(_OpenLxApp.vector_Circle_resize)
    insert = _swig_new_instance_method(_OpenLxApp.vector_Circle_insert)
    reserve = _swig_new_instance_method(_OpenLxApp.vector_Circle_reserve)
    capacity = _swig_new_instance_method(_OpenLxApp.vector_Circle_capacity)
    __swig_destroy__ = _OpenLxApp.delete_vector_Circle

# Register vector_Circle in _OpenLxApp:
_OpenLxApp.vector_Circle_swigregister(vector_Circle)
class vector_CircleHollowProfileDef(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< OpenLxApp::CircleHollowProfileDef > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_OpenLxApp.vector_CircleHollowProfileDef_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_OpenLxApp.vector_CircleHollowProfileDef___nonzero__)
    __bool__ = _swig_new_instance_method(_OpenLxApp.vector_CircleHollowProfileDef___bool__)
    __len__ = _swig_new_instance_method(_OpenLxApp.vector_CircleHollowProfileDef___len__)
    __getslice__ = _swig_new_instance_method(_OpenLxApp.vector_CircleHollowProfileDef___getslice__)
    __setslice__ = _swig_new_instance_method(_OpenLxApp.vector_CircleHollowProfileDef___setslice__)
    __delslice__ = _swig_new_instance_method(_OpenLxApp.vector_CircleHollowProfileDef___delslice__)
    __delitem__ = _swig_new_instance_method(_OpenLxApp.vector_CircleHollowProfileDef___delitem__)
    __getitem__ = _swig_new_instance_method(_OpenLxApp.vector_CircleHollowProfileDef___getitem__)
    __setitem__ = _swig_new_instance_method(_OpenLxApp.vector_CircleHollowProfileDef___setitem__)
    pop = _swig_new_instance_method(_OpenLxApp.vector_CircleHollowProfileDef_pop)
    append = _swig_new_instance_method(_OpenLxApp.vector_CircleHollowProfileDef_append)
    empty = _swig_new_instance_method(_OpenLxApp.vector_CircleHollowProfileDef_empty)
    size = _swig_new_instance_method(_OpenLxApp.vector_CircleHollowProfileDef_size)
    swap = _swig_new_instance_method(_OpenLxApp.vector_CircleHollowProfileDef_swap)
    begin = _swig_new_instance_method(_OpenLxApp.vector_CircleHollowProfileDef_begin)
    end = _swig_new_instance_method(_OpenLxApp.vector_CircleHollowProfileDef_end)
    rbegin = _swig_new_instance_method(_OpenLxApp.vector_CircleHollowProfileDef_rbegin)
    rend = _swig_new_instance_method(_OpenLxApp.vector_CircleHollowProfileDef_rend)
    clear = _swig_new_instance_method(_OpenLxApp.vector_CircleHollowProfileDef_clear)
    get_allocator = _swig_new_instance_method(_OpenLxApp.vector_CircleHollowProfileDef_get_allocator)
    pop_back = _swig_new_instance_method(_OpenLxApp.vector_CircleHollowProfileDef_pop_back)
    erase = _swig_new_instance_method(_OpenLxApp.vector_CircleHollowProfileDef_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_CircleHollowProfileDef self) -> vector_CircleHollowProfileDef
        __init__(vector_CircleHollowProfileDef self, vector_CircleHollowProfileDef other) -> vector_CircleHollowProfileDef
        __init__(vector_CircleHollowProfileDef self, std::vector< std::shared_ptr< OpenLxApp::CircleHollowProfileDef > >::size_type size) -> vector_CircleHollowProfileDef
        __init__(vector_CircleHollowProfileDef self, std::vector< std::shared_ptr< OpenLxApp::CircleHollowProfileDef > >::size_type size, std::vector< std::shared_ptr< OpenLxApp::CircleHollowProfileDef > >::value_type const & value) -> vector_CircleHollowProfileDef
        """
        _OpenLxApp.vector_CircleHollowProfileDef_swiginit(self, _OpenLxApp.new_vector_CircleHollowProfileDef(*args))
    push_back = _swig_new_instance_method(_OpenLxApp.vector_CircleHollowProfileDef_push_back)
    front = _swig_new_instance_method(_OpenLxApp.vector_CircleHollowProfileDef_front)
    back = _swig_new_instance_method(_OpenLxApp.vector_CircleHollowProfileDef_back)
    assign = _swig_new_instance_method(_OpenLxApp.vector_CircleHollowProfileDef_assign)
    resize = _swig_new_instance_method(_OpenLxApp.vector_CircleHollowProfileDef_resize)
    insert = _swig_new_instance_method(_OpenLxApp.vector_CircleHollowProfileDef_insert)
    reserve = _swig_new_instance_method(_OpenLxApp.vector_CircleHollowProfileDef_reserve)
    capacity = _swig_new_instance_method(_OpenLxApp.vector_CircleHollowProfileDef_capacity)
    __swig_destroy__ = _OpenLxApp.delete_vector_CircleHollowProfileDef

# Register vector_CircleHollowProfileDef in _OpenLxApp:
_OpenLxApp.vector_CircleHollowProfileDef_swigregister(vector_CircleHollowProfileDef)
class vector_CircleProfileDef(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< OpenLxApp::CircleProfileDef > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_OpenLxApp.vector_CircleProfileDef_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_OpenLxApp.vector_CircleProfileDef___nonzero__)
    __bool__ = _swig_new_instance_method(_OpenLxApp.vector_CircleProfileDef___bool__)
    __len__ = _swig_new_instance_method(_OpenLxApp.vector_CircleProfileDef___len__)
    __getslice__ = _swig_new_instance_method(_OpenLxApp.vector_CircleProfileDef___getslice__)
    __setslice__ = _swig_new_instance_method(_OpenLxApp.vector_CircleProfileDef___setslice__)
    __delslice__ = _swig_new_instance_method(_OpenLxApp.vector_CircleProfileDef___delslice__)
    __delitem__ = _swig_new_instance_method(_OpenLxApp.vector_CircleProfileDef___delitem__)
    __getitem__ = _swig_new_instance_method(_OpenLxApp.vector_CircleProfileDef___getitem__)
    __setitem__ = _swig_new_instance_method(_OpenLxApp.vector_CircleProfileDef___setitem__)
    pop = _swig_new_instance_method(_OpenLxApp.vector_CircleProfileDef_pop)
    append = _swig_new_instance_method(_OpenLxApp.vector_CircleProfileDef_append)
    empty = _swig_new_instance_method(_OpenLxApp.vector_CircleProfileDef_empty)
    size = _swig_new_instance_method(_OpenLxApp.vector_CircleProfileDef_size)
    swap = _swig_new_instance_method(_OpenLxApp.vector_CircleProfileDef_swap)
    begin = _swig_new_instance_method(_OpenLxApp.vector_CircleProfileDef_begin)
    end = _swig_new_instance_method(_OpenLxApp.vector_CircleProfileDef_end)
    rbegin = _swig_new_instance_method(_OpenLxApp.vector_CircleProfileDef_rbegin)
    rend = _swig_new_instance_method(_OpenLxApp.vector_CircleProfileDef_rend)
    clear = _swig_new_instance_method(_OpenLxApp.vector_CircleProfileDef_clear)
    get_allocator = _swig_new_instance_method(_OpenLxApp.vector_CircleProfileDef_get_allocator)
    pop_back = _swig_new_instance_method(_OpenLxApp.vector_CircleProfileDef_pop_back)
    erase = _swig_new_instance_method(_OpenLxApp.vector_CircleProfileDef_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_CircleProfileDef self) -> vector_CircleProfileDef
        __init__(vector_CircleProfileDef self, vector_CircleProfileDef other) -> vector_CircleProfileDef
        __init__(vector_CircleProfileDef self, std::vector< std::shared_ptr< OpenLxApp::CircleProfileDef > >::size_type size) -> vector_CircleProfileDef
        __init__(vector_CircleProfileDef self, std::vector< std::shared_ptr< OpenLxApp::CircleProfileDef > >::size_type size, std::vector< std::shared_ptr< OpenLxApp::CircleProfileDef > >::value_type const & value) -> vector_CircleProfileDef
        """
        _OpenLxApp.vector_CircleProfileDef_swiginit(self, _OpenLxApp.new_vector_CircleProfileDef(*args))
    push_back = _swig_new_instance_method(_OpenLxApp.vector_CircleProfileDef_push_back)
    front = _swig_new_instance_method(_OpenLxApp.vector_CircleProfileDef_front)
    back = _swig_new_instance_method(_OpenLxApp.vector_CircleProfileDef_back)
    assign = _swig_new_instance_method(_OpenLxApp.vector_CircleProfileDef_assign)
    resize = _swig_new_instance_method(_OpenLxApp.vector_CircleProfileDef_resize)
    insert = _swig_new_instance_method(_OpenLxApp.vector_CircleProfileDef_insert)
    reserve = _swig_new_instance_method(_OpenLxApp.vector_CircleProfileDef_reserve)
    capacity = _swig_new_instance_method(_OpenLxApp.vector_CircleProfileDef_capacity)
    __swig_destroy__ = _OpenLxApp.delete_vector_CircleProfileDef

# Register vector_CircleProfileDef in _OpenLxApp:
_OpenLxApp.vector_CircleProfileDef_swigregister(vector_CircleProfileDef)
class vector_CivilElement(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< OpenLxApp::CivilElement > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_OpenLxApp.vector_CivilElement_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_OpenLxApp.vector_CivilElement___nonzero__)
    __bool__ = _swig_new_instance_method(_OpenLxApp.vector_CivilElement___bool__)
    __len__ = _swig_new_instance_method(_OpenLxApp.vector_CivilElement___len__)
    __getslice__ = _swig_new_instance_method(_OpenLxApp.vector_CivilElement___getslice__)
    __setslice__ = _swig_new_instance_method(_OpenLxApp.vector_CivilElement___setslice__)
    __delslice__ = _swig_new_instance_method(_OpenLxApp.vector_CivilElement___delslice__)
    __delitem__ = _swig_new_instance_method(_OpenLxApp.vector_CivilElement___delitem__)
    __getitem__ = _swig_new_instance_method(_OpenLxApp.vector_CivilElement___getitem__)
    __setitem__ = _swig_new_instance_method(_OpenLxApp.vector_CivilElement___setitem__)
    pop = _swig_new_instance_method(_OpenLxApp.vector_CivilElement_pop)
    append = _swig_new_instance_method(_OpenLxApp.vector_CivilElement_append)
    empty = _swig_new_instance_method(_OpenLxApp.vector_CivilElement_empty)
    size = _swig_new_instance_method(_OpenLxApp.vector_CivilElement_size)
    swap = _swig_new_instance_method(_OpenLxApp.vector_CivilElement_swap)
    begin = _swig_new_instance_method(_OpenLxApp.vector_CivilElement_begin)
    end = _swig_new_instance_method(_OpenLxApp.vector_CivilElement_end)
    rbegin = _swig_new_instance_method(_OpenLxApp.vector_CivilElement_rbegin)
    rend = _swig_new_instance_method(_OpenLxApp.vector_CivilElement_rend)
    clear = _swig_new_instance_method(_OpenLxApp.vector_CivilElement_clear)
    get_allocator = _swig_new_instance_method(_OpenLxApp.vector_CivilElement_get_allocator)
    pop_back = _swig_new_instance_method(_OpenLxApp.vector_CivilElement_pop_back)
    erase = _swig_new_instance_method(_OpenLxApp.vector_CivilElement_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_CivilElement self) -> vector_CivilElement
        __init__(vector_CivilElement self, vector_CivilElement other) -> vector_CivilElement
        __init__(vector_CivilElement self, std::vector< std::shared_ptr< OpenLxApp::CivilElement > >::size_type size) -> vector_CivilElement
        __init__(vector_CivilElement self, std::vector< std::shared_ptr< OpenLxApp::CivilElement > >::size_type size, std::vector< std::shared_ptr< OpenLxApp::CivilElement > >::value_type const & value) -> vector_CivilElement
        """
        _OpenLxApp.vector_CivilElement_swiginit(self, _OpenLxApp.new_vector_CivilElement(*args))
    push_back = _swig_new_instance_method(_OpenLxApp.vector_CivilElement_push_back)
    front = _swig_new_instance_method(_OpenLxApp.vector_CivilElement_front)
    back = _swig_new_instance_method(_OpenLxApp.vector_CivilElement_back)
    assign = _swig_new_instance_method(_OpenLxApp.vector_CivilElement_assign)
    resize = _swig_new_instance_method(_OpenLxApp.vector_CivilElement_resize)
    insert = _swig_new_instance_method(_OpenLxApp.vector_CivilElement_insert)
    reserve = _swig_new_instance_method(_OpenLxApp.vector_CivilElement_reserve)
    capacity = _swig_new_instance_method(_OpenLxApp.vector_CivilElement_capacity)
    __swig_destroy__ = _OpenLxApp.delete_vector_CivilElement

# Register vector_CivilElement in _OpenLxApp:
_OpenLxApp.vector_CivilElement_swigregister(vector_CivilElement)
class vector_Column(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< OpenLxApp::Chimney > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_OpenLxApp.vector_Column_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_OpenLxApp.vector_Column___nonzero__)
    __bool__ = _swig_new_instance_method(_OpenLxApp.vector_Column___bool__)
    __len__ = _swig_new_instance_method(_OpenLxApp.vector_Column___len__)
    __getslice__ = _swig_new_instance_method(_OpenLxApp.vector_Column___getslice__)
    __setslice__ = _swig_new_instance_method(_OpenLxApp.vector_Column___setslice__)
    __delslice__ = _swig_new_instance_method(_OpenLxApp.vector_Column___delslice__)
    __delitem__ = _swig_new_instance_method(_OpenLxApp.vector_Column___delitem__)
    __getitem__ = _swig_new_instance_method(_OpenLxApp.vector_Column___getitem__)
    __setitem__ = _swig_new_instance_method(_OpenLxApp.vector_Column___setitem__)
    pop = _swig_new_instance_method(_OpenLxApp.vector_Column_pop)
    append = _swig_new_instance_method(_OpenLxApp.vector_Column_append)
    empty = _swig_new_instance_method(_OpenLxApp.vector_Column_empty)
    size = _swig_new_instance_method(_OpenLxApp.vector_Column_size)
    swap = _swig_new_instance_method(_OpenLxApp.vector_Column_swap)
    begin = _swig_new_instance_method(_OpenLxApp.vector_Column_begin)
    end = _swig_new_instance_method(_OpenLxApp.vector_Column_end)
    rbegin = _swig_new_instance_method(_OpenLxApp.vector_Column_rbegin)
    rend = _swig_new_instance_method(_OpenLxApp.vector_Column_rend)
    clear = _swig_new_instance_method(_OpenLxApp.vector_Column_clear)
    get_allocator = _swig_new_instance_method(_OpenLxApp.vector_Column_get_allocator)
    pop_back = _swig_new_instance_method(_OpenLxApp.vector_Column_pop_back)
    erase = _swig_new_instance_method(_OpenLxApp.vector_Column_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_Column self) -> vector_Column
        __init__(vector_Column self, vector_Column other) -> vector_Column
        __init__(vector_Column self, std::vector< std::shared_ptr< OpenLxApp::Chimney > >::size_type size) -> vector_Column
        __init__(vector_Column self, std::vector< std::shared_ptr< OpenLxApp::Chimney > >::size_type size, std::vector< std::shared_ptr< OpenLxApp::Chimney > >::value_type const & value) -> vector_Column
        """
        _OpenLxApp.vector_Column_swiginit(self, _OpenLxApp.new_vector_Column(*args))
    push_back = _swig_new_instance_method(_OpenLxApp.vector_Column_push_back)
    front = _swig_new_instance_method(_OpenLxApp.vector_Column_front)
    back = _swig_new_instance_method(_OpenLxApp.vector_Column_back)
    assign = _swig_new_instance_method(_OpenLxApp.vector_Column_assign)
    resize = _swig_new_instance_method(_OpenLxApp.vector_Column_resize)
    insert = _swig_new_instance_method(_OpenLxApp.vector_Column_insert)
    reserve = _swig_new_instance_method(_OpenLxApp.vector_Column_reserve)
    capacity = _swig_new_instance_method(_OpenLxApp.vector_Column_capacity)
    __swig_destroy__ = _OpenLxApp.delete_vector_Column

# Register vector_Column in _OpenLxApp:
_OpenLxApp.vector_Column_swigregister(vector_Column)
class vector_ColumnStandardCase(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< OpenLxApp::ColumnStandardCase > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_OpenLxApp.vector_ColumnStandardCase_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_OpenLxApp.vector_ColumnStandardCase___nonzero__)
    __bool__ = _swig_new_instance_method(_OpenLxApp.vector_ColumnStandardCase___bool__)
    __len__ = _swig_new_instance_method(_OpenLxApp.vector_ColumnStandardCase___len__)
    __getslice__ = _swig_new_instance_method(_OpenLxApp.vector_ColumnStandardCase___getslice__)
    __setslice__ = _swig_new_instance_method(_OpenLxApp.vector_ColumnStandardCase___setslice__)
    __delslice__ = _swig_new_instance_method(_OpenLxApp.vector_ColumnStandardCase___delslice__)
    __delitem__ = _swig_new_instance_method(_OpenLxApp.vector_ColumnStandardCase___delitem__)
    __getitem__ = _swig_new_instance_method(_OpenLxApp.vector_ColumnStandardCase___getitem__)
    __setitem__ = _swig_new_instance_method(_OpenLxApp.vector_ColumnStandardCase___setitem__)
    pop = _swig_new_instance_method(_OpenLxApp.vector_ColumnStandardCase_pop)
    append = _swig_new_instance_method(_OpenLxApp.vector_ColumnStandardCase_append)
    empty = _swig_new_instance_method(_OpenLxApp.vector_ColumnStandardCase_empty)
    size = _swig_new_instance_method(_OpenLxApp.vector_ColumnStandardCase_size)
    swap = _swig_new_instance_method(_OpenLxApp.vector_ColumnStandardCase_swap)
    begin = _swig_new_instance_method(_OpenLxApp.vector_ColumnStandardCase_begin)
    end = _swig_new_instance_method(_OpenLxApp.vector_ColumnStandardCase_end)
    rbegin = _swig_new_instance_method(_OpenLxApp.vector_ColumnStandardCase_rbegin)
    rend = _swig_new_instance_method(_OpenLxApp.vector_ColumnStandardCase_rend)
    clear = _swig_new_instance_method(_OpenLxApp.vector_ColumnStandardCase_clear)
    get_allocator = _swig_new_instance_method(_OpenLxApp.vector_ColumnStandardCase_get_allocator)
    pop_back = _swig_new_instance_method(_OpenLxApp.vector_ColumnStandardCase_pop_back)
    erase = _swig_new_instance_method(_OpenLxApp.vector_ColumnStandardCase_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_ColumnStandardCase self) -> vector_ColumnStandardCase
        __init__(vector_ColumnStandardCase self, vector_ColumnStandardCase other) -> vector_ColumnStandardCase
        __init__(vector_ColumnStandardCase self, std::vector< std::shared_ptr< OpenLxApp::ColumnStandardCase > >::size_type size) -> vector_ColumnStandardCase
        __init__(vector_ColumnStandardCase self, std::vector< std::shared_ptr< OpenLxApp::ColumnStandardCase > >::size_type size, std::vector< std::shared_ptr< OpenLxApp::ColumnStandardCase > >::value_type const & value) -> vector_ColumnStandardCase
        """
        _OpenLxApp.vector_ColumnStandardCase_swiginit(self, _OpenLxApp.new_vector_ColumnStandardCase(*args))
    push_back = _swig_new_instance_method(_OpenLxApp.vector_ColumnStandardCase_push_back)
    front = _swig_new_instance_method(_OpenLxApp.vector_ColumnStandardCase_front)
    back = _swig_new_instance_method(_OpenLxApp.vector_ColumnStandardCase_back)
    assign = _swig_new_instance_method(_OpenLxApp.vector_ColumnStandardCase_assign)
    resize = _swig_new_instance_method(_OpenLxApp.vector_ColumnStandardCase_resize)
    insert = _swig_new_instance_method(_OpenLxApp.vector_ColumnStandardCase_insert)
    reserve = _swig_new_instance_method(_OpenLxApp.vector_ColumnStandardCase_reserve)
    capacity = _swig_new_instance_method(_OpenLxApp.vector_ColumnStandardCase_capacity)
    __swig_destroy__ = _OpenLxApp.delete_vector_ColumnStandardCase

# Register vector_ColumnStandardCase in _OpenLxApp:
_OpenLxApp.vector_ColumnStandardCase_swigregister(vector_ColumnStandardCase)
class vector_ComponentType(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< OpenLxApp::ComponentType > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_OpenLxApp.vector_ComponentType_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_OpenLxApp.vector_ComponentType___nonzero__)
    __bool__ = _swig_new_instance_method(_OpenLxApp.vector_ComponentType___bool__)
    __len__ = _swig_new_instance_method(_OpenLxApp.vector_ComponentType___len__)
    __getslice__ = _swig_new_instance_method(_OpenLxApp.vector_ComponentType___getslice__)
    __setslice__ = _swig_new_instance_method(_OpenLxApp.vector_ComponentType___setslice__)
    __delslice__ = _swig_new_instance_method(_OpenLxApp.vector_ComponentType___delslice__)
    __delitem__ = _swig_new_instance_method(_OpenLxApp.vector_ComponentType___delitem__)
    __getitem__ = _swig_new_instance_method(_OpenLxApp.vector_ComponentType___getitem__)
    __setitem__ = _swig_new_instance_method(_OpenLxApp.vector_ComponentType___setitem__)
    pop = _swig_new_instance_method(_OpenLxApp.vector_ComponentType_pop)
    append = _swig_new_instance_method(_OpenLxApp.vector_ComponentType_append)
    empty = _swig_new_instance_method(_OpenLxApp.vector_ComponentType_empty)
    size = _swig_new_instance_method(_OpenLxApp.vector_ComponentType_size)
    swap = _swig_new_instance_method(_OpenLxApp.vector_ComponentType_swap)
    begin = _swig_new_instance_method(_OpenLxApp.vector_ComponentType_begin)
    end = _swig_new_instance_method(_OpenLxApp.vector_ComponentType_end)
    rbegin = _swig_new_instance_method(_OpenLxApp.vector_ComponentType_rbegin)
    rend = _swig_new_instance_method(_OpenLxApp.vector_ComponentType_rend)
    clear = _swig_new_instance_method(_OpenLxApp.vector_ComponentType_clear)
    get_allocator = _swig_new_instance_method(_OpenLxApp.vector_ComponentType_get_allocator)
    pop_back = _swig_new_instance_method(_OpenLxApp.vector_ComponentType_pop_back)
    erase = _swig_new_instance_method(_OpenLxApp.vector_ComponentType_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_ComponentType self) -> vector_ComponentType
        __init__(vector_ComponentType self, vector_ComponentType other) -> vector_ComponentType
        __init__(vector_ComponentType self, std::vector< std::shared_ptr< OpenLxApp::ComponentType > >::size_type size) -> vector_ComponentType
        __init__(vector_ComponentType self, std::vector< std::shared_ptr< OpenLxApp::ComponentType > >::size_type size, std::vector< std::shared_ptr< OpenLxApp::ComponentType > >::value_type const & value) -> vector_ComponentType
        """
        _OpenLxApp.vector_ComponentType_swiginit(self, _OpenLxApp.new_vector_ComponentType(*args))
    push_back = _swig_new_instance_method(_OpenLxApp.vector_ComponentType_push_back)
    front = _swig_new_instance_method(_OpenLxApp.vector_ComponentType_front)
    back = _swig_new_instance_method(_OpenLxApp.vector_ComponentType_back)
    assign = _swig_new_instance_method(_OpenLxApp.vector_ComponentType_assign)
    resize = _swig_new_instance_method(_OpenLxApp.vector_ComponentType_resize)
    insert = _swig_new_instance_method(_OpenLxApp.vector_ComponentType_insert)
    reserve = _swig_new_instance_method(_OpenLxApp.vector_ComponentType_reserve)
    capacity = _swig_new_instance_method(_OpenLxApp.vector_ComponentType_capacity)
    __swig_destroy__ = _OpenLxApp.delete_vector_ComponentType

# Register vector_ComponentType in _OpenLxApp:
_OpenLxApp.vector_ComponentType_swigregister(vector_ComponentType)
class vector_CompositeCurve(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< OpenLxApp::CompositeCurve > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_OpenLxApp.vector_CompositeCurve_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_OpenLxApp.vector_CompositeCurve___nonzero__)
    __bool__ = _swig_new_instance_method(_OpenLxApp.vector_CompositeCurve___bool__)
    __len__ = _swig_new_instance_method(_OpenLxApp.vector_CompositeCurve___len__)
    __getslice__ = _swig_new_instance_method(_OpenLxApp.vector_CompositeCurve___getslice__)
    __setslice__ = _swig_new_instance_method(_OpenLxApp.vector_CompositeCurve___setslice__)
    __delslice__ = _swig_new_instance_method(_OpenLxApp.vector_CompositeCurve___delslice__)
    __delitem__ = _swig_new_instance_method(_OpenLxApp.vector_CompositeCurve___delitem__)
    __getitem__ = _swig_new_instance_method(_OpenLxApp.vector_CompositeCurve___getitem__)
    __setitem__ = _swig_new_instance_method(_OpenLxApp.vector_CompositeCurve___setitem__)
    pop = _swig_new_instance_method(_OpenLxApp.vector_CompositeCurve_pop)
    append = _swig_new_instance_method(_OpenLxApp.vector_CompositeCurve_append)
    empty = _swig_new_instance_method(_OpenLxApp.vector_CompositeCurve_empty)
    size = _swig_new_instance_method(_OpenLxApp.vector_CompositeCurve_size)
    swap = _swig_new_instance_method(_OpenLxApp.vector_CompositeCurve_swap)
    begin = _swig_new_instance_method(_OpenLxApp.vector_CompositeCurve_begin)
    end = _swig_new_instance_method(_OpenLxApp.vector_CompositeCurve_end)
    rbegin = _swig_new_instance_method(_OpenLxApp.vector_CompositeCurve_rbegin)
    rend = _swig_new_instance_method(_OpenLxApp.vector_CompositeCurve_rend)
    clear = _swig_new_instance_method(_OpenLxApp.vector_CompositeCurve_clear)
    get_allocator = _swig_new_instance_method(_OpenLxApp.vector_CompositeCurve_get_allocator)
    pop_back = _swig_new_instance_method(_OpenLxApp.vector_CompositeCurve_pop_back)
    erase = _swig_new_instance_method(_OpenLxApp.vector_CompositeCurve_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_CompositeCurve self) -> vector_CompositeCurve
        __init__(vector_CompositeCurve self, vector_CompositeCurve other) -> vector_CompositeCurve
        __init__(vector_CompositeCurve self, std::vector< std::shared_ptr< OpenLxApp::CompositeCurve > >::size_type size) -> vector_CompositeCurve
        __init__(vector_CompositeCurve self, std::vector< std::shared_ptr< OpenLxApp::CompositeCurve > >::size_type size, std::vector< std::shared_ptr< OpenLxApp::CompositeCurve > >::value_type const & value) -> vector_CompositeCurve
        """
        _OpenLxApp.vector_CompositeCurve_swiginit(self, _OpenLxApp.new_vector_CompositeCurve(*args))
    push_back = _swig_new_instance_method(_OpenLxApp.vector_CompositeCurve_push_back)
    front = _swig_new_instance_method(_OpenLxApp.vector_CompositeCurve_front)
    back = _swig_new_instance_method(_OpenLxApp.vector_CompositeCurve_back)
    assign = _swig_new_instance_method(_OpenLxApp.vector_CompositeCurve_assign)
    resize = _swig_new_instance_method(_OpenLxApp.vector_CompositeCurve_resize)
    insert = _swig_new_instance_method(_OpenLxApp.vector_CompositeCurve_insert)
    reserve = _swig_new_instance_method(_OpenLxApp.vector_CompositeCurve_reserve)
    capacity = _swig_new_instance_method(_OpenLxApp.vector_CompositeCurve_capacity)
    __swig_destroy__ = _OpenLxApp.delete_vector_CompositeCurve

# Register vector_CompositeCurve in _OpenLxApp:
_OpenLxApp.vector_CompositeCurve_swigregister(vector_CompositeCurve)
class vector_CompositeCurveSegment(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< OpenLxApp::CompositeCurveSegment > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_OpenLxApp.vector_CompositeCurveSegment_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_OpenLxApp.vector_CompositeCurveSegment___nonzero__)
    __bool__ = _swig_new_instance_method(_OpenLxApp.vector_CompositeCurveSegment___bool__)
    __len__ = _swig_new_instance_method(_OpenLxApp.vector_CompositeCurveSegment___len__)
    __getslice__ = _swig_new_instance_method(_OpenLxApp.vector_CompositeCurveSegment___getslice__)
    __setslice__ = _swig_new_instance_method(_OpenLxApp.vector_CompositeCurveSegment___setslice__)
    __delslice__ = _swig_new_instance_method(_OpenLxApp.vector_CompositeCurveSegment___delslice__)
    __delitem__ = _swig_new_instance_method(_OpenLxApp.vector_CompositeCurveSegment___delitem__)
    __getitem__ = _swig_new_instance_method(_OpenLxApp.vector_CompositeCurveSegment___getitem__)
    __setitem__ = _swig_new_instance_method(_OpenLxApp.vector_CompositeCurveSegment___setitem__)
    pop = _swig_new_instance_method(_OpenLxApp.vector_CompositeCurveSegment_pop)
    append = _swig_new_instance_method(_OpenLxApp.vector_CompositeCurveSegment_append)
    empty = _swig_new_instance_method(_OpenLxApp.vector_CompositeCurveSegment_empty)
    size = _swig_new_instance_method(_OpenLxApp.vector_CompositeCurveSegment_size)
    swap = _swig_new_instance_method(_OpenLxApp.vector_CompositeCurveSegment_swap)
    begin = _swig_new_instance_method(_OpenLxApp.vector_CompositeCurveSegment_begin)
    end = _swig_new_instance_method(_OpenLxApp.vector_CompositeCurveSegment_end)
    rbegin = _swig_new_instance_method(_OpenLxApp.vector_CompositeCurveSegment_rbegin)
    rend = _swig_new_instance_method(_OpenLxApp.vector_CompositeCurveSegment_rend)
    clear = _swig_new_instance_method(_OpenLxApp.vector_CompositeCurveSegment_clear)
    get_allocator = _swig_new_instance_method(_OpenLxApp.vector_CompositeCurveSegment_get_allocator)
    pop_back = _swig_new_instance_method(_OpenLxApp.vector_CompositeCurveSegment_pop_back)
    erase = _swig_new_instance_method(_OpenLxApp.vector_CompositeCurveSegment_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_CompositeCurveSegment self) -> vector_CompositeCurveSegment
        __init__(vector_CompositeCurveSegment self, vector_CompositeCurveSegment other) -> vector_CompositeCurveSegment
        __init__(vector_CompositeCurveSegment self, std::vector< std::shared_ptr< OpenLxApp::CompositeCurveSegment > >::size_type size) -> vector_CompositeCurveSegment
        __init__(vector_CompositeCurveSegment self, std::vector< std::shared_ptr< OpenLxApp::CompositeCurveSegment > >::size_type size, std::vector< std::shared_ptr< OpenLxApp::CompositeCurveSegment > >::value_type const & value) -> vector_CompositeCurveSegment
        """
        _OpenLxApp.vector_CompositeCurveSegment_swiginit(self, _OpenLxApp.new_vector_CompositeCurveSegment(*args))
    push_back = _swig_new_instance_method(_OpenLxApp.vector_CompositeCurveSegment_push_back)
    front = _swig_new_instance_method(_OpenLxApp.vector_CompositeCurveSegment_front)
    back = _swig_new_instance_method(_OpenLxApp.vector_CompositeCurveSegment_back)
    assign = _swig_new_instance_method(_OpenLxApp.vector_CompositeCurveSegment_assign)
    resize = _swig_new_instance_method(_OpenLxApp.vector_CompositeCurveSegment_resize)
    insert = _swig_new_instance_method(_OpenLxApp.vector_CompositeCurveSegment_insert)
    reserve = _swig_new_instance_method(_OpenLxApp.vector_CompositeCurveSegment_reserve)
    capacity = _swig_new_instance_method(_OpenLxApp.vector_CompositeCurveSegment_capacity)
    __swig_destroy__ = _OpenLxApp.delete_vector_CompositeCurveSegment

# Register vector_CompositeCurveSegment in _OpenLxApp:
_OpenLxApp.vector_CompositeCurveSegment_swigregister(vector_CompositeCurveSegment)
class vector_Conic(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< OpenLxApp::Conic > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_OpenLxApp.vector_Conic_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_OpenLxApp.vector_Conic___nonzero__)
    __bool__ = _swig_new_instance_method(_OpenLxApp.vector_Conic___bool__)
    __len__ = _swig_new_instance_method(_OpenLxApp.vector_Conic___len__)
    __getslice__ = _swig_new_instance_method(_OpenLxApp.vector_Conic___getslice__)
    __setslice__ = _swig_new_instance_method(_OpenLxApp.vector_Conic___setslice__)
    __delslice__ = _swig_new_instance_method(_OpenLxApp.vector_Conic___delslice__)
    __delitem__ = _swig_new_instance_method(_OpenLxApp.vector_Conic___delitem__)
    __getitem__ = _swig_new_instance_method(_OpenLxApp.vector_Conic___getitem__)
    __setitem__ = _swig_new_instance_method(_OpenLxApp.vector_Conic___setitem__)
    pop = _swig_new_instance_method(_OpenLxApp.vector_Conic_pop)
    append = _swig_new_instance_method(_OpenLxApp.vector_Conic_append)
    empty = _swig_new_instance_method(_OpenLxApp.vector_Conic_empty)
    size = _swig_new_instance_method(_OpenLxApp.vector_Conic_size)
    swap = _swig_new_instance_method(_OpenLxApp.vector_Conic_swap)
    begin = _swig_new_instance_method(_OpenLxApp.vector_Conic_begin)
    end = _swig_new_instance_method(_OpenLxApp.vector_Conic_end)
    rbegin = _swig_new_instance_method(_OpenLxApp.vector_Conic_rbegin)
    rend = _swig_new_instance_method(_OpenLxApp.vector_Conic_rend)
    clear = _swig_new_instance_method(_OpenLxApp.vector_Conic_clear)
    get_allocator = _swig_new_instance_method(_OpenLxApp.vector_Conic_get_allocator)
    pop_back = _swig_new_instance_method(_OpenLxApp.vector_Conic_pop_back)
    erase = _swig_new_instance_method(_OpenLxApp.vector_Conic_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_Conic self) -> vector_Conic
        __init__(vector_Conic self, vector_Conic other) -> vector_Conic
        __init__(vector_Conic self, std::vector< std::shared_ptr< OpenLxApp::Conic > >::size_type size) -> vector_Conic
        __init__(vector_Conic self, std::vector< std::shared_ptr< OpenLxApp::Conic > >::size_type size, std::vector< std::shared_ptr< OpenLxApp::Conic > >::value_type const & value) -> vector_Conic
        """
        _OpenLxApp.vector_Conic_swiginit(self, _OpenLxApp.new_vector_Conic(*args))
    push_back = _swig_new_instance_method(_OpenLxApp.vector_Conic_push_back)
    front = _swig_new_instance_method(_OpenLxApp.vector_Conic_front)
    back = _swig_new_instance_method(_OpenLxApp.vector_Conic_back)
    assign = _swig_new_instance_method(_OpenLxApp.vector_Conic_assign)
    resize = _swig_new_instance_method(_OpenLxApp.vector_Conic_resize)
    insert = _swig_new_instance_method(_OpenLxApp.vector_Conic_insert)
    reserve = _swig_new_instance_method(_OpenLxApp.vector_Conic_reserve)
    capacity = _swig_new_instance_method(_OpenLxApp.vector_Conic_capacity)
    __swig_destroy__ = _OpenLxApp.delete_vector_Conic

# Register vector_Conic in _OpenLxApp:
_OpenLxApp.vector_Conic_swigregister(vector_Conic)
class vector_Course(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< OpenLxApp::Course > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_OpenLxApp.vector_Course_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_OpenLxApp.vector_Course___nonzero__)
    __bool__ = _swig_new_instance_method(_OpenLxApp.vector_Course___bool__)
    __len__ = _swig_new_instance_method(_OpenLxApp.vector_Course___len__)
    __getslice__ = _swig_new_instance_method(_OpenLxApp.vector_Course___getslice__)
    __setslice__ = _swig_new_instance_method(_OpenLxApp.vector_Course___setslice__)
    __delslice__ = _swig_new_instance_method(_OpenLxApp.vector_Course___delslice__)
    __delitem__ = _swig_new_instance_method(_OpenLxApp.vector_Course___delitem__)
    __getitem__ = _swig_new_instance_method(_OpenLxApp.vector_Course___getitem__)
    __setitem__ = _swig_new_instance_method(_OpenLxApp.vector_Course___setitem__)
    pop = _swig_new_instance_method(_OpenLxApp.vector_Course_pop)
    append = _swig_new_instance_method(_OpenLxApp.vector_Course_append)
    empty = _swig_new_instance_method(_OpenLxApp.vector_Course_empty)
    size = _swig_new_instance_method(_OpenLxApp.vector_Course_size)
    swap = _swig_new_instance_method(_OpenLxApp.vector_Course_swap)
    begin = _swig_new_instance_method(_OpenLxApp.vector_Course_begin)
    end = _swig_new_instance_method(_OpenLxApp.vector_Course_end)
    rbegin = _swig_new_instance_method(_OpenLxApp.vector_Course_rbegin)
    rend = _swig_new_instance_method(_OpenLxApp.vector_Course_rend)
    clear = _swig_new_instance_method(_OpenLxApp.vector_Course_clear)
    get_allocator = _swig_new_instance_method(_OpenLxApp.vector_Course_get_allocator)
    pop_back = _swig_new_instance_method(_OpenLxApp.vector_Course_pop_back)
    erase = _swig_new_instance_method(_OpenLxApp.vector_Course_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_Course self) -> vector_Course
        __init__(vector_Course self, vector_Course other) -> vector_Course
        __init__(vector_Course self, std::vector< std::shared_ptr< OpenLxApp::Course > >::size_type size) -> vector_Course
        __init__(vector_Course self, std::vector< std::shared_ptr< OpenLxApp::Course > >::size_type size, std::vector< std::shared_ptr< OpenLxApp::Course > >::value_type const & value) -> vector_Course
        """
        _OpenLxApp.vector_Course_swiginit(self, _OpenLxApp.new_vector_Course(*args))
    push_back = _swig_new_instance_method(_OpenLxApp.vector_Course_push_back)
    front = _swig_new_instance_method(_OpenLxApp.vector_Course_front)
    back = _swig_new_instance_method(_OpenLxApp.vector_Course_back)
    assign = _swig_new_instance_method(_OpenLxApp.vector_Course_assign)
    resize = _swig_new_instance_method(_OpenLxApp.vector_Course_resize)
    insert = _swig_new_instance_method(_OpenLxApp.vector_Course_insert)
    reserve = _swig_new_instance_method(_OpenLxApp.vector_Course_reserve)
    capacity = _swig_new_instance_method(_OpenLxApp.vector_Course_capacity)
    __swig_destroy__ = _OpenLxApp.delete_vector_Course

# Register vector_Course in _OpenLxApp:
_OpenLxApp.vector_Course_swigregister(vector_Course)
class vector_Covering(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< OpenLxApp::Covering > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_OpenLxApp.vector_Covering_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_OpenLxApp.vector_Covering___nonzero__)
    __bool__ = _swig_new_instance_method(_OpenLxApp.vector_Covering___bool__)
    __len__ = _swig_new_instance_method(_OpenLxApp.vector_Covering___len__)
    __getslice__ = _swig_new_instance_method(_OpenLxApp.vector_Covering___getslice__)
    __setslice__ = _swig_new_instance_method(_OpenLxApp.vector_Covering___setslice__)
    __delslice__ = _swig_new_instance_method(_OpenLxApp.vector_Covering___delslice__)
    __delitem__ = _swig_new_instance_method(_OpenLxApp.vector_Covering___delitem__)
    __getitem__ = _swig_new_instance_method(_OpenLxApp.vector_Covering___getitem__)
    __setitem__ = _swig_new_instance_method(_OpenLxApp.vector_Covering___setitem__)
    pop = _swig_new_instance_method(_OpenLxApp.vector_Covering_pop)
    append = _swig_new_instance_method(_OpenLxApp.vector_Covering_append)
    empty = _swig_new_instance_method(_OpenLxApp.vector_Covering_empty)
    size = _swig_new_instance_method(_OpenLxApp.vector_Covering_size)
    swap = _swig_new_instance_method(_OpenLxApp.vector_Covering_swap)
    begin = _swig_new_instance_method(_OpenLxApp.vector_Covering_begin)
    end = _swig_new_instance_method(_OpenLxApp.vector_Covering_end)
    rbegin = _swig_new_instance_method(_OpenLxApp.vector_Covering_rbegin)
    rend = _swig_new_instance_method(_OpenLxApp.vector_Covering_rend)
    clear = _swig_new_instance_method(_OpenLxApp.vector_Covering_clear)
    get_allocator = _swig_new_instance_method(_OpenLxApp.vector_Covering_get_allocator)
    pop_back = _swig_new_instance_method(_OpenLxApp.vector_Covering_pop_back)
    erase = _swig_new_instance_method(_OpenLxApp.vector_Covering_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_Covering self) -> vector_Covering
        __init__(vector_Covering self, vector_Covering other) -> vector_Covering
        __init__(vector_Covering self, std::vector< std::shared_ptr< OpenLxApp::Covering > >::size_type size) -> vector_Covering
        __init__(vector_Covering self, std::vector< std::shared_ptr< OpenLxApp::Covering > >::size_type size, std::vector< std::shared_ptr< OpenLxApp::Covering > >::value_type const & value) -> vector_Covering
        """
        _OpenLxApp.vector_Covering_swiginit(self, _OpenLxApp.new_vector_Covering(*args))
    push_back = _swig_new_instance_method(_OpenLxApp.vector_Covering_push_back)
    front = _swig_new_instance_method(_OpenLxApp.vector_Covering_front)
    back = _swig_new_instance_method(_OpenLxApp.vector_Covering_back)
    assign = _swig_new_instance_method(_OpenLxApp.vector_Covering_assign)
    resize = _swig_new_instance_method(_OpenLxApp.vector_Covering_resize)
    insert = _swig_new_instance_method(_OpenLxApp.vector_Covering_insert)
    reserve = _swig_new_instance_method(_OpenLxApp.vector_Covering_reserve)
    capacity = _swig_new_instance_method(_OpenLxApp.vector_Covering_capacity)
    __swig_destroy__ = _OpenLxApp.delete_vector_Covering

# Register vector_Covering in _OpenLxApp:
_OpenLxApp.vector_Covering_swigregister(vector_Covering)
class vector_CurtainWall(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< OpenLxApp::CurtainWall > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_OpenLxApp.vector_CurtainWall_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_OpenLxApp.vector_CurtainWall___nonzero__)
    __bool__ = _swig_new_instance_method(_OpenLxApp.vector_CurtainWall___bool__)
    __len__ = _swig_new_instance_method(_OpenLxApp.vector_CurtainWall___len__)
    __getslice__ = _swig_new_instance_method(_OpenLxApp.vector_CurtainWall___getslice__)
    __setslice__ = _swig_new_instance_method(_OpenLxApp.vector_CurtainWall___setslice__)
    __delslice__ = _swig_new_instance_method(_OpenLxApp.vector_CurtainWall___delslice__)
    __delitem__ = _swig_new_instance_method(_OpenLxApp.vector_CurtainWall___delitem__)
    __getitem__ = _swig_new_instance_method(_OpenLxApp.vector_CurtainWall___getitem__)
    __setitem__ = _swig_new_instance_method(_OpenLxApp.vector_CurtainWall___setitem__)
    pop = _swig_new_instance_method(_OpenLxApp.vector_CurtainWall_pop)
    append = _swig_new_instance_method(_OpenLxApp.vector_CurtainWall_append)
    empty = _swig_new_instance_method(_OpenLxApp.vector_CurtainWall_empty)
    size = _swig_new_instance_method(_OpenLxApp.vector_CurtainWall_size)
    swap = _swig_new_instance_method(_OpenLxApp.vector_CurtainWall_swap)
    begin = _swig_new_instance_method(_OpenLxApp.vector_CurtainWall_begin)
    end = _swig_new_instance_method(_OpenLxApp.vector_CurtainWall_end)
    rbegin = _swig_new_instance_method(_OpenLxApp.vector_CurtainWall_rbegin)
    rend = _swig_new_instance_method(_OpenLxApp.vector_CurtainWall_rend)
    clear = _swig_new_instance_method(_OpenLxApp.vector_CurtainWall_clear)
    get_allocator = _swig_new_instance_method(_OpenLxApp.vector_CurtainWall_get_allocator)
    pop_back = _swig_new_instance_method(_OpenLxApp.vector_CurtainWall_pop_back)
    erase = _swig_new_instance_method(_OpenLxApp.vector_CurtainWall_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_CurtainWall self) -> vector_CurtainWall
        __init__(vector_CurtainWall self, vector_CurtainWall other) -> vector_CurtainWall
        __init__(vector_CurtainWall self, std::vector< std::shared_ptr< OpenLxApp::CurtainWall > >::size_type size) -> vector_CurtainWall
        __init__(vector_CurtainWall self, std::vector< std::shared_ptr< OpenLxApp::CurtainWall > >::size_type size, std::vector< std::shared_ptr< OpenLxApp::CurtainWall > >::value_type const & value) -> vector_CurtainWall
        """
        _OpenLxApp.vector_CurtainWall_swiginit(self, _OpenLxApp.new_vector_CurtainWall(*args))
    push_back = _swig_new_instance_method(_OpenLxApp.vector_CurtainWall_push_back)
    front = _swig_new_instance_method(_OpenLxApp.vector_CurtainWall_front)
    back = _swig_new_instance_method(_OpenLxApp.vector_CurtainWall_back)
    assign = _swig_new_instance_method(_OpenLxApp.vector_CurtainWall_assign)
    resize = _swig_new_instance_method(_OpenLxApp.vector_CurtainWall_resize)
    insert = _swig_new_instance_method(_OpenLxApp.vector_CurtainWall_insert)
    reserve = _swig_new_instance_method(_OpenLxApp.vector_CurtainWall_reserve)
    capacity = _swig_new_instance_method(_OpenLxApp.vector_CurtainWall_capacity)
    __swig_destroy__ = _OpenLxApp.delete_vector_CurtainWall

# Register vector_CurtainWall in _OpenLxApp:
_OpenLxApp.vector_CurtainWall_swigregister(vector_CurtainWall)
class vector_Curve(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< OpenLxApp::Curve > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_OpenLxApp.vector_Curve_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_OpenLxApp.vector_Curve___nonzero__)
    __bool__ = _swig_new_instance_method(_OpenLxApp.vector_Curve___bool__)
    __len__ = _swig_new_instance_method(_OpenLxApp.vector_Curve___len__)
    __getslice__ = _swig_new_instance_method(_OpenLxApp.vector_Curve___getslice__)
    __setslice__ = _swig_new_instance_method(_OpenLxApp.vector_Curve___setslice__)
    __delslice__ = _swig_new_instance_method(_OpenLxApp.vector_Curve___delslice__)
    __delitem__ = _swig_new_instance_method(_OpenLxApp.vector_Curve___delitem__)
    __getitem__ = _swig_new_instance_method(_OpenLxApp.vector_Curve___getitem__)
    __setitem__ = _swig_new_instance_method(_OpenLxApp.vector_Curve___setitem__)
    pop = _swig_new_instance_method(_OpenLxApp.vector_Curve_pop)
    append = _swig_new_instance_method(_OpenLxApp.vector_Curve_append)
    empty = _swig_new_instance_method(_OpenLxApp.vector_Curve_empty)
    size = _swig_new_instance_method(_OpenLxApp.vector_Curve_size)
    swap = _swig_new_instance_method(_OpenLxApp.vector_Curve_swap)
    begin = _swig_new_instance_method(_OpenLxApp.vector_Curve_begin)
    end = _swig_new_instance_method(_OpenLxApp.vector_Curve_end)
    rbegin = _swig_new_instance_method(_OpenLxApp.vector_Curve_rbegin)
    rend = _swig_new_instance_method(_OpenLxApp.vector_Curve_rend)
    clear = _swig_new_instance_method(_OpenLxApp.vector_Curve_clear)
    get_allocator = _swig_new_instance_method(_OpenLxApp.vector_Curve_get_allocator)
    pop_back = _swig_new_instance_method(_OpenLxApp.vector_Curve_pop_back)
    erase = _swig_new_instance_method(_OpenLxApp.vector_Curve_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_Curve self) -> vector_Curve
        __init__(vector_Curve self, vector_Curve other) -> vector_Curve
        __init__(vector_Curve self, std::vector< std::shared_ptr< OpenLxApp::Curve > >::size_type size) -> vector_Curve
        __init__(vector_Curve self, std::vector< std::shared_ptr< OpenLxApp::Curve > >::size_type size, std::vector< std::shared_ptr< OpenLxApp::Curve > >::value_type const & value) -> vector_Curve
        """
        _OpenLxApp.vector_Curve_swiginit(self, _OpenLxApp.new_vector_Curve(*args))
    push_back = _swig_new_instance_method(_OpenLxApp.vector_Curve_push_back)
    front = _swig_new_instance_method(_OpenLxApp.vector_Curve_front)
    back = _swig_new_instance_method(_OpenLxApp.vector_Curve_back)
    assign = _swig_new_instance_method(_OpenLxApp.vector_Curve_assign)
    resize = _swig_new_instance_method(_OpenLxApp.vector_Curve_resize)
    insert = _swig_new_instance_method(_OpenLxApp.vector_Curve_insert)
    reserve = _swig_new_instance_method(_OpenLxApp.vector_Curve_reserve)
    capacity = _swig_new_instance_method(_OpenLxApp.vector_Curve_capacity)
    __swig_destroy__ = _OpenLxApp.delete_vector_Curve

# Register vector_Curve in _OpenLxApp:
_OpenLxApp.vector_Curve_swigregister(vector_Curve)
class vector_CurveBoundedPlane(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< OpenLxApp::CurveBoundedPlane > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_OpenLxApp.vector_CurveBoundedPlane_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_OpenLxApp.vector_CurveBoundedPlane___nonzero__)
    __bool__ = _swig_new_instance_method(_OpenLxApp.vector_CurveBoundedPlane___bool__)
    __len__ = _swig_new_instance_method(_OpenLxApp.vector_CurveBoundedPlane___len__)
    __getslice__ = _swig_new_instance_method(_OpenLxApp.vector_CurveBoundedPlane___getslice__)
    __setslice__ = _swig_new_instance_method(_OpenLxApp.vector_CurveBoundedPlane___setslice__)
    __delslice__ = _swig_new_instance_method(_OpenLxApp.vector_CurveBoundedPlane___delslice__)
    __delitem__ = _swig_new_instance_method(_OpenLxApp.vector_CurveBoundedPlane___delitem__)
    __getitem__ = _swig_new_instance_method(_OpenLxApp.vector_CurveBoundedPlane___getitem__)
    __setitem__ = _swig_new_instance_method(_OpenLxApp.vector_CurveBoundedPlane___setitem__)
    pop = _swig_new_instance_method(_OpenLxApp.vector_CurveBoundedPlane_pop)
    append = _swig_new_instance_method(_OpenLxApp.vector_CurveBoundedPlane_append)
    empty = _swig_new_instance_method(_OpenLxApp.vector_CurveBoundedPlane_empty)
    size = _swig_new_instance_method(_OpenLxApp.vector_CurveBoundedPlane_size)
    swap = _swig_new_instance_method(_OpenLxApp.vector_CurveBoundedPlane_swap)
    begin = _swig_new_instance_method(_OpenLxApp.vector_CurveBoundedPlane_begin)
    end = _swig_new_instance_method(_OpenLxApp.vector_CurveBoundedPlane_end)
    rbegin = _swig_new_instance_method(_OpenLxApp.vector_CurveBoundedPlane_rbegin)
    rend = _swig_new_instance_method(_OpenLxApp.vector_CurveBoundedPlane_rend)
    clear = _swig_new_instance_method(_OpenLxApp.vector_CurveBoundedPlane_clear)
    get_allocator = _swig_new_instance_method(_OpenLxApp.vector_CurveBoundedPlane_get_allocator)
    pop_back = _swig_new_instance_method(_OpenLxApp.vector_CurveBoundedPlane_pop_back)
    erase = _swig_new_instance_method(_OpenLxApp.vector_CurveBoundedPlane_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_CurveBoundedPlane self) -> vector_CurveBoundedPlane
        __init__(vector_CurveBoundedPlane self, vector_CurveBoundedPlane other) -> vector_CurveBoundedPlane
        __init__(vector_CurveBoundedPlane self, std::vector< std::shared_ptr< OpenLxApp::CurveBoundedPlane > >::size_type size) -> vector_CurveBoundedPlane
        __init__(vector_CurveBoundedPlane self, std::vector< std::shared_ptr< OpenLxApp::CurveBoundedPlane > >::size_type size, std::vector< std::shared_ptr< OpenLxApp::CurveBoundedPlane > >::value_type const & value) -> vector_CurveBoundedPlane
        """
        _OpenLxApp.vector_CurveBoundedPlane_swiginit(self, _OpenLxApp.new_vector_CurveBoundedPlane(*args))
    push_back = _swig_new_instance_method(_OpenLxApp.vector_CurveBoundedPlane_push_back)
    front = _swig_new_instance_method(_OpenLxApp.vector_CurveBoundedPlane_front)
    back = _swig_new_instance_method(_OpenLxApp.vector_CurveBoundedPlane_back)
    assign = _swig_new_instance_method(_OpenLxApp.vector_CurveBoundedPlane_assign)
    resize = _swig_new_instance_method(_OpenLxApp.vector_CurveBoundedPlane_resize)
    insert = _swig_new_instance_method(_OpenLxApp.vector_CurveBoundedPlane_insert)
    reserve = _swig_new_instance_method(_OpenLxApp.vector_CurveBoundedPlane_reserve)
    capacity = _swig_new_instance_method(_OpenLxApp.vector_CurveBoundedPlane_capacity)
    __swig_destroy__ = _OpenLxApp.delete_vector_CurveBoundedPlane

# Register vector_CurveBoundedPlane in _OpenLxApp:
_OpenLxApp.vector_CurveBoundedPlane_swigregister(vector_CurveBoundedPlane)
class vector_DeepFoundation(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< OpenLxApp::DeepFoundation > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_OpenLxApp.vector_DeepFoundation_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_OpenLxApp.vector_DeepFoundation___nonzero__)
    __bool__ = _swig_new_instance_method(_OpenLxApp.vector_DeepFoundation___bool__)
    __len__ = _swig_new_instance_method(_OpenLxApp.vector_DeepFoundation___len__)
    __getslice__ = _swig_new_instance_method(_OpenLxApp.vector_DeepFoundation___getslice__)
    __setslice__ = _swig_new_instance_method(_OpenLxApp.vector_DeepFoundation___setslice__)
    __delslice__ = _swig_new_instance_method(_OpenLxApp.vector_DeepFoundation___delslice__)
    __delitem__ = _swig_new_instance_method(_OpenLxApp.vector_DeepFoundation___delitem__)
    __getitem__ = _swig_new_instance_method(_OpenLxApp.vector_DeepFoundation___getitem__)
    __setitem__ = _swig_new_instance_method(_OpenLxApp.vector_DeepFoundation___setitem__)
    pop = _swig_new_instance_method(_OpenLxApp.vector_DeepFoundation_pop)
    append = _swig_new_instance_method(_OpenLxApp.vector_DeepFoundation_append)
    empty = _swig_new_instance_method(_OpenLxApp.vector_DeepFoundation_empty)
    size = _swig_new_instance_method(_OpenLxApp.vector_DeepFoundation_size)
    swap = _swig_new_instance_method(_OpenLxApp.vector_DeepFoundation_swap)
    begin = _swig_new_instance_method(_OpenLxApp.vector_DeepFoundation_begin)
    end = _swig_new_instance_method(_OpenLxApp.vector_DeepFoundation_end)
    rbegin = _swig_new_instance_method(_OpenLxApp.vector_DeepFoundation_rbegin)
    rend = _swig_new_instance_method(_OpenLxApp.vector_DeepFoundation_rend)
    clear = _swig_new_instance_method(_OpenLxApp.vector_DeepFoundation_clear)
    get_allocator = _swig_new_instance_method(_OpenLxApp.vector_DeepFoundation_get_allocator)
    pop_back = _swig_new_instance_method(_OpenLxApp.vector_DeepFoundation_pop_back)
    erase = _swig_new_instance_method(_OpenLxApp.vector_DeepFoundation_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_DeepFoundation self) -> vector_DeepFoundation
        __init__(vector_DeepFoundation self, vector_DeepFoundation other) -> vector_DeepFoundation
        __init__(vector_DeepFoundation self, std::vector< std::shared_ptr< OpenLxApp::DeepFoundation > >::size_type size) -> vector_DeepFoundation
        __init__(vector_DeepFoundation self, std::vector< std::shared_ptr< OpenLxApp::DeepFoundation > >::size_type size, std::vector< std::shared_ptr< OpenLxApp::DeepFoundation > >::value_type const & value) -> vector_DeepFoundation
        """
        _OpenLxApp.vector_DeepFoundation_swiginit(self, _OpenLxApp.new_vector_DeepFoundation(*args))
    push_back = _swig_new_instance_method(_OpenLxApp.vector_DeepFoundation_push_back)
    front = _swig_new_instance_method(_OpenLxApp.vector_DeepFoundation_front)
    back = _swig_new_instance_method(_OpenLxApp.vector_DeepFoundation_back)
    assign = _swig_new_instance_method(_OpenLxApp.vector_DeepFoundation_assign)
    resize = _swig_new_instance_method(_OpenLxApp.vector_DeepFoundation_resize)
    insert = _swig_new_instance_method(_OpenLxApp.vector_DeepFoundation_insert)
    reserve = _swig_new_instance_method(_OpenLxApp.vector_DeepFoundation_reserve)
    capacity = _swig_new_instance_method(_OpenLxApp.vector_DeepFoundation_capacity)
    __swig_destroy__ = _OpenLxApp.delete_vector_DeepFoundation

# Register vector_DeepFoundation in _OpenLxApp:
_OpenLxApp.vector_DeepFoundation_swigregister(vector_DeepFoundation)
class vector_DiscreteAccessory(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< OpenLxApp::DiscreteAccessory > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_OpenLxApp.vector_DiscreteAccessory_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_OpenLxApp.vector_DiscreteAccessory___nonzero__)
    __bool__ = _swig_new_instance_method(_OpenLxApp.vector_DiscreteAccessory___bool__)
    __len__ = _swig_new_instance_method(_OpenLxApp.vector_DiscreteAccessory___len__)
    __getslice__ = _swig_new_instance_method(_OpenLxApp.vector_DiscreteAccessory___getslice__)
    __setslice__ = _swig_new_instance_method(_OpenLxApp.vector_DiscreteAccessory___setslice__)
    __delslice__ = _swig_new_instance_method(_OpenLxApp.vector_DiscreteAccessory___delslice__)
    __delitem__ = _swig_new_instance_method(_OpenLxApp.vector_DiscreteAccessory___delitem__)
    __getitem__ = _swig_new_instance_method(_OpenLxApp.vector_DiscreteAccessory___getitem__)
    __setitem__ = _swig_new_instance_method(_OpenLxApp.vector_DiscreteAccessory___setitem__)
    pop = _swig_new_instance_method(_OpenLxApp.vector_DiscreteAccessory_pop)
    append = _swig_new_instance_method(_OpenLxApp.vector_DiscreteAccessory_append)
    empty = _swig_new_instance_method(_OpenLxApp.vector_DiscreteAccessory_empty)
    size = _swig_new_instance_method(_OpenLxApp.vector_DiscreteAccessory_size)
    swap = _swig_new_instance_method(_OpenLxApp.vector_DiscreteAccessory_swap)
    begin = _swig_new_instance_method(_OpenLxApp.vector_DiscreteAccessory_begin)
    end = _swig_new_instance_method(_OpenLxApp.vector_DiscreteAccessory_end)
    rbegin = _swig_new_instance_method(_OpenLxApp.vector_DiscreteAccessory_rbegin)
    rend = _swig_new_instance_method(_OpenLxApp.vector_DiscreteAccessory_rend)
    clear = _swig_new_instance_method(_OpenLxApp.vector_DiscreteAccessory_clear)
    get_allocator = _swig_new_instance_method(_OpenLxApp.vector_DiscreteAccessory_get_allocator)
    pop_back = _swig_new_instance_method(_OpenLxApp.vector_DiscreteAccessory_pop_back)
    erase = _swig_new_instance_method(_OpenLxApp.vector_DiscreteAccessory_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_DiscreteAccessory self) -> vector_DiscreteAccessory
        __init__(vector_DiscreteAccessory self, vector_DiscreteAccessory other) -> vector_DiscreteAccessory
        __init__(vector_DiscreteAccessory self, std::vector< std::shared_ptr< OpenLxApp::DiscreteAccessory > >::size_type size) -> vector_DiscreteAccessory
        __init__(vector_DiscreteAccessory self, std::vector< std::shared_ptr< OpenLxApp::DiscreteAccessory > >::size_type size, std::vector< std::shared_ptr< OpenLxApp::DiscreteAccessory > >::value_type const & value) -> vector_DiscreteAccessory
        """
        _OpenLxApp.vector_DiscreteAccessory_swiginit(self, _OpenLxApp.new_vector_DiscreteAccessory(*args))
    push_back = _swig_new_instance_method(_OpenLxApp.vector_DiscreteAccessory_push_back)
    front = _swig_new_instance_method(_OpenLxApp.vector_DiscreteAccessory_front)
    back = _swig_new_instance_method(_OpenLxApp.vector_DiscreteAccessory_back)
    assign = _swig_new_instance_method(_OpenLxApp.vector_DiscreteAccessory_assign)
    resize = _swig_new_instance_method(_OpenLxApp.vector_DiscreteAccessory_resize)
    insert = _swig_new_instance_method(_OpenLxApp.vector_DiscreteAccessory_insert)
    reserve = _swig_new_instance_method(_OpenLxApp.vector_DiscreteAccessory_reserve)
    capacity = _swig_new_instance_method(_OpenLxApp.vector_DiscreteAccessory_capacity)
    __swig_destroy__ = _OpenLxApp.delete_vector_DiscreteAccessory

# Register vector_DiscreteAccessory in _OpenLxApp:
_OpenLxApp.vector_DiscreteAccessory_swigregister(vector_DiscreteAccessory)
class vector_DistributionChamberElement(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< OpenLxApp::DistributionChamberElement > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_OpenLxApp.vector_DistributionChamberElement_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_OpenLxApp.vector_DistributionChamberElement___nonzero__)
    __bool__ = _swig_new_instance_method(_OpenLxApp.vector_DistributionChamberElement___bool__)
    __len__ = _swig_new_instance_method(_OpenLxApp.vector_DistributionChamberElement___len__)
    __getslice__ = _swig_new_instance_method(_OpenLxApp.vector_DistributionChamberElement___getslice__)
    __setslice__ = _swig_new_instance_method(_OpenLxApp.vector_DistributionChamberElement___setslice__)
    __delslice__ = _swig_new_instance_method(_OpenLxApp.vector_DistributionChamberElement___delslice__)
    __delitem__ = _swig_new_instance_method(_OpenLxApp.vector_DistributionChamberElement___delitem__)
    __getitem__ = _swig_new_instance_method(_OpenLxApp.vector_DistributionChamberElement___getitem__)
    __setitem__ = _swig_new_instance_method(_OpenLxApp.vector_DistributionChamberElement___setitem__)
    pop = _swig_new_instance_method(_OpenLxApp.vector_DistributionChamberElement_pop)
    append = _swig_new_instance_method(_OpenLxApp.vector_DistributionChamberElement_append)
    empty = _swig_new_instance_method(_OpenLxApp.vector_DistributionChamberElement_empty)
    size = _swig_new_instance_method(_OpenLxApp.vector_DistributionChamberElement_size)
    swap = _swig_new_instance_method(_OpenLxApp.vector_DistributionChamberElement_swap)
    begin = _swig_new_instance_method(_OpenLxApp.vector_DistributionChamberElement_begin)
    end = _swig_new_instance_method(_OpenLxApp.vector_DistributionChamberElement_end)
    rbegin = _swig_new_instance_method(_OpenLxApp.vector_DistributionChamberElement_rbegin)
    rend = _swig_new_instance_method(_OpenLxApp.vector_DistributionChamberElement_rend)
    clear = _swig_new_instance_method(_OpenLxApp.vector_DistributionChamberElement_clear)
    get_allocator = _swig_new_instance_method(_OpenLxApp.vector_DistributionChamberElement_get_allocator)
    pop_back = _swig_new_instance_method(_OpenLxApp.vector_DistributionChamberElement_pop_back)
    erase = _swig_new_instance_method(_OpenLxApp.vector_DistributionChamberElement_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_DistributionChamberElement self) -> vector_DistributionChamberElement
        __init__(vector_DistributionChamberElement self, vector_DistributionChamberElement other) -> vector_DistributionChamberElement
        __init__(vector_DistributionChamberElement self, std::vector< std::shared_ptr< OpenLxApp::DistributionChamberElement > >::size_type size) -> vector_DistributionChamberElement
        __init__(vector_DistributionChamberElement self, std::vector< std::shared_ptr< OpenLxApp::DistributionChamberElement > >::size_type size, std::vector< std::shared_ptr< OpenLxApp::DistributionChamberElement > >::value_type const & value) -> vector_DistributionChamberElement
        """
        _OpenLxApp.vector_DistributionChamberElement_swiginit(self, _OpenLxApp.new_vector_DistributionChamberElement(*args))
    push_back = _swig_new_instance_method(_OpenLxApp.vector_DistributionChamberElement_push_back)
    front = _swig_new_instance_method(_OpenLxApp.vector_DistributionChamberElement_front)
    back = _swig_new_instance_method(_OpenLxApp.vector_DistributionChamberElement_back)
    assign = _swig_new_instance_method(_OpenLxApp.vector_DistributionChamberElement_assign)
    resize = _swig_new_instance_method(_OpenLxApp.vector_DistributionChamberElement_resize)
    insert = _swig_new_instance_method(_OpenLxApp.vector_DistributionChamberElement_insert)
    reserve = _swig_new_instance_method(_OpenLxApp.vector_DistributionChamberElement_reserve)
    capacity = _swig_new_instance_method(_OpenLxApp.vector_DistributionChamberElement_capacity)
    __swig_destroy__ = _OpenLxApp.delete_vector_DistributionChamberElement

# Register vector_DistributionChamberElement in _OpenLxApp:
_OpenLxApp.vector_DistributionChamberElement_swigregister(vector_DistributionChamberElement)
class vector_DistributionElement(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< OpenLxApp::DistributionElement > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_OpenLxApp.vector_DistributionElement_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_OpenLxApp.vector_DistributionElement___nonzero__)
    __bool__ = _swig_new_instance_method(_OpenLxApp.vector_DistributionElement___bool__)
    __len__ = _swig_new_instance_method(_OpenLxApp.vector_DistributionElement___len__)
    __getslice__ = _swig_new_instance_method(_OpenLxApp.vector_DistributionElement___getslice__)
    __setslice__ = _swig_new_instance_method(_OpenLxApp.vector_DistributionElement___setslice__)
    __delslice__ = _swig_new_instance_method(_OpenLxApp.vector_DistributionElement___delslice__)
    __delitem__ = _swig_new_instance_method(_OpenLxApp.vector_DistributionElement___delitem__)
    __getitem__ = _swig_new_instance_method(_OpenLxApp.vector_DistributionElement___getitem__)
    __setitem__ = _swig_new_instance_method(_OpenLxApp.vector_DistributionElement___setitem__)
    pop = _swig_new_instance_method(_OpenLxApp.vector_DistributionElement_pop)
    append = _swig_new_instance_method(_OpenLxApp.vector_DistributionElement_append)
    empty = _swig_new_instance_method(_OpenLxApp.vector_DistributionElement_empty)
    size = _swig_new_instance_method(_OpenLxApp.vector_DistributionElement_size)
    swap = _swig_new_instance_method(_OpenLxApp.vector_DistributionElement_swap)
    begin = _swig_new_instance_method(_OpenLxApp.vector_DistributionElement_begin)
    end = _swig_new_instance_method(_OpenLxApp.vector_DistributionElement_end)
    rbegin = _swig_new_instance_method(_OpenLxApp.vector_DistributionElement_rbegin)
    rend = _swig_new_instance_method(_OpenLxApp.vector_DistributionElement_rend)
    clear = _swig_new_instance_method(_OpenLxApp.vector_DistributionElement_clear)
    get_allocator = _swig_new_instance_method(_OpenLxApp.vector_DistributionElement_get_allocator)
    pop_back = _swig_new_instance_method(_OpenLxApp.vector_DistributionElement_pop_back)
    erase = _swig_new_instance_method(_OpenLxApp.vector_DistributionElement_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_DistributionElement self) -> vector_DistributionElement
        __init__(vector_DistributionElement self, vector_DistributionElement other) -> vector_DistributionElement
        __init__(vector_DistributionElement self, std::vector< std::shared_ptr< OpenLxApp::DistributionElement > >::size_type size) -> vector_DistributionElement
        __init__(vector_DistributionElement self, std::vector< std::shared_ptr< OpenLxApp::DistributionElement > >::size_type size, std::vector< std::shared_ptr< OpenLxApp::DistributionElement > >::value_type const & value) -> vector_DistributionElement
        """
        _OpenLxApp.vector_DistributionElement_swiginit(self, _OpenLxApp.new_vector_DistributionElement(*args))
    push_back = _swig_new_instance_method(_OpenLxApp.vector_DistributionElement_push_back)
    front = _swig_new_instance_method(_OpenLxApp.vector_DistributionElement_front)
    back = _swig_new_instance_method(_OpenLxApp.vector_DistributionElement_back)
    assign = _swig_new_instance_method(_OpenLxApp.vector_DistributionElement_assign)
    resize = _swig_new_instance_method(_OpenLxApp.vector_DistributionElement_resize)
    insert = _swig_new_instance_method(_OpenLxApp.vector_DistributionElement_insert)
    reserve = _swig_new_instance_method(_OpenLxApp.vector_DistributionElement_reserve)
    capacity = _swig_new_instance_method(_OpenLxApp.vector_DistributionElement_capacity)
    __swig_destroy__ = _OpenLxApp.delete_vector_DistributionElement

# Register vector_DistributionElement in _OpenLxApp:
_OpenLxApp.vector_DistributionElement_swigregister(vector_DistributionElement)
class vector_DistributionFlowElement(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< OpenLxApp::DistributionFlowElement > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_OpenLxApp.vector_DistributionFlowElement_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_OpenLxApp.vector_DistributionFlowElement___nonzero__)
    __bool__ = _swig_new_instance_method(_OpenLxApp.vector_DistributionFlowElement___bool__)
    __len__ = _swig_new_instance_method(_OpenLxApp.vector_DistributionFlowElement___len__)
    __getslice__ = _swig_new_instance_method(_OpenLxApp.vector_DistributionFlowElement___getslice__)
    __setslice__ = _swig_new_instance_method(_OpenLxApp.vector_DistributionFlowElement___setslice__)
    __delslice__ = _swig_new_instance_method(_OpenLxApp.vector_DistributionFlowElement___delslice__)
    __delitem__ = _swig_new_instance_method(_OpenLxApp.vector_DistributionFlowElement___delitem__)
    __getitem__ = _swig_new_instance_method(_OpenLxApp.vector_DistributionFlowElement___getitem__)
    __setitem__ = _swig_new_instance_method(_OpenLxApp.vector_DistributionFlowElement___setitem__)
    pop = _swig_new_instance_method(_OpenLxApp.vector_DistributionFlowElement_pop)
    append = _swig_new_instance_method(_OpenLxApp.vector_DistributionFlowElement_append)
    empty = _swig_new_instance_method(_OpenLxApp.vector_DistributionFlowElement_empty)
    size = _swig_new_instance_method(_OpenLxApp.vector_DistributionFlowElement_size)
    swap = _swig_new_instance_method(_OpenLxApp.vector_DistributionFlowElement_swap)
    begin = _swig_new_instance_method(_OpenLxApp.vector_DistributionFlowElement_begin)
    end = _swig_new_instance_method(_OpenLxApp.vector_DistributionFlowElement_end)
    rbegin = _swig_new_instance_method(_OpenLxApp.vector_DistributionFlowElement_rbegin)
    rend = _swig_new_instance_method(_OpenLxApp.vector_DistributionFlowElement_rend)
    clear = _swig_new_instance_method(_OpenLxApp.vector_DistributionFlowElement_clear)
    get_allocator = _swig_new_instance_method(_OpenLxApp.vector_DistributionFlowElement_get_allocator)
    pop_back = _swig_new_instance_method(_OpenLxApp.vector_DistributionFlowElement_pop_back)
    erase = _swig_new_instance_method(_OpenLxApp.vector_DistributionFlowElement_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_DistributionFlowElement self) -> vector_DistributionFlowElement
        __init__(vector_DistributionFlowElement self, vector_DistributionFlowElement other) -> vector_DistributionFlowElement
        __init__(vector_DistributionFlowElement self, std::vector< std::shared_ptr< OpenLxApp::DistributionFlowElement > >::size_type size) -> vector_DistributionFlowElement
        __init__(vector_DistributionFlowElement self, std::vector< std::shared_ptr< OpenLxApp::DistributionFlowElement > >::size_type size, std::vector< std::shared_ptr< OpenLxApp::DistributionFlowElement > >::value_type const & value) -> vector_DistributionFlowElement
        """
        _OpenLxApp.vector_DistributionFlowElement_swiginit(self, _OpenLxApp.new_vector_DistributionFlowElement(*args))
    push_back = _swig_new_instance_method(_OpenLxApp.vector_DistributionFlowElement_push_back)
    front = _swig_new_instance_method(_OpenLxApp.vector_DistributionFlowElement_front)
    back = _swig_new_instance_method(_OpenLxApp.vector_DistributionFlowElement_back)
    assign = _swig_new_instance_method(_OpenLxApp.vector_DistributionFlowElement_assign)
    resize = _swig_new_instance_method(_OpenLxApp.vector_DistributionFlowElement_resize)
    insert = _swig_new_instance_method(_OpenLxApp.vector_DistributionFlowElement_insert)
    reserve = _swig_new_instance_method(_OpenLxApp.vector_DistributionFlowElement_reserve)
    capacity = _swig_new_instance_method(_OpenLxApp.vector_DistributionFlowElement_capacity)
    __swig_destroy__ = _OpenLxApp.delete_vector_DistributionFlowElement

# Register vector_DistributionFlowElement in _OpenLxApp:
_OpenLxApp.vector_DistributionFlowElement_swigregister(vector_DistributionFlowElement)
class vector_DistributionPort(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< OpenLxApp::DistributionPort > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_OpenLxApp.vector_DistributionPort_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_OpenLxApp.vector_DistributionPort___nonzero__)
    __bool__ = _swig_new_instance_method(_OpenLxApp.vector_DistributionPort___bool__)
    __len__ = _swig_new_instance_method(_OpenLxApp.vector_DistributionPort___len__)
    __getslice__ = _swig_new_instance_method(_OpenLxApp.vector_DistributionPort___getslice__)
    __setslice__ = _swig_new_instance_method(_OpenLxApp.vector_DistributionPort___setslice__)
    __delslice__ = _swig_new_instance_method(_OpenLxApp.vector_DistributionPort___delslice__)
    __delitem__ = _swig_new_instance_method(_OpenLxApp.vector_DistributionPort___delitem__)
    __getitem__ = _swig_new_instance_method(_OpenLxApp.vector_DistributionPort___getitem__)
    __setitem__ = _swig_new_instance_method(_OpenLxApp.vector_DistributionPort___setitem__)
    pop = _swig_new_instance_method(_OpenLxApp.vector_DistributionPort_pop)
    append = _swig_new_instance_method(_OpenLxApp.vector_DistributionPort_append)
    empty = _swig_new_instance_method(_OpenLxApp.vector_DistributionPort_empty)
    size = _swig_new_instance_method(_OpenLxApp.vector_DistributionPort_size)
    swap = _swig_new_instance_method(_OpenLxApp.vector_DistributionPort_swap)
    begin = _swig_new_instance_method(_OpenLxApp.vector_DistributionPort_begin)
    end = _swig_new_instance_method(_OpenLxApp.vector_DistributionPort_end)
    rbegin = _swig_new_instance_method(_OpenLxApp.vector_DistributionPort_rbegin)
    rend = _swig_new_instance_method(_OpenLxApp.vector_DistributionPort_rend)
    clear = _swig_new_instance_method(_OpenLxApp.vector_DistributionPort_clear)
    get_allocator = _swig_new_instance_method(_OpenLxApp.vector_DistributionPort_get_allocator)
    pop_back = _swig_new_instance_method(_OpenLxApp.vector_DistributionPort_pop_back)
    erase = _swig_new_instance_method(_OpenLxApp.vector_DistributionPort_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_DistributionPort self) -> vector_DistributionPort
        __init__(vector_DistributionPort self, vector_DistributionPort other) -> vector_DistributionPort
        __init__(vector_DistributionPort self, std::vector< std::shared_ptr< OpenLxApp::DistributionPort > >::size_type size) -> vector_DistributionPort
        __init__(vector_DistributionPort self, std::vector< std::shared_ptr< OpenLxApp::DistributionPort > >::size_type size, std::vector< std::shared_ptr< OpenLxApp::DistributionPort > >::value_type const & value) -> vector_DistributionPort
        """
        _OpenLxApp.vector_DistributionPort_swiginit(self, _OpenLxApp.new_vector_DistributionPort(*args))
    push_back = _swig_new_instance_method(_OpenLxApp.vector_DistributionPort_push_back)
    front = _swig_new_instance_method(_OpenLxApp.vector_DistributionPort_front)
    back = _swig_new_instance_method(_OpenLxApp.vector_DistributionPort_back)
    assign = _swig_new_instance_method(_OpenLxApp.vector_DistributionPort_assign)
    resize = _swig_new_instance_method(_OpenLxApp.vector_DistributionPort_resize)
    insert = _swig_new_instance_method(_OpenLxApp.vector_DistributionPort_insert)
    reserve = _swig_new_instance_method(_OpenLxApp.vector_DistributionPort_reserve)
    capacity = _swig_new_instance_method(_OpenLxApp.vector_DistributionPort_capacity)
    __swig_destroy__ = _OpenLxApp.delete_vector_DistributionPort

# Register vector_DistributionPort in _OpenLxApp:
_OpenLxApp.vector_DistributionPort_swigregister(vector_DistributionPort)
class vector_Document(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< OpenLxApp::Document > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_OpenLxApp.vector_Document_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_OpenLxApp.vector_Document___nonzero__)
    __bool__ = _swig_new_instance_method(_OpenLxApp.vector_Document___bool__)
    __len__ = _swig_new_instance_method(_OpenLxApp.vector_Document___len__)
    __getslice__ = _swig_new_instance_method(_OpenLxApp.vector_Document___getslice__)
    __setslice__ = _swig_new_instance_method(_OpenLxApp.vector_Document___setslice__)
    __delslice__ = _swig_new_instance_method(_OpenLxApp.vector_Document___delslice__)
    __delitem__ = _swig_new_instance_method(_OpenLxApp.vector_Document___delitem__)
    __getitem__ = _swig_new_instance_method(_OpenLxApp.vector_Document___getitem__)
    __setitem__ = _swig_new_instance_method(_OpenLxApp.vector_Document___setitem__)
    pop = _swig_new_instance_method(_OpenLxApp.vector_Document_pop)
    append = _swig_new_instance_method(_OpenLxApp.vector_Document_append)
    empty = _swig_new_instance_method(_OpenLxApp.vector_Document_empty)
    size = _swig_new_instance_method(_OpenLxApp.vector_Document_size)
    swap = _swig_new_instance_method(_OpenLxApp.vector_Document_swap)
    begin = _swig_new_instance_method(_OpenLxApp.vector_Document_begin)
    end = _swig_new_instance_method(_OpenLxApp.vector_Document_end)
    rbegin = _swig_new_instance_method(_OpenLxApp.vector_Document_rbegin)
    rend = _swig_new_instance_method(_OpenLxApp.vector_Document_rend)
    clear = _swig_new_instance_method(_OpenLxApp.vector_Document_clear)
    get_allocator = _swig_new_instance_method(_OpenLxApp.vector_Document_get_allocator)
    pop_back = _swig_new_instance_method(_OpenLxApp.vector_Document_pop_back)
    erase = _swig_new_instance_method(_OpenLxApp.vector_Document_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_Document self) -> vector_Document
        __init__(vector_Document self, vector_Document other) -> vector_Document
        __init__(vector_Document self, std::vector< std::shared_ptr< OpenLxApp::Document > >::size_type size) -> vector_Document
        __init__(vector_Document self, std::vector< std::shared_ptr< OpenLxApp::Document > >::size_type size, std::vector< std::shared_ptr< OpenLxApp::Document > >::value_type const & value) -> vector_Document
        """
        _OpenLxApp.vector_Document_swiginit(self, _OpenLxApp.new_vector_Document(*args))
    push_back = _swig_new_instance_method(_OpenLxApp.vector_Document_push_back)
    front = _swig_new_instance_method(_OpenLxApp.vector_Document_front)
    back = _swig_new_instance_method(_OpenLxApp.vector_Document_back)
    assign = _swig_new_instance_method(_OpenLxApp.vector_Document_assign)
    resize = _swig_new_instance_method(_OpenLxApp.vector_Document_resize)
    insert = _swig_new_instance_method(_OpenLxApp.vector_Document_insert)
    reserve = _swig_new_instance_method(_OpenLxApp.vector_Document_reserve)
    capacity = _swig_new_instance_method(_OpenLxApp.vector_Document_capacity)
    __swig_destroy__ = _OpenLxApp.delete_vector_Document

# Register vector_Document in _OpenLxApp:
_OpenLxApp.vector_Document_swigregister(vector_Document)
class vector_Door(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< OpenLxApp::Door > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_OpenLxApp.vector_Door_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_OpenLxApp.vector_Door___nonzero__)
    __bool__ = _swig_new_instance_method(_OpenLxApp.vector_Door___bool__)
    __len__ = _swig_new_instance_method(_OpenLxApp.vector_Door___len__)
    __getslice__ = _swig_new_instance_method(_OpenLxApp.vector_Door___getslice__)
    __setslice__ = _swig_new_instance_method(_OpenLxApp.vector_Door___setslice__)
    __delslice__ = _swig_new_instance_method(_OpenLxApp.vector_Door___delslice__)
    __delitem__ = _swig_new_instance_method(_OpenLxApp.vector_Door___delitem__)
    __getitem__ = _swig_new_instance_method(_OpenLxApp.vector_Door___getitem__)
    __setitem__ = _swig_new_instance_method(_OpenLxApp.vector_Door___setitem__)
    pop = _swig_new_instance_method(_OpenLxApp.vector_Door_pop)
    append = _swig_new_instance_method(_OpenLxApp.vector_Door_append)
    empty = _swig_new_instance_method(_OpenLxApp.vector_Door_empty)
    size = _swig_new_instance_method(_OpenLxApp.vector_Door_size)
    swap = _swig_new_instance_method(_OpenLxApp.vector_Door_swap)
    begin = _swig_new_instance_method(_OpenLxApp.vector_Door_begin)
    end = _swig_new_instance_method(_OpenLxApp.vector_Door_end)
    rbegin = _swig_new_instance_method(_OpenLxApp.vector_Door_rbegin)
    rend = _swig_new_instance_method(_OpenLxApp.vector_Door_rend)
    clear = _swig_new_instance_method(_OpenLxApp.vector_Door_clear)
    get_allocator = _swig_new_instance_method(_OpenLxApp.vector_Door_get_allocator)
    pop_back = _swig_new_instance_method(_OpenLxApp.vector_Door_pop_back)
    erase = _swig_new_instance_method(_OpenLxApp.vector_Door_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_Door self) -> vector_Door
        __init__(vector_Door self, vector_Door other) -> vector_Door
        __init__(vector_Door self, std::vector< std::shared_ptr< OpenLxApp::Door > >::size_type size) -> vector_Door
        __init__(vector_Door self, std::vector< std::shared_ptr< OpenLxApp::Door > >::size_type size, std::vector< std::shared_ptr< OpenLxApp::Door > >::value_type const & value) -> vector_Door
        """
        _OpenLxApp.vector_Door_swiginit(self, _OpenLxApp.new_vector_Door(*args))
    push_back = _swig_new_instance_method(_OpenLxApp.vector_Door_push_back)
    front = _swig_new_instance_method(_OpenLxApp.vector_Door_front)
    back = _swig_new_instance_method(_OpenLxApp.vector_Door_back)
    assign = _swig_new_instance_method(_OpenLxApp.vector_Door_assign)
    resize = _swig_new_instance_method(_OpenLxApp.vector_Door_resize)
    insert = _swig_new_instance_method(_OpenLxApp.vector_Door_insert)
    reserve = _swig_new_instance_method(_OpenLxApp.vector_Door_reserve)
    capacity = _swig_new_instance_method(_OpenLxApp.vector_Door_capacity)
    __swig_destroy__ = _OpenLxApp.delete_vector_Door

# Register vector_Door in _OpenLxApp:
_OpenLxApp.vector_Door_swigregister(vector_Door)
class vector_DoorStandardCase(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< OpenLxApp::DoorStandardCase > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_OpenLxApp.vector_DoorStandardCase_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_OpenLxApp.vector_DoorStandardCase___nonzero__)
    __bool__ = _swig_new_instance_method(_OpenLxApp.vector_DoorStandardCase___bool__)
    __len__ = _swig_new_instance_method(_OpenLxApp.vector_DoorStandardCase___len__)
    __getslice__ = _swig_new_instance_method(_OpenLxApp.vector_DoorStandardCase___getslice__)
    __setslice__ = _swig_new_instance_method(_OpenLxApp.vector_DoorStandardCase___setslice__)
    __delslice__ = _swig_new_instance_method(_OpenLxApp.vector_DoorStandardCase___delslice__)
    __delitem__ = _swig_new_instance_method(_OpenLxApp.vector_DoorStandardCase___delitem__)
    __getitem__ = _swig_new_instance_method(_OpenLxApp.vector_DoorStandardCase___getitem__)
    __setitem__ = _swig_new_instance_method(_OpenLxApp.vector_DoorStandardCase___setitem__)
    pop = _swig_new_instance_method(_OpenLxApp.vector_DoorStandardCase_pop)
    append = _swig_new_instance_method(_OpenLxApp.vector_DoorStandardCase_append)
    empty = _swig_new_instance_method(_OpenLxApp.vector_DoorStandardCase_empty)
    size = _swig_new_instance_method(_OpenLxApp.vector_DoorStandardCase_size)
    swap = _swig_new_instance_method(_OpenLxApp.vector_DoorStandardCase_swap)
    begin = _swig_new_instance_method(_OpenLxApp.vector_DoorStandardCase_begin)
    end = _swig_new_instance_method(_OpenLxApp.vector_DoorStandardCase_end)
    rbegin = _swig_new_instance_method(_OpenLxApp.vector_DoorStandardCase_rbegin)
    rend = _swig_new_instance_method(_OpenLxApp.vector_DoorStandardCase_rend)
    clear = _swig_new_instance_method(_OpenLxApp.vector_DoorStandardCase_clear)
    get_allocator = _swig_new_instance_method(_OpenLxApp.vector_DoorStandardCase_get_allocator)
    pop_back = _swig_new_instance_method(_OpenLxApp.vector_DoorStandardCase_pop_back)
    erase = _swig_new_instance_method(_OpenLxApp.vector_DoorStandardCase_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_DoorStandardCase self) -> vector_DoorStandardCase
        __init__(vector_DoorStandardCase self, vector_DoorStandardCase other) -> vector_DoorStandardCase
        __init__(vector_DoorStandardCase self, std::vector< std::shared_ptr< OpenLxApp::DoorStandardCase > >::size_type size) -> vector_DoorStandardCase
        __init__(vector_DoorStandardCase self, std::vector< std::shared_ptr< OpenLxApp::DoorStandardCase > >::size_type size, std::vector< std::shared_ptr< OpenLxApp::DoorStandardCase > >::value_type const & value) -> vector_DoorStandardCase
        """
        _OpenLxApp.vector_DoorStandardCase_swiginit(self, _OpenLxApp.new_vector_DoorStandardCase(*args))
    push_back = _swig_new_instance_method(_OpenLxApp.vector_DoorStandardCase_push_back)
    front = _swig_new_instance_method(_OpenLxApp.vector_DoorStandardCase_front)
    back = _swig_new_instance_method(_OpenLxApp.vector_DoorStandardCase_back)
    assign = _swig_new_instance_method(_OpenLxApp.vector_DoorStandardCase_assign)
    resize = _swig_new_instance_method(_OpenLxApp.vector_DoorStandardCase_resize)
    insert = _swig_new_instance_method(_OpenLxApp.vector_DoorStandardCase_insert)
    reserve = _swig_new_instance_method(_OpenLxApp.vector_DoorStandardCase_reserve)
    capacity = _swig_new_instance_method(_OpenLxApp.vector_DoorStandardCase_capacity)
    __swig_destroy__ = _OpenLxApp.delete_vector_DoorStandardCase

# Register vector_DoorStandardCase in _OpenLxApp:
_OpenLxApp.vector_DoorStandardCase_swigregister(vector_DoorStandardCase)
class vector_DuctSegment(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< OpenLxApp::DuctSegment > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_OpenLxApp.vector_DuctSegment_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_OpenLxApp.vector_DuctSegment___nonzero__)
    __bool__ = _swig_new_instance_method(_OpenLxApp.vector_DuctSegment___bool__)
    __len__ = _swig_new_instance_method(_OpenLxApp.vector_DuctSegment___len__)
    __getslice__ = _swig_new_instance_method(_OpenLxApp.vector_DuctSegment___getslice__)
    __setslice__ = _swig_new_instance_method(_OpenLxApp.vector_DuctSegment___setslice__)
    __delslice__ = _swig_new_instance_method(_OpenLxApp.vector_DuctSegment___delslice__)
    __delitem__ = _swig_new_instance_method(_OpenLxApp.vector_DuctSegment___delitem__)
    __getitem__ = _swig_new_instance_method(_OpenLxApp.vector_DuctSegment___getitem__)
    __setitem__ = _swig_new_instance_method(_OpenLxApp.vector_DuctSegment___setitem__)
    pop = _swig_new_instance_method(_OpenLxApp.vector_DuctSegment_pop)
    append = _swig_new_instance_method(_OpenLxApp.vector_DuctSegment_append)
    empty = _swig_new_instance_method(_OpenLxApp.vector_DuctSegment_empty)
    size = _swig_new_instance_method(_OpenLxApp.vector_DuctSegment_size)
    swap = _swig_new_instance_method(_OpenLxApp.vector_DuctSegment_swap)
    begin = _swig_new_instance_method(_OpenLxApp.vector_DuctSegment_begin)
    end = _swig_new_instance_method(_OpenLxApp.vector_DuctSegment_end)
    rbegin = _swig_new_instance_method(_OpenLxApp.vector_DuctSegment_rbegin)
    rend = _swig_new_instance_method(_OpenLxApp.vector_DuctSegment_rend)
    clear = _swig_new_instance_method(_OpenLxApp.vector_DuctSegment_clear)
    get_allocator = _swig_new_instance_method(_OpenLxApp.vector_DuctSegment_get_allocator)
    pop_back = _swig_new_instance_method(_OpenLxApp.vector_DuctSegment_pop_back)
    erase = _swig_new_instance_method(_OpenLxApp.vector_DuctSegment_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_DuctSegment self) -> vector_DuctSegment
        __init__(vector_DuctSegment self, vector_DuctSegment other) -> vector_DuctSegment
        __init__(vector_DuctSegment self, std::vector< std::shared_ptr< OpenLxApp::DuctSegment > >::size_type size) -> vector_DuctSegment
        __init__(vector_DuctSegment self, std::vector< std::shared_ptr< OpenLxApp::DuctSegment > >::size_type size, std::vector< std::shared_ptr< OpenLxApp::DuctSegment > >::value_type const & value) -> vector_DuctSegment
        """
        _OpenLxApp.vector_DuctSegment_swiginit(self, _OpenLxApp.new_vector_DuctSegment(*args))
    push_back = _swig_new_instance_method(_OpenLxApp.vector_DuctSegment_push_back)
    front = _swig_new_instance_method(_OpenLxApp.vector_DuctSegment_front)
    back = _swig_new_instance_method(_OpenLxApp.vector_DuctSegment_back)
    assign = _swig_new_instance_method(_OpenLxApp.vector_DuctSegment_assign)
    resize = _swig_new_instance_method(_OpenLxApp.vector_DuctSegment_resize)
    insert = _swig_new_instance_method(_OpenLxApp.vector_DuctSegment_insert)
    reserve = _swig_new_instance_method(_OpenLxApp.vector_DuctSegment_reserve)
    capacity = _swig_new_instance_method(_OpenLxApp.vector_DuctSegment_capacity)
    __swig_destroy__ = _OpenLxApp.delete_vector_DuctSegment

# Register vector_DuctSegment in _OpenLxApp:
_OpenLxApp.vector_DuctSegment_swigregister(vector_DuctSegment)
class vector_EarthworksCut(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< OpenLxApp::EarthworksCut > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_OpenLxApp.vector_EarthworksCut_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_OpenLxApp.vector_EarthworksCut___nonzero__)
    __bool__ = _swig_new_instance_method(_OpenLxApp.vector_EarthworksCut___bool__)
    __len__ = _swig_new_instance_method(_OpenLxApp.vector_EarthworksCut___len__)
    __getslice__ = _swig_new_instance_method(_OpenLxApp.vector_EarthworksCut___getslice__)
    __setslice__ = _swig_new_instance_method(_OpenLxApp.vector_EarthworksCut___setslice__)
    __delslice__ = _swig_new_instance_method(_OpenLxApp.vector_EarthworksCut___delslice__)
    __delitem__ = _swig_new_instance_method(_OpenLxApp.vector_EarthworksCut___delitem__)
    __getitem__ = _swig_new_instance_method(_OpenLxApp.vector_EarthworksCut___getitem__)
    __setitem__ = _swig_new_instance_method(_OpenLxApp.vector_EarthworksCut___setitem__)
    pop = _swig_new_instance_method(_OpenLxApp.vector_EarthworksCut_pop)
    append = _swig_new_instance_method(_OpenLxApp.vector_EarthworksCut_append)
    empty = _swig_new_instance_method(_OpenLxApp.vector_EarthworksCut_empty)
    size = _swig_new_instance_method(_OpenLxApp.vector_EarthworksCut_size)
    swap = _swig_new_instance_method(_OpenLxApp.vector_EarthworksCut_swap)
    begin = _swig_new_instance_method(_OpenLxApp.vector_EarthworksCut_begin)
    end = _swig_new_instance_method(_OpenLxApp.vector_EarthworksCut_end)
    rbegin = _swig_new_instance_method(_OpenLxApp.vector_EarthworksCut_rbegin)
    rend = _swig_new_instance_method(_OpenLxApp.vector_EarthworksCut_rend)
    clear = _swig_new_instance_method(_OpenLxApp.vector_EarthworksCut_clear)
    get_allocator = _swig_new_instance_method(_OpenLxApp.vector_EarthworksCut_get_allocator)
    pop_back = _swig_new_instance_method(_OpenLxApp.vector_EarthworksCut_pop_back)
    erase = _swig_new_instance_method(_OpenLxApp.vector_EarthworksCut_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_EarthworksCut self) -> vector_EarthworksCut
        __init__(vector_EarthworksCut self, vector_EarthworksCut other) -> vector_EarthworksCut
        __init__(vector_EarthworksCut self, std::vector< std::shared_ptr< OpenLxApp::EarthworksCut > >::size_type size) -> vector_EarthworksCut
        __init__(vector_EarthworksCut self, std::vector< std::shared_ptr< OpenLxApp::EarthworksCut > >::size_type size, std::vector< std::shared_ptr< OpenLxApp::EarthworksCut > >::value_type const & value) -> vector_EarthworksCut
        """
        _OpenLxApp.vector_EarthworksCut_swiginit(self, _OpenLxApp.new_vector_EarthworksCut(*args))
    push_back = _swig_new_instance_method(_OpenLxApp.vector_EarthworksCut_push_back)
    front = _swig_new_instance_method(_OpenLxApp.vector_EarthworksCut_front)
    back = _swig_new_instance_method(_OpenLxApp.vector_EarthworksCut_back)
    assign = _swig_new_instance_method(_OpenLxApp.vector_EarthworksCut_assign)
    resize = _swig_new_instance_method(_OpenLxApp.vector_EarthworksCut_resize)
    insert = _swig_new_instance_method(_OpenLxApp.vector_EarthworksCut_insert)
    reserve = _swig_new_instance_method(_OpenLxApp.vector_EarthworksCut_reserve)
    capacity = _swig_new_instance_method(_OpenLxApp.vector_EarthworksCut_capacity)
    __swig_destroy__ = _OpenLxApp.delete_vector_EarthworksCut

# Register vector_EarthworksCut in _OpenLxApp:
_OpenLxApp.vector_EarthworksCut_swigregister(vector_EarthworksCut)
class vector_EarthworksFill(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< OpenLxApp::EarthworksFill > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_OpenLxApp.vector_EarthworksFill_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_OpenLxApp.vector_EarthworksFill___nonzero__)
    __bool__ = _swig_new_instance_method(_OpenLxApp.vector_EarthworksFill___bool__)
    __len__ = _swig_new_instance_method(_OpenLxApp.vector_EarthworksFill___len__)
    __getslice__ = _swig_new_instance_method(_OpenLxApp.vector_EarthworksFill___getslice__)
    __setslice__ = _swig_new_instance_method(_OpenLxApp.vector_EarthworksFill___setslice__)
    __delslice__ = _swig_new_instance_method(_OpenLxApp.vector_EarthworksFill___delslice__)
    __delitem__ = _swig_new_instance_method(_OpenLxApp.vector_EarthworksFill___delitem__)
    __getitem__ = _swig_new_instance_method(_OpenLxApp.vector_EarthworksFill___getitem__)
    __setitem__ = _swig_new_instance_method(_OpenLxApp.vector_EarthworksFill___setitem__)
    pop = _swig_new_instance_method(_OpenLxApp.vector_EarthworksFill_pop)
    append = _swig_new_instance_method(_OpenLxApp.vector_EarthworksFill_append)
    empty = _swig_new_instance_method(_OpenLxApp.vector_EarthworksFill_empty)
    size = _swig_new_instance_method(_OpenLxApp.vector_EarthworksFill_size)
    swap = _swig_new_instance_method(_OpenLxApp.vector_EarthworksFill_swap)
    begin = _swig_new_instance_method(_OpenLxApp.vector_EarthworksFill_begin)
    end = _swig_new_instance_method(_OpenLxApp.vector_EarthworksFill_end)
    rbegin = _swig_new_instance_method(_OpenLxApp.vector_EarthworksFill_rbegin)
    rend = _swig_new_instance_method(_OpenLxApp.vector_EarthworksFill_rend)
    clear = _swig_new_instance_method(_OpenLxApp.vector_EarthworksFill_clear)
    get_allocator = _swig_new_instance_method(_OpenLxApp.vector_EarthworksFill_get_allocator)
    pop_back = _swig_new_instance_method(_OpenLxApp.vector_EarthworksFill_pop_back)
    erase = _swig_new_instance_method(_OpenLxApp.vector_EarthworksFill_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_EarthworksFill self) -> vector_EarthworksFill
        __init__(vector_EarthworksFill self, vector_EarthworksFill other) -> vector_EarthworksFill
        __init__(vector_EarthworksFill self, std::vector< std::shared_ptr< OpenLxApp::EarthworksFill > >::size_type size) -> vector_EarthworksFill
        __init__(vector_EarthworksFill self, std::vector< std::shared_ptr< OpenLxApp::EarthworksFill > >::size_type size, std::vector< std::shared_ptr< OpenLxApp::EarthworksFill > >::value_type const & value) -> vector_EarthworksFill
        """
        _OpenLxApp.vector_EarthworksFill_swiginit(self, _OpenLxApp.new_vector_EarthworksFill(*args))
    push_back = _swig_new_instance_method(_OpenLxApp.vector_EarthworksFill_push_back)
    front = _swig_new_instance_method(_OpenLxApp.vector_EarthworksFill_front)
    back = _swig_new_instance_method(_OpenLxApp.vector_EarthworksFill_back)
    assign = _swig_new_instance_method(_OpenLxApp.vector_EarthworksFill_assign)
    resize = _swig_new_instance_method(_OpenLxApp.vector_EarthworksFill_resize)
    insert = _swig_new_instance_method(_OpenLxApp.vector_EarthworksFill_insert)
    reserve = _swig_new_instance_method(_OpenLxApp.vector_EarthworksFill_reserve)
    capacity = _swig_new_instance_method(_OpenLxApp.vector_EarthworksFill_capacity)
    __swig_destroy__ = _OpenLxApp.delete_vector_EarthworksFill

# Register vector_EarthworksFill in _OpenLxApp:
_OpenLxApp.vector_EarthworksFill_swigregister(vector_EarthworksFill)
class vector_Element(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< OpenLxApp::Element > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_OpenLxApp.vector_Element_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_OpenLxApp.vector_Element___nonzero__)
    __bool__ = _swig_new_instance_method(_OpenLxApp.vector_Element___bool__)
    __len__ = _swig_new_instance_method(_OpenLxApp.vector_Element___len__)
    __getslice__ = _swig_new_instance_method(_OpenLxApp.vector_Element___getslice__)
    __setslice__ = _swig_new_instance_method(_OpenLxApp.vector_Element___setslice__)
    __delslice__ = _swig_new_instance_method(_OpenLxApp.vector_Element___delslice__)
    __delitem__ = _swig_new_instance_method(_OpenLxApp.vector_Element___delitem__)
    __getitem__ = _swig_new_instance_method(_OpenLxApp.vector_Element___getitem__)
    __setitem__ = _swig_new_instance_method(_OpenLxApp.vector_Element___setitem__)
    pop = _swig_new_instance_method(_OpenLxApp.vector_Element_pop)
    append = _swig_new_instance_method(_OpenLxApp.vector_Element_append)
    empty = _swig_new_instance_method(_OpenLxApp.vector_Element_empty)
    size = _swig_new_instance_method(_OpenLxApp.vector_Element_size)
    swap = _swig_new_instance_method(_OpenLxApp.vector_Element_swap)
    begin = _swig_new_instance_method(_OpenLxApp.vector_Element_begin)
    end = _swig_new_instance_method(_OpenLxApp.vector_Element_end)
    rbegin = _swig_new_instance_method(_OpenLxApp.vector_Element_rbegin)
    rend = _swig_new_instance_method(_OpenLxApp.vector_Element_rend)
    clear = _swig_new_instance_method(_OpenLxApp.vector_Element_clear)
    get_allocator = _swig_new_instance_method(_OpenLxApp.vector_Element_get_allocator)
    pop_back = _swig_new_instance_method(_OpenLxApp.vector_Element_pop_back)
    erase = _swig_new_instance_method(_OpenLxApp.vector_Element_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_Element self) -> vector_Element
        __init__(vector_Element self, vector_Element other) -> vector_Element
        __init__(vector_Element self, std::vector< std::shared_ptr< OpenLxApp::Element > >::size_type size) -> vector_Element
        __init__(vector_Element self, std::vector< std::shared_ptr< OpenLxApp::Element > >::size_type size, std::vector< std::shared_ptr< OpenLxApp::Element > >::value_type const & value) -> vector_Element
        """
        _OpenLxApp.vector_Element_swiginit(self, _OpenLxApp.new_vector_Element(*args))
    push_back = _swig_new_instance_method(_OpenLxApp.vector_Element_push_back)
    front = _swig_new_instance_method(_OpenLxApp.vector_Element_front)
    back = _swig_new_instance_method(_OpenLxApp.vector_Element_back)
    assign = _swig_new_instance_method(_OpenLxApp.vector_Element_assign)
    resize = _swig_new_instance_method(_OpenLxApp.vector_Element_resize)
    insert = _swig_new_instance_method(_OpenLxApp.vector_Element_insert)
    reserve = _swig_new_instance_method(_OpenLxApp.vector_Element_reserve)
    capacity = _swig_new_instance_method(_OpenLxApp.vector_Element_capacity)
    __swig_destroy__ = _OpenLxApp.delete_vector_Element

# Register vector_Element in _OpenLxApp:
_OpenLxApp.vector_Element_swigregister(vector_Element)
class vector_ElementarySurface(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< OpenLxApp::ElementarySurface > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_OpenLxApp.vector_ElementarySurface_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_OpenLxApp.vector_ElementarySurface___nonzero__)
    __bool__ = _swig_new_instance_method(_OpenLxApp.vector_ElementarySurface___bool__)
    __len__ = _swig_new_instance_method(_OpenLxApp.vector_ElementarySurface___len__)
    __getslice__ = _swig_new_instance_method(_OpenLxApp.vector_ElementarySurface___getslice__)
    __setslice__ = _swig_new_instance_method(_OpenLxApp.vector_ElementarySurface___setslice__)
    __delslice__ = _swig_new_instance_method(_OpenLxApp.vector_ElementarySurface___delslice__)
    __delitem__ = _swig_new_instance_method(_OpenLxApp.vector_ElementarySurface___delitem__)
    __getitem__ = _swig_new_instance_method(_OpenLxApp.vector_ElementarySurface___getitem__)
    __setitem__ = _swig_new_instance_method(_OpenLxApp.vector_ElementarySurface___setitem__)
    pop = _swig_new_instance_method(_OpenLxApp.vector_ElementarySurface_pop)
    append = _swig_new_instance_method(_OpenLxApp.vector_ElementarySurface_append)
    empty = _swig_new_instance_method(_OpenLxApp.vector_ElementarySurface_empty)
    size = _swig_new_instance_method(_OpenLxApp.vector_ElementarySurface_size)
    swap = _swig_new_instance_method(_OpenLxApp.vector_ElementarySurface_swap)
    begin = _swig_new_instance_method(_OpenLxApp.vector_ElementarySurface_begin)
    end = _swig_new_instance_method(_OpenLxApp.vector_ElementarySurface_end)
    rbegin = _swig_new_instance_method(_OpenLxApp.vector_ElementarySurface_rbegin)
    rend = _swig_new_instance_method(_OpenLxApp.vector_ElementarySurface_rend)
    clear = _swig_new_instance_method(_OpenLxApp.vector_ElementarySurface_clear)
    get_allocator = _swig_new_instance_method(_OpenLxApp.vector_ElementarySurface_get_allocator)
    pop_back = _swig_new_instance_method(_OpenLxApp.vector_ElementarySurface_pop_back)
    erase = _swig_new_instance_method(_OpenLxApp.vector_ElementarySurface_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_ElementarySurface self) -> vector_ElementarySurface
        __init__(vector_ElementarySurface self, vector_ElementarySurface other) -> vector_ElementarySurface
        __init__(vector_ElementarySurface self, std::vector< std::shared_ptr< OpenLxApp::ElementarySurface > >::size_type size) -> vector_ElementarySurface
        __init__(vector_ElementarySurface self, std::vector< std::shared_ptr< OpenLxApp::ElementarySurface > >::size_type size, std::vector< std::shared_ptr< OpenLxApp::ElementarySurface > >::value_type const & value) -> vector_ElementarySurface
        """
        _OpenLxApp.vector_ElementarySurface_swiginit(self, _OpenLxApp.new_vector_ElementarySurface(*args))
    push_back = _swig_new_instance_method(_OpenLxApp.vector_ElementarySurface_push_back)
    front = _swig_new_instance_method(_OpenLxApp.vector_ElementarySurface_front)
    back = _swig_new_instance_method(_OpenLxApp.vector_ElementarySurface_back)
    assign = _swig_new_instance_method(_OpenLxApp.vector_ElementarySurface_assign)
    resize = _swig_new_instance_method(_OpenLxApp.vector_ElementarySurface_resize)
    insert = _swig_new_instance_method(_OpenLxApp.vector_ElementarySurface_insert)
    reserve = _swig_new_instance_method(_OpenLxApp.vector_ElementarySurface_reserve)
    capacity = _swig_new_instance_method(_OpenLxApp.vector_ElementarySurface_capacity)
    __swig_destroy__ = _OpenLxApp.delete_vector_ElementarySurface

# Register vector_ElementarySurface in _OpenLxApp:
_OpenLxApp.vector_ElementarySurface_swigregister(vector_ElementarySurface)
class vector_ElementAssembly(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< OpenLxApp::ElementAssembly > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_OpenLxApp.vector_ElementAssembly_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_OpenLxApp.vector_ElementAssembly___nonzero__)
    __bool__ = _swig_new_instance_method(_OpenLxApp.vector_ElementAssembly___bool__)
    __len__ = _swig_new_instance_method(_OpenLxApp.vector_ElementAssembly___len__)
    __getslice__ = _swig_new_instance_method(_OpenLxApp.vector_ElementAssembly___getslice__)
    __setslice__ = _swig_new_instance_method(_OpenLxApp.vector_ElementAssembly___setslice__)
    __delslice__ = _swig_new_instance_method(_OpenLxApp.vector_ElementAssembly___delslice__)
    __delitem__ = _swig_new_instance_method(_OpenLxApp.vector_ElementAssembly___delitem__)
    __getitem__ = _swig_new_instance_method(_OpenLxApp.vector_ElementAssembly___getitem__)
    __setitem__ = _swig_new_instance_method(_OpenLxApp.vector_ElementAssembly___setitem__)
    pop = _swig_new_instance_method(_OpenLxApp.vector_ElementAssembly_pop)
    append = _swig_new_instance_method(_OpenLxApp.vector_ElementAssembly_append)
    empty = _swig_new_instance_method(_OpenLxApp.vector_ElementAssembly_empty)
    size = _swig_new_instance_method(_OpenLxApp.vector_ElementAssembly_size)
    swap = _swig_new_instance_method(_OpenLxApp.vector_ElementAssembly_swap)
    begin = _swig_new_instance_method(_OpenLxApp.vector_ElementAssembly_begin)
    end = _swig_new_instance_method(_OpenLxApp.vector_ElementAssembly_end)
    rbegin = _swig_new_instance_method(_OpenLxApp.vector_ElementAssembly_rbegin)
    rend = _swig_new_instance_method(_OpenLxApp.vector_ElementAssembly_rend)
    clear = _swig_new_instance_method(_OpenLxApp.vector_ElementAssembly_clear)
    get_allocator = _swig_new_instance_method(_OpenLxApp.vector_ElementAssembly_get_allocator)
    pop_back = _swig_new_instance_method(_OpenLxApp.vector_ElementAssembly_pop_back)
    erase = _swig_new_instance_method(_OpenLxApp.vector_ElementAssembly_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_ElementAssembly self) -> vector_ElementAssembly
        __init__(vector_ElementAssembly self, vector_ElementAssembly other) -> vector_ElementAssembly
        __init__(vector_ElementAssembly self, std::vector< std::shared_ptr< OpenLxApp::ElementAssembly > >::size_type size) -> vector_ElementAssembly
        __init__(vector_ElementAssembly self, std::vector< std::shared_ptr< OpenLxApp::ElementAssembly > >::size_type size, std::vector< std::shared_ptr< OpenLxApp::ElementAssembly > >::value_type const & value) -> vector_ElementAssembly
        """
        _OpenLxApp.vector_ElementAssembly_swiginit(self, _OpenLxApp.new_vector_ElementAssembly(*args))
    push_back = _swig_new_instance_method(_OpenLxApp.vector_ElementAssembly_push_back)
    front = _swig_new_instance_method(_OpenLxApp.vector_ElementAssembly_front)
    back = _swig_new_instance_method(_OpenLxApp.vector_ElementAssembly_back)
    assign = _swig_new_instance_method(_OpenLxApp.vector_ElementAssembly_assign)
    resize = _swig_new_instance_method(_OpenLxApp.vector_ElementAssembly_resize)
    insert = _swig_new_instance_method(_OpenLxApp.vector_ElementAssembly_insert)
    reserve = _swig_new_instance_method(_OpenLxApp.vector_ElementAssembly_reserve)
    capacity = _swig_new_instance_method(_OpenLxApp.vector_ElementAssembly_capacity)
    __swig_destroy__ = _OpenLxApp.delete_vector_ElementAssembly

# Register vector_ElementAssembly in _OpenLxApp:
_OpenLxApp.vector_ElementAssembly_swigregister(vector_ElementAssembly)
class vector_ElementComponent(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< OpenLxApp::ElementComponent > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_OpenLxApp.vector_ElementComponent_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_OpenLxApp.vector_ElementComponent___nonzero__)
    __bool__ = _swig_new_instance_method(_OpenLxApp.vector_ElementComponent___bool__)
    __len__ = _swig_new_instance_method(_OpenLxApp.vector_ElementComponent___len__)
    __getslice__ = _swig_new_instance_method(_OpenLxApp.vector_ElementComponent___getslice__)
    __setslice__ = _swig_new_instance_method(_OpenLxApp.vector_ElementComponent___setslice__)
    __delslice__ = _swig_new_instance_method(_OpenLxApp.vector_ElementComponent___delslice__)
    __delitem__ = _swig_new_instance_method(_OpenLxApp.vector_ElementComponent___delitem__)
    __getitem__ = _swig_new_instance_method(_OpenLxApp.vector_ElementComponent___getitem__)
    __setitem__ = _swig_new_instance_method(_OpenLxApp.vector_ElementComponent___setitem__)
    pop = _swig_new_instance_method(_OpenLxApp.vector_ElementComponent_pop)
    append = _swig_new_instance_method(_OpenLxApp.vector_ElementComponent_append)
    empty = _swig_new_instance_method(_OpenLxApp.vector_ElementComponent_empty)
    size = _swig_new_instance_method(_OpenLxApp.vector_ElementComponent_size)
    swap = _swig_new_instance_method(_OpenLxApp.vector_ElementComponent_swap)
    begin = _swig_new_instance_method(_OpenLxApp.vector_ElementComponent_begin)
    end = _swig_new_instance_method(_OpenLxApp.vector_ElementComponent_end)
    rbegin = _swig_new_instance_method(_OpenLxApp.vector_ElementComponent_rbegin)
    rend = _swig_new_instance_method(_OpenLxApp.vector_ElementComponent_rend)
    clear = _swig_new_instance_method(_OpenLxApp.vector_ElementComponent_clear)
    get_allocator = _swig_new_instance_method(_OpenLxApp.vector_ElementComponent_get_allocator)
    pop_back = _swig_new_instance_method(_OpenLxApp.vector_ElementComponent_pop_back)
    erase = _swig_new_instance_method(_OpenLxApp.vector_ElementComponent_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_ElementComponent self) -> vector_ElementComponent
        __init__(vector_ElementComponent self, vector_ElementComponent other) -> vector_ElementComponent
        __init__(vector_ElementComponent self, std::vector< std::shared_ptr< OpenLxApp::ElementComponent > >::size_type size) -> vector_ElementComponent
        __init__(vector_ElementComponent self, std::vector< std::shared_ptr< OpenLxApp::ElementComponent > >::size_type size, std::vector< std::shared_ptr< OpenLxApp::ElementComponent > >::value_type const & value) -> vector_ElementComponent
        """
        _OpenLxApp.vector_ElementComponent_swiginit(self, _OpenLxApp.new_vector_ElementComponent(*args))
    push_back = _swig_new_instance_method(_OpenLxApp.vector_ElementComponent_push_back)
    front = _swig_new_instance_method(_OpenLxApp.vector_ElementComponent_front)
    back = _swig_new_instance_method(_OpenLxApp.vector_ElementComponent_back)
    assign = _swig_new_instance_method(_OpenLxApp.vector_ElementComponent_assign)
    resize = _swig_new_instance_method(_OpenLxApp.vector_ElementComponent_resize)
    insert = _swig_new_instance_method(_OpenLxApp.vector_ElementComponent_insert)
    reserve = _swig_new_instance_method(_OpenLxApp.vector_ElementComponent_reserve)
    capacity = _swig_new_instance_method(_OpenLxApp.vector_ElementComponent_capacity)
    __swig_destroy__ = _OpenLxApp.delete_vector_ElementComponent

# Register vector_ElementComponent in _OpenLxApp:
_OpenLxApp.vector_ElementComponent_swigregister(vector_ElementComponent)
class vector_Ellipse(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< OpenLxApp::Ellipse > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_OpenLxApp.vector_Ellipse_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_OpenLxApp.vector_Ellipse___nonzero__)
    __bool__ = _swig_new_instance_method(_OpenLxApp.vector_Ellipse___bool__)
    __len__ = _swig_new_instance_method(_OpenLxApp.vector_Ellipse___len__)
    __getslice__ = _swig_new_instance_method(_OpenLxApp.vector_Ellipse___getslice__)
    __setslice__ = _swig_new_instance_method(_OpenLxApp.vector_Ellipse___setslice__)
    __delslice__ = _swig_new_instance_method(_OpenLxApp.vector_Ellipse___delslice__)
    __delitem__ = _swig_new_instance_method(_OpenLxApp.vector_Ellipse___delitem__)
    __getitem__ = _swig_new_instance_method(_OpenLxApp.vector_Ellipse___getitem__)
    __setitem__ = _swig_new_instance_method(_OpenLxApp.vector_Ellipse___setitem__)
    pop = _swig_new_instance_method(_OpenLxApp.vector_Ellipse_pop)
    append = _swig_new_instance_method(_OpenLxApp.vector_Ellipse_append)
    empty = _swig_new_instance_method(_OpenLxApp.vector_Ellipse_empty)
    size = _swig_new_instance_method(_OpenLxApp.vector_Ellipse_size)
    swap = _swig_new_instance_method(_OpenLxApp.vector_Ellipse_swap)
    begin = _swig_new_instance_method(_OpenLxApp.vector_Ellipse_begin)
    end = _swig_new_instance_method(_OpenLxApp.vector_Ellipse_end)
    rbegin = _swig_new_instance_method(_OpenLxApp.vector_Ellipse_rbegin)
    rend = _swig_new_instance_method(_OpenLxApp.vector_Ellipse_rend)
    clear = _swig_new_instance_method(_OpenLxApp.vector_Ellipse_clear)
    get_allocator = _swig_new_instance_method(_OpenLxApp.vector_Ellipse_get_allocator)
    pop_back = _swig_new_instance_method(_OpenLxApp.vector_Ellipse_pop_back)
    erase = _swig_new_instance_method(_OpenLxApp.vector_Ellipse_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_Ellipse self) -> vector_Ellipse
        __init__(vector_Ellipse self, vector_Ellipse other) -> vector_Ellipse
        __init__(vector_Ellipse self, std::vector< std::shared_ptr< OpenLxApp::Ellipse > >::size_type size) -> vector_Ellipse
        __init__(vector_Ellipse self, std::vector< std::shared_ptr< OpenLxApp::Ellipse > >::size_type size, std::vector< std::shared_ptr< OpenLxApp::Ellipse > >::value_type const & value) -> vector_Ellipse
        """
        _OpenLxApp.vector_Ellipse_swiginit(self, _OpenLxApp.new_vector_Ellipse(*args))
    push_back = _swig_new_instance_method(_OpenLxApp.vector_Ellipse_push_back)
    front = _swig_new_instance_method(_OpenLxApp.vector_Ellipse_front)
    back = _swig_new_instance_method(_OpenLxApp.vector_Ellipse_back)
    assign = _swig_new_instance_method(_OpenLxApp.vector_Ellipse_assign)
    resize = _swig_new_instance_method(_OpenLxApp.vector_Ellipse_resize)
    insert = _swig_new_instance_method(_OpenLxApp.vector_Ellipse_insert)
    reserve = _swig_new_instance_method(_OpenLxApp.vector_Ellipse_reserve)
    capacity = _swig_new_instance_method(_OpenLxApp.vector_Ellipse_capacity)
    __swig_destroy__ = _OpenLxApp.delete_vector_Ellipse

# Register vector_Ellipse in _OpenLxApp:
_OpenLxApp.vector_Ellipse_swigregister(vector_Ellipse)
class vector_ExternalSpatialElement(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< OpenLxApp::ExternalSpatialElement > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_OpenLxApp.vector_ExternalSpatialElement_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_OpenLxApp.vector_ExternalSpatialElement___nonzero__)
    __bool__ = _swig_new_instance_method(_OpenLxApp.vector_ExternalSpatialElement___bool__)
    __len__ = _swig_new_instance_method(_OpenLxApp.vector_ExternalSpatialElement___len__)
    __getslice__ = _swig_new_instance_method(_OpenLxApp.vector_ExternalSpatialElement___getslice__)
    __setslice__ = _swig_new_instance_method(_OpenLxApp.vector_ExternalSpatialElement___setslice__)
    __delslice__ = _swig_new_instance_method(_OpenLxApp.vector_ExternalSpatialElement___delslice__)
    __delitem__ = _swig_new_instance_method(_OpenLxApp.vector_ExternalSpatialElement___delitem__)
    __getitem__ = _swig_new_instance_method(_OpenLxApp.vector_ExternalSpatialElement___getitem__)
    __setitem__ = _swig_new_instance_method(_OpenLxApp.vector_ExternalSpatialElement___setitem__)
    pop = _swig_new_instance_method(_OpenLxApp.vector_ExternalSpatialElement_pop)
    append = _swig_new_instance_method(_OpenLxApp.vector_ExternalSpatialElement_append)
    empty = _swig_new_instance_method(_OpenLxApp.vector_ExternalSpatialElement_empty)
    size = _swig_new_instance_method(_OpenLxApp.vector_ExternalSpatialElement_size)
    swap = _swig_new_instance_method(_OpenLxApp.vector_ExternalSpatialElement_swap)
    begin = _swig_new_instance_method(_OpenLxApp.vector_ExternalSpatialElement_begin)
    end = _swig_new_instance_method(_OpenLxApp.vector_ExternalSpatialElement_end)
    rbegin = _swig_new_instance_method(_OpenLxApp.vector_ExternalSpatialElement_rbegin)
    rend = _swig_new_instance_method(_OpenLxApp.vector_ExternalSpatialElement_rend)
    clear = _swig_new_instance_method(_OpenLxApp.vector_ExternalSpatialElement_clear)
    get_allocator = _swig_new_instance_method(_OpenLxApp.vector_ExternalSpatialElement_get_allocator)
    pop_back = _swig_new_instance_method(_OpenLxApp.vector_ExternalSpatialElement_pop_back)
    erase = _swig_new_instance_method(_OpenLxApp.vector_ExternalSpatialElement_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_ExternalSpatialElement self) -> vector_ExternalSpatialElement
        __init__(vector_ExternalSpatialElement self, vector_ExternalSpatialElement other) -> vector_ExternalSpatialElement
        __init__(vector_ExternalSpatialElement self, std::vector< std::shared_ptr< OpenLxApp::ExternalSpatialElement > >::size_type size) -> vector_ExternalSpatialElement
        __init__(vector_ExternalSpatialElement self, std::vector< std::shared_ptr< OpenLxApp::ExternalSpatialElement > >::size_type size, std::vector< std::shared_ptr< OpenLxApp::ExternalSpatialElement > >::value_type const & value) -> vector_ExternalSpatialElement
        """
        _OpenLxApp.vector_ExternalSpatialElement_swiginit(self, _OpenLxApp.new_vector_ExternalSpatialElement(*args))
    push_back = _swig_new_instance_method(_OpenLxApp.vector_ExternalSpatialElement_push_back)
    front = _swig_new_instance_method(_OpenLxApp.vector_ExternalSpatialElement_front)
    back = _swig_new_instance_method(_OpenLxApp.vector_ExternalSpatialElement_back)
    assign = _swig_new_instance_method(_OpenLxApp.vector_ExternalSpatialElement_assign)
    resize = _swig_new_instance_method(_OpenLxApp.vector_ExternalSpatialElement_resize)
    insert = _swig_new_instance_method(_OpenLxApp.vector_ExternalSpatialElement_insert)
    reserve = _swig_new_instance_method(_OpenLxApp.vector_ExternalSpatialElement_reserve)
    capacity = _swig_new_instance_method(_OpenLxApp.vector_ExternalSpatialElement_capacity)
    __swig_destroy__ = _OpenLxApp.delete_vector_ExternalSpatialElement

# Register vector_ExternalSpatialElement in _OpenLxApp:
_OpenLxApp.vector_ExternalSpatialElement_swigregister(vector_ExternalSpatialElement)
class vector_ExternalSpatialStructureElement(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< OpenLxApp::ExternalSpatialStructureElement > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_OpenLxApp.vector_ExternalSpatialStructureElement_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_OpenLxApp.vector_ExternalSpatialStructureElement___nonzero__)
    __bool__ = _swig_new_instance_method(_OpenLxApp.vector_ExternalSpatialStructureElement___bool__)
    __len__ = _swig_new_instance_method(_OpenLxApp.vector_ExternalSpatialStructureElement___len__)
    __getslice__ = _swig_new_instance_method(_OpenLxApp.vector_ExternalSpatialStructureElement___getslice__)
    __setslice__ = _swig_new_instance_method(_OpenLxApp.vector_ExternalSpatialStructureElement___setslice__)
    __delslice__ = _swig_new_instance_method(_OpenLxApp.vector_ExternalSpatialStructureElement___delslice__)
    __delitem__ = _swig_new_instance_method(_OpenLxApp.vector_ExternalSpatialStructureElement___delitem__)
    __getitem__ = _swig_new_instance_method(_OpenLxApp.vector_ExternalSpatialStructureElement___getitem__)
    __setitem__ = _swig_new_instance_method(_OpenLxApp.vector_ExternalSpatialStructureElement___setitem__)
    pop = _swig_new_instance_method(_OpenLxApp.vector_ExternalSpatialStructureElement_pop)
    append = _swig_new_instance_method(_OpenLxApp.vector_ExternalSpatialStructureElement_append)
    empty = _swig_new_instance_method(_OpenLxApp.vector_ExternalSpatialStructureElement_empty)
    size = _swig_new_instance_method(_OpenLxApp.vector_ExternalSpatialStructureElement_size)
    swap = _swig_new_instance_method(_OpenLxApp.vector_ExternalSpatialStructureElement_swap)
    begin = _swig_new_instance_method(_OpenLxApp.vector_ExternalSpatialStructureElement_begin)
    end = _swig_new_instance_method(_OpenLxApp.vector_ExternalSpatialStructureElement_end)
    rbegin = _swig_new_instance_method(_OpenLxApp.vector_ExternalSpatialStructureElement_rbegin)
    rend = _swig_new_instance_method(_OpenLxApp.vector_ExternalSpatialStructureElement_rend)
    clear = _swig_new_instance_method(_OpenLxApp.vector_ExternalSpatialStructureElement_clear)
    get_allocator = _swig_new_instance_method(_OpenLxApp.vector_ExternalSpatialStructureElement_get_allocator)
    pop_back = _swig_new_instance_method(_OpenLxApp.vector_ExternalSpatialStructureElement_pop_back)
    erase = _swig_new_instance_method(_OpenLxApp.vector_ExternalSpatialStructureElement_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_ExternalSpatialStructureElement self) -> vector_ExternalSpatialStructureElement
        __init__(vector_ExternalSpatialStructureElement self, vector_ExternalSpatialStructureElement other) -> vector_ExternalSpatialStructureElement
        __init__(vector_ExternalSpatialStructureElement self, std::vector< std::shared_ptr< OpenLxApp::ExternalSpatialStructureElement > >::size_type size) -> vector_ExternalSpatialStructureElement
        __init__(vector_ExternalSpatialStructureElement self, std::vector< std::shared_ptr< OpenLxApp::ExternalSpatialStructureElement > >::size_type size, std::vector< std::shared_ptr< OpenLxApp::ExternalSpatialStructureElement > >::value_type const & value) -> vector_ExternalSpatialStructureElement
        """
        _OpenLxApp.vector_ExternalSpatialStructureElement_swiginit(self, _OpenLxApp.new_vector_ExternalSpatialStructureElement(*args))
    push_back = _swig_new_instance_method(_OpenLxApp.vector_ExternalSpatialStructureElement_push_back)
    front = _swig_new_instance_method(_OpenLxApp.vector_ExternalSpatialStructureElement_front)
    back = _swig_new_instance_method(_OpenLxApp.vector_ExternalSpatialStructureElement_back)
    assign = _swig_new_instance_method(_OpenLxApp.vector_ExternalSpatialStructureElement_assign)
    resize = _swig_new_instance_method(_OpenLxApp.vector_ExternalSpatialStructureElement_resize)
    insert = _swig_new_instance_method(_OpenLxApp.vector_ExternalSpatialStructureElement_insert)
    reserve = _swig_new_instance_method(_OpenLxApp.vector_ExternalSpatialStructureElement_reserve)
    capacity = _swig_new_instance_method(_OpenLxApp.vector_ExternalSpatialStructureElement_capacity)
    __swig_destroy__ = _OpenLxApp.delete_vector_ExternalSpatialStructureElement

# Register vector_ExternalSpatialStructureElement in _OpenLxApp:
_OpenLxApp.vector_ExternalSpatialStructureElement_swigregister(vector_ExternalSpatialStructureElement)
class vector_ExtrudedAreaSolid(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< OpenLxApp::ExtrudedAreaSolid > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_OpenLxApp.vector_ExtrudedAreaSolid_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_OpenLxApp.vector_ExtrudedAreaSolid___nonzero__)
    __bool__ = _swig_new_instance_method(_OpenLxApp.vector_ExtrudedAreaSolid___bool__)
    __len__ = _swig_new_instance_method(_OpenLxApp.vector_ExtrudedAreaSolid___len__)
    __getslice__ = _swig_new_instance_method(_OpenLxApp.vector_ExtrudedAreaSolid___getslice__)
    __setslice__ = _swig_new_instance_method(_OpenLxApp.vector_ExtrudedAreaSolid___setslice__)
    __delslice__ = _swig_new_instance_method(_OpenLxApp.vector_ExtrudedAreaSolid___delslice__)
    __delitem__ = _swig_new_instance_method(_OpenLxApp.vector_ExtrudedAreaSolid___delitem__)
    __getitem__ = _swig_new_instance_method(_OpenLxApp.vector_ExtrudedAreaSolid___getitem__)
    __setitem__ = _swig_new_instance_method(_OpenLxApp.vector_ExtrudedAreaSolid___setitem__)
    pop = _swig_new_instance_method(_OpenLxApp.vector_ExtrudedAreaSolid_pop)
    append = _swig_new_instance_method(_OpenLxApp.vector_ExtrudedAreaSolid_append)
    empty = _swig_new_instance_method(_OpenLxApp.vector_ExtrudedAreaSolid_empty)
    size = _swig_new_instance_method(_OpenLxApp.vector_ExtrudedAreaSolid_size)
    swap = _swig_new_instance_method(_OpenLxApp.vector_ExtrudedAreaSolid_swap)
    begin = _swig_new_instance_method(_OpenLxApp.vector_ExtrudedAreaSolid_begin)
    end = _swig_new_instance_method(_OpenLxApp.vector_ExtrudedAreaSolid_end)
    rbegin = _swig_new_instance_method(_OpenLxApp.vector_ExtrudedAreaSolid_rbegin)
    rend = _swig_new_instance_method(_OpenLxApp.vector_ExtrudedAreaSolid_rend)
    clear = _swig_new_instance_method(_OpenLxApp.vector_ExtrudedAreaSolid_clear)
    get_allocator = _swig_new_instance_method(_OpenLxApp.vector_ExtrudedAreaSolid_get_allocator)
    pop_back = _swig_new_instance_method(_OpenLxApp.vector_ExtrudedAreaSolid_pop_back)
    erase = _swig_new_instance_method(_OpenLxApp.vector_ExtrudedAreaSolid_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_ExtrudedAreaSolid self) -> vector_ExtrudedAreaSolid
        __init__(vector_ExtrudedAreaSolid self, vector_ExtrudedAreaSolid other) -> vector_ExtrudedAreaSolid
        __init__(vector_ExtrudedAreaSolid self, std::vector< std::shared_ptr< OpenLxApp::ExtrudedAreaSolid > >::size_type size) -> vector_ExtrudedAreaSolid
        __init__(vector_ExtrudedAreaSolid self, std::vector< std::shared_ptr< OpenLxApp::ExtrudedAreaSolid > >::size_type size, std::vector< std::shared_ptr< OpenLxApp::ExtrudedAreaSolid > >::value_type const & value) -> vector_ExtrudedAreaSolid
        """
        _OpenLxApp.vector_ExtrudedAreaSolid_swiginit(self, _OpenLxApp.new_vector_ExtrudedAreaSolid(*args))
    push_back = _swig_new_instance_method(_OpenLxApp.vector_ExtrudedAreaSolid_push_back)
    front = _swig_new_instance_method(_OpenLxApp.vector_ExtrudedAreaSolid_front)
    back = _swig_new_instance_method(_OpenLxApp.vector_ExtrudedAreaSolid_back)
    assign = _swig_new_instance_method(_OpenLxApp.vector_ExtrudedAreaSolid_assign)
    resize = _swig_new_instance_method(_OpenLxApp.vector_ExtrudedAreaSolid_resize)
    insert = _swig_new_instance_method(_OpenLxApp.vector_ExtrudedAreaSolid_insert)
    reserve = _swig_new_instance_method(_OpenLxApp.vector_ExtrudedAreaSolid_reserve)
    capacity = _swig_new_instance_method(_OpenLxApp.vector_ExtrudedAreaSolid_capacity)
    __swig_destroy__ = _OpenLxApp.delete_vector_ExtrudedAreaSolid

# Register vector_ExtrudedAreaSolid in _OpenLxApp:
_OpenLxApp.vector_ExtrudedAreaSolid_swigregister(vector_ExtrudedAreaSolid)
class vector_FaceBasedSurfaceModel(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< OpenLxApp::FaceBasedSurfaceModel > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_OpenLxApp.vector_FaceBasedSurfaceModel_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_OpenLxApp.vector_FaceBasedSurfaceModel___nonzero__)
    __bool__ = _swig_new_instance_method(_OpenLxApp.vector_FaceBasedSurfaceModel___bool__)
    __len__ = _swig_new_instance_method(_OpenLxApp.vector_FaceBasedSurfaceModel___len__)
    __getslice__ = _swig_new_instance_method(_OpenLxApp.vector_FaceBasedSurfaceModel___getslice__)
    __setslice__ = _swig_new_instance_method(_OpenLxApp.vector_FaceBasedSurfaceModel___setslice__)
    __delslice__ = _swig_new_instance_method(_OpenLxApp.vector_FaceBasedSurfaceModel___delslice__)
    __delitem__ = _swig_new_instance_method(_OpenLxApp.vector_FaceBasedSurfaceModel___delitem__)
    __getitem__ = _swig_new_instance_method(_OpenLxApp.vector_FaceBasedSurfaceModel___getitem__)
    __setitem__ = _swig_new_instance_method(_OpenLxApp.vector_FaceBasedSurfaceModel___setitem__)
    pop = _swig_new_instance_method(_OpenLxApp.vector_FaceBasedSurfaceModel_pop)
    append = _swig_new_instance_method(_OpenLxApp.vector_FaceBasedSurfaceModel_append)
    empty = _swig_new_instance_method(_OpenLxApp.vector_FaceBasedSurfaceModel_empty)
    size = _swig_new_instance_method(_OpenLxApp.vector_FaceBasedSurfaceModel_size)
    swap = _swig_new_instance_method(_OpenLxApp.vector_FaceBasedSurfaceModel_swap)
    begin = _swig_new_instance_method(_OpenLxApp.vector_FaceBasedSurfaceModel_begin)
    end = _swig_new_instance_method(_OpenLxApp.vector_FaceBasedSurfaceModel_end)
    rbegin = _swig_new_instance_method(_OpenLxApp.vector_FaceBasedSurfaceModel_rbegin)
    rend = _swig_new_instance_method(_OpenLxApp.vector_FaceBasedSurfaceModel_rend)
    clear = _swig_new_instance_method(_OpenLxApp.vector_FaceBasedSurfaceModel_clear)
    get_allocator = _swig_new_instance_method(_OpenLxApp.vector_FaceBasedSurfaceModel_get_allocator)
    pop_back = _swig_new_instance_method(_OpenLxApp.vector_FaceBasedSurfaceModel_pop_back)
    erase = _swig_new_instance_method(_OpenLxApp.vector_FaceBasedSurfaceModel_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_FaceBasedSurfaceModel self) -> vector_FaceBasedSurfaceModel
        __init__(vector_FaceBasedSurfaceModel self, vector_FaceBasedSurfaceModel other) -> vector_FaceBasedSurfaceModel
        __init__(vector_FaceBasedSurfaceModel self, std::vector< std::shared_ptr< OpenLxApp::FaceBasedSurfaceModel > >::size_type size) -> vector_FaceBasedSurfaceModel
        __init__(vector_FaceBasedSurfaceModel self, std::vector< std::shared_ptr< OpenLxApp::FaceBasedSurfaceModel > >::size_type size, std::vector< std::shared_ptr< OpenLxApp::FaceBasedSurfaceModel > >::value_type const & value) -> vector_FaceBasedSurfaceModel
        """
        _OpenLxApp.vector_FaceBasedSurfaceModel_swiginit(self, _OpenLxApp.new_vector_FaceBasedSurfaceModel(*args))
    push_back = _swig_new_instance_method(_OpenLxApp.vector_FaceBasedSurfaceModel_push_back)
    front = _swig_new_instance_method(_OpenLxApp.vector_FaceBasedSurfaceModel_front)
    back = _swig_new_instance_method(_OpenLxApp.vector_FaceBasedSurfaceModel_back)
    assign = _swig_new_instance_method(_OpenLxApp.vector_FaceBasedSurfaceModel_assign)
    resize = _swig_new_instance_method(_OpenLxApp.vector_FaceBasedSurfaceModel_resize)
    insert = _swig_new_instance_method(_OpenLxApp.vector_FaceBasedSurfaceModel_insert)
    reserve = _swig_new_instance_method(_OpenLxApp.vector_FaceBasedSurfaceModel_reserve)
    capacity = _swig_new_instance_method(_OpenLxApp.vector_FaceBasedSurfaceModel_capacity)
    __swig_destroy__ = _OpenLxApp.delete_vector_FaceBasedSurfaceModel

# Register vector_FaceBasedSurfaceModel in _OpenLxApp:
_OpenLxApp.vector_FaceBasedSurfaceModel_swigregister(vector_FaceBasedSurfaceModel)
class vector_FacetedBrep(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< OpenLxApp::FacetedBrep > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_OpenLxApp.vector_FacetedBrep_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_OpenLxApp.vector_FacetedBrep___nonzero__)
    __bool__ = _swig_new_instance_method(_OpenLxApp.vector_FacetedBrep___bool__)
    __len__ = _swig_new_instance_method(_OpenLxApp.vector_FacetedBrep___len__)
    __getslice__ = _swig_new_instance_method(_OpenLxApp.vector_FacetedBrep___getslice__)
    __setslice__ = _swig_new_instance_method(_OpenLxApp.vector_FacetedBrep___setslice__)
    __delslice__ = _swig_new_instance_method(_OpenLxApp.vector_FacetedBrep___delslice__)
    __delitem__ = _swig_new_instance_method(_OpenLxApp.vector_FacetedBrep___delitem__)
    __getitem__ = _swig_new_instance_method(_OpenLxApp.vector_FacetedBrep___getitem__)
    __setitem__ = _swig_new_instance_method(_OpenLxApp.vector_FacetedBrep___setitem__)
    pop = _swig_new_instance_method(_OpenLxApp.vector_FacetedBrep_pop)
    append = _swig_new_instance_method(_OpenLxApp.vector_FacetedBrep_append)
    empty = _swig_new_instance_method(_OpenLxApp.vector_FacetedBrep_empty)
    size = _swig_new_instance_method(_OpenLxApp.vector_FacetedBrep_size)
    swap = _swig_new_instance_method(_OpenLxApp.vector_FacetedBrep_swap)
    begin = _swig_new_instance_method(_OpenLxApp.vector_FacetedBrep_begin)
    end = _swig_new_instance_method(_OpenLxApp.vector_FacetedBrep_end)
    rbegin = _swig_new_instance_method(_OpenLxApp.vector_FacetedBrep_rbegin)
    rend = _swig_new_instance_method(_OpenLxApp.vector_FacetedBrep_rend)
    clear = _swig_new_instance_method(_OpenLxApp.vector_FacetedBrep_clear)
    get_allocator = _swig_new_instance_method(_OpenLxApp.vector_FacetedBrep_get_allocator)
    pop_back = _swig_new_instance_method(_OpenLxApp.vector_FacetedBrep_pop_back)
    erase = _swig_new_instance_method(_OpenLxApp.vector_FacetedBrep_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_FacetedBrep self) -> vector_FacetedBrep
        __init__(vector_FacetedBrep self, vector_FacetedBrep other) -> vector_FacetedBrep
        __init__(vector_FacetedBrep self, std::vector< std::shared_ptr< OpenLxApp::FacetedBrep > >::size_type size) -> vector_FacetedBrep
        __init__(vector_FacetedBrep self, std::vector< std::shared_ptr< OpenLxApp::FacetedBrep > >::size_type size, std::vector< std::shared_ptr< OpenLxApp::FacetedBrep > >::value_type const & value) -> vector_FacetedBrep
        """
        _OpenLxApp.vector_FacetedBrep_swiginit(self, _OpenLxApp.new_vector_FacetedBrep(*args))
    push_back = _swig_new_instance_method(_OpenLxApp.vector_FacetedBrep_push_back)
    front = _swig_new_instance_method(_OpenLxApp.vector_FacetedBrep_front)
    back = _swig_new_instance_method(_OpenLxApp.vector_FacetedBrep_back)
    assign = _swig_new_instance_method(_OpenLxApp.vector_FacetedBrep_assign)
    resize = _swig_new_instance_method(_OpenLxApp.vector_FacetedBrep_resize)
    insert = _swig_new_instance_method(_OpenLxApp.vector_FacetedBrep_insert)
    reserve = _swig_new_instance_method(_OpenLxApp.vector_FacetedBrep_reserve)
    capacity = _swig_new_instance_method(_OpenLxApp.vector_FacetedBrep_capacity)
    __swig_destroy__ = _OpenLxApp.delete_vector_FacetedBrep

# Register vector_FacetedBrep in _OpenLxApp:
_OpenLxApp.vector_FacetedBrep_swigregister(vector_FacetedBrep)
class vector_FireSuppressionTerminal(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< OpenLxApp::FireSuppressionTerminal > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_OpenLxApp.vector_FireSuppressionTerminal_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_OpenLxApp.vector_FireSuppressionTerminal___nonzero__)
    __bool__ = _swig_new_instance_method(_OpenLxApp.vector_FireSuppressionTerminal___bool__)
    __len__ = _swig_new_instance_method(_OpenLxApp.vector_FireSuppressionTerminal___len__)
    __getslice__ = _swig_new_instance_method(_OpenLxApp.vector_FireSuppressionTerminal___getslice__)
    __setslice__ = _swig_new_instance_method(_OpenLxApp.vector_FireSuppressionTerminal___setslice__)
    __delslice__ = _swig_new_instance_method(_OpenLxApp.vector_FireSuppressionTerminal___delslice__)
    __delitem__ = _swig_new_instance_method(_OpenLxApp.vector_FireSuppressionTerminal___delitem__)
    __getitem__ = _swig_new_instance_method(_OpenLxApp.vector_FireSuppressionTerminal___getitem__)
    __setitem__ = _swig_new_instance_method(_OpenLxApp.vector_FireSuppressionTerminal___setitem__)
    pop = _swig_new_instance_method(_OpenLxApp.vector_FireSuppressionTerminal_pop)
    append = _swig_new_instance_method(_OpenLxApp.vector_FireSuppressionTerminal_append)
    empty = _swig_new_instance_method(_OpenLxApp.vector_FireSuppressionTerminal_empty)
    size = _swig_new_instance_method(_OpenLxApp.vector_FireSuppressionTerminal_size)
    swap = _swig_new_instance_method(_OpenLxApp.vector_FireSuppressionTerminal_swap)
    begin = _swig_new_instance_method(_OpenLxApp.vector_FireSuppressionTerminal_begin)
    end = _swig_new_instance_method(_OpenLxApp.vector_FireSuppressionTerminal_end)
    rbegin = _swig_new_instance_method(_OpenLxApp.vector_FireSuppressionTerminal_rbegin)
    rend = _swig_new_instance_method(_OpenLxApp.vector_FireSuppressionTerminal_rend)
    clear = _swig_new_instance_method(_OpenLxApp.vector_FireSuppressionTerminal_clear)
    get_allocator = _swig_new_instance_method(_OpenLxApp.vector_FireSuppressionTerminal_get_allocator)
    pop_back = _swig_new_instance_method(_OpenLxApp.vector_FireSuppressionTerminal_pop_back)
    erase = _swig_new_instance_method(_OpenLxApp.vector_FireSuppressionTerminal_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_FireSuppressionTerminal self) -> vector_FireSuppressionTerminal
        __init__(vector_FireSuppressionTerminal self, vector_FireSuppressionTerminal other) -> vector_FireSuppressionTerminal
        __init__(vector_FireSuppressionTerminal self, std::vector< std::shared_ptr< OpenLxApp::FireSuppressionTerminal > >::size_type size) -> vector_FireSuppressionTerminal
        __init__(vector_FireSuppressionTerminal self, std::vector< std::shared_ptr< OpenLxApp::FireSuppressionTerminal > >::size_type size, std::vector< std::shared_ptr< OpenLxApp::FireSuppressionTerminal > >::value_type const & value) -> vector_FireSuppressionTerminal
        """
        _OpenLxApp.vector_FireSuppressionTerminal_swiginit(self, _OpenLxApp.new_vector_FireSuppressionTerminal(*args))
    push_back = _swig_new_instance_method(_OpenLxApp.vector_FireSuppressionTerminal_push_back)
    front = _swig_new_instance_method(_OpenLxApp.vector_FireSuppressionTerminal_front)
    back = _swig_new_instance_method(_OpenLxApp.vector_FireSuppressionTerminal_back)
    assign = _swig_new_instance_method(_OpenLxApp.vector_FireSuppressionTerminal_assign)
    resize = _swig_new_instance_method(_OpenLxApp.vector_FireSuppressionTerminal_resize)
    insert = _swig_new_instance_method(_OpenLxApp.vector_FireSuppressionTerminal_insert)
    reserve = _swig_new_instance_method(_OpenLxApp.vector_FireSuppressionTerminal_reserve)
    capacity = _swig_new_instance_method(_OpenLxApp.vector_FireSuppressionTerminal_capacity)
    __swig_destroy__ = _OpenLxApp.delete_vector_FireSuppressionTerminal

# Register vector_FireSuppressionTerminal in _OpenLxApp:
_OpenLxApp.vector_FireSuppressionTerminal_swigregister(vector_FireSuppressionTerminal)
class vector_FlowSegment(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< OpenLxApp::FlowSegment > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_OpenLxApp.vector_FlowSegment_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_OpenLxApp.vector_FlowSegment___nonzero__)
    __bool__ = _swig_new_instance_method(_OpenLxApp.vector_FlowSegment___bool__)
    __len__ = _swig_new_instance_method(_OpenLxApp.vector_FlowSegment___len__)
    __getslice__ = _swig_new_instance_method(_OpenLxApp.vector_FlowSegment___getslice__)
    __setslice__ = _swig_new_instance_method(_OpenLxApp.vector_FlowSegment___setslice__)
    __delslice__ = _swig_new_instance_method(_OpenLxApp.vector_FlowSegment___delslice__)
    __delitem__ = _swig_new_instance_method(_OpenLxApp.vector_FlowSegment___delitem__)
    __getitem__ = _swig_new_instance_method(_OpenLxApp.vector_FlowSegment___getitem__)
    __setitem__ = _swig_new_instance_method(_OpenLxApp.vector_FlowSegment___setitem__)
    pop = _swig_new_instance_method(_OpenLxApp.vector_FlowSegment_pop)
    append = _swig_new_instance_method(_OpenLxApp.vector_FlowSegment_append)
    empty = _swig_new_instance_method(_OpenLxApp.vector_FlowSegment_empty)
    size = _swig_new_instance_method(_OpenLxApp.vector_FlowSegment_size)
    swap = _swig_new_instance_method(_OpenLxApp.vector_FlowSegment_swap)
    begin = _swig_new_instance_method(_OpenLxApp.vector_FlowSegment_begin)
    end = _swig_new_instance_method(_OpenLxApp.vector_FlowSegment_end)
    rbegin = _swig_new_instance_method(_OpenLxApp.vector_FlowSegment_rbegin)
    rend = _swig_new_instance_method(_OpenLxApp.vector_FlowSegment_rend)
    clear = _swig_new_instance_method(_OpenLxApp.vector_FlowSegment_clear)
    get_allocator = _swig_new_instance_method(_OpenLxApp.vector_FlowSegment_get_allocator)
    pop_back = _swig_new_instance_method(_OpenLxApp.vector_FlowSegment_pop_back)
    erase = _swig_new_instance_method(_OpenLxApp.vector_FlowSegment_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_FlowSegment self) -> vector_FlowSegment
        __init__(vector_FlowSegment self, vector_FlowSegment other) -> vector_FlowSegment
        __init__(vector_FlowSegment self, std::vector< std::shared_ptr< OpenLxApp::FlowSegment > >::size_type size) -> vector_FlowSegment
        __init__(vector_FlowSegment self, std::vector< std::shared_ptr< OpenLxApp::FlowSegment > >::size_type size, std::vector< std::shared_ptr< OpenLxApp::FlowSegment > >::value_type const & value) -> vector_FlowSegment
        """
        _OpenLxApp.vector_FlowSegment_swiginit(self, _OpenLxApp.new_vector_FlowSegment(*args))
    push_back = _swig_new_instance_method(_OpenLxApp.vector_FlowSegment_push_back)
    front = _swig_new_instance_method(_OpenLxApp.vector_FlowSegment_front)
    back = _swig_new_instance_method(_OpenLxApp.vector_FlowSegment_back)
    assign = _swig_new_instance_method(_OpenLxApp.vector_FlowSegment_assign)
    resize = _swig_new_instance_method(_OpenLxApp.vector_FlowSegment_resize)
    insert = _swig_new_instance_method(_OpenLxApp.vector_FlowSegment_insert)
    reserve = _swig_new_instance_method(_OpenLxApp.vector_FlowSegment_reserve)
    capacity = _swig_new_instance_method(_OpenLxApp.vector_FlowSegment_capacity)
    __swig_destroy__ = _OpenLxApp.delete_vector_FlowSegment

# Register vector_FlowSegment in _OpenLxApp:
_OpenLxApp.vector_FlowSegment_swigregister(vector_FlowSegment)
class vector_Footing(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< OpenLxApp::Footing > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_OpenLxApp.vector_Footing_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_OpenLxApp.vector_Footing___nonzero__)
    __bool__ = _swig_new_instance_method(_OpenLxApp.vector_Footing___bool__)
    __len__ = _swig_new_instance_method(_OpenLxApp.vector_Footing___len__)
    __getslice__ = _swig_new_instance_method(_OpenLxApp.vector_Footing___getslice__)
    __setslice__ = _swig_new_instance_method(_OpenLxApp.vector_Footing___setslice__)
    __delslice__ = _swig_new_instance_method(_OpenLxApp.vector_Footing___delslice__)
    __delitem__ = _swig_new_instance_method(_OpenLxApp.vector_Footing___delitem__)
    __getitem__ = _swig_new_instance_method(_OpenLxApp.vector_Footing___getitem__)
    __setitem__ = _swig_new_instance_method(_OpenLxApp.vector_Footing___setitem__)
    pop = _swig_new_instance_method(_OpenLxApp.vector_Footing_pop)
    append = _swig_new_instance_method(_OpenLxApp.vector_Footing_append)
    empty = _swig_new_instance_method(_OpenLxApp.vector_Footing_empty)
    size = _swig_new_instance_method(_OpenLxApp.vector_Footing_size)
    swap = _swig_new_instance_method(_OpenLxApp.vector_Footing_swap)
    begin = _swig_new_instance_method(_OpenLxApp.vector_Footing_begin)
    end = _swig_new_instance_method(_OpenLxApp.vector_Footing_end)
    rbegin = _swig_new_instance_method(_OpenLxApp.vector_Footing_rbegin)
    rend = _swig_new_instance_method(_OpenLxApp.vector_Footing_rend)
    clear = _swig_new_instance_method(_OpenLxApp.vector_Footing_clear)
    get_allocator = _swig_new_instance_method(_OpenLxApp.vector_Footing_get_allocator)
    pop_back = _swig_new_instance_method(_OpenLxApp.vector_Footing_pop_back)
    erase = _swig_new_instance_method(_OpenLxApp.vector_Footing_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_Footing self) -> vector_Footing
        __init__(vector_Footing self, vector_Footing other) -> vector_Footing
        __init__(vector_Footing self, std::vector< std::shared_ptr< OpenLxApp::Footing > >::size_type size) -> vector_Footing
        __init__(vector_Footing self, std::vector< std::shared_ptr< OpenLxApp::Footing > >::size_type size, std::vector< std::shared_ptr< OpenLxApp::Footing > >::value_type const & value) -> vector_Footing
        """
        _OpenLxApp.vector_Footing_swiginit(self, _OpenLxApp.new_vector_Footing(*args))
    push_back = _swig_new_instance_method(_OpenLxApp.vector_Footing_push_back)
    front = _swig_new_instance_method(_OpenLxApp.vector_Footing_front)
    back = _swig_new_instance_method(_OpenLxApp.vector_Footing_back)
    assign = _swig_new_instance_method(_OpenLxApp.vector_Footing_assign)
    resize = _swig_new_instance_method(_OpenLxApp.vector_Footing_resize)
    insert = _swig_new_instance_method(_OpenLxApp.vector_Footing_insert)
    reserve = _swig_new_instance_method(_OpenLxApp.vector_Footing_reserve)
    capacity = _swig_new_instance_method(_OpenLxApp.vector_Footing_capacity)
    __swig_destroy__ = _OpenLxApp.delete_vector_Footing

# Register vector_Footing in _OpenLxApp:
_OpenLxApp.vector_Footing_swigregister(vector_Footing)
class vector_Geometry(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< OpenLxApp::Geometry > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_OpenLxApp.vector_Geometry_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_OpenLxApp.vector_Geometry___nonzero__)
    __bool__ = _swig_new_instance_method(_OpenLxApp.vector_Geometry___bool__)
    __len__ = _swig_new_instance_method(_OpenLxApp.vector_Geometry___len__)
    __getslice__ = _swig_new_instance_method(_OpenLxApp.vector_Geometry___getslice__)
    __setslice__ = _swig_new_instance_method(_OpenLxApp.vector_Geometry___setslice__)
    __delslice__ = _swig_new_instance_method(_OpenLxApp.vector_Geometry___delslice__)
    __delitem__ = _swig_new_instance_method(_OpenLxApp.vector_Geometry___delitem__)
    __getitem__ = _swig_new_instance_method(_OpenLxApp.vector_Geometry___getitem__)
    __setitem__ = _swig_new_instance_method(_OpenLxApp.vector_Geometry___setitem__)
    pop = _swig_new_instance_method(_OpenLxApp.vector_Geometry_pop)
    append = _swig_new_instance_method(_OpenLxApp.vector_Geometry_append)
    empty = _swig_new_instance_method(_OpenLxApp.vector_Geometry_empty)
    size = _swig_new_instance_method(_OpenLxApp.vector_Geometry_size)
    swap = _swig_new_instance_method(_OpenLxApp.vector_Geometry_swap)
    begin = _swig_new_instance_method(_OpenLxApp.vector_Geometry_begin)
    end = _swig_new_instance_method(_OpenLxApp.vector_Geometry_end)
    rbegin = _swig_new_instance_method(_OpenLxApp.vector_Geometry_rbegin)
    rend = _swig_new_instance_method(_OpenLxApp.vector_Geometry_rend)
    clear = _swig_new_instance_method(_OpenLxApp.vector_Geometry_clear)
    get_allocator = _swig_new_instance_method(_OpenLxApp.vector_Geometry_get_allocator)
    pop_back = _swig_new_instance_method(_OpenLxApp.vector_Geometry_pop_back)
    erase = _swig_new_instance_method(_OpenLxApp.vector_Geometry_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_Geometry self) -> vector_Geometry
        __init__(vector_Geometry self, vector_Geometry other) -> vector_Geometry
        __init__(vector_Geometry self, std::vector< std::shared_ptr< OpenLxApp::Geometry > >::size_type size) -> vector_Geometry
        __init__(vector_Geometry self, std::vector< std::shared_ptr< OpenLxApp::Geometry > >::size_type size, std::vector< std::shared_ptr< OpenLxApp::Geometry > >::value_type const & value) -> vector_Geometry
        """
        _OpenLxApp.vector_Geometry_swiginit(self, _OpenLxApp.new_vector_Geometry(*args))
    push_back = _swig_new_instance_method(_OpenLxApp.vector_Geometry_push_back)
    front = _swig_new_instance_method(_OpenLxApp.vector_Geometry_front)
    back = _swig_new_instance_method(_OpenLxApp.vector_Geometry_back)
    assign = _swig_new_instance_method(_OpenLxApp.vector_Geometry_assign)
    resize = _swig_new_instance_method(_OpenLxApp.vector_Geometry_resize)
    insert = _swig_new_instance_method(_OpenLxApp.vector_Geometry_insert)
    reserve = _swig_new_instance_method(_OpenLxApp.vector_Geometry_reserve)
    capacity = _swig_new_instance_method(_OpenLxApp.vector_Geometry_capacity)
    __swig_destroy__ = _OpenLxApp.delete_vector_Geometry

# Register vector_Geometry in _OpenLxApp:
_OpenLxApp.vector_Geometry_swigregister(vector_Geometry)
class vector_GeometryProxy(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< OpenLxApp::GeometryProxy > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_OpenLxApp.vector_GeometryProxy_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_OpenLxApp.vector_GeometryProxy___nonzero__)
    __bool__ = _swig_new_instance_method(_OpenLxApp.vector_GeometryProxy___bool__)
    __len__ = _swig_new_instance_method(_OpenLxApp.vector_GeometryProxy___len__)
    __getslice__ = _swig_new_instance_method(_OpenLxApp.vector_GeometryProxy___getslice__)
    __setslice__ = _swig_new_instance_method(_OpenLxApp.vector_GeometryProxy___setslice__)
    __delslice__ = _swig_new_instance_method(_OpenLxApp.vector_GeometryProxy___delslice__)
    __delitem__ = _swig_new_instance_method(_OpenLxApp.vector_GeometryProxy___delitem__)
    __getitem__ = _swig_new_instance_method(_OpenLxApp.vector_GeometryProxy___getitem__)
    __setitem__ = _swig_new_instance_method(_OpenLxApp.vector_GeometryProxy___setitem__)
    pop = _swig_new_instance_method(_OpenLxApp.vector_GeometryProxy_pop)
    append = _swig_new_instance_method(_OpenLxApp.vector_GeometryProxy_append)
    empty = _swig_new_instance_method(_OpenLxApp.vector_GeometryProxy_empty)
    size = _swig_new_instance_method(_OpenLxApp.vector_GeometryProxy_size)
    swap = _swig_new_instance_method(_OpenLxApp.vector_GeometryProxy_swap)
    begin = _swig_new_instance_method(_OpenLxApp.vector_GeometryProxy_begin)
    end = _swig_new_instance_method(_OpenLxApp.vector_GeometryProxy_end)
    rbegin = _swig_new_instance_method(_OpenLxApp.vector_GeometryProxy_rbegin)
    rend = _swig_new_instance_method(_OpenLxApp.vector_GeometryProxy_rend)
    clear = _swig_new_instance_method(_OpenLxApp.vector_GeometryProxy_clear)
    get_allocator = _swig_new_instance_method(_OpenLxApp.vector_GeometryProxy_get_allocator)
    pop_back = _swig_new_instance_method(_OpenLxApp.vector_GeometryProxy_pop_back)
    erase = _swig_new_instance_method(_OpenLxApp.vector_GeometryProxy_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_GeometryProxy self) -> vector_GeometryProxy
        __init__(vector_GeometryProxy self, vector_GeometryProxy other) -> vector_GeometryProxy
        __init__(vector_GeometryProxy self, std::vector< std::shared_ptr< OpenLxApp::GeometryProxy > >::size_type size) -> vector_GeometryProxy
        __init__(vector_GeometryProxy self, std::vector< std::shared_ptr< OpenLxApp::GeometryProxy > >::size_type size, std::vector< std::shared_ptr< OpenLxApp::GeometryProxy > >::value_type const & value) -> vector_GeometryProxy
        """
        _OpenLxApp.vector_GeometryProxy_swiginit(self, _OpenLxApp.new_vector_GeometryProxy(*args))
    push_back = _swig_new_instance_method(_OpenLxApp.vector_GeometryProxy_push_back)
    front = _swig_new_instance_method(_OpenLxApp.vector_GeometryProxy_front)
    back = _swig_new_instance_method(_OpenLxApp.vector_GeometryProxy_back)
    assign = _swig_new_instance_method(_OpenLxApp.vector_GeometryProxy_assign)
    resize = _swig_new_instance_method(_OpenLxApp.vector_GeometryProxy_resize)
    insert = _swig_new_instance_method(_OpenLxApp.vector_GeometryProxy_insert)
    reserve = _swig_new_instance_method(_OpenLxApp.vector_GeometryProxy_reserve)
    capacity = _swig_new_instance_method(_OpenLxApp.vector_GeometryProxy_capacity)
    __swig_destroy__ = _OpenLxApp.delete_vector_GeometryProxy

# Register vector_GeometryProxy in _OpenLxApp:
_OpenLxApp.vector_GeometryProxy_swigregister(vector_GeometryProxy)
class vector_GeotechnicalStratum(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< OpenLxApp::GeotechnicalStratum > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_OpenLxApp.vector_GeotechnicalStratum_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_OpenLxApp.vector_GeotechnicalStratum___nonzero__)
    __bool__ = _swig_new_instance_method(_OpenLxApp.vector_GeotechnicalStratum___bool__)
    __len__ = _swig_new_instance_method(_OpenLxApp.vector_GeotechnicalStratum___len__)
    __getslice__ = _swig_new_instance_method(_OpenLxApp.vector_GeotechnicalStratum___getslice__)
    __setslice__ = _swig_new_instance_method(_OpenLxApp.vector_GeotechnicalStratum___setslice__)
    __delslice__ = _swig_new_instance_method(_OpenLxApp.vector_GeotechnicalStratum___delslice__)
    __delitem__ = _swig_new_instance_method(_OpenLxApp.vector_GeotechnicalStratum___delitem__)
    __getitem__ = _swig_new_instance_method(_OpenLxApp.vector_GeotechnicalStratum___getitem__)
    __setitem__ = _swig_new_instance_method(_OpenLxApp.vector_GeotechnicalStratum___setitem__)
    pop = _swig_new_instance_method(_OpenLxApp.vector_GeotechnicalStratum_pop)
    append = _swig_new_instance_method(_OpenLxApp.vector_GeotechnicalStratum_append)
    empty = _swig_new_instance_method(_OpenLxApp.vector_GeotechnicalStratum_empty)
    size = _swig_new_instance_method(_OpenLxApp.vector_GeotechnicalStratum_size)
    swap = _swig_new_instance_method(_OpenLxApp.vector_GeotechnicalStratum_swap)
    begin = _swig_new_instance_method(_OpenLxApp.vector_GeotechnicalStratum_begin)
    end = _swig_new_instance_method(_OpenLxApp.vector_GeotechnicalStratum_end)
    rbegin = _swig_new_instance_method(_OpenLxApp.vector_GeotechnicalStratum_rbegin)
    rend = _swig_new_instance_method(_OpenLxApp.vector_GeotechnicalStratum_rend)
    clear = _swig_new_instance_method(_OpenLxApp.vector_GeotechnicalStratum_clear)
    get_allocator = _swig_new_instance_method(_OpenLxApp.vector_GeotechnicalStratum_get_allocator)
    pop_back = _swig_new_instance_method(_OpenLxApp.vector_GeotechnicalStratum_pop_back)
    erase = _swig_new_instance_method(_OpenLxApp.vector_GeotechnicalStratum_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_GeotechnicalStratum self) -> vector_GeotechnicalStratum
        __init__(vector_GeotechnicalStratum self, vector_GeotechnicalStratum other) -> vector_GeotechnicalStratum
        __init__(vector_GeotechnicalStratum self, std::vector< std::shared_ptr< OpenLxApp::GeotechnicalStratum > >::size_type size) -> vector_GeotechnicalStratum
        __init__(vector_GeotechnicalStratum self, std::vector< std::shared_ptr< OpenLxApp::GeotechnicalStratum > >::size_type size, std::vector< std::shared_ptr< OpenLxApp::GeotechnicalStratum > >::value_type const & value) -> vector_GeotechnicalStratum
        """
        _OpenLxApp.vector_GeotechnicalStratum_swiginit(self, _OpenLxApp.new_vector_GeotechnicalStratum(*args))
    push_back = _swig_new_instance_method(_OpenLxApp.vector_GeotechnicalStratum_push_back)
    front = _swig_new_instance_method(_OpenLxApp.vector_GeotechnicalStratum_front)
    back = _swig_new_instance_method(_OpenLxApp.vector_GeotechnicalStratum_back)
    assign = _swig_new_instance_method(_OpenLxApp.vector_GeotechnicalStratum_assign)
    resize = _swig_new_instance_method(_OpenLxApp.vector_GeotechnicalStratum_resize)
    insert = _swig_new_instance_method(_OpenLxApp.vector_GeotechnicalStratum_insert)
    reserve = _swig_new_instance_method(_OpenLxApp.vector_GeotechnicalStratum_reserve)
    capacity = _swig_new_instance_method(_OpenLxApp.vector_GeotechnicalStratum_capacity)
    __swig_destroy__ = _OpenLxApp.delete_vector_GeotechnicalStratum

# Register vector_GeotechnicalStratum in _OpenLxApp:
_OpenLxApp.vector_GeotechnicalStratum_swigregister(vector_GeotechnicalStratum)
class vector_Group(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< OpenLxApp::Group > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_OpenLxApp.vector_Group_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_OpenLxApp.vector_Group___nonzero__)
    __bool__ = _swig_new_instance_method(_OpenLxApp.vector_Group___bool__)
    __len__ = _swig_new_instance_method(_OpenLxApp.vector_Group___len__)
    __getslice__ = _swig_new_instance_method(_OpenLxApp.vector_Group___getslice__)
    __setslice__ = _swig_new_instance_method(_OpenLxApp.vector_Group___setslice__)
    __delslice__ = _swig_new_instance_method(_OpenLxApp.vector_Group___delslice__)
    __delitem__ = _swig_new_instance_method(_OpenLxApp.vector_Group___delitem__)
    __getitem__ = _swig_new_instance_method(_OpenLxApp.vector_Group___getitem__)
    __setitem__ = _swig_new_instance_method(_OpenLxApp.vector_Group___setitem__)
    pop = _swig_new_instance_method(_OpenLxApp.vector_Group_pop)
    append = _swig_new_instance_method(_OpenLxApp.vector_Group_append)
    empty = _swig_new_instance_method(_OpenLxApp.vector_Group_empty)
    size = _swig_new_instance_method(_OpenLxApp.vector_Group_size)
    swap = _swig_new_instance_method(_OpenLxApp.vector_Group_swap)
    begin = _swig_new_instance_method(_OpenLxApp.vector_Group_begin)
    end = _swig_new_instance_method(_OpenLxApp.vector_Group_end)
    rbegin = _swig_new_instance_method(_OpenLxApp.vector_Group_rbegin)
    rend = _swig_new_instance_method(_OpenLxApp.vector_Group_rend)
    clear = _swig_new_instance_method(_OpenLxApp.vector_Group_clear)
    get_allocator = _swig_new_instance_method(_OpenLxApp.vector_Group_get_allocator)
    pop_back = _swig_new_instance_method(_OpenLxApp.vector_Group_pop_back)
    erase = _swig_new_instance_method(_OpenLxApp.vector_Group_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_Group self) -> vector_Group
        __init__(vector_Group self, vector_Group other) -> vector_Group
        __init__(vector_Group self, std::vector< std::shared_ptr< OpenLxApp::Group > >::size_type size) -> vector_Group
        __init__(vector_Group self, std::vector< std::shared_ptr< OpenLxApp::Group > >::size_type size, std::vector< std::shared_ptr< OpenLxApp::Group > >::value_type const & value) -> vector_Group
        """
        _OpenLxApp.vector_Group_swiginit(self, _OpenLxApp.new_vector_Group(*args))
    push_back = _swig_new_instance_method(_OpenLxApp.vector_Group_push_back)
    front = _swig_new_instance_method(_OpenLxApp.vector_Group_front)
    back = _swig_new_instance_method(_OpenLxApp.vector_Group_back)
    assign = _swig_new_instance_method(_OpenLxApp.vector_Group_assign)
    resize = _swig_new_instance_method(_OpenLxApp.vector_Group_resize)
    insert = _swig_new_instance_method(_OpenLxApp.vector_Group_insert)
    reserve = _swig_new_instance_method(_OpenLxApp.vector_Group_reserve)
    capacity = _swig_new_instance_method(_OpenLxApp.vector_Group_capacity)
    __swig_destroy__ = _OpenLxApp.delete_vector_Group

# Register vector_Group in _OpenLxApp:
_OpenLxApp.vector_Group_swigregister(vector_Group)
class vector_ImpactProtectionDevice(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< OpenLxApp::ImpactProtectionDevice > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_OpenLxApp.vector_ImpactProtectionDevice_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_OpenLxApp.vector_ImpactProtectionDevice___nonzero__)
    __bool__ = _swig_new_instance_method(_OpenLxApp.vector_ImpactProtectionDevice___bool__)
    __len__ = _swig_new_instance_method(_OpenLxApp.vector_ImpactProtectionDevice___len__)
    __getslice__ = _swig_new_instance_method(_OpenLxApp.vector_ImpactProtectionDevice___getslice__)
    __setslice__ = _swig_new_instance_method(_OpenLxApp.vector_ImpactProtectionDevice___setslice__)
    __delslice__ = _swig_new_instance_method(_OpenLxApp.vector_ImpactProtectionDevice___delslice__)
    __delitem__ = _swig_new_instance_method(_OpenLxApp.vector_ImpactProtectionDevice___delitem__)
    __getitem__ = _swig_new_instance_method(_OpenLxApp.vector_ImpactProtectionDevice___getitem__)
    __setitem__ = _swig_new_instance_method(_OpenLxApp.vector_ImpactProtectionDevice___setitem__)
    pop = _swig_new_instance_method(_OpenLxApp.vector_ImpactProtectionDevice_pop)
    append = _swig_new_instance_method(_OpenLxApp.vector_ImpactProtectionDevice_append)
    empty = _swig_new_instance_method(_OpenLxApp.vector_ImpactProtectionDevice_empty)
    size = _swig_new_instance_method(_OpenLxApp.vector_ImpactProtectionDevice_size)
    swap = _swig_new_instance_method(_OpenLxApp.vector_ImpactProtectionDevice_swap)
    begin = _swig_new_instance_method(_OpenLxApp.vector_ImpactProtectionDevice_begin)
    end = _swig_new_instance_method(_OpenLxApp.vector_ImpactProtectionDevice_end)
    rbegin = _swig_new_instance_method(_OpenLxApp.vector_ImpactProtectionDevice_rbegin)
    rend = _swig_new_instance_method(_OpenLxApp.vector_ImpactProtectionDevice_rend)
    clear = _swig_new_instance_method(_OpenLxApp.vector_ImpactProtectionDevice_clear)
    get_allocator = _swig_new_instance_method(_OpenLxApp.vector_ImpactProtectionDevice_get_allocator)
    pop_back = _swig_new_instance_method(_OpenLxApp.vector_ImpactProtectionDevice_pop_back)
    erase = _swig_new_instance_method(_OpenLxApp.vector_ImpactProtectionDevice_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_ImpactProtectionDevice self) -> vector_ImpactProtectionDevice
        __init__(vector_ImpactProtectionDevice self, vector_ImpactProtectionDevice other) -> vector_ImpactProtectionDevice
        __init__(vector_ImpactProtectionDevice self, std::vector< std::shared_ptr< OpenLxApp::ImpactProtectionDevice > >::size_type size) -> vector_ImpactProtectionDevice
        __init__(vector_ImpactProtectionDevice self, std::vector< std::shared_ptr< OpenLxApp::ImpactProtectionDevice > >::size_type size, std::vector< std::shared_ptr< OpenLxApp::ImpactProtectionDevice > >::value_type const & value) -> vector_ImpactProtectionDevice
        """
        _OpenLxApp.vector_ImpactProtectionDevice_swiginit(self, _OpenLxApp.new_vector_ImpactProtectionDevice(*args))
    push_back = _swig_new_instance_method(_OpenLxApp.vector_ImpactProtectionDevice_push_back)
    front = _swig_new_instance_method(_OpenLxApp.vector_ImpactProtectionDevice_front)
    back = _swig_new_instance_method(_OpenLxApp.vector_ImpactProtectionDevice_back)
    assign = _swig_new_instance_method(_OpenLxApp.vector_ImpactProtectionDevice_assign)
    resize = _swig_new_instance_method(_OpenLxApp.vector_ImpactProtectionDevice_resize)
    insert = _swig_new_instance_method(_OpenLxApp.vector_ImpactProtectionDevice_insert)
    reserve = _swig_new_instance_method(_OpenLxApp.vector_ImpactProtectionDevice_reserve)
    capacity = _swig_new_instance_method(_OpenLxApp.vector_ImpactProtectionDevice_capacity)
    __swig_destroy__ = _OpenLxApp.delete_vector_ImpactProtectionDevice

# Register vector_ImpactProtectionDevice in _OpenLxApp:
_OpenLxApp.vector_ImpactProtectionDevice_swigregister(vector_ImpactProtectionDevice)
class vector_InventorImport(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< OpenLxApp::InventorImport > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_OpenLxApp.vector_InventorImport_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_OpenLxApp.vector_InventorImport___nonzero__)
    __bool__ = _swig_new_instance_method(_OpenLxApp.vector_InventorImport___bool__)
    __len__ = _swig_new_instance_method(_OpenLxApp.vector_InventorImport___len__)
    __getslice__ = _swig_new_instance_method(_OpenLxApp.vector_InventorImport___getslice__)
    __setslice__ = _swig_new_instance_method(_OpenLxApp.vector_InventorImport___setslice__)
    __delslice__ = _swig_new_instance_method(_OpenLxApp.vector_InventorImport___delslice__)
    __delitem__ = _swig_new_instance_method(_OpenLxApp.vector_InventorImport___delitem__)
    __getitem__ = _swig_new_instance_method(_OpenLxApp.vector_InventorImport___getitem__)
    __setitem__ = _swig_new_instance_method(_OpenLxApp.vector_InventorImport___setitem__)
    pop = _swig_new_instance_method(_OpenLxApp.vector_InventorImport_pop)
    append = _swig_new_instance_method(_OpenLxApp.vector_InventorImport_append)
    empty = _swig_new_instance_method(_OpenLxApp.vector_InventorImport_empty)
    size = _swig_new_instance_method(_OpenLxApp.vector_InventorImport_size)
    swap = _swig_new_instance_method(_OpenLxApp.vector_InventorImport_swap)
    begin = _swig_new_instance_method(_OpenLxApp.vector_InventorImport_begin)
    end = _swig_new_instance_method(_OpenLxApp.vector_InventorImport_end)
    rbegin = _swig_new_instance_method(_OpenLxApp.vector_InventorImport_rbegin)
    rend = _swig_new_instance_method(_OpenLxApp.vector_InventorImport_rend)
    clear = _swig_new_instance_method(_OpenLxApp.vector_InventorImport_clear)
    get_allocator = _swig_new_instance_method(_OpenLxApp.vector_InventorImport_get_allocator)
    pop_back = _swig_new_instance_method(_OpenLxApp.vector_InventorImport_pop_back)
    erase = _swig_new_instance_method(_OpenLxApp.vector_InventorImport_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_InventorImport self) -> vector_InventorImport
        __init__(vector_InventorImport self, vector_InventorImport other) -> vector_InventorImport
        __init__(vector_InventorImport self, std::vector< std::shared_ptr< OpenLxApp::InventorImport > >::size_type size) -> vector_InventorImport
        __init__(vector_InventorImport self, std::vector< std::shared_ptr< OpenLxApp::InventorImport > >::size_type size, std::vector< std::shared_ptr< OpenLxApp::InventorImport > >::value_type const & value) -> vector_InventorImport
        """
        _OpenLxApp.vector_InventorImport_swiginit(self, _OpenLxApp.new_vector_InventorImport(*args))
    push_back = _swig_new_instance_method(_OpenLxApp.vector_InventorImport_push_back)
    front = _swig_new_instance_method(_OpenLxApp.vector_InventorImport_front)
    back = _swig_new_instance_method(_OpenLxApp.vector_InventorImport_back)
    assign = _swig_new_instance_method(_OpenLxApp.vector_InventorImport_assign)
    resize = _swig_new_instance_method(_OpenLxApp.vector_InventorImport_resize)
    insert = _swig_new_instance_method(_OpenLxApp.vector_InventorImport_insert)
    reserve = _swig_new_instance_method(_OpenLxApp.vector_InventorImport_reserve)
    capacity = _swig_new_instance_method(_OpenLxApp.vector_InventorImport_capacity)
    __swig_destroy__ = _OpenLxApp.delete_vector_InventorImport

# Register vector_InventorImport in _OpenLxApp:
_OpenLxApp.vector_InventorImport_swigregister(vector_InventorImport)
class vector_IShapeProfileDef(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< OpenLxApp::IShapeProfileDef > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_OpenLxApp.vector_IShapeProfileDef_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_OpenLxApp.vector_IShapeProfileDef___nonzero__)
    __bool__ = _swig_new_instance_method(_OpenLxApp.vector_IShapeProfileDef___bool__)
    __len__ = _swig_new_instance_method(_OpenLxApp.vector_IShapeProfileDef___len__)
    __getslice__ = _swig_new_instance_method(_OpenLxApp.vector_IShapeProfileDef___getslice__)
    __setslice__ = _swig_new_instance_method(_OpenLxApp.vector_IShapeProfileDef___setslice__)
    __delslice__ = _swig_new_instance_method(_OpenLxApp.vector_IShapeProfileDef___delslice__)
    __delitem__ = _swig_new_instance_method(_OpenLxApp.vector_IShapeProfileDef___delitem__)
    __getitem__ = _swig_new_instance_method(_OpenLxApp.vector_IShapeProfileDef___getitem__)
    __setitem__ = _swig_new_instance_method(_OpenLxApp.vector_IShapeProfileDef___setitem__)
    pop = _swig_new_instance_method(_OpenLxApp.vector_IShapeProfileDef_pop)
    append = _swig_new_instance_method(_OpenLxApp.vector_IShapeProfileDef_append)
    empty = _swig_new_instance_method(_OpenLxApp.vector_IShapeProfileDef_empty)
    size = _swig_new_instance_method(_OpenLxApp.vector_IShapeProfileDef_size)
    swap = _swig_new_instance_method(_OpenLxApp.vector_IShapeProfileDef_swap)
    begin = _swig_new_instance_method(_OpenLxApp.vector_IShapeProfileDef_begin)
    end = _swig_new_instance_method(_OpenLxApp.vector_IShapeProfileDef_end)
    rbegin = _swig_new_instance_method(_OpenLxApp.vector_IShapeProfileDef_rbegin)
    rend = _swig_new_instance_method(_OpenLxApp.vector_IShapeProfileDef_rend)
    clear = _swig_new_instance_method(_OpenLxApp.vector_IShapeProfileDef_clear)
    get_allocator = _swig_new_instance_method(_OpenLxApp.vector_IShapeProfileDef_get_allocator)
    pop_back = _swig_new_instance_method(_OpenLxApp.vector_IShapeProfileDef_pop_back)
    erase = _swig_new_instance_method(_OpenLxApp.vector_IShapeProfileDef_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_IShapeProfileDef self) -> vector_IShapeProfileDef
        __init__(vector_IShapeProfileDef self, vector_IShapeProfileDef other) -> vector_IShapeProfileDef
        __init__(vector_IShapeProfileDef self, std::vector< std::shared_ptr< OpenLxApp::IShapeProfileDef > >::size_type size) -> vector_IShapeProfileDef
        __init__(vector_IShapeProfileDef self, std::vector< std::shared_ptr< OpenLxApp::IShapeProfileDef > >::size_type size, std::vector< std::shared_ptr< OpenLxApp::IShapeProfileDef > >::value_type const & value) -> vector_IShapeProfileDef
        """
        _OpenLxApp.vector_IShapeProfileDef_swiginit(self, _OpenLxApp.new_vector_IShapeProfileDef(*args))
    push_back = _swig_new_instance_method(_OpenLxApp.vector_IShapeProfileDef_push_back)
    front = _swig_new_instance_method(_OpenLxApp.vector_IShapeProfileDef_front)
    back = _swig_new_instance_method(_OpenLxApp.vector_IShapeProfileDef_back)
    assign = _swig_new_instance_method(_OpenLxApp.vector_IShapeProfileDef_assign)
    resize = _swig_new_instance_method(_OpenLxApp.vector_IShapeProfileDef_resize)
    insert = _swig_new_instance_method(_OpenLxApp.vector_IShapeProfileDef_insert)
    reserve = _swig_new_instance_method(_OpenLxApp.vector_IShapeProfileDef_reserve)
    capacity = _swig_new_instance_method(_OpenLxApp.vector_IShapeProfileDef_capacity)
    __swig_destroy__ = _OpenLxApp.delete_vector_IShapeProfileDef

# Register vector_IShapeProfileDef in _OpenLxApp:
_OpenLxApp.vector_IShapeProfileDef_swigregister(vector_IShapeProfileDef)
class vector_Kerb(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< OpenLxApp::Kerb > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_OpenLxApp.vector_Kerb_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_OpenLxApp.vector_Kerb___nonzero__)
    __bool__ = _swig_new_instance_method(_OpenLxApp.vector_Kerb___bool__)
    __len__ = _swig_new_instance_method(_OpenLxApp.vector_Kerb___len__)
    __getslice__ = _swig_new_instance_method(_OpenLxApp.vector_Kerb___getslice__)
    __setslice__ = _swig_new_instance_method(_OpenLxApp.vector_Kerb___setslice__)
    __delslice__ = _swig_new_instance_method(_OpenLxApp.vector_Kerb___delslice__)
    __delitem__ = _swig_new_instance_method(_OpenLxApp.vector_Kerb___delitem__)
    __getitem__ = _swig_new_instance_method(_OpenLxApp.vector_Kerb___getitem__)
    __setitem__ = _swig_new_instance_method(_OpenLxApp.vector_Kerb___setitem__)
    pop = _swig_new_instance_method(_OpenLxApp.vector_Kerb_pop)
    append = _swig_new_instance_method(_OpenLxApp.vector_Kerb_append)
    empty = _swig_new_instance_method(_OpenLxApp.vector_Kerb_empty)
    size = _swig_new_instance_method(_OpenLxApp.vector_Kerb_size)
    swap = _swig_new_instance_method(_OpenLxApp.vector_Kerb_swap)
    begin = _swig_new_instance_method(_OpenLxApp.vector_Kerb_begin)
    end = _swig_new_instance_method(_OpenLxApp.vector_Kerb_end)
    rbegin = _swig_new_instance_method(_OpenLxApp.vector_Kerb_rbegin)
    rend = _swig_new_instance_method(_OpenLxApp.vector_Kerb_rend)
    clear = _swig_new_instance_method(_OpenLxApp.vector_Kerb_clear)
    get_allocator = _swig_new_instance_method(_OpenLxApp.vector_Kerb_get_allocator)
    pop_back = _swig_new_instance_method(_OpenLxApp.vector_Kerb_pop_back)
    erase = _swig_new_instance_method(_OpenLxApp.vector_Kerb_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_Kerb self) -> vector_Kerb
        __init__(vector_Kerb self, vector_Kerb other) -> vector_Kerb
        __init__(vector_Kerb self, std::vector< std::shared_ptr< OpenLxApp::Kerb > >::size_type size) -> vector_Kerb
        __init__(vector_Kerb self, std::vector< std::shared_ptr< OpenLxApp::Kerb > >::size_type size, std::vector< std::shared_ptr< OpenLxApp::Kerb > >::value_type const & value) -> vector_Kerb
        """
        _OpenLxApp.vector_Kerb_swiginit(self, _OpenLxApp.new_vector_Kerb(*args))
    push_back = _swig_new_instance_method(_OpenLxApp.vector_Kerb_push_back)
    front = _swig_new_instance_method(_OpenLxApp.vector_Kerb_front)
    back = _swig_new_instance_method(_OpenLxApp.vector_Kerb_back)
    assign = _swig_new_instance_method(_OpenLxApp.vector_Kerb_assign)
    resize = _swig_new_instance_method(_OpenLxApp.vector_Kerb_resize)
    insert = _swig_new_instance_method(_OpenLxApp.vector_Kerb_insert)
    reserve = _swig_new_instance_method(_OpenLxApp.vector_Kerb_reserve)
    capacity = _swig_new_instance_method(_OpenLxApp.vector_Kerb_capacity)
    __swig_destroy__ = _OpenLxApp.delete_vector_Kerb

# Register vector_Kerb in _OpenLxApp:
_OpenLxApp.vector_Kerb_swigregister(vector_Kerb)
class vector_Lamp(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< OpenLxApp::Lamp > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_OpenLxApp.vector_Lamp_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_OpenLxApp.vector_Lamp___nonzero__)
    __bool__ = _swig_new_instance_method(_OpenLxApp.vector_Lamp___bool__)
    __len__ = _swig_new_instance_method(_OpenLxApp.vector_Lamp___len__)
    __getslice__ = _swig_new_instance_method(_OpenLxApp.vector_Lamp___getslice__)
    __setslice__ = _swig_new_instance_method(_OpenLxApp.vector_Lamp___setslice__)
    __delslice__ = _swig_new_instance_method(_OpenLxApp.vector_Lamp___delslice__)
    __delitem__ = _swig_new_instance_method(_OpenLxApp.vector_Lamp___delitem__)
    __getitem__ = _swig_new_instance_method(_OpenLxApp.vector_Lamp___getitem__)
    __setitem__ = _swig_new_instance_method(_OpenLxApp.vector_Lamp___setitem__)
    pop = _swig_new_instance_method(_OpenLxApp.vector_Lamp_pop)
    append = _swig_new_instance_method(_OpenLxApp.vector_Lamp_append)
    empty = _swig_new_instance_method(_OpenLxApp.vector_Lamp_empty)
    size = _swig_new_instance_method(_OpenLxApp.vector_Lamp_size)
    swap = _swig_new_instance_method(_OpenLxApp.vector_Lamp_swap)
    begin = _swig_new_instance_method(_OpenLxApp.vector_Lamp_begin)
    end = _swig_new_instance_method(_OpenLxApp.vector_Lamp_end)
    rbegin = _swig_new_instance_method(_OpenLxApp.vector_Lamp_rbegin)
    rend = _swig_new_instance_method(_OpenLxApp.vector_Lamp_rend)
    clear = _swig_new_instance_method(_OpenLxApp.vector_Lamp_clear)
    get_allocator = _swig_new_instance_method(_OpenLxApp.vector_Lamp_get_allocator)
    pop_back = _swig_new_instance_method(_OpenLxApp.vector_Lamp_pop_back)
    erase = _swig_new_instance_method(_OpenLxApp.vector_Lamp_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_Lamp self) -> vector_Lamp
        __init__(vector_Lamp self, vector_Lamp other) -> vector_Lamp
        __init__(vector_Lamp self, std::vector< std::shared_ptr< OpenLxApp::Lamp > >::size_type size) -> vector_Lamp
        __init__(vector_Lamp self, std::vector< std::shared_ptr< OpenLxApp::Lamp > >::size_type size, std::vector< std::shared_ptr< OpenLxApp::Lamp > >::value_type const & value) -> vector_Lamp
        """
        _OpenLxApp.vector_Lamp_swiginit(self, _OpenLxApp.new_vector_Lamp(*args))
    push_back = _swig_new_instance_method(_OpenLxApp.vector_Lamp_push_back)
    front = _swig_new_instance_method(_OpenLxApp.vector_Lamp_front)
    back = _swig_new_instance_method(_OpenLxApp.vector_Lamp_back)
    assign = _swig_new_instance_method(_OpenLxApp.vector_Lamp_assign)
    resize = _swig_new_instance_method(_OpenLxApp.vector_Lamp_resize)
    insert = _swig_new_instance_method(_OpenLxApp.vector_Lamp_insert)
    reserve = _swig_new_instance_method(_OpenLxApp.vector_Lamp_reserve)
    capacity = _swig_new_instance_method(_OpenLxApp.vector_Lamp_capacity)
    __swig_destroy__ = _OpenLxApp.delete_vector_Lamp

# Register vector_Lamp in _OpenLxApp:
_OpenLxApp.vector_Lamp_swigregister(vector_Lamp)
class vector_Layer(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< OpenLxApp::Layer > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_OpenLxApp.vector_Layer_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_OpenLxApp.vector_Layer___nonzero__)
    __bool__ = _swig_new_instance_method(_OpenLxApp.vector_Layer___bool__)
    __len__ = _swig_new_instance_method(_OpenLxApp.vector_Layer___len__)
    __getslice__ = _swig_new_instance_method(_OpenLxApp.vector_Layer___getslice__)
    __setslice__ = _swig_new_instance_method(_OpenLxApp.vector_Layer___setslice__)
    __delslice__ = _swig_new_instance_method(_OpenLxApp.vector_Layer___delslice__)
    __delitem__ = _swig_new_instance_method(_OpenLxApp.vector_Layer___delitem__)
    __getitem__ = _swig_new_instance_method(_OpenLxApp.vector_Layer___getitem__)
    __setitem__ = _swig_new_instance_method(_OpenLxApp.vector_Layer___setitem__)
    pop = _swig_new_instance_method(_OpenLxApp.vector_Layer_pop)
    append = _swig_new_instance_method(_OpenLxApp.vector_Layer_append)
    empty = _swig_new_instance_method(_OpenLxApp.vector_Layer_empty)
    size = _swig_new_instance_method(_OpenLxApp.vector_Layer_size)
    swap = _swig_new_instance_method(_OpenLxApp.vector_Layer_swap)
    begin = _swig_new_instance_method(_OpenLxApp.vector_Layer_begin)
    end = _swig_new_instance_method(_OpenLxApp.vector_Layer_end)
    rbegin = _swig_new_instance_method(_OpenLxApp.vector_Layer_rbegin)
    rend = _swig_new_instance_method(_OpenLxApp.vector_Layer_rend)
    clear = _swig_new_instance_method(_OpenLxApp.vector_Layer_clear)
    get_allocator = _swig_new_instance_method(_OpenLxApp.vector_Layer_get_allocator)
    pop_back = _swig_new_instance_method(_OpenLxApp.vector_Layer_pop_back)
    erase = _swig_new_instance_method(_OpenLxApp.vector_Layer_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_Layer self) -> vector_Layer
        __init__(vector_Layer self, vector_Layer other) -> vector_Layer
        __init__(vector_Layer self, std::vector< std::shared_ptr< OpenLxApp::Layer > >::size_type size) -> vector_Layer
        __init__(vector_Layer self, std::vector< std::shared_ptr< OpenLxApp::Layer > >::size_type size, std::vector< std::shared_ptr< OpenLxApp::Layer > >::value_type const & value) -> vector_Layer
        """
        _OpenLxApp.vector_Layer_swiginit(self, _OpenLxApp.new_vector_Layer(*args))
    push_back = _swig_new_instance_method(_OpenLxApp.vector_Layer_push_back)
    front = _swig_new_instance_method(_OpenLxApp.vector_Layer_front)
    back = _swig_new_instance_method(_OpenLxApp.vector_Layer_back)
    assign = _swig_new_instance_method(_OpenLxApp.vector_Layer_assign)
    resize = _swig_new_instance_method(_OpenLxApp.vector_Layer_resize)
    insert = _swig_new_instance_method(_OpenLxApp.vector_Layer_insert)
    reserve = _swig_new_instance_method(_OpenLxApp.vector_Layer_reserve)
    capacity = _swig_new_instance_method(_OpenLxApp.vector_Layer_capacity)
    __swig_destroy__ = _OpenLxApp.delete_vector_Layer

# Register vector_Layer in _OpenLxApp:
_OpenLxApp.vector_Layer_swigregister(vector_Layer)
class vector_LayerIfc(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< OpenLxApp::LayerIfc > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_OpenLxApp.vector_LayerIfc_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_OpenLxApp.vector_LayerIfc___nonzero__)
    __bool__ = _swig_new_instance_method(_OpenLxApp.vector_LayerIfc___bool__)
    __len__ = _swig_new_instance_method(_OpenLxApp.vector_LayerIfc___len__)
    __getslice__ = _swig_new_instance_method(_OpenLxApp.vector_LayerIfc___getslice__)
    __setslice__ = _swig_new_instance_method(_OpenLxApp.vector_LayerIfc___setslice__)
    __delslice__ = _swig_new_instance_method(_OpenLxApp.vector_LayerIfc___delslice__)
    __delitem__ = _swig_new_instance_method(_OpenLxApp.vector_LayerIfc___delitem__)
    __getitem__ = _swig_new_instance_method(_OpenLxApp.vector_LayerIfc___getitem__)
    __setitem__ = _swig_new_instance_method(_OpenLxApp.vector_LayerIfc___setitem__)
    pop = _swig_new_instance_method(_OpenLxApp.vector_LayerIfc_pop)
    append = _swig_new_instance_method(_OpenLxApp.vector_LayerIfc_append)
    empty = _swig_new_instance_method(_OpenLxApp.vector_LayerIfc_empty)
    size = _swig_new_instance_method(_OpenLxApp.vector_LayerIfc_size)
    swap = _swig_new_instance_method(_OpenLxApp.vector_LayerIfc_swap)
    begin = _swig_new_instance_method(_OpenLxApp.vector_LayerIfc_begin)
    end = _swig_new_instance_method(_OpenLxApp.vector_LayerIfc_end)
    rbegin = _swig_new_instance_method(_OpenLxApp.vector_LayerIfc_rbegin)
    rend = _swig_new_instance_method(_OpenLxApp.vector_LayerIfc_rend)
    clear = _swig_new_instance_method(_OpenLxApp.vector_LayerIfc_clear)
    get_allocator = _swig_new_instance_method(_OpenLxApp.vector_LayerIfc_get_allocator)
    pop_back = _swig_new_instance_method(_OpenLxApp.vector_LayerIfc_pop_back)
    erase = _swig_new_instance_method(_OpenLxApp.vector_LayerIfc_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_LayerIfc self) -> vector_LayerIfc
        __init__(vector_LayerIfc self, vector_LayerIfc other) -> vector_LayerIfc
        __init__(vector_LayerIfc self, std::vector< std::shared_ptr< OpenLxApp::LayerIfc > >::size_type size) -> vector_LayerIfc
        __init__(vector_LayerIfc self, std::vector< std::shared_ptr< OpenLxApp::LayerIfc > >::size_type size, std::vector< std::shared_ptr< OpenLxApp::LayerIfc > >::value_type const & value) -> vector_LayerIfc
        """
        _OpenLxApp.vector_LayerIfc_swiginit(self, _OpenLxApp.new_vector_LayerIfc(*args))
    push_back = _swig_new_instance_method(_OpenLxApp.vector_LayerIfc_push_back)
    front = _swig_new_instance_method(_OpenLxApp.vector_LayerIfc_front)
    back = _swig_new_instance_method(_OpenLxApp.vector_LayerIfc_back)
    assign = _swig_new_instance_method(_OpenLxApp.vector_LayerIfc_assign)
    resize = _swig_new_instance_method(_OpenLxApp.vector_LayerIfc_resize)
    insert = _swig_new_instance_method(_OpenLxApp.vector_LayerIfc_insert)
    reserve = _swig_new_instance_method(_OpenLxApp.vector_LayerIfc_reserve)
    capacity = _swig_new_instance_method(_OpenLxApp.vector_LayerIfc_capacity)
    __swig_destroy__ = _OpenLxApp.delete_vector_LayerIfc

# Register vector_LayerIfc in _OpenLxApp:
_OpenLxApp.vector_LayerIfc_swigregister(vector_LayerIfc)
class vector_LightFixture(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< OpenLxApp::LightFixture > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_OpenLxApp.vector_LightFixture_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_OpenLxApp.vector_LightFixture___nonzero__)
    __bool__ = _swig_new_instance_method(_OpenLxApp.vector_LightFixture___bool__)
    __len__ = _swig_new_instance_method(_OpenLxApp.vector_LightFixture___len__)
    __getslice__ = _swig_new_instance_method(_OpenLxApp.vector_LightFixture___getslice__)
    __setslice__ = _swig_new_instance_method(_OpenLxApp.vector_LightFixture___setslice__)
    __delslice__ = _swig_new_instance_method(_OpenLxApp.vector_LightFixture___delslice__)
    __delitem__ = _swig_new_instance_method(_OpenLxApp.vector_LightFixture___delitem__)
    __getitem__ = _swig_new_instance_method(_OpenLxApp.vector_LightFixture___getitem__)
    __setitem__ = _swig_new_instance_method(_OpenLxApp.vector_LightFixture___setitem__)
    pop = _swig_new_instance_method(_OpenLxApp.vector_LightFixture_pop)
    append = _swig_new_instance_method(_OpenLxApp.vector_LightFixture_append)
    empty = _swig_new_instance_method(_OpenLxApp.vector_LightFixture_empty)
    size = _swig_new_instance_method(_OpenLxApp.vector_LightFixture_size)
    swap = _swig_new_instance_method(_OpenLxApp.vector_LightFixture_swap)
    begin = _swig_new_instance_method(_OpenLxApp.vector_LightFixture_begin)
    end = _swig_new_instance_method(_OpenLxApp.vector_LightFixture_end)
    rbegin = _swig_new_instance_method(_OpenLxApp.vector_LightFixture_rbegin)
    rend = _swig_new_instance_method(_OpenLxApp.vector_LightFixture_rend)
    clear = _swig_new_instance_method(_OpenLxApp.vector_LightFixture_clear)
    get_allocator = _swig_new_instance_method(_OpenLxApp.vector_LightFixture_get_allocator)
    pop_back = _swig_new_instance_method(_OpenLxApp.vector_LightFixture_pop_back)
    erase = _swig_new_instance_method(_OpenLxApp.vector_LightFixture_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_LightFixture self) -> vector_LightFixture
        __init__(vector_LightFixture self, vector_LightFixture other) -> vector_LightFixture
        __init__(vector_LightFixture self, std::vector< std::shared_ptr< OpenLxApp::LightFixture > >::size_type size) -> vector_LightFixture
        __init__(vector_LightFixture self, std::vector< std::shared_ptr< OpenLxApp::LightFixture > >::size_type size, std::vector< std::shared_ptr< OpenLxApp::LightFixture > >::value_type const & value) -> vector_LightFixture
        """
        _OpenLxApp.vector_LightFixture_swiginit(self, _OpenLxApp.new_vector_LightFixture(*args))
    push_back = _swig_new_instance_method(_OpenLxApp.vector_LightFixture_push_back)
    front = _swig_new_instance_method(_OpenLxApp.vector_LightFixture_front)
    back = _swig_new_instance_method(_OpenLxApp.vector_LightFixture_back)
    assign = _swig_new_instance_method(_OpenLxApp.vector_LightFixture_assign)
    resize = _swig_new_instance_method(_OpenLxApp.vector_LightFixture_resize)
    insert = _swig_new_instance_method(_OpenLxApp.vector_LightFixture_insert)
    reserve = _swig_new_instance_method(_OpenLxApp.vector_LightFixture_reserve)
    capacity = _swig_new_instance_method(_OpenLxApp.vector_LightFixture_capacity)
    __swig_destroy__ = _OpenLxApp.delete_vector_LightFixture

# Register vector_LightFixture in _OpenLxApp:
_OpenLxApp.vector_LightFixture_swigregister(vector_LightFixture)
class vector_Line(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< OpenLxApp::Line > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_OpenLxApp.vector_Line_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_OpenLxApp.vector_Line___nonzero__)
    __bool__ = _swig_new_instance_method(_OpenLxApp.vector_Line___bool__)
    __len__ = _swig_new_instance_method(_OpenLxApp.vector_Line___len__)
    __getslice__ = _swig_new_instance_method(_OpenLxApp.vector_Line___getslice__)
    __setslice__ = _swig_new_instance_method(_OpenLxApp.vector_Line___setslice__)
    __delslice__ = _swig_new_instance_method(_OpenLxApp.vector_Line___delslice__)
    __delitem__ = _swig_new_instance_method(_OpenLxApp.vector_Line___delitem__)
    __getitem__ = _swig_new_instance_method(_OpenLxApp.vector_Line___getitem__)
    __setitem__ = _swig_new_instance_method(_OpenLxApp.vector_Line___setitem__)
    pop = _swig_new_instance_method(_OpenLxApp.vector_Line_pop)
    append = _swig_new_instance_method(_OpenLxApp.vector_Line_append)
    empty = _swig_new_instance_method(_OpenLxApp.vector_Line_empty)
    size = _swig_new_instance_method(_OpenLxApp.vector_Line_size)
    swap = _swig_new_instance_method(_OpenLxApp.vector_Line_swap)
    begin = _swig_new_instance_method(_OpenLxApp.vector_Line_begin)
    end = _swig_new_instance_method(_OpenLxApp.vector_Line_end)
    rbegin = _swig_new_instance_method(_OpenLxApp.vector_Line_rbegin)
    rend = _swig_new_instance_method(_OpenLxApp.vector_Line_rend)
    clear = _swig_new_instance_method(_OpenLxApp.vector_Line_clear)
    get_allocator = _swig_new_instance_method(_OpenLxApp.vector_Line_get_allocator)
    pop_back = _swig_new_instance_method(_OpenLxApp.vector_Line_pop_back)
    erase = _swig_new_instance_method(_OpenLxApp.vector_Line_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_Line self) -> vector_Line
        __init__(vector_Line self, vector_Line other) -> vector_Line
        __init__(vector_Line self, std::vector< std::shared_ptr< OpenLxApp::Line > >::size_type size) -> vector_Line
        __init__(vector_Line self, std::vector< std::shared_ptr< OpenLxApp::Line > >::size_type size, std::vector< std::shared_ptr< OpenLxApp::Line > >::value_type const & value) -> vector_Line
        """
        _OpenLxApp.vector_Line_swiginit(self, _OpenLxApp.new_vector_Line(*args))
    push_back = _swig_new_instance_method(_OpenLxApp.vector_Line_push_back)
    front = _swig_new_instance_method(_OpenLxApp.vector_Line_front)
    back = _swig_new_instance_method(_OpenLxApp.vector_Line_back)
    assign = _swig_new_instance_method(_OpenLxApp.vector_Line_assign)
    resize = _swig_new_instance_method(_OpenLxApp.vector_Line_resize)
    insert = _swig_new_instance_method(_OpenLxApp.vector_Line_insert)
    reserve = _swig_new_instance_method(_OpenLxApp.vector_Line_reserve)
    capacity = _swig_new_instance_method(_OpenLxApp.vector_Line_capacity)
    __swig_destroy__ = _OpenLxApp.delete_vector_Line

# Register vector_Line in _OpenLxApp:
_OpenLxApp.vector_Line_swigregister(vector_Line)
class vector_Material(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< OpenLxApp::Material > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_OpenLxApp.vector_Material_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_OpenLxApp.vector_Material___nonzero__)
    __bool__ = _swig_new_instance_method(_OpenLxApp.vector_Material___bool__)
    __len__ = _swig_new_instance_method(_OpenLxApp.vector_Material___len__)
    __getslice__ = _swig_new_instance_method(_OpenLxApp.vector_Material___getslice__)
    __setslice__ = _swig_new_instance_method(_OpenLxApp.vector_Material___setslice__)
    __delslice__ = _swig_new_instance_method(_OpenLxApp.vector_Material___delslice__)
    __delitem__ = _swig_new_instance_method(_OpenLxApp.vector_Material___delitem__)
    __getitem__ = _swig_new_instance_method(_OpenLxApp.vector_Material___getitem__)
    __setitem__ = _swig_new_instance_method(_OpenLxApp.vector_Material___setitem__)
    pop = _swig_new_instance_method(_OpenLxApp.vector_Material_pop)
    append = _swig_new_instance_method(_OpenLxApp.vector_Material_append)
    empty = _swig_new_instance_method(_OpenLxApp.vector_Material_empty)
    size = _swig_new_instance_method(_OpenLxApp.vector_Material_size)
    swap = _swig_new_instance_method(_OpenLxApp.vector_Material_swap)
    begin = _swig_new_instance_method(_OpenLxApp.vector_Material_begin)
    end = _swig_new_instance_method(_OpenLxApp.vector_Material_end)
    rbegin = _swig_new_instance_method(_OpenLxApp.vector_Material_rbegin)
    rend = _swig_new_instance_method(_OpenLxApp.vector_Material_rend)
    clear = _swig_new_instance_method(_OpenLxApp.vector_Material_clear)
    get_allocator = _swig_new_instance_method(_OpenLxApp.vector_Material_get_allocator)
    pop_back = _swig_new_instance_method(_OpenLxApp.vector_Material_pop_back)
    erase = _swig_new_instance_method(_OpenLxApp.vector_Material_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_Material self) -> vector_Material
        __init__(vector_Material self, vector_Material other) -> vector_Material
        __init__(vector_Material self, std::vector< std::shared_ptr< OpenLxApp::Material > >::size_type size) -> vector_Material
        __init__(vector_Material self, std::vector< std::shared_ptr< OpenLxApp::Material > >::size_type size, std::vector< std::shared_ptr< OpenLxApp::Material > >::value_type const & value) -> vector_Material
        """
        _OpenLxApp.vector_Material_swiginit(self, _OpenLxApp.new_vector_Material(*args))
    push_back = _swig_new_instance_method(_OpenLxApp.vector_Material_push_back)
    front = _swig_new_instance_method(_OpenLxApp.vector_Material_front)
    back = _swig_new_instance_method(_OpenLxApp.vector_Material_back)
    assign = _swig_new_instance_method(_OpenLxApp.vector_Material_assign)
    resize = _swig_new_instance_method(_OpenLxApp.vector_Material_resize)
    insert = _swig_new_instance_method(_OpenLxApp.vector_Material_insert)
    reserve = _swig_new_instance_method(_OpenLxApp.vector_Material_reserve)
    capacity = _swig_new_instance_method(_OpenLxApp.vector_Material_capacity)
    __swig_destroy__ = _OpenLxApp.delete_vector_Material

# Register vector_Material in _OpenLxApp:
_OpenLxApp.vector_Material_swigregister(vector_Material)
class vector_MaterialConstituent(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< OpenLxApp::MaterialConstituent > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_OpenLxApp.vector_MaterialConstituent_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_OpenLxApp.vector_MaterialConstituent___nonzero__)
    __bool__ = _swig_new_instance_method(_OpenLxApp.vector_MaterialConstituent___bool__)
    __len__ = _swig_new_instance_method(_OpenLxApp.vector_MaterialConstituent___len__)
    __getslice__ = _swig_new_instance_method(_OpenLxApp.vector_MaterialConstituent___getslice__)
    __setslice__ = _swig_new_instance_method(_OpenLxApp.vector_MaterialConstituent___setslice__)
    __delslice__ = _swig_new_instance_method(_OpenLxApp.vector_MaterialConstituent___delslice__)
    __delitem__ = _swig_new_instance_method(_OpenLxApp.vector_MaterialConstituent___delitem__)
    __getitem__ = _swig_new_instance_method(_OpenLxApp.vector_MaterialConstituent___getitem__)
    __setitem__ = _swig_new_instance_method(_OpenLxApp.vector_MaterialConstituent___setitem__)
    pop = _swig_new_instance_method(_OpenLxApp.vector_MaterialConstituent_pop)
    append = _swig_new_instance_method(_OpenLxApp.vector_MaterialConstituent_append)
    empty = _swig_new_instance_method(_OpenLxApp.vector_MaterialConstituent_empty)
    size = _swig_new_instance_method(_OpenLxApp.vector_MaterialConstituent_size)
    swap = _swig_new_instance_method(_OpenLxApp.vector_MaterialConstituent_swap)
    begin = _swig_new_instance_method(_OpenLxApp.vector_MaterialConstituent_begin)
    end = _swig_new_instance_method(_OpenLxApp.vector_MaterialConstituent_end)
    rbegin = _swig_new_instance_method(_OpenLxApp.vector_MaterialConstituent_rbegin)
    rend = _swig_new_instance_method(_OpenLxApp.vector_MaterialConstituent_rend)
    clear = _swig_new_instance_method(_OpenLxApp.vector_MaterialConstituent_clear)
    get_allocator = _swig_new_instance_method(_OpenLxApp.vector_MaterialConstituent_get_allocator)
    pop_back = _swig_new_instance_method(_OpenLxApp.vector_MaterialConstituent_pop_back)
    erase = _swig_new_instance_method(_OpenLxApp.vector_MaterialConstituent_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_MaterialConstituent self) -> vector_MaterialConstituent
        __init__(vector_MaterialConstituent self, vector_MaterialConstituent other) -> vector_MaterialConstituent
        __init__(vector_MaterialConstituent self, std::vector< std::shared_ptr< OpenLxApp::MaterialConstituent > >::size_type size) -> vector_MaterialConstituent
        __init__(vector_MaterialConstituent self, std::vector< std::shared_ptr< OpenLxApp::MaterialConstituent > >::size_type size, std::vector< std::shared_ptr< OpenLxApp::MaterialConstituent > >::value_type const & value) -> vector_MaterialConstituent
        """
        _OpenLxApp.vector_MaterialConstituent_swiginit(self, _OpenLxApp.new_vector_MaterialConstituent(*args))
    push_back = _swig_new_instance_method(_OpenLxApp.vector_MaterialConstituent_push_back)
    front = _swig_new_instance_method(_OpenLxApp.vector_MaterialConstituent_front)
    back = _swig_new_instance_method(_OpenLxApp.vector_MaterialConstituent_back)
    assign = _swig_new_instance_method(_OpenLxApp.vector_MaterialConstituent_assign)
    resize = _swig_new_instance_method(_OpenLxApp.vector_MaterialConstituent_resize)
    insert = _swig_new_instance_method(_OpenLxApp.vector_MaterialConstituent_insert)
    reserve = _swig_new_instance_method(_OpenLxApp.vector_MaterialConstituent_reserve)
    capacity = _swig_new_instance_method(_OpenLxApp.vector_MaterialConstituent_capacity)
    __swig_destroy__ = _OpenLxApp.delete_vector_MaterialConstituent

# Register vector_MaterialConstituent in _OpenLxApp:
_OpenLxApp.vector_MaterialConstituent_swigregister(vector_MaterialConstituent)
class vector_MaterialConstituentSet(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< OpenLxApp::MaterialConstituentSet > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_OpenLxApp.vector_MaterialConstituentSet_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_OpenLxApp.vector_MaterialConstituentSet___nonzero__)
    __bool__ = _swig_new_instance_method(_OpenLxApp.vector_MaterialConstituentSet___bool__)
    __len__ = _swig_new_instance_method(_OpenLxApp.vector_MaterialConstituentSet___len__)
    __getslice__ = _swig_new_instance_method(_OpenLxApp.vector_MaterialConstituentSet___getslice__)
    __setslice__ = _swig_new_instance_method(_OpenLxApp.vector_MaterialConstituentSet___setslice__)
    __delslice__ = _swig_new_instance_method(_OpenLxApp.vector_MaterialConstituentSet___delslice__)
    __delitem__ = _swig_new_instance_method(_OpenLxApp.vector_MaterialConstituentSet___delitem__)
    __getitem__ = _swig_new_instance_method(_OpenLxApp.vector_MaterialConstituentSet___getitem__)
    __setitem__ = _swig_new_instance_method(_OpenLxApp.vector_MaterialConstituentSet___setitem__)
    pop = _swig_new_instance_method(_OpenLxApp.vector_MaterialConstituentSet_pop)
    append = _swig_new_instance_method(_OpenLxApp.vector_MaterialConstituentSet_append)
    empty = _swig_new_instance_method(_OpenLxApp.vector_MaterialConstituentSet_empty)
    size = _swig_new_instance_method(_OpenLxApp.vector_MaterialConstituentSet_size)
    swap = _swig_new_instance_method(_OpenLxApp.vector_MaterialConstituentSet_swap)
    begin = _swig_new_instance_method(_OpenLxApp.vector_MaterialConstituentSet_begin)
    end = _swig_new_instance_method(_OpenLxApp.vector_MaterialConstituentSet_end)
    rbegin = _swig_new_instance_method(_OpenLxApp.vector_MaterialConstituentSet_rbegin)
    rend = _swig_new_instance_method(_OpenLxApp.vector_MaterialConstituentSet_rend)
    clear = _swig_new_instance_method(_OpenLxApp.vector_MaterialConstituentSet_clear)
    get_allocator = _swig_new_instance_method(_OpenLxApp.vector_MaterialConstituentSet_get_allocator)
    pop_back = _swig_new_instance_method(_OpenLxApp.vector_MaterialConstituentSet_pop_back)
    erase = _swig_new_instance_method(_OpenLxApp.vector_MaterialConstituentSet_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_MaterialConstituentSet self) -> vector_MaterialConstituentSet
        __init__(vector_MaterialConstituentSet self, vector_MaterialConstituentSet other) -> vector_MaterialConstituentSet
        __init__(vector_MaterialConstituentSet self, std::vector< std::shared_ptr< OpenLxApp::MaterialConstituentSet > >::size_type size) -> vector_MaterialConstituentSet
        __init__(vector_MaterialConstituentSet self, std::vector< std::shared_ptr< OpenLxApp::MaterialConstituentSet > >::size_type size, std::vector< std::shared_ptr< OpenLxApp::MaterialConstituentSet > >::value_type const & value) -> vector_MaterialConstituentSet
        """
        _OpenLxApp.vector_MaterialConstituentSet_swiginit(self, _OpenLxApp.new_vector_MaterialConstituentSet(*args))
    push_back = _swig_new_instance_method(_OpenLxApp.vector_MaterialConstituentSet_push_back)
    front = _swig_new_instance_method(_OpenLxApp.vector_MaterialConstituentSet_front)
    back = _swig_new_instance_method(_OpenLxApp.vector_MaterialConstituentSet_back)
    assign = _swig_new_instance_method(_OpenLxApp.vector_MaterialConstituentSet_assign)
    resize = _swig_new_instance_method(_OpenLxApp.vector_MaterialConstituentSet_resize)
    insert = _swig_new_instance_method(_OpenLxApp.vector_MaterialConstituentSet_insert)
    reserve = _swig_new_instance_method(_OpenLxApp.vector_MaterialConstituentSet_reserve)
    capacity = _swig_new_instance_method(_OpenLxApp.vector_MaterialConstituentSet_capacity)
    __swig_destroy__ = _OpenLxApp.delete_vector_MaterialConstituentSet

# Register vector_MaterialConstituentSet in _OpenLxApp:
_OpenLxApp.vector_MaterialConstituentSet_swigregister(vector_MaterialConstituentSet)
class vector_MaterialDefinition(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< OpenLxApp::MaterialDefinition > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_OpenLxApp.vector_MaterialDefinition_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_OpenLxApp.vector_MaterialDefinition___nonzero__)
    __bool__ = _swig_new_instance_method(_OpenLxApp.vector_MaterialDefinition___bool__)
    __len__ = _swig_new_instance_method(_OpenLxApp.vector_MaterialDefinition___len__)
    __getslice__ = _swig_new_instance_method(_OpenLxApp.vector_MaterialDefinition___getslice__)
    __setslice__ = _swig_new_instance_method(_OpenLxApp.vector_MaterialDefinition___setslice__)
    __delslice__ = _swig_new_instance_method(_OpenLxApp.vector_MaterialDefinition___delslice__)
    __delitem__ = _swig_new_instance_method(_OpenLxApp.vector_MaterialDefinition___delitem__)
    __getitem__ = _swig_new_instance_method(_OpenLxApp.vector_MaterialDefinition___getitem__)
    __setitem__ = _swig_new_instance_method(_OpenLxApp.vector_MaterialDefinition___setitem__)
    pop = _swig_new_instance_method(_OpenLxApp.vector_MaterialDefinition_pop)
    append = _swig_new_instance_method(_OpenLxApp.vector_MaterialDefinition_append)
    empty = _swig_new_instance_method(_OpenLxApp.vector_MaterialDefinition_empty)
    size = _swig_new_instance_method(_OpenLxApp.vector_MaterialDefinition_size)
    swap = _swig_new_instance_method(_OpenLxApp.vector_MaterialDefinition_swap)
    begin = _swig_new_instance_method(_OpenLxApp.vector_MaterialDefinition_begin)
    end = _swig_new_instance_method(_OpenLxApp.vector_MaterialDefinition_end)
    rbegin = _swig_new_instance_method(_OpenLxApp.vector_MaterialDefinition_rbegin)
    rend = _swig_new_instance_method(_OpenLxApp.vector_MaterialDefinition_rend)
    clear = _swig_new_instance_method(_OpenLxApp.vector_MaterialDefinition_clear)
    get_allocator = _swig_new_instance_method(_OpenLxApp.vector_MaterialDefinition_get_allocator)
    pop_back = _swig_new_instance_method(_OpenLxApp.vector_MaterialDefinition_pop_back)
    erase = _swig_new_instance_method(_OpenLxApp.vector_MaterialDefinition_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_MaterialDefinition self) -> vector_MaterialDefinition
        __init__(vector_MaterialDefinition self, vector_MaterialDefinition other) -> vector_MaterialDefinition
        __init__(vector_MaterialDefinition self, std::vector< std::shared_ptr< OpenLxApp::MaterialDefinition > >::size_type size) -> vector_MaterialDefinition
        __init__(vector_MaterialDefinition self, std::vector< std::shared_ptr< OpenLxApp::MaterialDefinition > >::size_type size, std::vector< std::shared_ptr< OpenLxApp::MaterialDefinition > >::value_type const & value) -> vector_MaterialDefinition
        """
        _OpenLxApp.vector_MaterialDefinition_swiginit(self, _OpenLxApp.new_vector_MaterialDefinition(*args))
    push_back = _swig_new_instance_method(_OpenLxApp.vector_MaterialDefinition_push_back)
    front = _swig_new_instance_method(_OpenLxApp.vector_MaterialDefinition_front)
    back = _swig_new_instance_method(_OpenLxApp.vector_MaterialDefinition_back)
    assign = _swig_new_instance_method(_OpenLxApp.vector_MaterialDefinition_assign)
    resize = _swig_new_instance_method(_OpenLxApp.vector_MaterialDefinition_resize)
    insert = _swig_new_instance_method(_OpenLxApp.vector_MaterialDefinition_insert)
    reserve = _swig_new_instance_method(_OpenLxApp.vector_MaterialDefinition_reserve)
    capacity = _swig_new_instance_method(_OpenLxApp.vector_MaterialDefinition_capacity)
    __swig_destroy__ = _OpenLxApp.delete_vector_MaterialDefinition

# Register vector_MaterialDefinition in _OpenLxApp:
_OpenLxApp.vector_MaterialDefinition_swigregister(vector_MaterialDefinition)
class vector_MaterialSelect(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< OpenLxApp::MaterialSelect > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_OpenLxApp.vector_MaterialSelect_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_OpenLxApp.vector_MaterialSelect___nonzero__)
    __bool__ = _swig_new_instance_method(_OpenLxApp.vector_MaterialSelect___bool__)
    __len__ = _swig_new_instance_method(_OpenLxApp.vector_MaterialSelect___len__)
    __getslice__ = _swig_new_instance_method(_OpenLxApp.vector_MaterialSelect___getslice__)
    __setslice__ = _swig_new_instance_method(_OpenLxApp.vector_MaterialSelect___setslice__)
    __delslice__ = _swig_new_instance_method(_OpenLxApp.vector_MaterialSelect___delslice__)
    __delitem__ = _swig_new_instance_method(_OpenLxApp.vector_MaterialSelect___delitem__)
    __getitem__ = _swig_new_instance_method(_OpenLxApp.vector_MaterialSelect___getitem__)
    __setitem__ = _swig_new_instance_method(_OpenLxApp.vector_MaterialSelect___setitem__)
    pop = _swig_new_instance_method(_OpenLxApp.vector_MaterialSelect_pop)
    append = _swig_new_instance_method(_OpenLxApp.vector_MaterialSelect_append)
    empty = _swig_new_instance_method(_OpenLxApp.vector_MaterialSelect_empty)
    size = _swig_new_instance_method(_OpenLxApp.vector_MaterialSelect_size)
    swap = _swig_new_instance_method(_OpenLxApp.vector_MaterialSelect_swap)
    begin = _swig_new_instance_method(_OpenLxApp.vector_MaterialSelect_begin)
    end = _swig_new_instance_method(_OpenLxApp.vector_MaterialSelect_end)
    rbegin = _swig_new_instance_method(_OpenLxApp.vector_MaterialSelect_rbegin)
    rend = _swig_new_instance_method(_OpenLxApp.vector_MaterialSelect_rend)
    clear = _swig_new_instance_method(_OpenLxApp.vector_MaterialSelect_clear)
    get_allocator = _swig_new_instance_method(_OpenLxApp.vector_MaterialSelect_get_allocator)
    pop_back = _swig_new_instance_method(_OpenLxApp.vector_MaterialSelect_pop_back)
    erase = _swig_new_instance_method(_OpenLxApp.vector_MaterialSelect_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_MaterialSelect self) -> vector_MaterialSelect
        __init__(vector_MaterialSelect self, vector_MaterialSelect other) -> vector_MaterialSelect
        __init__(vector_MaterialSelect self, std::vector< std::shared_ptr< OpenLxApp::MaterialSelect > >::size_type size) -> vector_MaterialSelect
        __init__(vector_MaterialSelect self, std::vector< std::shared_ptr< OpenLxApp::MaterialSelect > >::size_type size, std::vector< std::shared_ptr< OpenLxApp::MaterialSelect > >::value_type const & value) -> vector_MaterialSelect
        """
        _OpenLxApp.vector_MaterialSelect_swiginit(self, _OpenLxApp.new_vector_MaterialSelect(*args))
    push_back = _swig_new_instance_method(_OpenLxApp.vector_MaterialSelect_push_back)
    front = _swig_new_instance_method(_OpenLxApp.vector_MaterialSelect_front)
    back = _swig_new_instance_method(_OpenLxApp.vector_MaterialSelect_back)
    assign = _swig_new_instance_method(_OpenLxApp.vector_MaterialSelect_assign)
    resize = _swig_new_instance_method(_OpenLxApp.vector_MaterialSelect_resize)
    insert = _swig_new_instance_method(_OpenLxApp.vector_MaterialSelect_insert)
    reserve = _swig_new_instance_method(_OpenLxApp.vector_MaterialSelect_reserve)
    capacity = _swig_new_instance_method(_OpenLxApp.vector_MaterialSelect_capacity)
    __swig_destroy__ = _OpenLxApp.delete_vector_MaterialSelect

# Register vector_MaterialSelect in _OpenLxApp:
_OpenLxApp.vector_MaterialSelect_swigregister(vector_MaterialSelect)
class vector_MechanicalFastener(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< OpenLxApp::MechanicalFastener > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_OpenLxApp.vector_MechanicalFastener_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_OpenLxApp.vector_MechanicalFastener___nonzero__)
    __bool__ = _swig_new_instance_method(_OpenLxApp.vector_MechanicalFastener___bool__)
    __len__ = _swig_new_instance_method(_OpenLxApp.vector_MechanicalFastener___len__)
    __getslice__ = _swig_new_instance_method(_OpenLxApp.vector_MechanicalFastener___getslice__)
    __setslice__ = _swig_new_instance_method(_OpenLxApp.vector_MechanicalFastener___setslice__)
    __delslice__ = _swig_new_instance_method(_OpenLxApp.vector_MechanicalFastener___delslice__)
    __delitem__ = _swig_new_instance_method(_OpenLxApp.vector_MechanicalFastener___delitem__)
    __getitem__ = _swig_new_instance_method(_OpenLxApp.vector_MechanicalFastener___getitem__)
    __setitem__ = _swig_new_instance_method(_OpenLxApp.vector_MechanicalFastener___setitem__)
    pop = _swig_new_instance_method(_OpenLxApp.vector_MechanicalFastener_pop)
    append = _swig_new_instance_method(_OpenLxApp.vector_MechanicalFastener_append)
    empty = _swig_new_instance_method(_OpenLxApp.vector_MechanicalFastener_empty)
    size = _swig_new_instance_method(_OpenLxApp.vector_MechanicalFastener_size)
    swap = _swig_new_instance_method(_OpenLxApp.vector_MechanicalFastener_swap)
    begin = _swig_new_instance_method(_OpenLxApp.vector_MechanicalFastener_begin)
    end = _swig_new_instance_method(_OpenLxApp.vector_MechanicalFastener_end)
    rbegin = _swig_new_instance_method(_OpenLxApp.vector_MechanicalFastener_rbegin)
    rend = _swig_new_instance_method(_OpenLxApp.vector_MechanicalFastener_rend)
    clear = _swig_new_instance_method(_OpenLxApp.vector_MechanicalFastener_clear)
    get_allocator = _swig_new_instance_method(_OpenLxApp.vector_MechanicalFastener_get_allocator)
    pop_back = _swig_new_instance_method(_OpenLxApp.vector_MechanicalFastener_pop_back)
    erase = _swig_new_instance_method(_OpenLxApp.vector_MechanicalFastener_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_MechanicalFastener self) -> vector_MechanicalFastener
        __init__(vector_MechanicalFastener self, vector_MechanicalFastener other) -> vector_MechanicalFastener
        __init__(vector_MechanicalFastener self, std::vector< std::shared_ptr< OpenLxApp::MechanicalFastener > >::size_type size) -> vector_MechanicalFastener
        __init__(vector_MechanicalFastener self, std::vector< std::shared_ptr< OpenLxApp::MechanicalFastener > >::size_type size, std::vector< std::shared_ptr< OpenLxApp::MechanicalFastener > >::value_type const & value) -> vector_MechanicalFastener
        """
        _OpenLxApp.vector_MechanicalFastener_swiginit(self, _OpenLxApp.new_vector_MechanicalFastener(*args))
    push_back = _swig_new_instance_method(_OpenLxApp.vector_MechanicalFastener_push_back)
    front = _swig_new_instance_method(_OpenLxApp.vector_MechanicalFastener_front)
    back = _swig_new_instance_method(_OpenLxApp.vector_MechanicalFastener_back)
    assign = _swig_new_instance_method(_OpenLxApp.vector_MechanicalFastener_assign)
    resize = _swig_new_instance_method(_OpenLxApp.vector_MechanicalFastener_resize)
    insert = _swig_new_instance_method(_OpenLxApp.vector_MechanicalFastener_insert)
    reserve = _swig_new_instance_method(_OpenLxApp.vector_MechanicalFastener_reserve)
    capacity = _swig_new_instance_method(_OpenLxApp.vector_MechanicalFastener_capacity)
    __swig_destroy__ = _OpenLxApp.delete_vector_MechanicalFastener

# Register vector_MechanicalFastener in _OpenLxApp:
_OpenLxApp.vector_MechanicalFastener_swigregister(vector_MechanicalFastener)
class vector_Member(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< OpenLxApp::Member > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_OpenLxApp.vector_Member_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_OpenLxApp.vector_Member___nonzero__)
    __bool__ = _swig_new_instance_method(_OpenLxApp.vector_Member___bool__)
    __len__ = _swig_new_instance_method(_OpenLxApp.vector_Member___len__)
    __getslice__ = _swig_new_instance_method(_OpenLxApp.vector_Member___getslice__)
    __setslice__ = _swig_new_instance_method(_OpenLxApp.vector_Member___setslice__)
    __delslice__ = _swig_new_instance_method(_OpenLxApp.vector_Member___delslice__)
    __delitem__ = _swig_new_instance_method(_OpenLxApp.vector_Member___delitem__)
    __getitem__ = _swig_new_instance_method(_OpenLxApp.vector_Member___getitem__)
    __setitem__ = _swig_new_instance_method(_OpenLxApp.vector_Member___setitem__)
    pop = _swig_new_instance_method(_OpenLxApp.vector_Member_pop)
    append = _swig_new_instance_method(_OpenLxApp.vector_Member_append)
    empty = _swig_new_instance_method(_OpenLxApp.vector_Member_empty)
    size = _swig_new_instance_method(_OpenLxApp.vector_Member_size)
    swap = _swig_new_instance_method(_OpenLxApp.vector_Member_swap)
    begin = _swig_new_instance_method(_OpenLxApp.vector_Member_begin)
    end = _swig_new_instance_method(_OpenLxApp.vector_Member_end)
    rbegin = _swig_new_instance_method(_OpenLxApp.vector_Member_rbegin)
    rend = _swig_new_instance_method(_OpenLxApp.vector_Member_rend)
    clear = _swig_new_instance_method(_OpenLxApp.vector_Member_clear)
    get_allocator = _swig_new_instance_method(_OpenLxApp.vector_Member_get_allocator)
    pop_back = _swig_new_instance_method(_OpenLxApp.vector_Member_pop_back)
    erase = _swig_new_instance_method(_OpenLxApp.vector_Member_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_Member self) -> vector_Member
        __init__(vector_Member self, vector_Member other) -> vector_Member
        __init__(vector_Member self, std::vector< std::shared_ptr< OpenLxApp::Member > >::size_type size) -> vector_Member
        __init__(vector_Member self, std::vector< std::shared_ptr< OpenLxApp::Member > >::size_type size, std::vector< std::shared_ptr< OpenLxApp::Member > >::value_type const & value) -> vector_Member
        """
        _OpenLxApp.vector_Member_swiginit(self, _OpenLxApp.new_vector_Member(*args))
    push_back = _swig_new_instance_method(_OpenLxApp.vector_Member_push_back)
    front = _swig_new_instance_method(_OpenLxApp.vector_Member_front)
    back = _swig_new_instance_method(_OpenLxApp.vector_Member_back)
    assign = _swig_new_instance_method(_OpenLxApp.vector_Member_assign)
    resize = _swig_new_instance_method(_OpenLxApp.vector_Member_resize)
    insert = _swig_new_instance_method(_OpenLxApp.vector_Member_insert)
    reserve = _swig_new_instance_method(_OpenLxApp.vector_Member_reserve)
    capacity = _swig_new_instance_method(_OpenLxApp.vector_Member_capacity)
    __swig_destroy__ = _OpenLxApp.delete_vector_Member

# Register vector_Member in _OpenLxApp:
_OpenLxApp.vector_Member_swigregister(vector_Member)
class vector_MemberStandardCase(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< OpenLxApp::MemberStandardCase > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_OpenLxApp.vector_MemberStandardCase_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_OpenLxApp.vector_MemberStandardCase___nonzero__)
    __bool__ = _swig_new_instance_method(_OpenLxApp.vector_MemberStandardCase___bool__)
    __len__ = _swig_new_instance_method(_OpenLxApp.vector_MemberStandardCase___len__)
    __getslice__ = _swig_new_instance_method(_OpenLxApp.vector_MemberStandardCase___getslice__)
    __setslice__ = _swig_new_instance_method(_OpenLxApp.vector_MemberStandardCase___setslice__)
    __delslice__ = _swig_new_instance_method(_OpenLxApp.vector_MemberStandardCase___delslice__)
    __delitem__ = _swig_new_instance_method(_OpenLxApp.vector_MemberStandardCase___delitem__)
    __getitem__ = _swig_new_instance_method(_OpenLxApp.vector_MemberStandardCase___getitem__)
    __setitem__ = _swig_new_instance_method(_OpenLxApp.vector_MemberStandardCase___setitem__)
    pop = _swig_new_instance_method(_OpenLxApp.vector_MemberStandardCase_pop)
    append = _swig_new_instance_method(_OpenLxApp.vector_MemberStandardCase_append)
    empty = _swig_new_instance_method(_OpenLxApp.vector_MemberStandardCase_empty)
    size = _swig_new_instance_method(_OpenLxApp.vector_MemberStandardCase_size)
    swap = _swig_new_instance_method(_OpenLxApp.vector_MemberStandardCase_swap)
    begin = _swig_new_instance_method(_OpenLxApp.vector_MemberStandardCase_begin)
    end = _swig_new_instance_method(_OpenLxApp.vector_MemberStandardCase_end)
    rbegin = _swig_new_instance_method(_OpenLxApp.vector_MemberStandardCase_rbegin)
    rend = _swig_new_instance_method(_OpenLxApp.vector_MemberStandardCase_rend)
    clear = _swig_new_instance_method(_OpenLxApp.vector_MemberStandardCase_clear)
    get_allocator = _swig_new_instance_method(_OpenLxApp.vector_MemberStandardCase_get_allocator)
    pop_back = _swig_new_instance_method(_OpenLxApp.vector_MemberStandardCase_pop_back)
    erase = _swig_new_instance_method(_OpenLxApp.vector_MemberStandardCase_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_MemberStandardCase self) -> vector_MemberStandardCase
        __init__(vector_MemberStandardCase self, vector_MemberStandardCase other) -> vector_MemberStandardCase
        __init__(vector_MemberStandardCase self, std::vector< std::shared_ptr< OpenLxApp::MemberStandardCase > >::size_type size) -> vector_MemberStandardCase
        __init__(vector_MemberStandardCase self, std::vector< std::shared_ptr< OpenLxApp::MemberStandardCase > >::size_type size, std::vector< std::shared_ptr< OpenLxApp::MemberStandardCase > >::value_type const & value) -> vector_MemberStandardCase
        """
        _OpenLxApp.vector_MemberStandardCase_swiginit(self, _OpenLxApp.new_vector_MemberStandardCase(*args))
    push_back = _swig_new_instance_method(_OpenLxApp.vector_MemberStandardCase_push_back)
    front = _swig_new_instance_method(_OpenLxApp.vector_MemberStandardCase_front)
    back = _swig_new_instance_method(_OpenLxApp.vector_MemberStandardCase_back)
    assign = _swig_new_instance_method(_OpenLxApp.vector_MemberStandardCase_assign)
    resize = _swig_new_instance_method(_OpenLxApp.vector_MemberStandardCase_resize)
    insert = _swig_new_instance_method(_OpenLxApp.vector_MemberStandardCase_insert)
    reserve = _swig_new_instance_method(_OpenLxApp.vector_MemberStandardCase_reserve)
    capacity = _swig_new_instance_method(_OpenLxApp.vector_MemberStandardCase_capacity)
    __swig_destroy__ = _OpenLxApp.delete_vector_MemberStandardCase

# Register vector_MemberStandardCase in _OpenLxApp:
_OpenLxApp.vector_MemberStandardCase_swigregister(vector_MemberStandardCase)
class vector_MooringDevice(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< OpenLxApp::MooringDevice > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_OpenLxApp.vector_MooringDevice_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_OpenLxApp.vector_MooringDevice___nonzero__)
    __bool__ = _swig_new_instance_method(_OpenLxApp.vector_MooringDevice___bool__)
    __len__ = _swig_new_instance_method(_OpenLxApp.vector_MooringDevice___len__)
    __getslice__ = _swig_new_instance_method(_OpenLxApp.vector_MooringDevice___getslice__)
    __setslice__ = _swig_new_instance_method(_OpenLxApp.vector_MooringDevice___setslice__)
    __delslice__ = _swig_new_instance_method(_OpenLxApp.vector_MooringDevice___delslice__)
    __delitem__ = _swig_new_instance_method(_OpenLxApp.vector_MooringDevice___delitem__)
    __getitem__ = _swig_new_instance_method(_OpenLxApp.vector_MooringDevice___getitem__)
    __setitem__ = _swig_new_instance_method(_OpenLxApp.vector_MooringDevice___setitem__)
    pop = _swig_new_instance_method(_OpenLxApp.vector_MooringDevice_pop)
    append = _swig_new_instance_method(_OpenLxApp.vector_MooringDevice_append)
    empty = _swig_new_instance_method(_OpenLxApp.vector_MooringDevice_empty)
    size = _swig_new_instance_method(_OpenLxApp.vector_MooringDevice_size)
    swap = _swig_new_instance_method(_OpenLxApp.vector_MooringDevice_swap)
    begin = _swig_new_instance_method(_OpenLxApp.vector_MooringDevice_begin)
    end = _swig_new_instance_method(_OpenLxApp.vector_MooringDevice_end)
    rbegin = _swig_new_instance_method(_OpenLxApp.vector_MooringDevice_rbegin)
    rend = _swig_new_instance_method(_OpenLxApp.vector_MooringDevice_rend)
    clear = _swig_new_instance_method(_OpenLxApp.vector_MooringDevice_clear)
    get_allocator = _swig_new_instance_method(_OpenLxApp.vector_MooringDevice_get_allocator)
    pop_back = _swig_new_instance_method(_OpenLxApp.vector_MooringDevice_pop_back)
    erase = _swig_new_instance_method(_OpenLxApp.vector_MooringDevice_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_MooringDevice self) -> vector_MooringDevice
        __init__(vector_MooringDevice self, vector_MooringDevice other) -> vector_MooringDevice
        __init__(vector_MooringDevice self, std::vector< std::shared_ptr< OpenLxApp::MooringDevice > >::size_type size) -> vector_MooringDevice
        __init__(vector_MooringDevice self, std::vector< std::shared_ptr< OpenLxApp::MooringDevice > >::size_type size, std::vector< std::shared_ptr< OpenLxApp::MooringDevice > >::value_type const & value) -> vector_MooringDevice
        """
        _OpenLxApp.vector_MooringDevice_swiginit(self, _OpenLxApp.new_vector_MooringDevice(*args))
    push_back = _swig_new_instance_method(_OpenLxApp.vector_MooringDevice_push_back)
    front = _swig_new_instance_method(_OpenLxApp.vector_MooringDevice_front)
    back = _swig_new_instance_method(_OpenLxApp.vector_MooringDevice_back)
    assign = _swig_new_instance_method(_OpenLxApp.vector_MooringDevice_assign)
    resize = _swig_new_instance_method(_OpenLxApp.vector_MooringDevice_resize)
    insert = _swig_new_instance_method(_OpenLxApp.vector_MooringDevice_insert)
    reserve = _swig_new_instance_method(_OpenLxApp.vector_MooringDevice_reserve)
    capacity = _swig_new_instance_method(_OpenLxApp.vector_MooringDevice_capacity)
    __swig_destroy__ = _OpenLxApp.delete_vector_MooringDevice

# Register vector_MooringDevice in _OpenLxApp:
_OpenLxApp.vector_MooringDevice_swigregister(vector_MooringDevice)
class vector_NavigationElement(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< OpenLxApp::NavigationElement > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_OpenLxApp.vector_NavigationElement_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_OpenLxApp.vector_NavigationElement___nonzero__)
    __bool__ = _swig_new_instance_method(_OpenLxApp.vector_NavigationElement___bool__)
    __len__ = _swig_new_instance_method(_OpenLxApp.vector_NavigationElement___len__)
    __getslice__ = _swig_new_instance_method(_OpenLxApp.vector_NavigationElement___getslice__)
    __setslice__ = _swig_new_instance_method(_OpenLxApp.vector_NavigationElement___setslice__)
    __delslice__ = _swig_new_instance_method(_OpenLxApp.vector_NavigationElement___delslice__)
    __delitem__ = _swig_new_instance_method(_OpenLxApp.vector_NavigationElement___delitem__)
    __getitem__ = _swig_new_instance_method(_OpenLxApp.vector_NavigationElement___getitem__)
    __setitem__ = _swig_new_instance_method(_OpenLxApp.vector_NavigationElement___setitem__)
    pop = _swig_new_instance_method(_OpenLxApp.vector_NavigationElement_pop)
    append = _swig_new_instance_method(_OpenLxApp.vector_NavigationElement_append)
    empty = _swig_new_instance_method(_OpenLxApp.vector_NavigationElement_empty)
    size = _swig_new_instance_method(_OpenLxApp.vector_NavigationElement_size)
    swap = _swig_new_instance_method(_OpenLxApp.vector_NavigationElement_swap)
    begin = _swig_new_instance_method(_OpenLxApp.vector_NavigationElement_begin)
    end = _swig_new_instance_method(_OpenLxApp.vector_NavigationElement_end)
    rbegin = _swig_new_instance_method(_OpenLxApp.vector_NavigationElement_rbegin)
    rend = _swig_new_instance_method(_OpenLxApp.vector_NavigationElement_rend)
    clear = _swig_new_instance_method(_OpenLxApp.vector_NavigationElement_clear)
    get_allocator = _swig_new_instance_method(_OpenLxApp.vector_NavigationElement_get_allocator)
    pop_back = _swig_new_instance_method(_OpenLxApp.vector_NavigationElement_pop_back)
    erase = _swig_new_instance_method(_OpenLxApp.vector_NavigationElement_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_NavigationElement self) -> vector_NavigationElement
        __init__(vector_NavigationElement self, vector_NavigationElement other) -> vector_NavigationElement
        __init__(vector_NavigationElement self, std::vector< std::shared_ptr< OpenLxApp::NavigationElement > >::size_type size) -> vector_NavigationElement
        __init__(vector_NavigationElement self, std::vector< std::shared_ptr< OpenLxApp::NavigationElement > >::size_type size, std::vector< std::shared_ptr< OpenLxApp::NavigationElement > >::value_type const & value) -> vector_NavigationElement
        """
        _OpenLxApp.vector_NavigationElement_swiginit(self, _OpenLxApp.new_vector_NavigationElement(*args))
    push_back = _swig_new_instance_method(_OpenLxApp.vector_NavigationElement_push_back)
    front = _swig_new_instance_method(_OpenLxApp.vector_NavigationElement_front)
    back = _swig_new_instance_method(_OpenLxApp.vector_NavigationElement_back)
    assign = _swig_new_instance_method(_OpenLxApp.vector_NavigationElement_assign)
    resize = _swig_new_instance_method(_OpenLxApp.vector_NavigationElement_resize)
    insert = _swig_new_instance_method(_OpenLxApp.vector_NavigationElement_insert)
    reserve = _swig_new_instance_method(_OpenLxApp.vector_NavigationElement_reserve)
    capacity = _swig_new_instance_method(_OpenLxApp.vector_NavigationElement_capacity)
    __swig_destroy__ = _OpenLxApp.delete_vector_NavigationElement

# Register vector_NavigationElement in _OpenLxApp:
_OpenLxApp.vector_NavigationElement_swigregister(vector_NavigationElement)
class vector_Object(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< OpenLxApp::Object > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_OpenLxApp.vector_Object_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_OpenLxApp.vector_Object___nonzero__)
    __bool__ = _swig_new_instance_method(_OpenLxApp.vector_Object___bool__)
    __len__ = _swig_new_instance_method(_OpenLxApp.vector_Object___len__)
    __getslice__ = _swig_new_instance_method(_OpenLxApp.vector_Object___getslice__)
    __setslice__ = _swig_new_instance_method(_OpenLxApp.vector_Object___setslice__)
    __delslice__ = _swig_new_instance_method(_OpenLxApp.vector_Object___delslice__)
    __delitem__ = _swig_new_instance_method(_OpenLxApp.vector_Object___delitem__)
    __getitem__ = _swig_new_instance_method(_OpenLxApp.vector_Object___getitem__)
    __setitem__ = _swig_new_instance_method(_OpenLxApp.vector_Object___setitem__)
    pop = _swig_new_instance_method(_OpenLxApp.vector_Object_pop)
    append = _swig_new_instance_method(_OpenLxApp.vector_Object_append)
    empty = _swig_new_instance_method(_OpenLxApp.vector_Object_empty)
    size = _swig_new_instance_method(_OpenLxApp.vector_Object_size)
    swap = _swig_new_instance_method(_OpenLxApp.vector_Object_swap)
    begin = _swig_new_instance_method(_OpenLxApp.vector_Object_begin)
    end = _swig_new_instance_method(_OpenLxApp.vector_Object_end)
    rbegin = _swig_new_instance_method(_OpenLxApp.vector_Object_rbegin)
    rend = _swig_new_instance_method(_OpenLxApp.vector_Object_rend)
    clear = _swig_new_instance_method(_OpenLxApp.vector_Object_clear)
    get_allocator = _swig_new_instance_method(_OpenLxApp.vector_Object_get_allocator)
    pop_back = _swig_new_instance_method(_OpenLxApp.vector_Object_pop_back)
    erase = _swig_new_instance_method(_OpenLxApp.vector_Object_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_Object self) -> vector_Object
        __init__(vector_Object self, vector_Object other) -> vector_Object
        __init__(vector_Object self, std::vector< std::shared_ptr< OpenLxApp::Object > >::size_type size) -> vector_Object
        __init__(vector_Object self, std::vector< std::shared_ptr< OpenLxApp::Object > >::size_type size, std::vector< std::shared_ptr< OpenLxApp::Object > >::value_type const & value) -> vector_Object
        """
        _OpenLxApp.vector_Object_swiginit(self, _OpenLxApp.new_vector_Object(*args))
    push_back = _swig_new_instance_method(_OpenLxApp.vector_Object_push_back)
    front = _swig_new_instance_method(_OpenLxApp.vector_Object_front)
    back = _swig_new_instance_method(_OpenLxApp.vector_Object_back)
    assign = _swig_new_instance_method(_OpenLxApp.vector_Object_assign)
    resize = _swig_new_instance_method(_OpenLxApp.vector_Object_resize)
    insert = _swig_new_instance_method(_OpenLxApp.vector_Object_insert)
    reserve = _swig_new_instance_method(_OpenLxApp.vector_Object_reserve)
    capacity = _swig_new_instance_method(_OpenLxApp.vector_Object_capacity)
    __swig_destroy__ = _OpenLxApp.delete_vector_Object

# Register vector_Object in _OpenLxApp:
_OpenLxApp.vector_Object_swigregister(vector_Object)
class vector_ObjectDefinition(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< OpenLxApp::ObjectDefinition > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_OpenLxApp.vector_ObjectDefinition_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_OpenLxApp.vector_ObjectDefinition___nonzero__)
    __bool__ = _swig_new_instance_method(_OpenLxApp.vector_ObjectDefinition___bool__)
    __len__ = _swig_new_instance_method(_OpenLxApp.vector_ObjectDefinition___len__)
    __getslice__ = _swig_new_instance_method(_OpenLxApp.vector_ObjectDefinition___getslice__)
    __setslice__ = _swig_new_instance_method(_OpenLxApp.vector_ObjectDefinition___setslice__)
    __delslice__ = _swig_new_instance_method(_OpenLxApp.vector_ObjectDefinition___delslice__)
    __delitem__ = _swig_new_instance_method(_OpenLxApp.vector_ObjectDefinition___delitem__)
    __getitem__ = _swig_new_instance_method(_OpenLxApp.vector_ObjectDefinition___getitem__)
    __setitem__ = _swig_new_instance_method(_OpenLxApp.vector_ObjectDefinition___setitem__)
    pop = _swig_new_instance_method(_OpenLxApp.vector_ObjectDefinition_pop)
    append = _swig_new_instance_method(_OpenLxApp.vector_ObjectDefinition_append)
    empty = _swig_new_instance_method(_OpenLxApp.vector_ObjectDefinition_empty)
    size = _swig_new_instance_method(_OpenLxApp.vector_ObjectDefinition_size)
    swap = _swig_new_instance_method(_OpenLxApp.vector_ObjectDefinition_swap)
    begin = _swig_new_instance_method(_OpenLxApp.vector_ObjectDefinition_begin)
    end = _swig_new_instance_method(_OpenLxApp.vector_ObjectDefinition_end)
    rbegin = _swig_new_instance_method(_OpenLxApp.vector_ObjectDefinition_rbegin)
    rend = _swig_new_instance_method(_OpenLxApp.vector_ObjectDefinition_rend)
    clear = _swig_new_instance_method(_OpenLxApp.vector_ObjectDefinition_clear)
    get_allocator = _swig_new_instance_method(_OpenLxApp.vector_ObjectDefinition_get_allocator)
    pop_back = _swig_new_instance_method(_OpenLxApp.vector_ObjectDefinition_pop_back)
    erase = _swig_new_instance_method(_OpenLxApp.vector_ObjectDefinition_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_ObjectDefinition self) -> vector_ObjectDefinition
        __init__(vector_ObjectDefinition self, vector_ObjectDefinition other) -> vector_ObjectDefinition
        __init__(vector_ObjectDefinition self, std::vector< std::shared_ptr< OpenLxApp::ObjectDefinition > >::size_type size) -> vector_ObjectDefinition
        __init__(vector_ObjectDefinition self, std::vector< std::shared_ptr< OpenLxApp::ObjectDefinition > >::size_type size, std::vector< std::shared_ptr< OpenLxApp::ObjectDefinition > >::value_type const & value) -> vector_ObjectDefinition
        """
        _OpenLxApp.vector_ObjectDefinition_swiginit(self, _OpenLxApp.new_vector_ObjectDefinition(*args))
    push_back = _swig_new_instance_method(_OpenLxApp.vector_ObjectDefinition_push_back)
    front = _swig_new_instance_method(_OpenLxApp.vector_ObjectDefinition_front)
    back = _swig_new_instance_method(_OpenLxApp.vector_ObjectDefinition_back)
    assign = _swig_new_instance_method(_OpenLxApp.vector_ObjectDefinition_assign)
    resize = _swig_new_instance_method(_OpenLxApp.vector_ObjectDefinition_resize)
    insert = _swig_new_instance_method(_OpenLxApp.vector_ObjectDefinition_insert)
    reserve = _swig_new_instance_method(_OpenLxApp.vector_ObjectDefinition_reserve)
    capacity = _swig_new_instance_method(_OpenLxApp.vector_ObjectDefinition_capacity)
    __swig_destroy__ = _OpenLxApp.delete_vector_ObjectDefinition

# Register vector_ObjectDefinition in _OpenLxApp:
_OpenLxApp.vector_ObjectDefinition_swigregister(vector_ObjectDefinition)
class vector_OpeningElement(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< OpenLxApp::OpeningElement > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_OpenLxApp.vector_OpeningElement_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_OpenLxApp.vector_OpeningElement___nonzero__)
    __bool__ = _swig_new_instance_method(_OpenLxApp.vector_OpeningElement___bool__)
    __len__ = _swig_new_instance_method(_OpenLxApp.vector_OpeningElement___len__)
    __getslice__ = _swig_new_instance_method(_OpenLxApp.vector_OpeningElement___getslice__)
    __setslice__ = _swig_new_instance_method(_OpenLxApp.vector_OpeningElement___setslice__)
    __delslice__ = _swig_new_instance_method(_OpenLxApp.vector_OpeningElement___delslice__)
    __delitem__ = _swig_new_instance_method(_OpenLxApp.vector_OpeningElement___delitem__)
    __getitem__ = _swig_new_instance_method(_OpenLxApp.vector_OpeningElement___getitem__)
    __setitem__ = _swig_new_instance_method(_OpenLxApp.vector_OpeningElement___setitem__)
    pop = _swig_new_instance_method(_OpenLxApp.vector_OpeningElement_pop)
    append = _swig_new_instance_method(_OpenLxApp.vector_OpeningElement_append)
    empty = _swig_new_instance_method(_OpenLxApp.vector_OpeningElement_empty)
    size = _swig_new_instance_method(_OpenLxApp.vector_OpeningElement_size)
    swap = _swig_new_instance_method(_OpenLxApp.vector_OpeningElement_swap)
    begin = _swig_new_instance_method(_OpenLxApp.vector_OpeningElement_begin)
    end = _swig_new_instance_method(_OpenLxApp.vector_OpeningElement_end)
    rbegin = _swig_new_instance_method(_OpenLxApp.vector_OpeningElement_rbegin)
    rend = _swig_new_instance_method(_OpenLxApp.vector_OpeningElement_rend)
    clear = _swig_new_instance_method(_OpenLxApp.vector_OpeningElement_clear)
    get_allocator = _swig_new_instance_method(_OpenLxApp.vector_OpeningElement_get_allocator)
    pop_back = _swig_new_instance_method(_OpenLxApp.vector_OpeningElement_pop_back)
    erase = _swig_new_instance_method(_OpenLxApp.vector_OpeningElement_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_OpeningElement self) -> vector_OpeningElement
        __init__(vector_OpeningElement self, vector_OpeningElement other) -> vector_OpeningElement
        __init__(vector_OpeningElement self, std::vector< std::shared_ptr< OpenLxApp::OpeningElement > >::size_type size) -> vector_OpeningElement
        __init__(vector_OpeningElement self, std::vector< std::shared_ptr< OpenLxApp::OpeningElement > >::size_type size, std::vector< std::shared_ptr< OpenLxApp::OpeningElement > >::value_type const & value) -> vector_OpeningElement
        """
        _OpenLxApp.vector_OpeningElement_swiginit(self, _OpenLxApp.new_vector_OpeningElement(*args))
    push_back = _swig_new_instance_method(_OpenLxApp.vector_OpeningElement_push_back)
    front = _swig_new_instance_method(_OpenLxApp.vector_OpeningElement_front)
    back = _swig_new_instance_method(_OpenLxApp.vector_OpeningElement_back)
    assign = _swig_new_instance_method(_OpenLxApp.vector_OpeningElement_assign)
    resize = _swig_new_instance_method(_OpenLxApp.vector_OpeningElement_resize)
    insert = _swig_new_instance_method(_OpenLxApp.vector_OpeningElement_insert)
    reserve = _swig_new_instance_method(_OpenLxApp.vector_OpeningElement_reserve)
    capacity = _swig_new_instance_method(_OpenLxApp.vector_OpeningElement_capacity)
    __swig_destroy__ = _OpenLxApp.delete_vector_OpeningElement

# Register vector_OpeningElement in _OpenLxApp:
_OpenLxApp.vector_OpeningElement_swigregister(vector_OpeningElement)
class vector_OpeningStandardCase(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< OpenLxApp::OpeningStandardCase > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_OpenLxApp.vector_OpeningStandardCase_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_OpenLxApp.vector_OpeningStandardCase___nonzero__)
    __bool__ = _swig_new_instance_method(_OpenLxApp.vector_OpeningStandardCase___bool__)
    __len__ = _swig_new_instance_method(_OpenLxApp.vector_OpeningStandardCase___len__)
    __getslice__ = _swig_new_instance_method(_OpenLxApp.vector_OpeningStandardCase___getslice__)
    __setslice__ = _swig_new_instance_method(_OpenLxApp.vector_OpeningStandardCase___setslice__)
    __delslice__ = _swig_new_instance_method(_OpenLxApp.vector_OpeningStandardCase___delslice__)
    __delitem__ = _swig_new_instance_method(_OpenLxApp.vector_OpeningStandardCase___delitem__)
    __getitem__ = _swig_new_instance_method(_OpenLxApp.vector_OpeningStandardCase___getitem__)
    __setitem__ = _swig_new_instance_method(_OpenLxApp.vector_OpeningStandardCase___setitem__)
    pop = _swig_new_instance_method(_OpenLxApp.vector_OpeningStandardCase_pop)
    append = _swig_new_instance_method(_OpenLxApp.vector_OpeningStandardCase_append)
    empty = _swig_new_instance_method(_OpenLxApp.vector_OpeningStandardCase_empty)
    size = _swig_new_instance_method(_OpenLxApp.vector_OpeningStandardCase_size)
    swap = _swig_new_instance_method(_OpenLxApp.vector_OpeningStandardCase_swap)
    begin = _swig_new_instance_method(_OpenLxApp.vector_OpeningStandardCase_begin)
    end = _swig_new_instance_method(_OpenLxApp.vector_OpeningStandardCase_end)
    rbegin = _swig_new_instance_method(_OpenLxApp.vector_OpeningStandardCase_rbegin)
    rend = _swig_new_instance_method(_OpenLxApp.vector_OpeningStandardCase_rend)
    clear = _swig_new_instance_method(_OpenLxApp.vector_OpeningStandardCase_clear)
    get_allocator = _swig_new_instance_method(_OpenLxApp.vector_OpeningStandardCase_get_allocator)
    pop_back = _swig_new_instance_method(_OpenLxApp.vector_OpeningStandardCase_pop_back)
    erase = _swig_new_instance_method(_OpenLxApp.vector_OpeningStandardCase_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_OpeningStandardCase self) -> vector_OpeningStandardCase
        __init__(vector_OpeningStandardCase self, vector_OpeningStandardCase other) -> vector_OpeningStandardCase
        __init__(vector_OpeningStandardCase self, std::vector< std::shared_ptr< OpenLxApp::OpeningStandardCase > >::size_type size) -> vector_OpeningStandardCase
        __init__(vector_OpeningStandardCase self, std::vector< std::shared_ptr< OpenLxApp::OpeningStandardCase > >::size_type size, std::vector< std::shared_ptr< OpenLxApp::OpeningStandardCase > >::value_type const & value) -> vector_OpeningStandardCase
        """
        _OpenLxApp.vector_OpeningStandardCase_swiginit(self, _OpenLxApp.new_vector_OpeningStandardCase(*args))
    push_back = _swig_new_instance_method(_OpenLxApp.vector_OpeningStandardCase_push_back)
    front = _swig_new_instance_method(_OpenLxApp.vector_OpeningStandardCase_front)
    back = _swig_new_instance_method(_OpenLxApp.vector_OpeningStandardCase_back)
    assign = _swig_new_instance_method(_OpenLxApp.vector_OpeningStandardCase_assign)
    resize = _swig_new_instance_method(_OpenLxApp.vector_OpeningStandardCase_resize)
    insert = _swig_new_instance_method(_OpenLxApp.vector_OpeningStandardCase_insert)
    reserve = _swig_new_instance_method(_OpenLxApp.vector_OpeningStandardCase_reserve)
    capacity = _swig_new_instance_method(_OpenLxApp.vector_OpeningStandardCase_capacity)
    __swig_destroy__ = _OpenLxApp.delete_vector_OpeningStandardCase

# Register vector_OpeningStandardCase in _OpenLxApp:
_OpenLxApp.vector_OpeningStandardCase_swigregister(vector_OpeningStandardCase)
class vector_Outlet(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< OpenLxApp::Outlet > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_OpenLxApp.vector_Outlet_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_OpenLxApp.vector_Outlet___nonzero__)
    __bool__ = _swig_new_instance_method(_OpenLxApp.vector_Outlet___bool__)
    __len__ = _swig_new_instance_method(_OpenLxApp.vector_Outlet___len__)
    __getslice__ = _swig_new_instance_method(_OpenLxApp.vector_Outlet___getslice__)
    __setslice__ = _swig_new_instance_method(_OpenLxApp.vector_Outlet___setslice__)
    __delslice__ = _swig_new_instance_method(_OpenLxApp.vector_Outlet___delslice__)
    __delitem__ = _swig_new_instance_method(_OpenLxApp.vector_Outlet___delitem__)
    __getitem__ = _swig_new_instance_method(_OpenLxApp.vector_Outlet___getitem__)
    __setitem__ = _swig_new_instance_method(_OpenLxApp.vector_Outlet___setitem__)
    pop = _swig_new_instance_method(_OpenLxApp.vector_Outlet_pop)
    append = _swig_new_instance_method(_OpenLxApp.vector_Outlet_append)
    empty = _swig_new_instance_method(_OpenLxApp.vector_Outlet_empty)
    size = _swig_new_instance_method(_OpenLxApp.vector_Outlet_size)
    swap = _swig_new_instance_method(_OpenLxApp.vector_Outlet_swap)
    begin = _swig_new_instance_method(_OpenLxApp.vector_Outlet_begin)
    end = _swig_new_instance_method(_OpenLxApp.vector_Outlet_end)
    rbegin = _swig_new_instance_method(_OpenLxApp.vector_Outlet_rbegin)
    rend = _swig_new_instance_method(_OpenLxApp.vector_Outlet_rend)
    clear = _swig_new_instance_method(_OpenLxApp.vector_Outlet_clear)
    get_allocator = _swig_new_instance_method(_OpenLxApp.vector_Outlet_get_allocator)
    pop_back = _swig_new_instance_method(_OpenLxApp.vector_Outlet_pop_back)
    erase = _swig_new_instance_method(_OpenLxApp.vector_Outlet_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_Outlet self) -> vector_Outlet
        __init__(vector_Outlet self, vector_Outlet other) -> vector_Outlet
        __init__(vector_Outlet self, std::vector< std::shared_ptr< OpenLxApp::Outlet > >::size_type size) -> vector_Outlet
        __init__(vector_Outlet self, std::vector< std::shared_ptr< OpenLxApp::Outlet > >::size_type size, std::vector< std::shared_ptr< OpenLxApp::Outlet > >::value_type const & value) -> vector_Outlet
        """
        _OpenLxApp.vector_Outlet_swiginit(self, _OpenLxApp.new_vector_Outlet(*args))
    push_back = _swig_new_instance_method(_OpenLxApp.vector_Outlet_push_back)
    front = _swig_new_instance_method(_OpenLxApp.vector_Outlet_front)
    back = _swig_new_instance_method(_OpenLxApp.vector_Outlet_back)
    assign = _swig_new_instance_method(_OpenLxApp.vector_Outlet_assign)
    resize = _swig_new_instance_method(_OpenLxApp.vector_Outlet_resize)
    insert = _swig_new_instance_method(_OpenLxApp.vector_Outlet_insert)
    reserve = _swig_new_instance_method(_OpenLxApp.vector_Outlet_reserve)
    capacity = _swig_new_instance_method(_OpenLxApp.vector_Outlet_capacity)
    __swig_destroy__ = _OpenLxApp.delete_vector_Outlet

# Register vector_Outlet in _OpenLxApp:
_OpenLxApp.vector_Outlet_swigregister(vector_Outlet)
class vector_ParameterizedProfileDef(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< OpenLxApp::ParameterizedProfileDef > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_OpenLxApp.vector_ParameterizedProfileDef_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_OpenLxApp.vector_ParameterizedProfileDef___nonzero__)
    __bool__ = _swig_new_instance_method(_OpenLxApp.vector_ParameterizedProfileDef___bool__)
    __len__ = _swig_new_instance_method(_OpenLxApp.vector_ParameterizedProfileDef___len__)
    __getslice__ = _swig_new_instance_method(_OpenLxApp.vector_ParameterizedProfileDef___getslice__)
    __setslice__ = _swig_new_instance_method(_OpenLxApp.vector_ParameterizedProfileDef___setslice__)
    __delslice__ = _swig_new_instance_method(_OpenLxApp.vector_ParameterizedProfileDef___delslice__)
    __delitem__ = _swig_new_instance_method(_OpenLxApp.vector_ParameterizedProfileDef___delitem__)
    __getitem__ = _swig_new_instance_method(_OpenLxApp.vector_ParameterizedProfileDef___getitem__)
    __setitem__ = _swig_new_instance_method(_OpenLxApp.vector_ParameterizedProfileDef___setitem__)
    pop = _swig_new_instance_method(_OpenLxApp.vector_ParameterizedProfileDef_pop)
    append = _swig_new_instance_method(_OpenLxApp.vector_ParameterizedProfileDef_append)
    empty = _swig_new_instance_method(_OpenLxApp.vector_ParameterizedProfileDef_empty)
    size = _swig_new_instance_method(_OpenLxApp.vector_ParameterizedProfileDef_size)
    swap = _swig_new_instance_method(_OpenLxApp.vector_ParameterizedProfileDef_swap)
    begin = _swig_new_instance_method(_OpenLxApp.vector_ParameterizedProfileDef_begin)
    end = _swig_new_instance_method(_OpenLxApp.vector_ParameterizedProfileDef_end)
    rbegin = _swig_new_instance_method(_OpenLxApp.vector_ParameterizedProfileDef_rbegin)
    rend = _swig_new_instance_method(_OpenLxApp.vector_ParameterizedProfileDef_rend)
    clear = _swig_new_instance_method(_OpenLxApp.vector_ParameterizedProfileDef_clear)
    get_allocator = _swig_new_instance_method(_OpenLxApp.vector_ParameterizedProfileDef_get_allocator)
    pop_back = _swig_new_instance_method(_OpenLxApp.vector_ParameterizedProfileDef_pop_back)
    erase = _swig_new_instance_method(_OpenLxApp.vector_ParameterizedProfileDef_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_ParameterizedProfileDef self) -> vector_ParameterizedProfileDef
        __init__(vector_ParameterizedProfileDef self, vector_ParameterizedProfileDef other) -> vector_ParameterizedProfileDef
        __init__(vector_ParameterizedProfileDef self, std::vector< std::shared_ptr< OpenLxApp::ParameterizedProfileDef > >::size_type size) -> vector_ParameterizedProfileDef
        __init__(vector_ParameterizedProfileDef self, std::vector< std::shared_ptr< OpenLxApp::ParameterizedProfileDef > >::size_type size, std::vector< std::shared_ptr< OpenLxApp::ParameterizedProfileDef > >::value_type const & value) -> vector_ParameterizedProfileDef
        """
        _OpenLxApp.vector_ParameterizedProfileDef_swiginit(self, _OpenLxApp.new_vector_ParameterizedProfileDef(*args))
    push_back = _swig_new_instance_method(_OpenLxApp.vector_ParameterizedProfileDef_push_back)
    front = _swig_new_instance_method(_OpenLxApp.vector_ParameterizedProfileDef_front)
    back = _swig_new_instance_method(_OpenLxApp.vector_ParameterizedProfileDef_back)
    assign = _swig_new_instance_method(_OpenLxApp.vector_ParameterizedProfileDef_assign)
    resize = _swig_new_instance_method(_OpenLxApp.vector_ParameterizedProfileDef_resize)
    insert = _swig_new_instance_method(_OpenLxApp.vector_ParameterizedProfileDef_insert)
    reserve = _swig_new_instance_method(_OpenLxApp.vector_ParameterizedProfileDef_reserve)
    capacity = _swig_new_instance_method(_OpenLxApp.vector_ParameterizedProfileDef_capacity)
    __swig_destroy__ = _OpenLxApp.delete_vector_ParameterizedProfileDef

# Register vector_ParameterizedProfileDef in _OpenLxApp:
_OpenLxApp.vector_ParameterizedProfileDef_swigregister(vector_ParameterizedProfileDef)
class vector_Pavement(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< OpenLxApp::Pavement > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_OpenLxApp.vector_Pavement_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_OpenLxApp.vector_Pavement___nonzero__)
    __bool__ = _swig_new_instance_method(_OpenLxApp.vector_Pavement___bool__)
    __len__ = _swig_new_instance_method(_OpenLxApp.vector_Pavement___len__)
    __getslice__ = _swig_new_instance_method(_OpenLxApp.vector_Pavement___getslice__)
    __setslice__ = _swig_new_instance_method(_OpenLxApp.vector_Pavement___setslice__)
    __delslice__ = _swig_new_instance_method(_OpenLxApp.vector_Pavement___delslice__)
    __delitem__ = _swig_new_instance_method(_OpenLxApp.vector_Pavement___delitem__)
    __getitem__ = _swig_new_instance_method(_OpenLxApp.vector_Pavement___getitem__)
    __setitem__ = _swig_new_instance_method(_OpenLxApp.vector_Pavement___setitem__)
    pop = _swig_new_instance_method(_OpenLxApp.vector_Pavement_pop)
    append = _swig_new_instance_method(_OpenLxApp.vector_Pavement_append)
    empty = _swig_new_instance_method(_OpenLxApp.vector_Pavement_empty)
    size = _swig_new_instance_method(_OpenLxApp.vector_Pavement_size)
    swap = _swig_new_instance_method(_OpenLxApp.vector_Pavement_swap)
    begin = _swig_new_instance_method(_OpenLxApp.vector_Pavement_begin)
    end = _swig_new_instance_method(_OpenLxApp.vector_Pavement_end)
    rbegin = _swig_new_instance_method(_OpenLxApp.vector_Pavement_rbegin)
    rend = _swig_new_instance_method(_OpenLxApp.vector_Pavement_rend)
    clear = _swig_new_instance_method(_OpenLxApp.vector_Pavement_clear)
    get_allocator = _swig_new_instance_method(_OpenLxApp.vector_Pavement_get_allocator)
    pop_back = _swig_new_instance_method(_OpenLxApp.vector_Pavement_pop_back)
    erase = _swig_new_instance_method(_OpenLxApp.vector_Pavement_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_Pavement self) -> vector_Pavement
        __init__(vector_Pavement self, vector_Pavement other) -> vector_Pavement
        __init__(vector_Pavement self, std::vector< std::shared_ptr< OpenLxApp::Pavement > >::size_type size) -> vector_Pavement
        __init__(vector_Pavement self, std::vector< std::shared_ptr< OpenLxApp::Pavement > >::size_type size, std::vector< std::shared_ptr< OpenLxApp::Pavement > >::value_type const & value) -> vector_Pavement
        """
        _OpenLxApp.vector_Pavement_swiginit(self, _OpenLxApp.new_vector_Pavement(*args))
    push_back = _swig_new_instance_method(_OpenLxApp.vector_Pavement_push_back)
    front = _swig_new_instance_method(_OpenLxApp.vector_Pavement_front)
    back = _swig_new_instance_method(_OpenLxApp.vector_Pavement_back)
    assign = _swig_new_instance_method(_OpenLxApp.vector_Pavement_assign)
    resize = _swig_new_instance_method(_OpenLxApp.vector_Pavement_resize)
    insert = _swig_new_instance_method(_OpenLxApp.vector_Pavement_insert)
    reserve = _swig_new_instance_method(_OpenLxApp.vector_Pavement_reserve)
    capacity = _swig_new_instance_method(_OpenLxApp.vector_Pavement_capacity)
    __swig_destroy__ = _OpenLxApp.delete_vector_Pavement

# Register vector_Pavement in _OpenLxApp:
_OpenLxApp.vector_Pavement_swigregister(vector_Pavement)
class vector_Pile(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< OpenLxApp::Pile > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_OpenLxApp.vector_Pile_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_OpenLxApp.vector_Pile___nonzero__)
    __bool__ = _swig_new_instance_method(_OpenLxApp.vector_Pile___bool__)
    __len__ = _swig_new_instance_method(_OpenLxApp.vector_Pile___len__)
    __getslice__ = _swig_new_instance_method(_OpenLxApp.vector_Pile___getslice__)
    __setslice__ = _swig_new_instance_method(_OpenLxApp.vector_Pile___setslice__)
    __delslice__ = _swig_new_instance_method(_OpenLxApp.vector_Pile___delslice__)
    __delitem__ = _swig_new_instance_method(_OpenLxApp.vector_Pile___delitem__)
    __getitem__ = _swig_new_instance_method(_OpenLxApp.vector_Pile___getitem__)
    __setitem__ = _swig_new_instance_method(_OpenLxApp.vector_Pile___setitem__)
    pop = _swig_new_instance_method(_OpenLxApp.vector_Pile_pop)
    append = _swig_new_instance_method(_OpenLxApp.vector_Pile_append)
    empty = _swig_new_instance_method(_OpenLxApp.vector_Pile_empty)
    size = _swig_new_instance_method(_OpenLxApp.vector_Pile_size)
    swap = _swig_new_instance_method(_OpenLxApp.vector_Pile_swap)
    begin = _swig_new_instance_method(_OpenLxApp.vector_Pile_begin)
    end = _swig_new_instance_method(_OpenLxApp.vector_Pile_end)
    rbegin = _swig_new_instance_method(_OpenLxApp.vector_Pile_rbegin)
    rend = _swig_new_instance_method(_OpenLxApp.vector_Pile_rend)
    clear = _swig_new_instance_method(_OpenLxApp.vector_Pile_clear)
    get_allocator = _swig_new_instance_method(_OpenLxApp.vector_Pile_get_allocator)
    pop_back = _swig_new_instance_method(_OpenLxApp.vector_Pile_pop_back)
    erase = _swig_new_instance_method(_OpenLxApp.vector_Pile_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_Pile self) -> vector_Pile
        __init__(vector_Pile self, vector_Pile other) -> vector_Pile
        __init__(vector_Pile self, std::vector< std::shared_ptr< OpenLxApp::Pile > >::size_type size) -> vector_Pile
        __init__(vector_Pile self, std::vector< std::shared_ptr< OpenLxApp::Pile > >::size_type size, std::vector< std::shared_ptr< OpenLxApp::Pile > >::value_type const & value) -> vector_Pile
        """
        _OpenLxApp.vector_Pile_swiginit(self, _OpenLxApp.new_vector_Pile(*args))
    push_back = _swig_new_instance_method(_OpenLxApp.vector_Pile_push_back)
    front = _swig_new_instance_method(_OpenLxApp.vector_Pile_front)
    back = _swig_new_instance_method(_OpenLxApp.vector_Pile_back)
    assign = _swig_new_instance_method(_OpenLxApp.vector_Pile_assign)
    resize = _swig_new_instance_method(_OpenLxApp.vector_Pile_resize)
    insert = _swig_new_instance_method(_OpenLxApp.vector_Pile_insert)
    reserve = _swig_new_instance_method(_OpenLxApp.vector_Pile_reserve)
    capacity = _swig_new_instance_method(_OpenLxApp.vector_Pile_capacity)
    __swig_destroy__ = _OpenLxApp.delete_vector_Pile

# Register vector_Pile in _OpenLxApp:
_OpenLxApp.vector_Pile_swigregister(vector_Pile)
class vector_PipeFitting(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< OpenLxApp::PipeFitting > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_OpenLxApp.vector_PipeFitting_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_OpenLxApp.vector_PipeFitting___nonzero__)
    __bool__ = _swig_new_instance_method(_OpenLxApp.vector_PipeFitting___bool__)
    __len__ = _swig_new_instance_method(_OpenLxApp.vector_PipeFitting___len__)
    __getslice__ = _swig_new_instance_method(_OpenLxApp.vector_PipeFitting___getslice__)
    __setslice__ = _swig_new_instance_method(_OpenLxApp.vector_PipeFitting___setslice__)
    __delslice__ = _swig_new_instance_method(_OpenLxApp.vector_PipeFitting___delslice__)
    __delitem__ = _swig_new_instance_method(_OpenLxApp.vector_PipeFitting___delitem__)
    __getitem__ = _swig_new_instance_method(_OpenLxApp.vector_PipeFitting___getitem__)
    __setitem__ = _swig_new_instance_method(_OpenLxApp.vector_PipeFitting___setitem__)
    pop = _swig_new_instance_method(_OpenLxApp.vector_PipeFitting_pop)
    append = _swig_new_instance_method(_OpenLxApp.vector_PipeFitting_append)
    empty = _swig_new_instance_method(_OpenLxApp.vector_PipeFitting_empty)
    size = _swig_new_instance_method(_OpenLxApp.vector_PipeFitting_size)
    swap = _swig_new_instance_method(_OpenLxApp.vector_PipeFitting_swap)
    begin = _swig_new_instance_method(_OpenLxApp.vector_PipeFitting_begin)
    end = _swig_new_instance_method(_OpenLxApp.vector_PipeFitting_end)
    rbegin = _swig_new_instance_method(_OpenLxApp.vector_PipeFitting_rbegin)
    rend = _swig_new_instance_method(_OpenLxApp.vector_PipeFitting_rend)
    clear = _swig_new_instance_method(_OpenLxApp.vector_PipeFitting_clear)
    get_allocator = _swig_new_instance_method(_OpenLxApp.vector_PipeFitting_get_allocator)
    pop_back = _swig_new_instance_method(_OpenLxApp.vector_PipeFitting_pop_back)
    erase = _swig_new_instance_method(_OpenLxApp.vector_PipeFitting_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_PipeFitting self) -> vector_PipeFitting
        __init__(vector_PipeFitting self, vector_PipeFitting other) -> vector_PipeFitting
        __init__(vector_PipeFitting self, std::vector< std::shared_ptr< OpenLxApp::PipeFitting > >::size_type size) -> vector_PipeFitting
        __init__(vector_PipeFitting self, std::vector< std::shared_ptr< OpenLxApp::PipeFitting > >::size_type size, std::vector< std::shared_ptr< OpenLxApp::PipeFitting > >::value_type const & value) -> vector_PipeFitting
        """
        _OpenLxApp.vector_PipeFitting_swiginit(self, _OpenLxApp.new_vector_PipeFitting(*args))
    push_back = _swig_new_instance_method(_OpenLxApp.vector_PipeFitting_push_back)
    front = _swig_new_instance_method(_OpenLxApp.vector_PipeFitting_front)
    back = _swig_new_instance_method(_OpenLxApp.vector_PipeFitting_back)
    assign = _swig_new_instance_method(_OpenLxApp.vector_PipeFitting_assign)
    resize = _swig_new_instance_method(_OpenLxApp.vector_PipeFitting_resize)
    insert = _swig_new_instance_method(_OpenLxApp.vector_PipeFitting_insert)
    reserve = _swig_new_instance_method(_OpenLxApp.vector_PipeFitting_reserve)
    capacity = _swig_new_instance_method(_OpenLxApp.vector_PipeFitting_capacity)
    __swig_destroy__ = _OpenLxApp.delete_vector_PipeFitting

# Register vector_PipeFitting in _OpenLxApp:
_OpenLxApp.vector_PipeFitting_swigregister(vector_PipeFitting)
class vector_PipeSegment(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< OpenLxApp::PipeSegment > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_OpenLxApp.vector_PipeSegment_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_OpenLxApp.vector_PipeSegment___nonzero__)
    __bool__ = _swig_new_instance_method(_OpenLxApp.vector_PipeSegment___bool__)
    __len__ = _swig_new_instance_method(_OpenLxApp.vector_PipeSegment___len__)
    __getslice__ = _swig_new_instance_method(_OpenLxApp.vector_PipeSegment___getslice__)
    __setslice__ = _swig_new_instance_method(_OpenLxApp.vector_PipeSegment___setslice__)
    __delslice__ = _swig_new_instance_method(_OpenLxApp.vector_PipeSegment___delslice__)
    __delitem__ = _swig_new_instance_method(_OpenLxApp.vector_PipeSegment___delitem__)
    __getitem__ = _swig_new_instance_method(_OpenLxApp.vector_PipeSegment___getitem__)
    __setitem__ = _swig_new_instance_method(_OpenLxApp.vector_PipeSegment___setitem__)
    pop = _swig_new_instance_method(_OpenLxApp.vector_PipeSegment_pop)
    append = _swig_new_instance_method(_OpenLxApp.vector_PipeSegment_append)
    empty = _swig_new_instance_method(_OpenLxApp.vector_PipeSegment_empty)
    size = _swig_new_instance_method(_OpenLxApp.vector_PipeSegment_size)
    swap = _swig_new_instance_method(_OpenLxApp.vector_PipeSegment_swap)
    begin = _swig_new_instance_method(_OpenLxApp.vector_PipeSegment_begin)
    end = _swig_new_instance_method(_OpenLxApp.vector_PipeSegment_end)
    rbegin = _swig_new_instance_method(_OpenLxApp.vector_PipeSegment_rbegin)
    rend = _swig_new_instance_method(_OpenLxApp.vector_PipeSegment_rend)
    clear = _swig_new_instance_method(_OpenLxApp.vector_PipeSegment_clear)
    get_allocator = _swig_new_instance_method(_OpenLxApp.vector_PipeSegment_get_allocator)
    pop_back = _swig_new_instance_method(_OpenLxApp.vector_PipeSegment_pop_back)
    erase = _swig_new_instance_method(_OpenLxApp.vector_PipeSegment_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_PipeSegment self) -> vector_PipeSegment
        __init__(vector_PipeSegment self, vector_PipeSegment other) -> vector_PipeSegment
        __init__(vector_PipeSegment self, std::vector< std::shared_ptr< OpenLxApp::PipeSegment > >::size_type size) -> vector_PipeSegment
        __init__(vector_PipeSegment self, std::vector< std::shared_ptr< OpenLxApp::PipeSegment > >::size_type size, std::vector< std::shared_ptr< OpenLxApp::PipeSegment > >::value_type const & value) -> vector_PipeSegment
        """
        _OpenLxApp.vector_PipeSegment_swiginit(self, _OpenLxApp.new_vector_PipeSegment(*args))
    push_back = _swig_new_instance_method(_OpenLxApp.vector_PipeSegment_push_back)
    front = _swig_new_instance_method(_OpenLxApp.vector_PipeSegment_front)
    back = _swig_new_instance_method(_OpenLxApp.vector_PipeSegment_back)
    assign = _swig_new_instance_method(_OpenLxApp.vector_PipeSegment_assign)
    resize = _swig_new_instance_method(_OpenLxApp.vector_PipeSegment_resize)
    insert = _swig_new_instance_method(_OpenLxApp.vector_PipeSegment_insert)
    reserve = _swig_new_instance_method(_OpenLxApp.vector_PipeSegment_reserve)
    capacity = _swig_new_instance_method(_OpenLxApp.vector_PipeSegment_capacity)
    __swig_destroy__ = _OpenLxApp.delete_vector_PipeSegment

# Register vector_PipeSegment in _OpenLxApp:
_OpenLxApp.vector_PipeSegment_swigregister(vector_PipeSegment)
class vector_Plane(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< OpenLxApp::Plane > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_OpenLxApp.vector_Plane_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_OpenLxApp.vector_Plane___nonzero__)
    __bool__ = _swig_new_instance_method(_OpenLxApp.vector_Plane___bool__)
    __len__ = _swig_new_instance_method(_OpenLxApp.vector_Plane___len__)
    __getslice__ = _swig_new_instance_method(_OpenLxApp.vector_Plane___getslice__)
    __setslice__ = _swig_new_instance_method(_OpenLxApp.vector_Plane___setslice__)
    __delslice__ = _swig_new_instance_method(_OpenLxApp.vector_Plane___delslice__)
    __delitem__ = _swig_new_instance_method(_OpenLxApp.vector_Plane___delitem__)
    __getitem__ = _swig_new_instance_method(_OpenLxApp.vector_Plane___getitem__)
    __setitem__ = _swig_new_instance_method(_OpenLxApp.vector_Plane___setitem__)
    pop = _swig_new_instance_method(_OpenLxApp.vector_Plane_pop)
    append = _swig_new_instance_method(_OpenLxApp.vector_Plane_append)
    empty = _swig_new_instance_method(_OpenLxApp.vector_Plane_empty)
    size = _swig_new_instance_method(_OpenLxApp.vector_Plane_size)
    swap = _swig_new_instance_method(_OpenLxApp.vector_Plane_swap)
    begin = _swig_new_instance_method(_OpenLxApp.vector_Plane_begin)
    end = _swig_new_instance_method(_OpenLxApp.vector_Plane_end)
    rbegin = _swig_new_instance_method(_OpenLxApp.vector_Plane_rbegin)
    rend = _swig_new_instance_method(_OpenLxApp.vector_Plane_rend)
    clear = _swig_new_instance_method(_OpenLxApp.vector_Plane_clear)
    get_allocator = _swig_new_instance_method(_OpenLxApp.vector_Plane_get_allocator)
    pop_back = _swig_new_instance_method(_OpenLxApp.vector_Plane_pop_back)
    erase = _swig_new_instance_method(_OpenLxApp.vector_Plane_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_Plane self) -> vector_Plane
        __init__(vector_Plane self, vector_Plane other) -> vector_Plane
        __init__(vector_Plane self, std::vector< std::shared_ptr< OpenLxApp::Plane > >::size_type size) -> vector_Plane
        __init__(vector_Plane self, std::vector< std::shared_ptr< OpenLxApp::Plane > >::size_type size, std::vector< std::shared_ptr< OpenLxApp::Plane > >::value_type const & value) -> vector_Plane
        """
        _OpenLxApp.vector_Plane_swiginit(self, _OpenLxApp.new_vector_Plane(*args))
    push_back = _swig_new_instance_method(_OpenLxApp.vector_Plane_push_back)
    front = _swig_new_instance_method(_OpenLxApp.vector_Plane_front)
    back = _swig_new_instance_method(_OpenLxApp.vector_Plane_back)
    assign = _swig_new_instance_method(_OpenLxApp.vector_Plane_assign)
    resize = _swig_new_instance_method(_OpenLxApp.vector_Plane_resize)
    insert = _swig_new_instance_method(_OpenLxApp.vector_Plane_insert)
    reserve = _swig_new_instance_method(_OpenLxApp.vector_Plane_reserve)
    capacity = _swig_new_instance_method(_OpenLxApp.vector_Plane_capacity)
    __swig_destroy__ = _OpenLxApp.delete_vector_Plane

# Register vector_Plane in _OpenLxApp:
_OpenLxApp.vector_Plane_swigregister(vector_Plane)
class vector_Plate(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< OpenLxApp::Plate > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_OpenLxApp.vector_Plate_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_OpenLxApp.vector_Plate___nonzero__)
    __bool__ = _swig_new_instance_method(_OpenLxApp.vector_Plate___bool__)
    __len__ = _swig_new_instance_method(_OpenLxApp.vector_Plate___len__)
    __getslice__ = _swig_new_instance_method(_OpenLxApp.vector_Plate___getslice__)
    __setslice__ = _swig_new_instance_method(_OpenLxApp.vector_Plate___setslice__)
    __delslice__ = _swig_new_instance_method(_OpenLxApp.vector_Plate___delslice__)
    __delitem__ = _swig_new_instance_method(_OpenLxApp.vector_Plate___delitem__)
    __getitem__ = _swig_new_instance_method(_OpenLxApp.vector_Plate___getitem__)
    __setitem__ = _swig_new_instance_method(_OpenLxApp.vector_Plate___setitem__)
    pop = _swig_new_instance_method(_OpenLxApp.vector_Plate_pop)
    append = _swig_new_instance_method(_OpenLxApp.vector_Plate_append)
    empty = _swig_new_instance_method(_OpenLxApp.vector_Plate_empty)
    size = _swig_new_instance_method(_OpenLxApp.vector_Plate_size)
    swap = _swig_new_instance_method(_OpenLxApp.vector_Plate_swap)
    begin = _swig_new_instance_method(_OpenLxApp.vector_Plate_begin)
    end = _swig_new_instance_method(_OpenLxApp.vector_Plate_end)
    rbegin = _swig_new_instance_method(_OpenLxApp.vector_Plate_rbegin)
    rend = _swig_new_instance_method(_OpenLxApp.vector_Plate_rend)
    clear = _swig_new_instance_method(_OpenLxApp.vector_Plate_clear)
    get_allocator = _swig_new_instance_method(_OpenLxApp.vector_Plate_get_allocator)
    pop_back = _swig_new_instance_method(_OpenLxApp.vector_Plate_pop_back)
    erase = _swig_new_instance_method(_OpenLxApp.vector_Plate_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_Plate self) -> vector_Plate
        __init__(vector_Plate self, vector_Plate other) -> vector_Plate
        __init__(vector_Plate self, std::vector< std::shared_ptr< OpenLxApp::Plate > >::size_type size) -> vector_Plate
        __init__(vector_Plate self, std::vector< std::shared_ptr< OpenLxApp::Plate > >::size_type size, std::vector< std::shared_ptr< OpenLxApp::Plate > >::value_type const & value) -> vector_Plate
        """
        _OpenLxApp.vector_Plate_swiginit(self, _OpenLxApp.new_vector_Plate(*args))
    push_back = _swig_new_instance_method(_OpenLxApp.vector_Plate_push_back)
    front = _swig_new_instance_method(_OpenLxApp.vector_Plate_front)
    back = _swig_new_instance_method(_OpenLxApp.vector_Plate_back)
    assign = _swig_new_instance_method(_OpenLxApp.vector_Plate_assign)
    resize = _swig_new_instance_method(_OpenLxApp.vector_Plate_resize)
    insert = _swig_new_instance_method(_OpenLxApp.vector_Plate_insert)
    reserve = _swig_new_instance_method(_OpenLxApp.vector_Plate_reserve)
    capacity = _swig_new_instance_method(_OpenLxApp.vector_Plate_capacity)
    __swig_destroy__ = _OpenLxApp.delete_vector_Plate

# Register vector_Plate in _OpenLxApp:
_OpenLxApp.vector_Plate_swigregister(vector_Plate)
class vector_PlateStandardCase(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< OpenLxApp::PlateStandardCase > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_OpenLxApp.vector_PlateStandardCase_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_OpenLxApp.vector_PlateStandardCase___nonzero__)
    __bool__ = _swig_new_instance_method(_OpenLxApp.vector_PlateStandardCase___bool__)
    __len__ = _swig_new_instance_method(_OpenLxApp.vector_PlateStandardCase___len__)
    __getslice__ = _swig_new_instance_method(_OpenLxApp.vector_PlateStandardCase___getslice__)
    __setslice__ = _swig_new_instance_method(_OpenLxApp.vector_PlateStandardCase___setslice__)
    __delslice__ = _swig_new_instance_method(_OpenLxApp.vector_PlateStandardCase___delslice__)
    __delitem__ = _swig_new_instance_method(_OpenLxApp.vector_PlateStandardCase___delitem__)
    __getitem__ = _swig_new_instance_method(_OpenLxApp.vector_PlateStandardCase___getitem__)
    __setitem__ = _swig_new_instance_method(_OpenLxApp.vector_PlateStandardCase___setitem__)
    pop = _swig_new_instance_method(_OpenLxApp.vector_PlateStandardCase_pop)
    append = _swig_new_instance_method(_OpenLxApp.vector_PlateStandardCase_append)
    empty = _swig_new_instance_method(_OpenLxApp.vector_PlateStandardCase_empty)
    size = _swig_new_instance_method(_OpenLxApp.vector_PlateStandardCase_size)
    swap = _swig_new_instance_method(_OpenLxApp.vector_PlateStandardCase_swap)
    begin = _swig_new_instance_method(_OpenLxApp.vector_PlateStandardCase_begin)
    end = _swig_new_instance_method(_OpenLxApp.vector_PlateStandardCase_end)
    rbegin = _swig_new_instance_method(_OpenLxApp.vector_PlateStandardCase_rbegin)
    rend = _swig_new_instance_method(_OpenLxApp.vector_PlateStandardCase_rend)
    clear = _swig_new_instance_method(_OpenLxApp.vector_PlateStandardCase_clear)
    get_allocator = _swig_new_instance_method(_OpenLxApp.vector_PlateStandardCase_get_allocator)
    pop_back = _swig_new_instance_method(_OpenLxApp.vector_PlateStandardCase_pop_back)
    erase = _swig_new_instance_method(_OpenLxApp.vector_PlateStandardCase_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_PlateStandardCase self) -> vector_PlateStandardCase
        __init__(vector_PlateStandardCase self, vector_PlateStandardCase other) -> vector_PlateStandardCase
        __init__(vector_PlateStandardCase self, std::vector< std::shared_ptr< OpenLxApp::PlateStandardCase > >::size_type size) -> vector_PlateStandardCase
        __init__(vector_PlateStandardCase self, std::vector< std::shared_ptr< OpenLxApp::PlateStandardCase > >::size_type size, std::vector< std::shared_ptr< OpenLxApp::PlateStandardCase > >::value_type const & value) -> vector_PlateStandardCase
        """
        _OpenLxApp.vector_PlateStandardCase_swiginit(self, _OpenLxApp.new_vector_PlateStandardCase(*args))
    push_back = _swig_new_instance_method(_OpenLxApp.vector_PlateStandardCase_push_back)
    front = _swig_new_instance_method(_OpenLxApp.vector_PlateStandardCase_front)
    back = _swig_new_instance_method(_OpenLxApp.vector_PlateStandardCase_back)
    assign = _swig_new_instance_method(_OpenLxApp.vector_PlateStandardCase_assign)
    resize = _swig_new_instance_method(_OpenLxApp.vector_PlateStandardCase_resize)
    insert = _swig_new_instance_method(_OpenLxApp.vector_PlateStandardCase_insert)
    reserve = _swig_new_instance_method(_OpenLxApp.vector_PlateStandardCase_reserve)
    capacity = _swig_new_instance_method(_OpenLxApp.vector_PlateStandardCase_capacity)
    __swig_destroy__ = _OpenLxApp.delete_vector_PlateStandardCase

# Register vector_PlateStandardCase in _OpenLxApp:
_OpenLxApp.vector_PlateStandardCase_swigregister(vector_PlateStandardCase)
class vector_PolygonMesh(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< OpenLxApp::PolygonMesh > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_OpenLxApp.vector_PolygonMesh_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_OpenLxApp.vector_PolygonMesh___nonzero__)
    __bool__ = _swig_new_instance_method(_OpenLxApp.vector_PolygonMesh___bool__)
    __len__ = _swig_new_instance_method(_OpenLxApp.vector_PolygonMesh___len__)
    __getslice__ = _swig_new_instance_method(_OpenLxApp.vector_PolygonMesh___getslice__)
    __setslice__ = _swig_new_instance_method(_OpenLxApp.vector_PolygonMesh___setslice__)
    __delslice__ = _swig_new_instance_method(_OpenLxApp.vector_PolygonMesh___delslice__)
    __delitem__ = _swig_new_instance_method(_OpenLxApp.vector_PolygonMesh___delitem__)
    __getitem__ = _swig_new_instance_method(_OpenLxApp.vector_PolygonMesh___getitem__)
    __setitem__ = _swig_new_instance_method(_OpenLxApp.vector_PolygonMesh___setitem__)
    pop = _swig_new_instance_method(_OpenLxApp.vector_PolygonMesh_pop)
    append = _swig_new_instance_method(_OpenLxApp.vector_PolygonMesh_append)
    empty = _swig_new_instance_method(_OpenLxApp.vector_PolygonMesh_empty)
    size = _swig_new_instance_method(_OpenLxApp.vector_PolygonMesh_size)
    swap = _swig_new_instance_method(_OpenLxApp.vector_PolygonMesh_swap)
    begin = _swig_new_instance_method(_OpenLxApp.vector_PolygonMesh_begin)
    end = _swig_new_instance_method(_OpenLxApp.vector_PolygonMesh_end)
    rbegin = _swig_new_instance_method(_OpenLxApp.vector_PolygonMesh_rbegin)
    rend = _swig_new_instance_method(_OpenLxApp.vector_PolygonMesh_rend)
    clear = _swig_new_instance_method(_OpenLxApp.vector_PolygonMesh_clear)
    get_allocator = _swig_new_instance_method(_OpenLxApp.vector_PolygonMesh_get_allocator)
    pop_back = _swig_new_instance_method(_OpenLxApp.vector_PolygonMesh_pop_back)
    erase = _swig_new_instance_method(_OpenLxApp.vector_PolygonMesh_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_PolygonMesh self) -> vector_PolygonMesh
        __init__(vector_PolygonMesh self, vector_PolygonMesh other) -> vector_PolygonMesh
        __init__(vector_PolygonMesh self, std::vector< std::shared_ptr< OpenLxApp::PolygonMesh > >::size_type size) -> vector_PolygonMesh
        __init__(vector_PolygonMesh self, std::vector< std::shared_ptr< OpenLxApp::PolygonMesh > >::size_type size, std::vector< std::shared_ptr< OpenLxApp::PolygonMesh > >::value_type const & value) -> vector_PolygonMesh
        """
        _OpenLxApp.vector_PolygonMesh_swiginit(self, _OpenLxApp.new_vector_PolygonMesh(*args))
    push_back = _swig_new_instance_method(_OpenLxApp.vector_PolygonMesh_push_back)
    front = _swig_new_instance_method(_OpenLxApp.vector_PolygonMesh_front)
    back = _swig_new_instance_method(_OpenLxApp.vector_PolygonMesh_back)
    assign = _swig_new_instance_method(_OpenLxApp.vector_PolygonMesh_assign)
    resize = _swig_new_instance_method(_OpenLxApp.vector_PolygonMesh_resize)
    insert = _swig_new_instance_method(_OpenLxApp.vector_PolygonMesh_insert)
    reserve = _swig_new_instance_method(_OpenLxApp.vector_PolygonMesh_reserve)
    capacity = _swig_new_instance_method(_OpenLxApp.vector_PolygonMesh_capacity)
    __swig_destroy__ = _OpenLxApp.delete_vector_PolygonMesh

# Register vector_PolygonMesh in _OpenLxApp:
_OpenLxApp.vector_PolygonMesh_swigregister(vector_PolygonMesh)
class vector_Polyline(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< OpenLxApp::Polyline > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_OpenLxApp.vector_Polyline_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_OpenLxApp.vector_Polyline___nonzero__)
    __bool__ = _swig_new_instance_method(_OpenLxApp.vector_Polyline___bool__)
    __len__ = _swig_new_instance_method(_OpenLxApp.vector_Polyline___len__)
    __getslice__ = _swig_new_instance_method(_OpenLxApp.vector_Polyline___getslice__)
    __setslice__ = _swig_new_instance_method(_OpenLxApp.vector_Polyline___setslice__)
    __delslice__ = _swig_new_instance_method(_OpenLxApp.vector_Polyline___delslice__)
    __delitem__ = _swig_new_instance_method(_OpenLxApp.vector_Polyline___delitem__)
    __getitem__ = _swig_new_instance_method(_OpenLxApp.vector_Polyline___getitem__)
    __setitem__ = _swig_new_instance_method(_OpenLxApp.vector_Polyline___setitem__)
    pop = _swig_new_instance_method(_OpenLxApp.vector_Polyline_pop)
    append = _swig_new_instance_method(_OpenLxApp.vector_Polyline_append)
    empty = _swig_new_instance_method(_OpenLxApp.vector_Polyline_empty)
    size = _swig_new_instance_method(_OpenLxApp.vector_Polyline_size)
    swap = _swig_new_instance_method(_OpenLxApp.vector_Polyline_swap)
    begin = _swig_new_instance_method(_OpenLxApp.vector_Polyline_begin)
    end = _swig_new_instance_method(_OpenLxApp.vector_Polyline_end)
    rbegin = _swig_new_instance_method(_OpenLxApp.vector_Polyline_rbegin)
    rend = _swig_new_instance_method(_OpenLxApp.vector_Polyline_rend)
    clear = _swig_new_instance_method(_OpenLxApp.vector_Polyline_clear)
    get_allocator = _swig_new_instance_method(_OpenLxApp.vector_Polyline_get_allocator)
    pop_back = _swig_new_instance_method(_OpenLxApp.vector_Polyline_pop_back)
    erase = _swig_new_instance_method(_OpenLxApp.vector_Polyline_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_Polyline self) -> vector_Polyline
        __init__(vector_Polyline self, vector_Polyline other) -> vector_Polyline
        __init__(vector_Polyline self, std::vector< std::shared_ptr< OpenLxApp::Polyline > >::size_type size) -> vector_Polyline
        __init__(vector_Polyline self, std::vector< std::shared_ptr< OpenLxApp::Polyline > >::size_type size, std::vector< std::shared_ptr< OpenLxApp::Polyline > >::value_type const & value) -> vector_Polyline
        """
        _OpenLxApp.vector_Polyline_swiginit(self, _OpenLxApp.new_vector_Polyline(*args))
    push_back = _swig_new_instance_method(_OpenLxApp.vector_Polyline_push_back)
    front = _swig_new_instance_method(_OpenLxApp.vector_Polyline_front)
    back = _swig_new_instance_method(_OpenLxApp.vector_Polyline_back)
    assign = _swig_new_instance_method(_OpenLxApp.vector_Polyline_assign)
    resize = _swig_new_instance_method(_OpenLxApp.vector_Polyline_resize)
    insert = _swig_new_instance_method(_OpenLxApp.vector_Polyline_insert)
    reserve = _swig_new_instance_method(_OpenLxApp.vector_Polyline_reserve)
    capacity = _swig_new_instance_method(_OpenLxApp.vector_Polyline_capacity)
    __swig_destroy__ = _OpenLxApp.delete_vector_Polyline

# Register vector_Polyline in _OpenLxApp:
_OpenLxApp.vector_Polyline_swigregister(vector_Polyline)
class vector_Port(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< OpenLxApp::Port > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_OpenLxApp.vector_Port_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_OpenLxApp.vector_Port___nonzero__)
    __bool__ = _swig_new_instance_method(_OpenLxApp.vector_Port___bool__)
    __len__ = _swig_new_instance_method(_OpenLxApp.vector_Port___len__)
    __getslice__ = _swig_new_instance_method(_OpenLxApp.vector_Port___getslice__)
    __setslice__ = _swig_new_instance_method(_OpenLxApp.vector_Port___setslice__)
    __delslice__ = _swig_new_instance_method(_OpenLxApp.vector_Port___delslice__)
    __delitem__ = _swig_new_instance_method(_OpenLxApp.vector_Port___delitem__)
    __getitem__ = _swig_new_instance_method(_OpenLxApp.vector_Port___getitem__)
    __setitem__ = _swig_new_instance_method(_OpenLxApp.vector_Port___setitem__)
    pop = _swig_new_instance_method(_OpenLxApp.vector_Port_pop)
    append = _swig_new_instance_method(_OpenLxApp.vector_Port_append)
    empty = _swig_new_instance_method(_OpenLxApp.vector_Port_empty)
    size = _swig_new_instance_method(_OpenLxApp.vector_Port_size)
    swap = _swig_new_instance_method(_OpenLxApp.vector_Port_swap)
    begin = _swig_new_instance_method(_OpenLxApp.vector_Port_begin)
    end = _swig_new_instance_method(_OpenLxApp.vector_Port_end)
    rbegin = _swig_new_instance_method(_OpenLxApp.vector_Port_rbegin)
    rend = _swig_new_instance_method(_OpenLxApp.vector_Port_rend)
    clear = _swig_new_instance_method(_OpenLxApp.vector_Port_clear)
    get_allocator = _swig_new_instance_method(_OpenLxApp.vector_Port_get_allocator)
    pop_back = _swig_new_instance_method(_OpenLxApp.vector_Port_pop_back)
    erase = _swig_new_instance_method(_OpenLxApp.vector_Port_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_Port self) -> vector_Port
        __init__(vector_Port self, vector_Port other) -> vector_Port
        __init__(vector_Port self, std::vector< std::shared_ptr< OpenLxApp::Port > >::size_type size) -> vector_Port
        __init__(vector_Port self, std::vector< std::shared_ptr< OpenLxApp::Port > >::size_type size, std::vector< std::shared_ptr< OpenLxApp::Port > >::value_type const & value) -> vector_Port
        """
        _OpenLxApp.vector_Port_swiginit(self, _OpenLxApp.new_vector_Port(*args))
    push_back = _swig_new_instance_method(_OpenLxApp.vector_Port_push_back)
    front = _swig_new_instance_method(_OpenLxApp.vector_Port_front)
    back = _swig_new_instance_method(_OpenLxApp.vector_Port_back)
    assign = _swig_new_instance_method(_OpenLxApp.vector_Port_assign)
    resize = _swig_new_instance_method(_OpenLxApp.vector_Port_resize)
    insert = _swig_new_instance_method(_OpenLxApp.vector_Port_insert)
    reserve = _swig_new_instance_method(_OpenLxApp.vector_Port_reserve)
    capacity = _swig_new_instance_method(_OpenLxApp.vector_Port_capacity)
    __swig_destroy__ = _OpenLxApp.delete_vector_Port

# Register vector_Port in _OpenLxApp:
_OpenLxApp.vector_Port_swigregister(vector_Port)
class vector_Product(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< OpenLxApp::Product > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_OpenLxApp.vector_Product_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_OpenLxApp.vector_Product___nonzero__)
    __bool__ = _swig_new_instance_method(_OpenLxApp.vector_Product___bool__)
    __len__ = _swig_new_instance_method(_OpenLxApp.vector_Product___len__)
    __getslice__ = _swig_new_instance_method(_OpenLxApp.vector_Product___getslice__)
    __setslice__ = _swig_new_instance_method(_OpenLxApp.vector_Product___setslice__)
    __delslice__ = _swig_new_instance_method(_OpenLxApp.vector_Product___delslice__)
    __delitem__ = _swig_new_instance_method(_OpenLxApp.vector_Product___delitem__)
    __getitem__ = _swig_new_instance_method(_OpenLxApp.vector_Product___getitem__)
    __setitem__ = _swig_new_instance_method(_OpenLxApp.vector_Product___setitem__)
    pop = _swig_new_instance_method(_OpenLxApp.vector_Product_pop)
    append = _swig_new_instance_method(_OpenLxApp.vector_Product_append)
    empty = _swig_new_instance_method(_OpenLxApp.vector_Product_empty)
    size = _swig_new_instance_method(_OpenLxApp.vector_Product_size)
    swap = _swig_new_instance_method(_OpenLxApp.vector_Product_swap)
    begin = _swig_new_instance_method(_OpenLxApp.vector_Product_begin)
    end = _swig_new_instance_method(_OpenLxApp.vector_Product_end)
    rbegin = _swig_new_instance_method(_OpenLxApp.vector_Product_rbegin)
    rend = _swig_new_instance_method(_OpenLxApp.vector_Product_rend)
    clear = _swig_new_instance_method(_OpenLxApp.vector_Product_clear)
    get_allocator = _swig_new_instance_method(_OpenLxApp.vector_Product_get_allocator)
    pop_back = _swig_new_instance_method(_OpenLxApp.vector_Product_pop_back)
    erase = _swig_new_instance_method(_OpenLxApp.vector_Product_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_Product self) -> vector_Product
        __init__(vector_Product self, vector_Product other) -> vector_Product
        __init__(vector_Product self, std::vector< std::shared_ptr< OpenLxApp::Product > >::size_type size) -> vector_Product
        __init__(vector_Product self, std::vector< std::shared_ptr< OpenLxApp::Product > >::size_type size, std::vector< std::shared_ptr< OpenLxApp::Product > >::value_type const & value) -> vector_Product
        """
        _OpenLxApp.vector_Product_swiginit(self, _OpenLxApp.new_vector_Product(*args))
    push_back = _swig_new_instance_method(_OpenLxApp.vector_Product_push_back)
    front = _swig_new_instance_method(_OpenLxApp.vector_Product_front)
    back = _swig_new_instance_method(_OpenLxApp.vector_Product_back)
    assign = _swig_new_instance_method(_OpenLxApp.vector_Product_assign)
    resize = _swig_new_instance_method(_OpenLxApp.vector_Product_resize)
    insert = _swig_new_instance_method(_OpenLxApp.vector_Product_insert)
    reserve = _swig_new_instance_method(_OpenLxApp.vector_Product_reserve)
    capacity = _swig_new_instance_method(_OpenLxApp.vector_Product_capacity)
    __swig_destroy__ = _OpenLxApp.delete_vector_Product

# Register vector_Product in _OpenLxApp:
_OpenLxApp.vector_Product_swigregister(vector_Product)
class vector_ProfileDef(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< OpenLxApp::ProfileDef > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_OpenLxApp.vector_ProfileDef_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_OpenLxApp.vector_ProfileDef___nonzero__)
    __bool__ = _swig_new_instance_method(_OpenLxApp.vector_ProfileDef___bool__)
    __len__ = _swig_new_instance_method(_OpenLxApp.vector_ProfileDef___len__)
    __getslice__ = _swig_new_instance_method(_OpenLxApp.vector_ProfileDef___getslice__)
    __setslice__ = _swig_new_instance_method(_OpenLxApp.vector_ProfileDef___setslice__)
    __delslice__ = _swig_new_instance_method(_OpenLxApp.vector_ProfileDef___delslice__)
    __delitem__ = _swig_new_instance_method(_OpenLxApp.vector_ProfileDef___delitem__)
    __getitem__ = _swig_new_instance_method(_OpenLxApp.vector_ProfileDef___getitem__)
    __setitem__ = _swig_new_instance_method(_OpenLxApp.vector_ProfileDef___setitem__)
    pop = _swig_new_instance_method(_OpenLxApp.vector_ProfileDef_pop)
    append = _swig_new_instance_method(_OpenLxApp.vector_ProfileDef_append)
    empty = _swig_new_instance_method(_OpenLxApp.vector_ProfileDef_empty)
    size = _swig_new_instance_method(_OpenLxApp.vector_ProfileDef_size)
    swap = _swig_new_instance_method(_OpenLxApp.vector_ProfileDef_swap)
    begin = _swig_new_instance_method(_OpenLxApp.vector_ProfileDef_begin)
    end = _swig_new_instance_method(_OpenLxApp.vector_ProfileDef_end)
    rbegin = _swig_new_instance_method(_OpenLxApp.vector_ProfileDef_rbegin)
    rend = _swig_new_instance_method(_OpenLxApp.vector_ProfileDef_rend)
    clear = _swig_new_instance_method(_OpenLxApp.vector_ProfileDef_clear)
    get_allocator = _swig_new_instance_method(_OpenLxApp.vector_ProfileDef_get_allocator)
    pop_back = _swig_new_instance_method(_OpenLxApp.vector_ProfileDef_pop_back)
    erase = _swig_new_instance_method(_OpenLxApp.vector_ProfileDef_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_ProfileDef self) -> vector_ProfileDef
        __init__(vector_ProfileDef self, vector_ProfileDef other) -> vector_ProfileDef
        __init__(vector_ProfileDef self, std::vector< std::shared_ptr< OpenLxApp::ProfileDef > >::size_type size) -> vector_ProfileDef
        __init__(vector_ProfileDef self, std::vector< std::shared_ptr< OpenLxApp::ProfileDef > >::size_type size, std::vector< std::shared_ptr< OpenLxApp::ProfileDef > >::value_type const & value) -> vector_ProfileDef
        """
        _OpenLxApp.vector_ProfileDef_swiginit(self, _OpenLxApp.new_vector_ProfileDef(*args))
    push_back = _swig_new_instance_method(_OpenLxApp.vector_ProfileDef_push_back)
    front = _swig_new_instance_method(_OpenLxApp.vector_ProfileDef_front)
    back = _swig_new_instance_method(_OpenLxApp.vector_ProfileDef_back)
    assign = _swig_new_instance_method(_OpenLxApp.vector_ProfileDef_assign)
    resize = _swig_new_instance_method(_OpenLxApp.vector_ProfileDef_resize)
    insert = _swig_new_instance_method(_OpenLxApp.vector_ProfileDef_insert)
    reserve = _swig_new_instance_method(_OpenLxApp.vector_ProfileDef_reserve)
    capacity = _swig_new_instance_method(_OpenLxApp.vector_ProfileDef_capacity)
    __swig_destroy__ = _OpenLxApp.delete_vector_ProfileDef

# Register vector_ProfileDef in _OpenLxApp:
_OpenLxApp.vector_ProfileDef_swigregister(vector_ProfileDef)
class vector_PropertyBool(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< OpenLxApp::PropertyBool > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_OpenLxApp.vector_PropertyBool_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_OpenLxApp.vector_PropertyBool___nonzero__)
    __bool__ = _swig_new_instance_method(_OpenLxApp.vector_PropertyBool___bool__)
    __len__ = _swig_new_instance_method(_OpenLxApp.vector_PropertyBool___len__)
    __getslice__ = _swig_new_instance_method(_OpenLxApp.vector_PropertyBool___getslice__)
    __setslice__ = _swig_new_instance_method(_OpenLxApp.vector_PropertyBool___setslice__)
    __delslice__ = _swig_new_instance_method(_OpenLxApp.vector_PropertyBool___delslice__)
    __delitem__ = _swig_new_instance_method(_OpenLxApp.vector_PropertyBool___delitem__)
    __getitem__ = _swig_new_instance_method(_OpenLxApp.vector_PropertyBool___getitem__)
    __setitem__ = _swig_new_instance_method(_OpenLxApp.vector_PropertyBool___setitem__)
    pop = _swig_new_instance_method(_OpenLxApp.vector_PropertyBool_pop)
    append = _swig_new_instance_method(_OpenLxApp.vector_PropertyBool_append)
    empty = _swig_new_instance_method(_OpenLxApp.vector_PropertyBool_empty)
    size = _swig_new_instance_method(_OpenLxApp.vector_PropertyBool_size)
    swap = _swig_new_instance_method(_OpenLxApp.vector_PropertyBool_swap)
    begin = _swig_new_instance_method(_OpenLxApp.vector_PropertyBool_begin)
    end = _swig_new_instance_method(_OpenLxApp.vector_PropertyBool_end)
    rbegin = _swig_new_instance_method(_OpenLxApp.vector_PropertyBool_rbegin)
    rend = _swig_new_instance_method(_OpenLxApp.vector_PropertyBool_rend)
    clear = _swig_new_instance_method(_OpenLxApp.vector_PropertyBool_clear)
    get_allocator = _swig_new_instance_method(_OpenLxApp.vector_PropertyBool_get_allocator)
    pop_back = _swig_new_instance_method(_OpenLxApp.vector_PropertyBool_pop_back)
    erase = _swig_new_instance_method(_OpenLxApp.vector_PropertyBool_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_PropertyBool self) -> vector_PropertyBool
        __init__(vector_PropertyBool self, vector_PropertyBool other) -> vector_PropertyBool
        __init__(vector_PropertyBool self, std::vector< std::shared_ptr< OpenLxApp::PropertyBool > >::size_type size) -> vector_PropertyBool
        __init__(vector_PropertyBool self, std::vector< std::shared_ptr< OpenLxApp::PropertyBool > >::size_type size, std::vector< std::shared_ptr< OpenLxApp::PropertyBool > >::value_type const & value) -> vector_PropertyBool
        """
        _OpenLxApp.vector_PropertyBool_swiginit(self, _OpenLxApp.new_vector_PropertyBool(*args))
    push_back = _swig_new_instance_method(_OpenLxApp.vector_PropertyBool_push_back)
    front = _swig_new_instance_method(_OpenLxApp.vector_PropertyBool_front)
    back = _swig_new_instance_method(_OpenLxApp.vector_PropertyBool_back)
    assign = _swig_new_instance_method(_OpenLxApp.vector_PropertyBool_assign)
    resize = _swig_new_instance_method(_OpenLxApp.vector_PropertyBool_resize)
    insert = _swig_new_instance_method(_OpenLxApp.vector_PropertyBool_insert)
    reserve = _swig_new_instance_method(_OpenLxApp.vector_PropertyBool_reserve)
    capacity = _swig_new_instance_method(_OpenLxApp.vector_PropertyBool_capacity)
    __swig_destroy__ = _OpenLxApp.delete_vector_PropertyBool

# Register vector_PropertyBool in _OpenLxApp:
_OpenLxApp.vector_PropertyBool_swigregister(vector_PropertyBool)
class vector_PropertyButton(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< OpenLxApp::PropertyButton > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_OpenLxApp.vector_PropertyButton_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_OpenLxApp.vector_PropertyButton___nonzero__)
    __bool__ = _swig_new_instance_method(_OpenLxApp.vector_PropertyButton___bool__)
    __len__ = _swig_new_instance_method(_OpenLxApp.vector_PropertyButton___len__)
    __getslice__ = _swig_new_instance_method(_OpenLxApp.vector_PropertyButton___getslice__)
    __setslice__ = _swig_new_instance_method(_OpenLxApp.vector_PropertyButton___setslice__)
    __delslice__ = _swig_new_instance_method(_OpenLxApp.vector_PropertyButton___delslice__)
    __delitem__ = _swig_new_instance_method(_OpenLxApp.vector_PropertyButton___delitem__)
    __getitem__ = _swig_new_instance_method(_OpenLxApp.vector_PropertyButton___getitem__)
    __setitem__ = _swig_new_instance_method(_OpenLxApp.vector_PropertyButton___setitem__)
    pop = _swig_new_instance_method(_OpenLxApp.vector_PropertyButton_pop)
    append = _swig_new_instance_method(_OpenLxApp.vector_PropertyButton_append)
    empty = _swig_new_instance_method(_OpenLxApp.vector_PropertyButton_empty)
    size = _swig_new_instance_method(_OpenLxApp.vector_PropertyButton_size)
    swap = _swig_new_instance_method(_OpenLxApp.vector_PropertyButton_swap)
    begin = _swig_new_instance_method(_OpenLxApp.vector_PropertyButton_begin)
    end = _swig_new_instance_method(_OpenLxApp.vector_PropertyButton_end)
    rbegin = _swig_new_instance_method(_OpenLxApp.vector_PropertyButton_rbegin)
    rend = _swig_new_instance_method(_OpenLxApp.vector_PropertyButton_rend)
    clear = _swig_new_instance_method(_OpenLxApp.vector_PropertyButton_clear)
    get_allocator = _swig_new_instance_method(_OpenLxApp.vector_PropertyButton_get_allocator)
    pop_back = _swig_new_instance_method(_OpenLxApp.vector_PropertyButton_pop_back)
    erase = _swig_new_instance_method(_OpenLxApp.vector_PropertyButton_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_PropertyButton self) -> vector_PropertyButton
        __init__(vector_PropertyButton self, vector_PropertyButton other) -> vector_PropertyButton
        __init__(vector_PropertyButton self, std::vector< std::shared_ptr< OpenLxApp::PropertyButton > >::size_type size) -> vector_PropertyButton
        __init__(vector_PropertyButton self, std::vector< std::shared_ptr< OpenLxApp::PropertyButton > >::size_type size, std::vector< std::shared_ptr< OpenLxApp::PropertyButton > >::value_type const & value) -> vector_PropertyButton
        """
        _OpenLxApp.vector_PropertyButton_swiginit(self, _OpenLxApp.new_vector_PropertyButton(*args))
    push_back = _swig_new_instance_method(_OpenLxApp.vector_PropertyButton_push_back)
    front = _swig_new_instance_method(_OpenLxApp.vector_PropertyButton_front)
    back = _swig_new_instance_method(_OpenLxApp.vector_PropertyButton_back)
    assign = _swig_new_instance_method(_OpenLxApp.vector_PropertyButton_assign)
    resize = _swig_new_instance_method(_OpenLxApp.vector_PropertyButton_resize)
    insert = _swig_new_instance_method(_OpenLxApp.vector_PropertyButton_insert)
    reserve = _swig_new_instance_method(_OpenLxApp.vector_PropertyButton_reserve)
    capacity = _swig_new_instance_method(_OpenLxApp.vector_PropertyButton_capacity)
    __swig_destroy__ = _OpenLxApp.delete_vector_PropertyButton

# Register vector_PropertyButton in _OpenLxApp:
_OpenLxApp.vector_PropertyButton_swigregister(vector_PropertyButton)
class vector_PropertyColor(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< OpenLxApp::PropertyColor > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_OpenLxApp.vector_PropertyColor_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_OpenLxApp.vector_PropertyColor___nonzero__)
    __bool__ = _swig_new_instance_method(_OpenLxApp.vector_PropertyColor___bool__)
    __len__ = _swig_new_instance_method(_OpenLxApp.vector_PropertyColor___len__)
    __getslice__ = _swig_new_instance_method(_OpenLxApp.vector_PropertyColor___getslice__)
    __setslice__ = _swig_new_instance_method(_OpenLxApp.vector_PropertyColor___setslice__)
    __delslice__ = _swig_new_instance_method(_OpenLxApp.vector_PropertyColor___delslice__)
    __delitem__ = _swig_new_instance_method(_OpenLxApp.vector_PropertyColor___delitem__)
    __getitem__ = _swig_new_instance_method(_OpenLxApp.vector_PropertyColor___getitem__)
    __setitem__ = _swig_new_instance_method(_OpenLxApp.vector_PropertyColor___setitem__)
    pop = _swig_new_instance_method(_OpenLxApp.vector_PropertyColor_pop)
    append = _swig_new_instance_method(_OpenLxApp.vector_PropertyColor_append)
    empty = _swig_new_instance_method(_OpenLxApp.vector_PropertyColor_empty)
    size = _swig_new_instance_method(_OpenLxApp.vector_PropertyColor_size)
    swap = _swig_new_instance_method(_OpenLxApp.vector_PropertyColor_swap)
    begin = _swig_new_instance_method(_OpenLxApp.vector_PropertyColor_begin)
    end = _swig_new_instance_method(_OpenLxApp.vector_PropertyColor_end)
    rbegin = _swig_new_instance_method(_OpenLxApp.vector_PropertyColor_rbegin)
    rend = _swig_new_instance_method(_OpenLxApp.vector_PropertyColor_rend)
    clear = _swig_new_instance_method(_OpenLxApp.vector_PropertyColor_clear)
    get_allocator = _swig_new_instance_method(_OpenLxApp.vector_PropertyColor_get_allocator)
    pop_back = _swig_new_instance_method(_OpenLxApp.vector_PropertyColor_pop_back)
    erase = _swig_new_instance_method(_OpenLxApp.vector_PropertyColor_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_PropertyColor self) -> vector_PropertyColor
        __init__(vector_PropertyColor self, vector_PropertyColor other) -> vector_PropertyColor
        __init__(vector_PropertyColor self, std::vector< std::shared_ptr< OpenLxApp::PropertyColor > >::size_type size) -> vector_PropertyColor
        __init__(vector_PropertyColor self, std::vector< std::shared_ptr< OpenLxApp::PropertyColor > >::size_type size, std::vector< std::shared_ptr< OpenLxApp::PropertyColor > >::value_type const & value) -> vector_PropertyColor
        """
        _OpenLxApp.vector_PropertyColor_swiginit(self, _OpenLxApp.new_vector_PropertyColor(*args))
    push_back = _swig_new_instance_method(_OpenLxApp.vector_PropertyColor_push_back)
    front = _swig_new_instance_method(_OpenLxApp.vector_PropertyColor_front)
    back = _swig_new_instance_method(_OpenLxApp.vector_PropertyColor_back)
    assign = _swig_new_instance_method(_OpenLxApp.vector_PropertyColor_assign)
    resize = _swig_new_instance_method(_OpenLxApp.vector_PropertyColor_resize)
    insert = _swig_new_instance_method(_OpenLxApp.vector_PropertyColor_insert)
    reserve = _swig_new_instance_method(_OpenLxApp.vector_PropertyColor_reserve)
    capacity = _swig_new_instance_method(_OpenLxApp.vector_PropertyColor_capacity)
    __swig_destroy__ = _OpenLxApp.delete_vector_PropertyColor

# Register vector_PropertyColor in _OpenLxApp:
_OpenLxApp.vector_PropertyColor_swigregister(vector_PropertyColor)
class vector_PropertyDouble(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< OpenLxApp::PropertyDouble > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_OpenLxApp.vector_PropertyDouble_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_OpenLxApp.vector_PropertyDouble___nonzero__)
    __bool__ = _swig_new_instance_method(_OpenLxApp.vector_PropertyDouble___bool__)
    __len__ = _swig_new_instance_method(_OpenLxApp.vector_PropertyDouble___len__)
    __getslice__ = _swig_new_instance_method(_OpenLxApp.vector_PropertyDouble___getslice__)
    __setslice__ = _swig_new_instance_method(_OpenLxApp.vector_PropertyDouble___setslice__)
    __delslice__ = _swig_new_instance_method(_OpenLxApp.vector_PropertyDouble___delslice__)
    __delitem__ = _swig_new_instance_method(_OpenLxApp.vector_PropertyDouble___delitem__)
    __getitem__ = _swig_new_instance_method(_OpenLxApp.vector_PropertyDouble___getitem__)
    __setitem__ = _swig_new_instance_method(_OpenLxApp.vector_PropertyDouble___setitem__)
    pop = _swig_new_instance_method(_OpenLxApp.vector_PropertyDouble_pop)
    append = _swig_new_instance_method(_OpenLxApp.vector_PropertyDouble_append)
    empty = _swig_new_instance_method(_OpenLxApp.vector_PropertyDouble_empty)
    size = _swig_new_instance_method(_OpenLxApp.vector_PropertyDouble_size)
    swap = _swig_new_instance_method(_OpenLxApp.vector_PropertyDouble_swap)
    begin = _swig_new_instance_method(_OpenLxApp.vector_PropertyDouble_begin)
    end = _swig_new_instance_method(_OpenLxApp.vector_PropertyDouble_end)
    rbegin = _swig_new_instance_method(_OpenLxApp.vector_PropertyDouble_rbegin)
    rend = _swig_new_instance_method(_OpenLxApp.vector_PropertyDouble_rend)
    clear = _swig_new_instance_method(_OpenLxApp.vector_PropertyDouble_clear)
    get_allocator = _swig_new_instance_method(_OpenLxApp.vector_PropertyDouble_get_allocator)
    pop_back = _swig_new_instance_method(_OpenLxApp.vector_PropertyDouble_pop_back)
    erase = _swig_new_instance_method(_OpenLxApp.vector_PropertyDouble_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_PropertyDouble self) -> vector_PropertyDouble
        __init__(vector_PropertyDouble self, vector_PropertyDouble other) -> vector_PropertyDouble
        __init__(vector_PropertyDouble self, std::vector< std::shared_ptr< OpenLxApp::PropertyDouble > >::size_type size) -> vector_PropertyDouble
        __init__(vector_PropertyDouble self, std::vector< std::shared_ptr< OpenLxApp::PropertyDouble > >::size_type size, std::vector< std::shared_ptr< OpenLxApp::PropertyDouble > >::value_type const & value) -> vector_PropertyDouble
        """
        _OpenLxApp.vector_PropertyDouble_swiginit(self, _OpenLxApp.new_vector_PropertyDouble(*args))
    push_back = _swig_new_instance_method(_OpenLxApp.vector_PropertyDouble_push_back)
    front = _swig_new_instance_method(_OpenLxApp.vector_PropertyDouble_front)
    back = _swig_new_instance_method(_OpenLxApp.vector_PropertyDouble_back)
    assign = _swig_new_instance_method(_OpenLxApp.vector_PropertyDouble_assign)
    resize = _swig_new_instance_method(_OpenLxApp.vector_PropertyDouble_resize)
    insert = _swig_new_instance_method(_OpenLxApp.vector_PropertyDouble_insert)
    reserve = _swig_new_instance_method(_OpenLxApp.vector_PropertyDouble_reserve)
    capacity = _swig_new_instance_method(_OpenLxApp.vector_PropertyDouble_capacity)
    __swig_destroy__ = _OpenLxApp.delete_vector_PropertyDouble

# Register vector_PropertyDouble in _OpenLxApp:
_OpenLxApp.vector_PropertyDouble_swigregister(vector_PropertyDouble)
class vector_PropertyEnum(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< OpenLxApp::PropertyEnum > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_OpenLxApp.vector_PropertyEnum_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_OpenLxApp.vector_PropertyEnum___nonzero__)
    __bool__ = _swig_new_instance_method(_OpenLxApp.vector_PropertyEnum___bool__)
    __len__ = _swig_new_instance_method(_OpenLxApp.vector_PropertyEnum___len__)
    __getslice__ = _swig_new_instance_method(_OpenLxApp.vector_PropertyEnum___getslice__)
    __setslice__ = _swig_new_instance_method(_OpenLxApp.vector_PropertyEnum___setslice__)
    __delslice__ = _swig_new_instance_method(_OpenLxApp.vector_PropertyEnum___delslice__)
    __delitem__ = _swig_new_instance_method(_OpenLxApp.vector_PropertyEnum___delitem__)
    __getitem__ = _swig_new_instance_method(_OpenLxApp.vector_PropertyEnum___getitem__)
    __setitem__ = _swig_new_instance_method(_OpenLxApp.vector_PropertyEnum___setitem__)
    pop = _swig_new_instance_method(_OpenLxApp.vector_PropertyEnum_pop)
    append = _swig_new_instance_method(_OpenLxApp.vector_PropertyEnum_append)
    empty = _swig_new_instance_method(_OpenLxApp.vector_PropertyEnum_empty)
    size = _swig_new_instance_method(_OpenLxApp.vector_PropertyEnum_size)
    swap = _swig_new_instance_method(_OpenLxApp.vector_PropertyEnum_swap)
    begin = _swig_new_instance_method(_OpenLxApp.vector_PropertyEnum_begin)
    end = _swig_new_instance_method(_OpenLxApp.vector_PropertyEnum_end)
    rbegin = _swig_new_instance_method(_OpenLxApp.vector_PropertyEnum_rbegin)
    rend = _swig_new_instance_method(_OpenLxApp.vector_PropertyEnum_rend)
    clear = _swig_new_instance_method(_OpenLxApp.vector_PropertyEnum_clear)
    get_allocator = _swig_new_instance_method(_OpenLxApp.vector_PropertyEnum_get_allocator)
    pop_back = _swig_new_instance_method(_OpenLxApp.vector_PropertyEnum_pop_back)
    erase = _swig_new_instance_method(_OpenLxApp.vector_PropertyEnum_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_PropertyEnum self) -> vector_PropertyEnum
        __init__(vector_PropertyEnum self, vector_PropertyEnum other) -> vector_PropertyEnum
        __init__(vector_PropertyEnum self, std::vector< std::shared_ptr< OpenLxApp::PropertyEnum > >::size_type size) -> vector_PropertyEnum
        __init__(vector_PropertyEnum self, std::vector< std::shared_ptr< OpenLxApp::PropertyEnum > >::size_type size, std::vector< std::shared_ptr< OpenLxApp::PropertyEnum > >::value_type const & value) -> vector_PropertyEnum
        """
        _OpenLxApp.vector_PropertyEnum_swiginit(self, _OpenLxApp.new_vector_PropertyEnum(*args))
    push_back = _swig_new_instance_method(_OpenLxApp.vector_PropertyEnum_push_back)
    front = _swig_new_instance_method(_OpenLxApp.vector_PropertyEnum_front)
    back = _swig_new_instance_method(_OpenLxApp.vector_PropertyEnum_back)
    assign = _swig_new_instance_method(_OpenLxApp.vector_PropertyEnum_assign)
    resize = _swig_new_instance_method(_OpenLxApp.vector_PropertyEnum_resize)
    insert = _swig_new_instance_method(_OpenLxApp.vector_PropertyEnum_insert)
    reserve = _swig_new_instance_method(_OpenLxApp.vector_PropertyEnum_reserve)
    capacity = _swig_new_instance_method(_OpenLxApp.vector_PropertyEnum_capacity)
    __swig_destroy__ = _OpenLxApp.delete_vector_PropertyEnum

# Register vector_PropertyEnum in _OpenLxApp:
_OpenLxApp.vector_PropertyEnum_swigregister(vector_PropertyEnum)
class vector_PropertyEnumEntry(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< OpenLxApp::PropertyEnumEntry > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_OpenLxApp.vector_PropertyEnumEntry_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_OpenLxApp.vector_PropertyEnumEntry___nonzero__)
    __bool__ = _swig_new_instance_method(_OpenLxApp.vector_PropertyEnumEntry___bool__)
    __len__ = _swig_new_instance_method(_OpenLxApp.vector_PropertyEnumEntry___len__)
    __getslice__ = _swig_new_instance_method(_OpenLxApp.vector_PropertyEnumEntry___getslice__)
    __setslice__ = _swig_new_instance_method(_OpenLxApp.vector_PropertyEnumEntry___setslice__)
    __delslice__ = _swig_new_instance_method(_OpenLxApp.vector_PropertyEnumEntry___delslice__)
    __delitem__ = _swig_new_instance_method(_OpenLxApp.vector_PropertyEnumEntry___delitem__)
    __getitem__ = _swig_new_instance_method(_OpenLxApp.vector_PropertyEnumEntry___getitem__)
    __setitem__ = _swig_new_instance_method(_OpenLxApp.vector_PropertyEnumEntry___setitem__)
    pop = _swig_new_instance_method(_OpenLxApp.vector_PropertyEnumEntry_pop)
    append = _swig_new_instance_method(_OpenLxApp.vector_PropertyEnumEntry_append)
    empty = _swig_new_instance_method(_OpenLxApp.vector_PropertyEnumEntry_empty)
    size = _swig_new_instance_method(_OpenLxApp.vector_PropertyEnumEntry_size)
    swap = _swig_new_instance_method(_OpenLxApp.vector_PropertyEnumEntry_swap)
    begin = _swig_new_instance_method(_OpenLxApp.vector_PropertyEnumEntry_begin)
    end = _swig_new_instance_method(_OpenLxApp.vector_PropertyEnumEntry_end)
    rbegin = _swig_new_instance_method(_OpenLxApp.vector_PropertyEnumEntry_rbegin)
    rend = _swig_new_instance_method(_OpenLxApp.vector_PropertyEnumEntry_rend)
    clear = _swig_new_instance_method(_OpenLxApp.vector_PropertyEnumEntry_clear)
    get_allocator = _swig_new_instance_method(_OpenLxApp.vector_PropertyEnumEntry_get_allocator)
    pop_back = _swig_new_instance_method(_OpenLxApp.vector_PropertyEnumEntry_pop_back)
    erase = _swig_new_instance_method(_OpenLxApp.vector_PropertyEnumEntry_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_PropertyEnumEntry self) -> vector_PropertyEnumEntry
        __init__(vector_PropertyEnumEntry self, vector_PropertyEnumEntry other) -> vector_PropertyEnumEntry
        __init__(vector_PropertyEnumEntry self, std::vector< std::shared_ptr< OpenLxApp::PropertyEnumEntry > >::size_type size) -> vector_PropertyEnumEntry
        __init__(vector_PropertyEnumEntry self, std::vector< std::shared_ptr< OpenLxApp::PropertyEnumEntry > >::size_type size, std::vector< std::shared_ptr< OpenLxApp::PropertyEnumEntry > >::value_type const & value) -> vector_PropertyEnumEntry
        """
        _OpenLxApp.vector_PropertyEnumEntry_swiginit(self, _OpenLxApp.new_vector_PropertyEnumEntry(*args))
    push_back = _swig_new_instance_method(_OpenLxApp.vector_PropertyEnumEntry_push_back)
    front = _swig_new_instance_method(_OpenLxApp.vector_PropertyEnumEntry_front)
    back = _swig_new_instance_method(_OpenLxApp.vector_PropertyEnumEntry_back)
    assign = _swig_new_instance_method(_OpenLxApp.vector_PropertyEnumEntry_assign)
    resize = _swig_new_instance_method(_OpenLxApp.vector_PropertyEnumEntry_resize)
    insert = _swig_new_instance_method(_OpenLxApp.vector_PropertyEnumEntry_insert)
    reserve = _swig_new_instance_method(_OpenLxApp.vector_PropertyEnumEntry_reserve)
    capacity = _swig_new_instance_method(_OpenLxApp.vector_PropertyEnumEntry_capacity)
    __swig_destroy__ = _OpenLxApp.delete_vector_PropertyEnumEntry

# Register vector_PropertyEnumEntry in _OpenLxApp:
_OpenLxApp.vector_PropertyEnumEntry_swigregister(vector_PropertyEnumEntry)
class vector_PropertyInteger(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< OpenLxApp::PropertyInteger > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_OpenLxApp.vector_PropertyInteger_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_OpenLxApp.vector_PropertyInteger___nonzero__)
    __bool__ = _swig_new_instance_method(_OpenLxApp.vector_PropertyInteger___bool__)
    __len__ = _swig_new_instance_method(_OpenLxApp.vector_PropertyInteger___len__)
    __getslice__ = _swig_new_instance_method(_OpenLxApp.vector_PropertyInteger___getslice__)
    __setslice__ = _swig_new_instance_method(_OpenLxApp.vector_PropertyInteger___setslice__)
    __delslice__ = _swig_new_instance_method(_OpenLxApp.vector_PropertyInteger___delslice__)
    __delitem__ = _swig_new_instance_method(_OpenLxApp.vector_PropertyInteger___delitem__)
    __getitem__ = _swig_new_instance_method(_OpenLxApp.vector_PropertyInteger___getitem__)
    __setitem__ = _swig_new_instance_method(_OpenLxApp.vector_PropertyInteger___setitem__)
    pop = _swig_new_instance_method(_OpenLxApp.vector_PropertyInteger_pop)
    append = _swig_new_instance_method(_OpenLxApp.vector_PropertyInteger_append)
    empty = _swig_new_instance_method(_OpenLxApp.vector_PropertyInteger_empty)
    size = _swig_new_instance_method(_OpenLxApp.vector_PropertyInteger_size)
    swap = _swig_new_instance_method(_OpenLxApp.vector_PropertyInteger_swap)
    begin = _swig_new_instance_method(_OpenLxApp.vector_PropertyInteger_begin)
    end = _swig_new_instance_method(_OpenLxApp.vector_PropertyInteger_end)
    rbegin = _swig_new_instance_method(_OpenLxApp.vector_PropertyInteger_rbegin)
    rend = _swig_new_instance_method(_OpenLxApp.vector_PropertyInteger_rend)
    clear = _swig_new_instance_method(_OpenLxApp.vector_PropertyInteger_clear)
    get_allocator = _swig_new_instance_method(_OpenLxApp.vector_PropertyInteger_get_allocator)
    pop_back = _swig_new_instance_method(_OpenLxApp.vector_PropertyInteger_pop_back)
    erase = _swig_new_instance_method(_OpenLxApp.vector_PropertyInteger_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_PropertyInteger self) -> vector_PropertyInteger
        __init__(vector_PropertyInteger self, vector_PropertyInteger other) -> vector_PropertyInteger
        __init__(vector_PropertyInteger self, std::vector< std::shared_ptr< OpenLxApp::PropertyInteger > >::size_type size) -> vector_PropertyInteger
        __init__(vector_PropertyInteger self, std::vector< std::shared_ptr< OpenLxApp::PropertyInteger > >::size_type size, std::vector< std::shared_ptr< OpenLxApp::PropertyInteger > >::value_type const & value) -> vector_PropertyInteger
        """
        _OpenLxApp.vector_PropertyInteger_swiginit(self, _OpenLxApp.new_vector_PropertyInteger(*args))
    push_back = _swig_new_instance_method(_OpenLxApp.vector_PropertyInteger_push_back)
    front = _swig_new_instance_method(_OpenLxApp.vector_PropertyInteger_front)
    back = _swig_new_instance_method(_OpenLxApp.vector_PropertyInteger_back)
    assign = _swig_new_instance_method(_OpenLxApp.vector_PropertyInteger_assign)
    resize = _swig_new_instance_method(_OpenLxApp.vector_PropertyInteger_resize)
    insert = _swig_new_instance_method(_OpenLxApp.vector_PropertyInteger_insert)
    reserve = _swig_new_instance_method(_OpenLxApp.vector_PropertyInteger_reserve)
    capacity = _swig_new_instance_method(_OpenLxApp.vector_PropertyInteger_capacity)
    __swig_destroy__ = _OpenLxApp.delete_vector_PropertyInteger

# Register vector_PropertyInteger in _OpenLxApp:
_OpenLxApp.vector_PropertyInteger_swigregister(vector_PropertyInteger)
class vector_PropertySet(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< OpenLxApp::PropertySet > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_OpenLxApp.vector_PropertySet_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_OpenLxApp.vector_PropertySet___nonzero__)
    __bool__ = _swig_new_instance_method(_OpenLxApp.vector_PropertySet___bool__)
    __len__ = _swig_new_instance_method(_OpenLxApp.vector_PropertySet___len__)
    __getslice__ = _swig_new_instance_method(_OpenLxApp.vector_PropertySet___getslice__)
    __setslice__ = _swig_new_instance_method(_OpenLxApp.vector_PropertySet___setslice__)
    __delslice__ = _swig_new_instance_method(_OpenLxApp.vector_PropertySet___delslice__)
    __delitem__ = _swig_new_instance_method(_OpenLxApp.vector_PropertySet___delitem__)
    __getitem__ = _swig_new_instance_method(_OpenLxApp.vector_PropertySet___getitem__)
    __setitem__ = _swig_new_instance_method(_OpenLxApp.vector_PropertySet___setitem__)
    pop = _swig_new_instance_method(_OpenLxApp.vector_PropertySet_pop)
    append = _swig_new_instance_method(_OpenLxApp.vector_PropertySet_append)
    empty = _swig_new_instance_method(_OpenLxApp.vector_PropertySet_empty)
    size = _swig_new_instance_method(_OpenLxApp.vector_PropertySet_size)
    swap = _swig_new_instance_method(_OpenLxApp.vector_PropertySet_swap)
    begin = _swig_new_instance_method(_OpenLxApp.vector_PropertySet_begin)
    end = _swig_new_instance_method(_OpenLxApp.vector_PropertySet_end)
    rbegin = _swig_new_instance_method(_OpenLxApp.vector_PropertySet_rbegin)
    rend = _swig_new_instance_method(_OpenLxApp.vector_PropertySet_rend)
    clear = _swig_new_instance_method(_OpenLxApp.vector_PropertySet_clear)
    get_allocator = _swig_new_instance_method(_OpenLxApp.vector_PropertySet_get_allocator)
    pop_back = _swig_new_instance_method(_OpenLxApp.vector_PropertySet_pop_back)
    erase = _swig_new_instance_method(_OpenLxApp.vector_PropertySet_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_PropertySet self) -> vector_PropertySet
        __init__(vector_PropertySet self, vector_PropertySet other) -> vector_PropertySet
        __init__(vector_PropertySet self, std::vector< std::shared_ptr< OpenLxApp::PropertySet > >::size_type size) -> vector_PropertySet
        __init__(vector_PropertySet self, std::vector< std::shared_ptr< OpenLxApp::PropertySet > >::size_type size, std::vector< std::shared_ptr< OpenLxApp::PropertySet > >::value_type const & value) -> vector_PropertySet
        """
        _OpenLxApp.vector_PropertySet_swiginit(self, _OpenLxApp.new_vector_PropertySet(*args))
    push_back = _swig_new_instance_method(_OpenLxApp.vector_PropertySet_push_back)
    front = _swig_new_instance_method(_OpenLxApp.vector_PropertySet_front)
    back = _swig_new_instance_method(_OpenLxApp.vector_PropertySet_back)
    assign = _swig_new_instance_method(_OpenLxApp.vector_PropertySet_assign)
    resize = _swig_new_instance_method(_OpenLxApp.vector_PropertySet_resize)
    insert = _swig_new_instance_method(_OpenLxApp.vector_PropertySet_insert)
    reserve = _swig_new_instance_method(_OpenLxApp.vector_PropertySet_reserve)
    capacity = _swig_new_instance_method(_OpenLxApp.vector_PropertySet_capacity)
    __swig_destroy__ = _OpenLxApp.delete_vector_PropertySet

# Register vector_PropertySet in _OpenLxApp:
_OpenLxApp.vector_PropertySet_swigregister(vector_PropertySet)
class vector_PropertyString(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< OpenLxApp::PropertyString > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_OpenLxApp.vector_PropertyString_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_OpenLxApp.vector_PropertyString___nonzero__)
    __bool__ = _swig_new_instance_method(_OpenLxApp.vector_PropertyString___bool__)
    __len__ = _swig_new_instance_method(_OpenLxApp.vector_PropertyString___len__)
    __getslice__ = _swig_new_instance_method(_OpenLxApp.vector_PropertyString___getslice__)
    __setslice__ = _swig_new_instance_method(_OpenLxApp.vector_PropertyString___setslice__)
    __delslice__ = _swig_new_instance_method(_OpenLxApp.vector_PropertyString___delslice__)
    __delitem__ = _swig_new_instance_method(_OpenLxApp.vector_PropertyString___delitem__)
    __getitem__ = _swig_new_instance_method(_OpenLxApp.vector_PropertyString___getitem__)
    __setitem__ = _swig_new_instance_method(_OpenLxApp.vector_PropertyString___setitem__)
    pop = _swig_new_instance_method(_OpenLxApp.vector_PropertyString_pop)
    append = _swig_new_instance_method(_OpenLxApp.vector_PropertyString_append)
    empty = _swig_new_instance_method(_OpenLxApp.vector_PropertyString_empty)
    size = _swig_new_instance_method(_OpenLxApp.vector_PropertyString_size)
    swap = _swig_new_instance_method(_OpenLxApp.vector_PropertyString_swap)
    begin = _swig_new_instance_method(_OpenLxApp.vector_PropertyString_begin)
    end = _swig_new_instance_method(_OpenLxApp.vector_PropertyString_end)
    rbegin = _swig_new_instance_method(_OpenLxApp.vector_PropertyString_rbegin)
    rend = _swig_new_instance_method(_OpenLxApp.vector_PropertyString_rend)
    clear = _swig_new_instance_method(_OpenLxApp.vector_PropertyString_clear)
    get_allocator = _swig_new_instance_method(_OpenLxApp.vector_PropertyString_get_allocator)
    pop_back = _swig_new_instance_method(_OpenLxApp.vector_PropertyString_pop_back)
    erase = _swig_new_instance_method(_OpenLxApp.vector_PropertyString_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_PropertyString self) -> vector_PropertyString
        __init__(vector_PropertyString self, vector_PropertyString other) -> vector_PropertyString
        __init__(vector_PropertyString self, std::vector< std::shared_ptr< OpenLxApp::PropertyString > >::size_type size) -> vector_PropertyString
        __init__(vector_PropertyString self, std::vector< std::shared_ptr< OpenLxApp::PropertyString > >::size_type size, std::vector< std::shared_ptr< OpenLxApp::PropertyString > >::value_type const & value) -> vector_PropertyString
        """
        _OpenLxApp.vector_PropertyString_swiginit(self, _OpenLxApp.new_vector_PropertyString(*args))
    push_back = _swig_new_instance_method(_OpenLxApp.vector_PropertyString_push_back)
    front = _swig_new_instance_method(_OpenLxApp.vector_PropertyString_front)
    back = _swig_new_instance_method(_OpenLxApp.vector_PropertyString_back)
    assign = _swig_new_instance_method(_OpenLxApp.vector_PropertyString_assign)
    resize = _swig_new_instance_method(_OpenLxApp.vector_PropertyString_resize)
    insert = _swig_new_instance_method(_OpenLxApp.vector_PropertyString_insert)
    reserve = _swig_new_instance_method(_OpenLxApp.vector_PropertyString_reserve)
    capacity = _swig_new_instance_method(_OpenLxApp.vector_PropertyString_capacity)
    __swig_destroy__ = _OpenLxApp.delete_vector_PropertyString

# Register vector_PropertyString in _OpenLxApp:
_OpenLxApp.vector_PropertyString_swigregister(vector_PropertyString)
class vector_PropertyUser(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< OpenLxApp::PropertyUser > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_OpenLxApp.vector_PropertyUser_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_OpenLxApp.vector_PropertyUser___nonzero__)
    __bool__ = _swig_new_instance_method(_OpenLxApp.vector_PropertyUser___bool__)
    __len__ = _swig_new_instance_method(_OpenLxApp.vector_PropertyUser___len__)
    __getslice__ = _swig_new_instance_method(_OpenLxApp.vector_PropertyUser___getslice__)
    __setslice__ = _swig_new_instance_method(_OpenLxApp.vector_PropertyUser___setslice__)
    __delslice__ = _swig_new_instance_method(_OpenLxApp.vector_PropertyUser___delslice__)
    __delitem__ = _swig_new_instance_method(_OpenLxApp.vector_PropertyUser___delitem__)
    __getitem__ = _swig_new_instance_method(_OpenLxApp.vector_PropertyUser___getitem__)
    __setitem__ = _swig_new_instance_method(_OpenLxApp.vector_PropertyUser___setitem__)
    pop = _swig_new_instance_method(_OpenLxApp.vector_PropertyUser_pop)
    append = _swig_new_instance_method(_OpenLxApp.vector_PropertyUser_append)
    empty = _swig_new_instance_method(_OpenLxApp.vector_PropertyUser_empty)
    size = _swig_new_instance_method(_OpenLxApp.vector_PropertyUser_size)
    swap = _swig_new_instance_method(_OpenLxApp.vector_PropertyUser_swap)
    begin = _swig_new_instance_method(_OpenLxApp.vector_PropertyUser_begin)
    end = _swig_new_instance_method(_OpenLxApp.vector_PropertyUser_end)
    rbegin = _swig_new_instance_method(_OpenLxApp.vector_PropertyUser_rbegin)
    rend = _swig_new_instance_method(_OpenLxApp.vector_PropertyUser_rend)
    clear = _swig_new_instance_method(_OpenLxApp.vector_PropertyUser_clear)
    get_allocator = _swig_new_instance_method(_OpenLxApp.vector_PropertyUser_get_allocator)
    pop_back = _swig_new_instance_method(_OpenLxApp.vector_PropertyUser_pop_back)
    erase = _swig_new_instance_method(_OpenLxApp.vector_PropertyUser_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_PropertyUser self) -> vector_PropertyUser
        __init__(vector_PropertyUser self, vector_PropertyUser other) -> vector_PropertyUser
        __init__(vector_PropertyUser self, std::vector< std::shared_ptr< OpenLxApp::PropertyUser > >::size_type size) -> vector_PropertyUser
        __init__(vector_PropertyUser self, std::vector< std::shared_ptr< OpenLxApp::PropertyUser > >::size_type size, std::vector< std::shared_ptr< OpenLxApp::PropertyUser > >::value_type const & value) -> vector_PropertyUser
        """
        _OpenLxApp.vector_PropertyUser_swiginit(self, _OpenLxApp.new_vector_PropertyUser(*args))
    push_back = _swig_new_instance_method(_OpenLxApp.vector_PropertyUser_push_back)
    front = _swig_new_instance_method(_OpenLxApp.vector_PropertyUser_front)
    back = _swig_new_instance_method(_OpenLxApp.vector_PropertyUser_back)
    assign = _swig_new_instance_method(_OpenLxApp.vector_PropertyUser_assign)
    resize = _swig_new_instance_method(_OpenLxApp.vector_PropertyUser_resize)
    insert = _swig_new_instance_method(_OpenLxApp.vector_PropertyUser_insert)
    reserve = _swig_new_instance_method(_OpenLxApp.vector_PropertyUser_reserve)
    capacity = _swig_new_instance_method(_OpenLxApp.vector_PropertyUser_capacity)
    __swig_destroy__ = _OpenLxApp.delete_vector_PropertyUser

# Register vector_PropertyUser in _OpenLxApp:
_OpenLxApp.vector_PropertyUser_swigregister(vector_PropertyUser)
class vector_PythonElement(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< OpenLxApp::PythonElement > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_OpenLxApp.vector_PythonElement_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_OpenLxApp.vector_PythonElement___nonzero__)
    __bool__ = _swig_new_instance_method(_OpenLxApp.vector_PythonElement___bool__)
    __len__ = _swig_new_instance_method(_OpenLxApp.vector_PythonElement___len__)
    __getslice__ = _swig_new_instance_method(_OpenLxApp.vector_PythonElement___getslice__)
    __setslice__ = _swig_new_instance_method(_OpenLxApp.vector_PythonElement___setslice__)
    __delslice__ = _swig_new_instance_method(_OpenLxApp.vector_PythonElement___delslice__)
    __delitem__ = _swig_new_instance_method(_OpenLxApp.vector_PythonElement___delitem__)
    __getitem__ = _swig_new_instance_method(_OpenLxApp.vector_PythonElement___getitem__)
    __setitem__ = _swig_new_instance_method(_OpenLxApp.vector_PythonElement___setitem__)
    pop = _swig_new_instance_method(_OpenLxApp.vector_PythonElement_pop)
    append = _swig_new_instance_method(_OpenLxApp.vector_PythonElement_append)
    empty = _swig_new_instance_method(_OpenLxApp.vector_PythonElement_empty)
    size = _swig_new_instance_method(_OpenLxApp.vector_PythonElement_size)
    swap = _swig_new_instance_method(_OpenLxApp.vector_PythonElement_swap)
    begin = _swig_new_instance_method(_OpenLxApp.vector_PythonElement_begin)
    end = _swig_new_instance_method(_OpenLxApp.vector_PythonElement_end)
    rbegin = _swig_new_instance_method(_OpenLxApp.vector_PythonElement_rbegin)
    rend = _swig_new_instance_method(_OpenLxApp.vector_PythonElement_rend)
    clear = _swig_new_instance_method(_OpenLxApp.vector_PythonElement_clear)
    get_allocator = _swig_new_instance_method(_OpenLxApp.vector_PythonElement_get_allocator)
    pop_back = _swig_new_instance_method(_OpenLxApp.vector_PythonElement_pop_back)
    erase = _swig_new_instance_method(_OpenLxApp.vector_PythonElement_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_PythonElement self) -> vector_PythonElement
        __init__(vector_PythonElement self, vector_PythonElement other) -> vector_PythonElement
        __init__(vector_PythonElement self, std::vector< std::shared_ptr< OpenLxApp::PythonElement > >::size_type size) -> vector_PythonElement
        __init__(vector_PythonElement self, std::vector< std::shared_ptr< OpenLxApp::PythonElement > >::size_type size, std::vector< std::shared_ptr< OpenLxApp::PythonElement > >::value_type const & value) -> vector_PythonElement
        """
        _OpenLxApp.vector_PythonElement_swiginit(self, _OpenLxApp.new_vector_PythonElement(*args))
    push_back = _swig_new_instance_method(_OpenLxApp.vector_PythonElement_push_back)
    front = _swig_new_instance_method(_OpenLxApp.vector_PythonElement_front)
    back = _swig_new_instance_method(_OpenLxApp.vector_PythonElement_back)
    assign = _swig_new_instance_method(_OpenLxApp.vector_PythonElement_assign)
    resize = _swig_new_instance_method(_OpenLxApp.vector_PythonElement_resize)
    insert = _swig_new_instance_method(_OpenLxApp.vector_PythonElement_insert)
    reserve = _swig_new_instance_method(_OpenLxApp.vector_PythonElement_reserve)
    capacity = _swig_new_instance_method(_OpenLxApp.vector_PythonElement_capacity)
    __swig_destroy__ = _OpenLxApp.delete_vector_PythonElement

# Register vector_PythonElement in _OpenLxApp:
_OpenLxApp.vector_PythonElement_swigregister(vector_PythonElement)
class vector_Rail(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< OpenLxApp::Rail > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_OpenLxApp.vector_Rail_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_OpenLxApp.vector_Rail___nonzero__)
    __bool__ = _swig_new_instance_method(_OpenLxApp.vector_Rail___bool__)
    __len__ = _swig_new_instance_method(_OpenLxApp.vector_Rail___len__)
    __getslice__ = _swig_new_instance_method(_OpenLxApp.vector_Rail___getslice__)
    __setslice__ = _swig_new_instance_method(_OpenLxApp.vector_Rail___setslice__)
    __delslice__ = _swig_new_instance_method(_OpenLxApp.vector_Rail___delslice__)
    __delitem__ = _swig_new_instance_method(_OpenLxApp.vector_Rail___delitem__)
    __getitem__ = _swig_new_instance_method(_OpenLxApp.vector_Rail___getitem__)
    __setitem__ = _swig_new_instance_method(_OpenLxApp.vector_Rail___setitem__)
    pop = _swig_new_instance_method(_OpenLxApp.vector_Rail_pop)
    append = _swig_new_instance_method(_OpenLxApp.vector_Rail_append)
    empty = _swig_new_instance_method(_OpenLxApp.vector_Rail_empty)
    size = _swig_new_instance_method(_OpenLxApp.vector_Rail_size)
    swap = _swig_new_instance_method(_OpenLxApp.vector_Rail_swap)
    begin = _swig_new_instance_method(_OpenLxApp.vector_Rail_begin)
    end = _swig_new_instance_method(_OpenLxApp.vector_Rail_end)
    rbegin = _swig_new_instance_method(_OpenLxApp.vector_Rail_rbegin)
    rend = _swig_new_instance_method(_OpenLxApp.vector_Rail_rend)
    clear = _swig_new_instance_method(_OpenLxApp.vector_Rail_clear)
    get_allocator = _swig_new_instance_method(_OpenLxApp.vector_Rail_get_allocator)
    pop_back = _swig_new_instance_method(_OpenLxApp.vector_Rail_pop_back)
    erase = _swig_new_instance_method(_OpenLxApp.vector_Rail_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_Rail self) -> vector_Rail
        __init__(vector_Rail self, vector_Rail other) -> vector_Rail
        __init__(vector_Rail self, std::vector< std::shared_ptr< OpenLxApp::Rail > >::size_type size) -> vector_Rail
        __init__(vector_Rail self, std::vector< std::shared_ptr< OpenLxApp::Rail > >::size_type size, std::vector< std::shared_ptr< OpenLxApp::Rail > >::value_type const & value) -> vector_Rail
        """
        _OpenLxApp.vector_Rail_swiginit(self, _OpenLxApp.new_vector_Rail(*args))
    push_back = _swig_new_instance_method(_OpenLxApp.vector_Rail_push_back)
    front = _swig_new_instance_method(_OpenLxApp.vector_Rail_front)
    back = _swig_new_instance_method(_OpenLxApp.vector_Rail_back)
    assign = _swig_new_instance_method(_OpenLxApp.vector_Rail_assign)
    resize = _swig_new_instance_method(_OpenLxApp.vector_Rail_resize)
    insert = _swig_new_instance_method(_OpenLxApp.vector_Rail_insert)
    reserve = _swig_new_instance_method(_OpenLxApp.vector_Rail_reserve)
    capacity = _swig_new_instance_method(_OpenLxApp.vector_Rail_capacity)
    __swig_destroy__ = _OpenLxApp.delete_vector_Rail

# Register vector_Rail in _OpenLxApp:
_OpenLxApp.vector_Rail_swigregister(vector_Rail)
class vector_Railing(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< OpenLxApp::Railing > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_OpenLxApp.vector_Railing_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_OpenLxApp.vector_Railing___nonzero__)
    __bool__ = _swig_new_instance_method(_OpenLxApp.vector_Railing___bool__)
    __len__ = _swig_new_instance_method(_OpenLxApp.vector_Railing___len__)
    __getslice__ = _swig_new_instance_method(_OpenLxApp.vector_Railing___getslice__)
    __setslice__ = _swig_new_instance_method(_OpenLxApp.vector_Railing___setslice__)
    __delslice__ = _swig_new_instance_method(_OpenLxApp.vector_Railing___delslice__)
    __delitem__ = _swig_new_instance_method(_OpenLxApp.vector_Railing___delitem__)
    __getitem__ = _swig_new_instance_method(_OpenLxApp.vector_Railing___getitem__)
    __setitem__ = _swig_new_instance_method(_OpenLxApp.vector_Railing___setitem__)
    pop = _swig_new_instance_method(_OpenLxApp.vector_Railing_pop)
    append = _swig_new_instance_method(_OpenLxApp.vector_Railing_append)
    empty = _swig_new_instance_method(_OpenLxApp.vector_Railing_empty)
    size = _swig_new_instance_method(_OpenLxApp.vector_Railing_size)
    swap = _swig_new_instance_method(_OpenLxApp.vector_Railing_swap)
    begin = _swig_new_instance_method(_OpenLxApp.vector_Railing_begin)
    end = _swig_new_instance_method(_OpenLxApp.vector_Railing_end)
    rbegin = _swig_new_instance_method(_OpenLxApp.vector_Railing_rbegin)
    rend = _swig_new_instance_method(_OpenLxApp.vector_Railing_rend)
    clear = _swig_new_instance_method(_OpenLxApp.vector_Railing_clear)
    get_allocator = _swig_new_instance_method(_OpenLxApp.vector_Railing_get_allocator)
    pop_back = _swig_new_instance_method(_OpenLxApp.vector_Railing_pop_back)
    erase = _swig_new_instance_method(_OpenLxApp.vector_Railing_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_Railing self) -> vector_Railing
        __init__(vector_Railing self, vector_Railing other) -> vector_Railing
        __init__(vector_Railing self, std::vector< std::shared_ptr< OpenLxApp::Railing > >::size_type size) -> vector_Railing
        __init__(vector_Railing self, std::vector< std::shared_ptr< OpenLxApp::Railing > >::size_type size, std::vector< std::shared_ptr< OpenLxApp::Railing > >::value_type const & value) -> vector_Railing
        """
        _OpenLxApp.vector_Railing_swiginit(self, _OpenLxApp.new_vector_Railing(*args))
    push_back = _swig_new_instance_method(_OpenLxApp.vector_Railing_push_back)
    front = _swig_new_instance_method(_OpenLxApp.vector_Railing_front)
    back = _swig_new_instance_method(_OpenLxApp.vector_Railing_back)
    assign = _swig_new_instance_method(_OpenLxApp.vector_Railing_assign)
    resize = _swig_new_instance_method(_OpenLxApp.vector_Railing_resize)
    insert = _swig_new_instance_method(_OpenLxApp.vector_Railing_insert)
    reserve = _swig_new_instance_method(_OpenLxApp.vector_Railing_reserve)
    capacity = _swig_new_instance_method(_OpenLxApp.vector_Railing_capacity)
    __swig_destroy__ = _OpenLxApp.delete_vector_Railing

# Register vector_Railing in _OpenLxApp:
_OpenLxApp.vector_Railing_swigregister(vector_Railing)
class vector_Ramp(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< OpenLxApp::Ramp > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_OpenLxApp.vector_Ramp_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_OpenLxApp.vector_Ramp___nonzero__)
    __bool__ = _swig_new_instance_method(_OpenLxApp.vector_Ramp___bool__)
    __len__ = _swig_new_instance_method(_OpenLxApp.vector_Ramp___len__)
    __getslice__ = _swig_new_instance_method(_OpenLxApp.vector_Ramp___getslice__)
    __setslice__ = _swig_new_instance_method(_OpenLxApp.vector_Ramp___setslice__)
    __delslice__ = _swig_new_instance_method(_OpenLxApp.vector_Ramp___delslice__)
    __delitem__ = _swig_new_instance_method(_OpenLxApp.vector_Ramp___delitem__)
    __getitem__ = _swig_new_instance_method(_OpenLxApp.vector_Ramp___getitem__)
    __setitem__ = _swig_new_instance_method(_OpenLxApp.vector_Ramp___setitem__)
    pop = _swig_new_instance_method(_OpenLxApp.vector_Ramp_pop)
    append = _swig_new_instance_method(_OpenLxApp.vector_Ramp_append)
    empty = _swig_new_instance_method(_OpenLxApp.vector_Ramp_empty)
    size = _swig_new_instance_method(_OpenLxApp.vector_Ramp_size)
    swap = _swig_new_instance_method(_OpenLxApp.vector_Ramp_swap)
    begin = _swig_new_instance_method(_OpenLxApp.vector_Ramp_begin)
    end = _swig_new_instance_method(_OpenLxApp.vector_Ramp_end)
    rbegin = _swig_new_instance_method(_OpenLxApp.vector_Ramp_rbegin)
    rend = _swig_new_instance_method(_OpenLxApp.vector_Ramp_rend)
    clear = _swig_new_instance_method(_OpenLxApp.vector_Ramp_clear)
    get_allocator = _swig_new_instance_method(_OpenLxApp.vector_Ramp_get_allocator)
    pop_back = _swig_new_instance_method(_OpenLxApp.vector_Ramp_pop_back)
    erase = _swig_new_instance_method(_OpenLxApp.vector_Ramp_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_Ramp self) -> vector_Ramp
        __init__(vector_Ramp self, vector_Ramp other) -> vector_Ramp
        __init__(vector_Ramp self, std::vector< std::shared_ptr< OpenLxApp::Ramp > >::size_type size) -> vector_Ramp
        __init__(vector_Ramp self, std::vector< std::shared_ptr< OpenLxApp::Ramp > >::size_type size, std::vector< std::shared_ptr< OpenLxApp::Ramp > >::value_type const & value) -> vector_Ramp
        """
        _OpenLxApp.vector_Ramp_swiginit(self, _OpenLxApp.new_vector_Ramp(*args))
    push_back = _swig_new_instance_method(_OpenLxApp.vector_Ramp_push_back)
    front = _swig_new_instance_method(_OpenLxApp.vector_Ramp_front)
    back = _swig_new_instance_method(_OpenLxApp.vector_Ramp_back)
    assign = _swig_new_instance_method(_OpenLxApp.vector_Ramp_assign)
    resize = _swig_new_instance_method(_OpenLxApp.vector_Ramp_resize)
    insert = _swig_new_instance_method(_OpenLxApp.vector_Ramp_insert)
    reserve = _swig_new_instance_method(_OpenLxApp.vector_Ramp_reserve)
    capacity = _swig_new_instance_method(_OpenLxApp.vector_Ramp_capacity)
    __swig_destroy__ = _OpenLxApp.delete_vector_Ramp

# Register vector_Ramp in _OpenLxApp:
_OpenLxApp.vector_Ramp_swigregister(vector_Ramp)
class vector_RampFlight(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< OpenLxApp::RampFlight > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_OpenLxApp.vector_RampFlight_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_OpenLxApp.vector_RampFlight___nonzero__)
    __bool__ = _swig_new_instance_method(_OpenLxApp.vector_RampFlight___bool__)
    __len__ = _swig_new_instance_method(_OpenLxApp.vector_RampFlight___len__)
    __getslice__ = _swig_new_instance_method(_OpenLxApp.vector_RampFlight___getslice__)
    __setslice__ = _swig_new_instance_method(_OpenLxApp.vector_RampFlight___setslice__)
    __delslice__ = _swig_new_instance_method(_OpenLxApp.vector_RampFlight___delslice__)
    __delitem__ = _swig_new_instance_method(_OpenLxApp.vector_RampFlight___delitem__)
    __getitem__ = _swig_new_instance_method(_OpenLxApp.vector_RampFlight___getitem__)
    __setitem__ = _swig_new_instance_method(_OpenLxApp.vector_RampFlight___setitem__)
    pop = _swig_new_instance_method(_OpenLxApp.vector_RampFlight_pop)
    append = _swig_new_instance_method(_OpenLxApp.vector_RampFlight_append)
    empty = _swig_new_instance_method(_OpenLxApp.vector_RampFlight_empty)
    size = _swig_new_instance_method(_OpenLxApp.vector_RampFlight_size)
    swap = _swig_new_instance_method(_OpenLxApp.vector_RampFlight_swap)
    begin = _swig_new_instance_method(_OpenLxApp.vector_RampFlight_begin)
    end = _swig_new_instance_method(_OpenLxApp.vector_RampFlight_end)
    rbegin = _swig_new_instance_method(_OpenLxApp.vector_RampFlight_rbegin)
    rend = _swig_new_instance_method(_OpenLxApp.vector_RampFlight_rend)
    clear = _swig_new_instance_method(_OpenLxApp.vector_RampFlight_clear)
    get_allocator = _swig_new_instance_method(_OpenLxApp.vector_RampFlight_get_allocator)
    pop_back = _swig_new_instance_method(_OpenLxApp.vector_RampFlight_pop_back)
    erase = _swig_new_instance_method(_OpenLxApp.vector_RampFlight_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_RampFlight self) -> vector_RampFlight
        __init__(vector_RampFlight self, vector_RampFlight other) -> vector_RampFlight
        __init__(vector_RampFlight self, std::vector< std::shared_ptr< OpenLxApp::RampFlight > >::size_type size) -> vector_RampFlight
        __init__(vector_RampFlight self, std::vector< std::shared_ptr< OpenLxApp::RampFlight > >::size_type size, std::vector< std::shared_ptr< OpenLxApp::RampFlight > >::value_type const & value) -> vector_RampFlight
        """
        _OpenLxApp.vector_RampFlight_swiginit(self, _OpenLxApp.new_vector_RampFlight(*args))
    push_back = _swig_new_instance_method(_OpenLxApp.vector_RampFlight_push_back)
    front = _swig_new_instance_method(_OpenLxApp.vector_RampFlight_front)
    back = _swig_new_instance_method(_OpenLxApp.vector_RampFlight_back)
    assign = _swig_new_instance_method(_OpenLxApp.vector_RampFlight_assign)
    resize = _swig_new_instance_method(_OpenLxApp.vector_RampFlight_resize)
    insert = _swig_new_instance_method(_OpenLxApp.vector_RampFlight_insert)
    reserve = _swig_new_instance_method(_OpenLxApp.vector_RampFlight_reserve)
    capacity = _swig_new_instance_method(_OpenLxApp.vector_RampFlight_capacity)
    __swig_destroy__ = _OpenLxApp.delete_vector_RampFlight

# Register vector_RampFlight in _OpenLxApp:
_OpenLxApp.vector_RampFlight_swigregister(vector_RampFlight)
class vector_RectangleHollowProfileDef(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< OpenLxApp::RectangleHollowProfileDef > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_OpenLxApp.vector_RectangleHollowProfileDef_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_OpenLxApp.vector_RectangleHollowProfileDef___nonzero__)
    __bool__ = _swig_new_instance_method(_OpenLxApp.vector_RectangleHollowProfileDef___bool__)
    __len__ = _swig_new_instance_method(_OpenLxApp.vector_RectangleHollowProfileDef___len__)
    __getslice__ = _swig_new_instance_method(_OpenLxApp.vector_RectangleHollowProfileDef___getslice__)
    __setslice__ = _swig_new_instance_method(_OpenLxApp.vector_RectangleHollowProfileDef___setslice__)
    __delslice__ = _swig_new_instance_method(_OpenLxApp.vector_RectangleHollowProfileDef___delslice__)
    __delitem__ = _swig_new_instance_method(_OpenLxApp.vector_RectangleHollowProfileDef___delitem__)
    __getitem__ = _swig_new_instance_method(_OpenLxApp.vector_RectangleHollowProfileDef___getitem__)
    __setitem__ = _swig_new_instance_method(_OpenLxApp.vector_RectangleHollowProfileDef___setitem__)
    pop = _swig_new_instance_method(_OpenLxApp.vector_RectangleHollowProfileDef_pop)
    append = _swig_new_instance_method(_OpenLxApp.vector_RectangleHollowProfileDef_append)
    empty = _swig_new_instance_method(_OpenLxApp.vector_RectangleHollowProfileDef_empty)
    size = _swig_new_instance_method(_OpenLxApp.vector_RectangleHollowProfileDef_size)
    swap = _swig_new_instance_method(_OpenLxApp.vector_RectangleHollowProfileDef_swap)
    begin = _swig_new_instance_method(_OpenLxApp.vector_RectangleHollowProfileDef_begin)
    end = _swig_new_instance_method(_OpenLxApp.vector_RectangleHollowProfileDef_end)
    rbegin = _swig_new_instance_method(_OpenLxApp.vector_RectangleHollowProfileDef_rbegin)
    rend = _swig_new_instance_method(_OpenLxApp.vector_RectangleHollowProfileDef_rend)
    clear = _swig_new_instance_method(_OpenLxApp.vector_RectangleHollowProfileDef_clear)
    get_allocator = _swig_new_instance_method(_OpenLxApp.vector_RectangleHollowProfileDef_get_allocator)
    pop_back = _swig_new_instance_method(_OpenLxApp.vector_RectangleHollowProfileDef_pop_back)
    erase = _swig_new_instance_method(_OpenLxApp.vector_RectangleHollowProfileDef_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_RectangleHollowProfileDef self) -> vector_RectangleHollowProfileDef
        __init__(vector_RectangleHollowProfileDef self, vector_RectangleHollowProfileDef other) -> vector_RectangleHollowProfileDef
        __init__(vector_RectangleHollowProfileDef self, std::vector< std::shared_ptr< OpenLxApp::RectangleHollowProfileDef > >::size_type size) -> vector_RectangleHollowProfileDef
        __init__(vector_RectangleHollowProfileDef self, std::vector< std::shared_ptr< OpenLxApp::RectangleHollowProfileDef > >::size_type size, std::vector< std::shared_ptr< OpenLxApp::RectangleHollowProfileDef > >::value_type const & value) -> vector_RectangleHollowProfileDef
        """
        _OpenLxApp.vector_RectangleHollowProfileDef_swiginit(self, _OpenLxApp.new_vector_RectangleHollowProfileDef(*args))
    push_back = _swig_new_instance_method(_OpenLxApp.vector_RectangleHollowProfileDef_push_back)
    front = _swig_new_instance_method(_OpenLxApp.vector_RectangleHollowProfileDef_front)
    back = _swig_new_instance_method(_OpenLxApp.vector_RectangleHollowProfileDef_back)
    assign = _swig_new_instance_method(_OpenLxApp.vector_RectangleHollowProfileDef_assign)
    resize = _swig_new_instance_method(_OpenLxApp.vector_RectangleHollowProfileDef_resize)
    insert = _swig_new_instance_method(_OpenLxApp.vector_RectangleHollowProfileDef_insert)
    reserve = _swig_new_instance_method(_OpenLxApp.vector_RectangleHollowProfileDef_reserve)
    capacity = _swig_new_instance_method(_OpenLxApp.vector_RectangleHollowProfileDef_capacity)
    __swig_destroy__ = _OpenLxApp.delete_vector_RectangleHollowProfileDef

# Register vector_RectangleHollowProfileDef in _OpenLxApp:
_OpenLxApp.vector_RectangleHollowProfileDef_swigregister(vector_RectangleHollowProfileDef)
class vector_RectangleProfileDef(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< OpenLxApp::RectangleProfileDef > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_OpenLxApp.vector_RectangleProfileDef_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_OpenLxApp.vector_RectangleProfileDef___nonzero__)
    __bool__ = _swig_new_instance_method(_OpenLxApp.vector_RectangleProfileDef___bool__)
    __len__ = _swig_new_instance_method(_OpenLxApp.vector_RectangleProfileDef___len__)
    __getslice__ = _swig_new_instance_method(_OpenLxApp.vector_RectangleProfileDef___getslice__)
    __setslice__ = _swig_new_instance_method(_OpenLxApp.vector_RectangleProfileDef___setslice__)
    __delslice__ = _swig_new_instance_method(_OpenLxApp.vector_RectangleProfileDef___delslice__)
    __delitem__ = _swig_new_instance_method(_OpenLxApp.vector_RectangleProfileDef___delitem__)
    __getitem__ = _swig_new_instance_method(_OpenLxApp.vector_RectangleProfileDef___getitem__)
    __setitem__ = _swig_new_instance_method(_OpenLxApp.vector_RectangleProfileDef___setitem__)
    pop = _swig_new_instance_method(_OpenLxApp.vector_RectangleProfileDef_pop)
    append = _swig_new_instance_method(_OpenLxApp.vector_RectangleProfileDef_append)
    empty = _swig_new_instance_method(_OpenLxApp.vector_RectangleProfileDef_empty)
    size = _swig_new_instance_method(_OpenLxApp.vector_RectangleProfileDef_size)
    swap = _swig_new_instance_method(_OpenLxApp.vector_RectangleProfileDef_swap)
    begin = _swig_new_instance_method(_OpenLxApp.vector_RectangleProfileDef_begin)
    end = _swig_new_instance_method(_OpenLxApp.vector_RectangleProfileDef_end)
    rbegin = _swig_new_instance_method(_OpenLxApp.vector_RectangleProfileDef_rbegin)
    rend = _swig_new_instance_method(_OpenLxApp.vector_RectangleProfileDef_rend)
    clear = _swig_new_instance_method(_OpenLxApp.vector_RectangleProfileDef_clear)
    get_allocator = _swig_new_instance_method(_OpenLxApp.vector_RectangleProfileDef_get_allocator)
    pop_back = _swig_new_instance_method(_OpenLxApp.vector_RectangleProfileDef_pop_back)
    erase = _swig_new_instance_method(_OpenLxApp.vector_RectangleProfileDef_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_RectangleProfileDef self) -> vector_RectangleProfileDef
        __init__(vector_RectangleProfileDef self, vector_RectangleProfileDef other) -> vector_RectangleProfileDef
        __init__(vector_RectangleProfileDef self, std::vector< std::shared_ptr< OpenLxApp::RectangleProfileDef > >::size_type size) -> vector_RectangleProfileDef
        __init__(vector_RectangleProfileDef self, std::vector< std::shared_ptr< OpenLxApp::RectangleProfileDef > >::size_type size, std::vector< std::shared_ptr< OpenLxApp::RectangleProfileDef > >::value_type const & value) -> vector_RectangleProfileDef
        """
        _OpenLxApp.vector_RectangleProfileDef_swiginit(self, _OpenLxApp.new_vector_RectangleProfileDef(*args))
    push_back = _swig_new_instance_method(_OpenLxApp.vector_RectangleProfileDef_push_back)
    front = _swig_new_instance_method(_OpenLxApp.vector_RectangleProfileDef_front)
    back = _swig_new_instance_method(_OpenLxApp.vector_RectangleProfileDef_back)
    assign = _swig_new_instance_method(_OpenLxApp.vector_RectangleProfileDef_assign)
    resize = _swig_new_instance_method(_OpenLxApp.vector_RectangleProfileDef_resize)
    insert = _swig_new_instance_method(_OpenLxApp.vector_RectangleProfileDef_insert)
    reserve = _swig_new_instance_method(_OpenLxApp.vector_RectangleProfileDef_reserve)
    capacity = _swig_new_instance_method(_OpenLxApp.vector_RectangleProfileDef_capacity)
    __swig_destroy__ = _OpenLxApp.delete_vector_RectangleProfileDef

# Register vector_RectangleProfileDef in _OpenLxApp:
_OpenLxApp.vector_RectangleProfileDef_swigregister(vector_RectangleProfileDef)
class vector_ReinforcedSoil(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< OpenLxApp::ReinforcedSoil > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_OpenLxApp.vector_ReinforcedSoil_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_OpenLxApp.vector_ReinforcedSoil___nonzero__)
    __bool__ = _swig_new_instance_method(_OpenLxApp.vector_ReinforcedSoil___bool__)
    __len__ = _swig_new_instance_method(_OpenLxApp.vector_ReinforcedSoil___len__)
    __getslice__ = _swig_new_instance_method(_OpenLxApp.vector_ReinforcedSoil___getslice__)
    __setslice__ = _swig_new_instance_method(_OpenLxApp.vector_ReinforcedSoil___setslice__)
    __delslice__ = _swig_new_instance_method(_OpenLxApp.vector_ReinforcedSoil___delslice__)
    __delitem__ = _swig_new_instance_method(_OpenLxApp.vector_ReinforcedSoil___delitem__)
    __getitem__ = _swig_new_instance_method(_OpenLxApp.vector_ReinforcedSoil___getitem__)
    __setitem__ = _swig_new_instance_method(_OpenLxApp.vector_ReinforcedSoil___setitem__)
    pop = _swig_new_instance_method(_OpenLxApp.vector_ReinforcedSoil_pop)
    append = _swig_new_instance_method(_OpenLxApp.vector_ReinforcedSoil_append)
    empty = _swig_new_instance_method(_OpenLxApp.vector_ReinforcedSoil_empty)
    size = _swig_new_instance_method(_OpenLxApp.vector_ReinforcedSoil_size)
    swap = _swig_new_instance_method(_OpenLxApp.vector_ReinforcedSoil_swap)
    begin = _swig_new_instance_method(_OpenLxApp.vector_ReinforcedSoil_begin)
    end = _swig_new_instance_method(_OpenLxApp.vector_ReinforcedSoil_end)
    rbegin = _swig_new_instance_method(_OpenLxApp.vector_ReinforcedSoil_rbegin)
    rend = _swig_new_instance_method(_OpenLxApp.vector_ReinforcedSoil_rend)
    clear = _swig_new_instance_method(_OpenLxApp.vector_ReinforcedSoil_clear)
    get_allocator = _swig_new_instance_method(_OpenLxApp.vector_ReinforcedSoil_get_allocator)
    pop_back = _swig_new_instance_method(_OpenLxApp.vector_ReinforcedSoil_pop_back)
    erase = _swig_new_instance_method(_OpenLxApp.vector_ReinforcedSoil_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_ReinforcedSoil self) -> vector_ReinforcedSoil
        __init__(vector_ReinforcedSoil self, vector_ReinforcedSoil other) -> vector_ReinforcedSoil
        __init__(vector_ReinforcedSoil self, std::vector< std::shared_ptr< OpenLxApp::ReinforcedSoil > >::size_type size) -> vector_ReinforcedSoil
        __init__(vector_ReinforcedSoil self, std::vector< std::shared_ptr< OpenLxApp::ReinforcedSoil > >::size_type size, std::vector< std::shared_ptr< OpenLxApp::ReinforcedSoil > >::value_type const & value) -> vector_ReinforcedSoil
        """
        _OpenLxApp.vector_ReinforcedSoil_swiginit(self, _OpenLxApp.new_vector_ReinforcedSoil(*args))
    push_back = _swig_new_instance_method(_OpenLxApp.vector_ReinforcedSoil_push_back)
    front = _swig_new_instance_method(_OpenLxApp.vector_ReinforcedSoil_front)
    back = _swig_new_instance_method(_OpenLxApp.vector_ReinforcedSoil_back)
    assign = _swig_new_instance_method(_OpenLxApp.vector_ReinforcedSoil_assign)
    resize = _swig_new_instance_method(_OpenLxApp.vector_ReinforcedSoil_resize)
    insert = _swig_new_instance_method(_OpenLxApp.vector_ReinforcedSoil_insert)
    reserve = _swig_new_instance_method(_OpenLxApp.vector_ReinforcedSoil_reserve)
    capacity = _swig_new_instance_method(_OpenLxApp.vector_ReinforcedSoil_capacity)
    __swig_destroy__ = _OpenLxApp.delete_vector_ReinforcedSoil

# Register vector_ReinforcedSoil in _OpenLxApp:
_OpenLxApp.vector_ReinforcedSoil_swigregister(vector_ReinforcedSoil)
class vector_RightCircularCone(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< OpenLxApp::RightCircularCone > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_OpenLxApp.vector_RightCircularCone_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_OpenLxApp.vector_RightCircularCone___nonzero__)
    __bool__ = _swig_new_instance_method(_OpenLxApp.vector_RightCircularCone___bool__)
    __len__ = _swig_new_instance_method(_OpenLxApp.vector_RightCircularCone___len__)
    __getslice__ = _swig_new_instance_method(_OpenLxApp.vector_RightCircularCone___getslice__)
    __setslice__ = _swig_new_instance_method(_OpenLxApp.vector_RightCircularCone___setslice__)
    __delslice__ = _swig_new_instance_method(_OpenLxApp.vector_RightCircularCone___delslice__)
    __delitem__ = _swig_new_instance_method(_OpenLxApp.vector_RightCircularCone___delitem__)
    __getitem__ = _swig_new_instance_method(_OpenLxApp.vector_RightCircularCone___getitem__)
    __setitem__ = _swig_new_instance_method(_OpenLxApp.vector_RightCircularCone___setitem__)
    pop = _swig_new_instance_method(_OpenLxApp.vector_RightCircularCone_pop)
    append = _swig_new_instance_method(_OpenLxApp.vector_RightCircularCone_append)
    empty = _swig_new_instance_method(_OpenLxApp.vector_RightCircularCone_empty)
    size = _swig_new_instance_method(_OpenLxApp.vector_RightCircularCone_size)
    swap = _swig_new_instance_method(_OpenLxApp.vector_RightCircularCone_swap)
    begin = _swig_new_instance_method(_OpenLxApp.vector_RightCircularCone_begin)
    end = _swig_new_instance_method(_OpenLxApp.vector_RightCircularCone_end)
    rbegin = _swig_new_instance_method(_OpenLxApp.vector_RightCircularCone_rbegin)
    rend = _swig_new_instance_method(_OpenLxApp.vector_RightCircularCone_rend)
    clear = _swig_new_instance_method(_OpenLxApp.vector_RightCircularCone_clear)
    get_allocator = _swig_new_instance_method(_OpenLxApp.vector_RightCircularCone_get_allocator)
    pop_back = _swig_new_instance_method(_OpenLxApp.vector_RightCircularCone_pop_back)
    erase = _swig_new_instance_method(_OpenLxApp.vector_RightCircularCone_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_RightCircularCone self) -> vector_RightCircularCone
        __init__(vector_RightCircularCone self, vector_RightCircularCone other) -> vector_RightCircularCone
        __init__(vector_RightCircularCone self, std::vector< std::shared_ptr< OpenLxApp::RightCircularCone > >::size_type size) -> vector_RightCircularCone
        __init__(vector_RightCircularCone self, std::vector< std::shared_ptr< OpenLxApp::RightCircularCone > >::size_type size, std::vector< std::shared_ptr< OpenLxApp::RightCircularCone > >::value_type const & value) -> vector_RightCircularCone
        """
        _OpenLxApp.vector_RightCircularCone_swiginit(self, _OpenLxApp.new_vector_RightCircularCone(*args))
    push_back = _swig_new_instance_method(_OpenLxApp.vector_RightCircularCone_push_back)
    front = _swig_new_instance_method(_OpenLxApp.vector_RightCircularCone_front)
    back = _swig_new_instance_method(_OpenLxApp.vector_RightCircularCone_back)
    assign = _swig_new_instance_method(_OpenLxApp.vector_RightCircularCone_assign)
    resize = _swig_new_instance_method(_OpenLxApp.vector_RightCircularCone_resize)
    insert = _swig_new_instance_method(_OpenLxApp.vector_RightCircularCone_insert)
    reserve = _swig_new_instance_method(_OpenLxApp.vector_RightCircularCone_reserve)
    capacity = _swig_new_instance_method(_OpenLxApp.vector_RightCircularCone_capacity)
    __swig_destroy__ = _OpenLxApp.delete_vector_RightCircularCone

# Register vector_RightCircularCone in _OpenLxApp:
_OpenLxApp.vector_RightCircularCone_swigregister(vector_RightCircularCone)
class vector_RightCircularCylinder(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< OpenLxApp::RightCircularCylinder > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_OpenLxApp.vector_RightCircularCylinder_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_OpenLxApp.vector_RightCircularCylinder___nonzero__)
    __bool__ = _swig_new_instance_method(_OpenLxApp.vector_RightCircularCylinder___bool__)
    __len__ = _swig_new_instance_method(_OpenLxApp.vector_RightCircularCylinder___len__)
    __getslice__ = _swig_new_instance_method(_OpenLxApp.vector_RightCircularCylinder___getslice__)
    __setslice__ = _swig_new_instance_method(_OpenLxApp.vector_RightCircularCylinder___setslice__)
    __delslice__ = _swig_new_instance_method(_OpenLxApp.vector_RightCircularCylinder___delslice__)
    __delitem__ = _swig_new_instance_method(_OpenLxApp.vector_RightCircularCylinder___delitem__)
    __getitem__ = _swig_new_instance_method(_OpenLxApp.vector_RightCircularCylinder___getitem__)
    __setitem__ = _swig_new_instance_method(_OpenLxApp.vector_RightCircularCylinder___setitem__)
    pop = _swig_new_instance_method(_OpenLxApp.vector_RightCircularCylinder_pop)
    append = _swig_new_instance_method(_OpenLxApp.vector_RightCircularCylinder_append)
    empty = _swig_new_instance_method(_OpenLxApp.vector_RightCircularCylinder_empty)
    size = _swig_new_instance_method(_OpenLxApp.vector_RightCircularCylinder_size)
    swap = _swig_new_instance_method(_OpenLxApp.vector_RightCircularCylinder_swap)
    begin = _swig_new_instance_method(_OpenLxApp.vector_RightCircularCylinder_begin)
    end = _swig_new_instance_method(_OpenLxApp.vector_RightCircularCylinder_end)
    rbegin = _swig_new_instance_method(_OpenLxApp.vector_RightCircularCylinder_rbegin)
    rend = _swig_new_instance_method(_OpenLxApp.vector_RightCircularCylinder_rend)
    clear = _swig_new_instance_method(_OpenLxApp.vector_RightCircularCylinder_clear)
    get_allocator = _swig_new_instance_method(_OpenLxApp.vector_RightCircularCylinder_get_allocator)
    pop_back = _swig_new_instance_method(_OpenLxApp.vector_RightCircularCylinder_pop_back)
    erase = _swig_new_instance_method(_OpenLxApp.vector_RightCircularCylinder_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_RightCircularCylinder self) -> vector_RightCircularCylinder
        __init__(vector_RightCircularCylinder self, vector_RightCircularCylinder other) -> vector_RightCircularCylinder
        __init__(vector_RightCircularCylinder self, std::vector< std::shared_ptr< OpenLxApp::RightCircularCylinder > >::size_type size) -> vector_RightCircularCylinder
        __init__(vector_RightCircularCylinder self, std::vector< std::shared_ptr< OpenLxApp::RightCircularCylinder > >::size_type size, std::vector< std::shared_ptr< OpenLxApp::RightCircularCylinder > >::value_type const & value) -> vector_RightCircularCylinder
        """
        _OpenLxApp.vector_RightCircularCylinder_swiginit(self, _OpenLxApp.new_vector_RightCircularCylinder(*args))
    push_back = _swig_new_instance_method(_OpenLxApp.vector_RightCircularCylinder_push_back)
    front = _swig_new_instance_method(_OpenLxApp.vector_RightCircularCylinder_front)
    back = _swig_new_instance_method(_OpenLxApp.vector_RightCircularCylinder_back)
    assign = _swig_new_instance_method(_OpenLxApp.vector_RightCircularCylinder_assign)
    resize = _swig_new_instance_method(_OpenLxApp.vector_RightCircularCylinder_resize)
    insert = _swig_new_instance_method(_OpenLxApp.vector_RightCircularCylinder_insert)
    reserve = _swig_new_instance_method(_OpenLxApp.vector_RightCircularCylinder_reserve)
    capacity = _swig_new_instance_method(_OpenLxApp.vector_RightCircularCylinder_capacity)
    __swig_destroy__ = _OpenLxApp.delete_vector_RightCircularCylinder

# Register vector_RightCircularCylinder in _OpenLxApp:
_OpenLxApp.vector_RightCircularCylinder_swigregister(vector_RightCircularCylinder)
class vector_Roof(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< OpenLxApp::Roof > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_OpenLxApp.vector_Roof_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_OpenLxApp.vector_Roof___nonzero__)
    __bool__ = _swig_new_instance_method(_OpenLxApp.vector_Roof___bool__)
    __len__ = _swig_new_instance_method(_OpenLxApp.vector_Roof___len__)
    __getslice__ = _swig_new_instance_method(_OpenLxApp.vector_Roof___getslice__)
    __setslice__ = _swig_new_instance_method(_OpenLxApp.vector_Roof___setslice__)
    __delslice__ = _swig_new_instance_method(_OpenLxApp.vector_Roof___delslice__)
    __delitem__ = _swig_new_instance_method(_OpenLxApp.vector_Roof___delitem__)
    __getitem__ = _swig_new_instance_method(_OpenLxApp.vector_Roof___getitem__)
    __setitem__ = _swig_new_instance_method(_OpenLxApp.vector_Roof___setitem__)
    pop = _swig_new_instance_method(_OpenLxApp.vector_Roof_pop)
    append = _swig_new_instance_method(_OpenLxApp.vector_Roof_append)
    empty = _swig_new_instance_method(_OpenLxApp.vector_Roof_empty)
    size = _swig_new_instance_method(_OpenLxApp.vector_Roof_size)
    swap = _swig_new_instance_method(_OpenLxApp.vector_Roof_swap)
    begin = _swig_new_instance_method(_OpenLxApp.vector_Roof_begin)
    end = _swig_new_instance_method(_OpenLxApp.vector_Roof_end)
    rbegin = _swig_new_instance_method(_OpenLxApp.vector_Roof_rbegin)
    rend = _swig_new_instance_method(_OpenLxApp.vector_Roof_rend)
    clear = _swig_new_instance_method(_OpenLxApp.vector_Roof_clear)
    get_allocator = _swig_new_instance_method(_OpenLxApp.vector_Roof_get_allocator)
    pop_back = _swig_new_instance_method(_OpenLxApp.vector_Roof_pop_back)
    erase = _swig_new_instance_method(_OpenLxApp.vector_Roof_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_Roof self) -> vector_Roof
        __init__(vector_Roof self, vector_Roof other) -> vector_Roof
        __init__(vector_Roof self, std::vector< std::shared_ptr< OpenLxApp::Roof > >::size_type size) -> vector_Roof
        __init__(vector_Roof self, std::vector< std::shared_ptr< OpenLxApp::Roof > >::size_type size, std::vector< std::shared_ptr< OpenLxApp::Roof > >::value_type const & value) -> vector_Roof
        """
        _OpenLxApp.vector_Roof_swiginit(self, _OpenLxApp.new_vector_Roof(*args))
    push_back = _swig_new_instance_method(_OpenLxApp.vector_Roof_push_back)
    front = _swig_new_instance_method(_OpenLxApp.vector_Roof_front)
    back = _swig_new_instance_method(_OpenLxApp.vector_Roof_back)
    assign = _swig_new_instance_method(_OpenLxApp.vector_Roof_assign)
    resize = _swig_new_instance_method(_OpenLxApp.vector_Roof_resize)
    insert = _swig_new_instance_method(_OpenLxApp.vector_Roof_insert)
    reserve = _swig_new_instance_method(_OpenLxApp.vector_Roof_reserve)
    capacity = _swig_new_instance_method(_OpenLxApp.vector_Roof_capacity)
    __swig_destroy__ = _OpenLxApp.delete_vector_Roof

# Register vector_Roof in _OpenLxApp:
_OpenLxApp.vector_Roof_swigregister(vector_Roof)
class vector_Root(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< OpenLxApp::Root > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_OpenLxApp.vector_Root_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_OpenLxApp.vector_Root___nonzero__)
    __bool__ = _swig_new_instance_method(_OpenLxApp.vector_Root___bool__)
    __len__ = _swig_new_instance_method(_OpenLxApp.vector_Root___len__)
    __getslice__ = _swig_new_instance_method(_OpenLxApp.vector_Root___getslice__)
    __setslice__ = _swig_new_instance_method(_OpenLxApp.vector_Root___setslice__)
    __delslice__ = _swig_new_instance_method(_OpenLxApp.vector_Root___delslice__)
    __delitem__ = _swig_new_instance_method(_OpenLxApp.vector_Root___delitem__)
    __getitem__ = _swig_new_instance_method(_OpenLxApp.vector_Root___getitem__)
    __setitem__ = _swig_new_instance_method(_OpenLxApp.vector_Root___setitem__)
    pop = _swig_new_instance_method(_OpenLxApp.vector_Root_pop)
    append = _swig_new_instance_method(_OpenLxApp.vector_Root_append)
    empty = _swig_new_instance_method(_OpenLxApp.vector_Root_empty)
    size = _swig_new_instance_method(_OpenLxApp.vector_Root_size)
    swap = _swig_new_instance_method(_OpenLxApp.vector_Root_swap)
    begin = _swig_new_instance_method(_OpenLxApp.vector_Root_begin)
    end = _swig_new_instance_method(_OpenLxApp.vector_Root_end)
    rbegin = _swig_new_instance_method(_OpenLxApp.vector_Root_rbegin)
    rend = _swig_new_instance_method(_OpenLxApp.vector_Root_rend)
    clear = _swig_new_instance_method(_OpenLxApp.vector_Root_clear)
    get_allocator = _swig_new_instance_method(_OpenLxApp.vector_Root_get_allocator)
    pop_back = _swig_new_instance_method(_OpenLxApp.vector_Root_pop_back)
    erase = _swig_new_instance_method(_OpenLxApp.vector_Root_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_Root self) -> vector_Root
        __init__(vector_Root self, vector_Root other) -> vector_Root
        __init__(vector_Root self, std::vector< std::shared_ptr< OpenLxApp::Root > >::size_type size) -> vector_Root
        __init__(vector_Root self, std::vector< std::shared_ptr< OpenLxApp::Root > >::size_type size, std::vector< std::shared_ptr< OpenLxApp::Root > >::value_type const & value) -> vector_Root
        """
        _OpenLxApp.vector_Root_swiginit(self, _OpenLxApp.new_vector_Root(*args))
    push_back = _swig_new_instance_method(_OpenLxApp.vector_Root_push_back)
    front = _swig_new_instance_method(_OpenLxApp.vector_Root_front)
    back = _swig_new_instance_method(_OpenLxApp.vector_Root_back)
    assign = _swig_new_instance_method(_OpenLxApp.vector_Root_assign)
    resize = _swig_new_instance_method(_OpenLxApp.vector_Root_resize)
    insert = _swig_new_instance_method(_OpenLxApp.vector_Root_insert)
    reserve = _swig_new_instance_method(_OpenLxApp.vector_Root_reserve)
    capacity = _swig_new_instance_method(_OpenLxApp.vector_Root_capacity)
    __swig_destroy__ = _OpenLxApp.delete_vector_Root

# Register vector_Root in _OpenLxApp:
_OpenLxApp.vector_Root_swigregister(vector_Root)
class vector_ShellBasedSurfaceModel(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< OpenLxApp::ShellBasedSurfaceModel > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_OpenLxApp.vector_ShellBasedSurfaceModel_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_OpenLxApp.vector_ShellBasedSurfaceModel___nonzero__)
    __bool__ = _swig_new_instance_method(_OpenLxApp.vector_ShellBasedSurfaceModel___bool__)
    __len__ = _swig_new_instance_method(_OpenLxApp.vector_ShellBasedSurfaceModel___len__)
    __getslice__ = _swig_new_instance_method(_OpenLxApp.vector_ShellBasedSurfaceModel___getslice__)
    __setslice__ = _swig_new_instance_method(_OpenLxApp.vector_ShellBasedSurfaceModel___setslice__)
    __delslice__ = _swig_new_instance_method(_OpenLxApp.vector_ShellBasedSurfaceModel___delslice__)
    __delitem__ = _swig_new_instance_method(_OpenLxApp.vector_ShellBasedSurfaceModel___delitem__)
    __getitem__ = _swig_new_instance_method(_OpenLxApp.vector_ShellBasedSurfaceModel___getitem__)
    __setitem__ = _swig_new_instance_method(_OpenLxApp.vector_ShellBasedSurfaceModel___setitem__)
    pop = _swig_new_instance_method(_OpenLxApp.vector_ShellBasedSurfaceModel_pop)
    append = _swig_new_instance_method(_OpenLxApp.vector_ShellBasedSurfaceModel_append)
    empty = _swig_new_instance_method(_OpenLxApp.vector_ShellBasedSurfaceModel_empty)
    size = _swig_new_instance_method(_OpenLxApp.vector_ShellBasedSurfaceModel_size)
    swap = _swig_new_instance_method(_OpenLxApp.vector_ShellBasedSurfaceModel_swap)
    begin = _swig_new_instance_method(_OpenLxApp.vector_ShellBasedSurfaceModel_begin)
    end = _swig_new_instance_method(_OpenLxApp.vector_ShellBasedSurfaceModel_end)
    rbegin = _swig_new_instance_method(_OpenLxApp.vector_ShellBasedSurfaceModel_rbegin)
    rend = _swig_new_instance_method(_OpenLxApp.vector_ShellBasedSurfaceModel_rend)
    clear = _swig_new_instance_method(_OpenLxApp.vector_ShellBasedSurfaceModel_clear)
    get_allocator = _swig_new_instance_method(_OpenLxApp.vector_ShellBasedSurfaceModel_get_allocator)
    pop_back = _swig_new_instance_method(_OpenLxApp.vector_ShellBasedSurfaceModel_pop_back)
    erase = _swig_new_instance_method(_OpenLxApp.vector_ShellBasedSurfaceModel_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_ShellBasedSurfaceModel self) -> vector_ShellBasedSurfaceModel
        __init__(vector_ShellBasedSurfaceModel self, vector_ShellBasedSurfaceModel other) -> vector_ShellBasedSurfaceModel
        __init__(vector_ShellBasedSurfaceModel self, std::vector< std::shared_ptr< OpenLxApp::ShellBasedSurfaceModel > >::size_type size) -> vector_ShellBasedSurfaceModel
        __init__(vector_ShellBasedSurfaceModel self, std::vector< std::shared_ptr< OpenLxApp::ShellBasedSurfaceModel > >::size_type size, std::vector< std::shared_ptr< OpenLxApp::ShellBasedSurfaceModel > >::value_type const & value) -> vector_ShellBasedSurfaceModel
        """
        _OpenLxApp.vector_ShellBasedSurfaceModel_swiginit(self, _OpenLxApp.new_vector_ShellBasedSurfaceModel(*args))
    push_back = _swig_new_instance_method(_OpenLxApp.vector_ShellBasedSurfaceModel_push_back)
    front = _swig_new_instance_method(_OpenLxApp.vector_ShellBasedSurfaceModel_front)
    back = _swig_new_instance_method(_OpenLxApp.vector_ShellBasedSurfaceModel_back)
    assign = _swig_new_instance_method(_OpenLxApp.vector_ShellBasedSurfaceModel_assign)
    resize = _swig_new_instance_method(_OpenLxApp.vector_ShellBasedSurfaceModel_resize)
    insert = _swig_new_instance_method(_OpenLxApp.vector_ShellBasedSurfaceModel_insert)
    reserve = _swig_new_instance_method(_OpenLxApp.vector_ShellBasedSurfaceModel_reserve)
    capacity = _swig_new_instance_method(_OpenLxApp.vector_ShellBasedSurfaceModel_capacity)
    __swig_destroy__ = _OpenLxApp.delete_vector_ShellBasedSurfaceModel

# Register vector_ShellBasedSurfaceModel in _OpenLxApp:
_OpenLxApp.vector_ShellBasedSurfaceModel_swigregister(vector_ShellBasedSurfaceModel)
class vector_Sign(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< OpenLxApp::Sign > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_OpenLxApp.vector_Sign_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_OpenLxApp.vector_Sign___nonzero__)
    __bool__ = _swig_new_instance_method(_OpenLxApp.vector_Sign___bool__)
    __len__ = _swig_new_instance_method(_OpenLxApp.vector_Sign___len__)
    __getslice__ = _swig_new_instance_method(_OpenLxApp.vector_Sign___getslice__)
    __setslice__ = _swig_new_instance_method(_OpenLxApp.vector_Sign___setslice__)
    __delslice__ = _swig_new_instance_method(_OpenLxApp.vector_Sign___delslice__)
    __delitem__ = _swig_new_instance_method(_OpenLxApp.vector_Sign___delitem__)
    __getitem__ = _swig_new_instance_method(_OpenLxApp.vector_Sign___getitem__)
    __setitem__ = _swig_new_instance_method(_OpenLxApp.vector_Sign___setitem__)
    pop = _swig_new_instance_method(_OpenLxApp.vector_Sign_pop)
    append = _swig_new_instance_method(_OpenLxApp.vector_Sign_append)
    empty = _swig_new_instance_method(_OpenLxApp.vector_Sign_empty)
    size = _swig_new_instance_method(_OpenLxApp.vector_Sign_size)
    swap = _swig_new_instance_method(_OpenLxApp.vector_Sign_swap)
    begin = _swig_new_instance_method(_OpenLxApp.vector_Sign_begin)
    end = _swig_new_instance_method(_OpenLxApp.vector_Sign_end)
    rbegin = _swig_new_instance_method(_OpenLxApp.vector_Sign_rbegin)
    rend = _swig_new_instance_method(_OpenLxApp.vector_Sign_rend)
    clear = _swig_new_instance_method(_OpenLxApp.vector_Sign_clear)
    get_allocator = _swig_new_instance_method(_OpenLxApp.vector_Sign_get_allocator)
    pop_back = _swig_new_instance_method(_OpenLxApp.vector_Sign_pop_back)
    erase = _swig_new_instance_method(_OpenLxApp.vector_Sign_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_Sign self) -> vector_Sign
        __init__(vector_Sign self, vector_Sign other) -> vector_Sign
        __init__(vector_Sign self, std::vector< std::shared_ptr< OpenLxApp::Sign > >::size_type size) -> vector_Sign
        __init__(vector_Sign self, std::vector< std::shared_ptr< OpenLxApp::Sign > >::size_type size, std::vector< std::shared_ptr< OpenLxApp::Sign > >::value_type const & value) -> vector_Sign
        """
        _OpenLxApp.vector_Sign_swiginit(self, _OpenLxApp.new_vector_Sign(*args))
    push_back = _swig_new_instance_method(_OpenLxApp.vector_Sign_push_back)
    front = _swig_new_instance_method(_OpenLxApp.vector_Sign_front)
    back = _swig_new_instance_method(_OpenLxApp.vector_Sign_back)
    assign = _swig_new_instance_method(_OpenLxApp.vector_Sign_assign)
    resize = _swig_new_instance_method(_OpenLxApp.vector_Sign_resize)
    insert = _swig_new_instance_method(_OpenLxApp.vector_Sign_insert)
    reserve = _swig_new_instance_method(_OpenLxApp.vector_Sign_reserve)
    capacity = _swig_new_instance_method(_OpenLxApp.vector_Sign_capacity)
    __swig_destroy__ = _OpenLxApp.delete_vector_Sign

# Register vector_Sign in _OpenLxApp:
_OpenLxApp.vector_Sign_swigregister(vector_Sign)
class vector_Signal(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< OpenLxApp::Signal > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_OpenLxApp.vector_Signal_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_OpenLxApp.vector_Signal___nonzero__)
    __bool__ = _swig_new_instance_method(_OpenLxApp.vector_Signal___bool__)
    __len__ = _swig_new_instance_method(_OpenLxApp.vector_Signal___len__)
    __getslice__ = _swig_new_instance_method(_OpenLxApp.vector_Signal___getslice__)
    __setslice__ = _swig_new_instance_method(_OpenLxApp.vector_Signal___setslice__)
    __delslice__ = _swig_new_instance_method(_OpenLxApp.vector_Signal___delslice__)
    __delitem__ = _swig_new_instance_method(_OpenLxApp.vector_Signal___delitem__)
    __getitem__ = _swig_new_instance_method(_OpenLxApp.vector_Signal___getitem__)
    __setitem__ = _swig_new_instance_method(_OpenLxApp.vector_Signal___setitem__)
    pop = _swig_new_instance_method(_OpenLxApp.vector_Signal_pop)
    append = _swig_new_instance_method(_OpenLxApp.vector_Signal_append)
    empty = _swig_new_instance_method(_OpenLxApp.vector_Signal_empty)
    size = _swig_new_instance_method(_OpenLxApp.vector_Signal_size)
    swap = _swig_new_instance_method(_OpenLxApp.vector_Signal_swap)
    begin = _swig_new_instance_method(_OpenLxApp.vector_Signal_begin)
    end = _swig_new_instance_method(_OpenLxApp.vector_Signal_end)
    rbegin = _swig_new_instance_method(_OpenLxApp.vector_Signal_rbegin)
    rend = _swig_new_instance_method(_OpenLxApp.vector_Signal_rend)
    clear = _swig_new_instance_method(_OpenLxApp.vector_Signal_clear)
    get_allocator = _swig_new_instance_method(_OpenLxApp.vector_Signal_get_allocator)
    pop_back = _swig_new_instance_method(_OpenLxApp.vector_Signal_pop_back)
    erase = _swig_new_instance_method(_OpenLxApp.vector_Signal_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_Signal self) -> vector_Signal
        __init__(vector_Signal self, vector_Signal other) -> vector_Signal
        __init__(vector_Signal self, std::vector< std::shared_ptr< OpenLxApp::Signal > >::size_type size) -> vector_Signal
        __init__(vector_Signal self, std::vector< std::shared_ptr< OpenLxApp::Signal > >::size_type size, std::vector< std::shared_ptr< OpenLxApp::Signal > >::value_type const & value) -> vector_Signal
        """
        _OpenLxApp.vector_Signal_swiginit(self, _OpenLxApp.new_vector_Signal(*args))
    push_back = _swig_new_instance_method(_OpenLxApp.vector_Signal_push_back)
    front = _swig_new_instance_method(_OpenLxApp.vector_Signal_front)
    back = _swig_new_instance_method(_OpenLxApp.vector_Signal_back)
    assign = _swig_new_instance_method(_OpenLxApp.vector_Signal_assign)
    resize = _swig_new_instance_method(_OpenLxApp.vector_Signal_resize)
    insert = _swig_new_instance_method(_OpenLxApp.vector_Signal_insert)
    reserve = _swig_new_instance_method(_OpenLxApp.vector_Signal_reserve)
    capacity = _swig_new_instance_method(_OpenLxApp.vector_Signal_capacity)
    __swig_destroy__ = _OpenLxApp.delete_vector_Signal

# Register vector_Signal in _OpenLxApp:
_OpenLxApp.vector_Signal_swigregister(vector_Signal)
class vector_SingleLineText2d(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< OpenLxApp::SingleLineText2d > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_OpenLxApp.vector_SingleLineText2d_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_OpenLxApp.vector_SingleLineText2d___nonzero__)
    __bool__ = _swig_new_instance_method(_OpenLxApp.vector_SingleLineText2d___bool__)
    __len__ = _swig_new_instance_method(_OpenLxApp.vector_SingleLineText2d___len__)
    __getslice__ = _swig_new_instance_method(_OpenLxApp.vector_SingleLineText2d___getslice__)
    __setslice__ = _swig_new_instance_method(_OpenLxApp.vector_SingleLineText2d___setslice__)
    __delslice__ = _swig_new_instance_method(_OpenLxApp.vector_SingleLineText2d___delslice__)
    __delitem__ = _swig_new_instance_method(_OpenLxApp.vector_SingleLineText2d___delitem__)
    __getitem__ = _swig_new_instance_method(_OpenLxApp.vector_SingleLineText2d___getitem__)
    __setitem__ = _swig_new_instance_method(_OpenLxApp.vector_SingleLineText2d___setitem__)
    pop = _swig_new_instance_method(_OpenLxApp.vector_SingleLineText2d_pop)
    append = _swig_new_instance_method(_OpenLxApp.vector_SingleLineText2d_append)
    empty = _swig_new_instance_method(_OpenLxApp.vector_SingleLineText2d_empty)
    size = _swig_new_instance_method(_OpenLxApp.vector_SingleLineText2d_size)
    swap = _swig_new_instance_method(_OpenLxApp.vector_SingleLineText2d_swap)
    begin = _swig_new_instance_method(_OpenLxApp.vector_SingleLineText2d_begin)
    end = _swig_new_instance_method(_OpenLxApp.vector_SingleLineText2d_end)
    rbegin = _swig_new_instance_method(_OpenLxApp.vector_SingleLineText2d_rbegin)
    rend = _swig_new_instance_method(_OpenLxApp.vector_SingleLineText2d_rend)
    clear = _swig_new_instance_method(_OpenLxApp.vector_SingleLineText2d_clear)
    get_allocator = _swig_new_instance_method(_OpenLxApp.vector_SingleLineText2d_get_allocator)
    pop_back = _swig_new_instance_method(_OpenLxApp.vector_SingleLineText2d_pop_back)
    erase = _swig_new_instance_method(_OpenLxApp.vector_SingleLineText2d_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_SingleLineText2d self) -> vector_SingleLineText2d
        __init__(vector_SingleLineText2d self, vector_SingleLineText2d other) -> vector_SingleLineText2d
        __init__(vector_SingleLineText2d self, std::vector< std::shared_ptr< OpenLxApp::SingleLineText2d > >::size_type size) -> vector_SingleLineText2d
        __init__(vector_SingleLineText2d self, std::vector< std::shared_ptr< OpenLxApp::SingleLineText2d > >::size_type size, std::vector< std::shared_ptr< OpenLxApp::SingleLineText2d > >::value_type const & value) -> vector_SingleLineText2d
        """
        _OpenLxApp.vector_SingleLineText2d_swiginit(self, _OpenLxApp.new_vector_SingleLineText2d(*args))
    push_back = _swig_new_instance_method(_OpenLxApp.vector_SingleLineText2d_push_back)
    front = _swig_new_instance_method(_OpenLxApp.vector_SingleLineText2d_front)
    back = _swig_new_instance_method(_OpenLxApp.vector_SingleLineText2d_back)
    assign = _swig_new_instance_method(_OpenLxApp.vector_SingleLineText2d_assign)
    resize = _swig_new_instance_method(_OpenLxApp.vector_SingleLineText2d_resize)
    insert = _swig_new_instance_method(_OpenLxApp.vector_SingleLineText2d_insert)
    reserve = _swig_new_instance_method(_OpenLxApp.vector_SingleLineText2d_reserve)
    capacity = _swig_new_instance_method(_OpenLxApp.vector_SingleLineText2d_capacity)
    __swig_destroy__ = _OpenLxApp.delete_vector_SingleLineText2d

# Register vector_SingleLineText2d in _OpenLxApp:
_OpenLxApp.vector_SingleLineText2d_swigregister(vector_SingleLineText2d)
class vector_Site(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< OpenLxApp::Site > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_OpenLxApp.vector_Site_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_OpenLxApp.vector_Site___nonzero__)
    __bool__ = _swig_new_instance_method(_OpenLxApp.vector_Site___bool__)
    __len__ = _swig_new_instance_method(_OpenLxApp.vector_Site___len__)
    __getslice__ = _swig_new_instance_method(_OpenLxApp.vector_Site___getslice__)
    __setslice__ = _swig_new_instance_method(_OpenLxApp.vector_Site___setslice__)
    __delslice__ = _swig_new_instance_method(_OpenLxApp.vector_Site___delslice__)
    __delitem__ = _swig_new_instance_method(_OpenLxApp.vector_Site___delitem__)
    __getitem__ = _swig_new_instance_method(_OpenLxApp.vector_Site___getitem__)
    __setitem__ = _swig_new_instance_method(_OpenLxApp.vector_Site___setitem__)
    pop = _swig_new_instance_method(_OpenLxApp.vector_Site_pop)
    append = _swig_new_instance_method(_OpenLxApp.vector_Site_append)
    empty = _swig_new_instance_method(_OpenLxApp.vector_Site_empty)
    size = _swig_new_instance_method(_OpenLxApp.vector_Site_size)
    swap = _swig_new_instance_method(_OpenLxApp.vector_Site_swap)
    begin = _swig_new_instance_method(_OpenLxApp.vector_Site_begin)
    end = _swig_new_instance_method(_OpenLxApp.vector_Site_end)
    rbegin = _swig_new_instance_method(_OpenLxApp.vector_Site_rbegin)
    rend = _swig_new_instance_method(_OpenLxApp.vector_Site_rend)
    clear = _swig_new_instance_method(_OpenLxApp.vector_Site_clear)
    get_allocator = _swig_new_instance_method(_OpenLxApp.vector_Site_get_allocator)
    pop_back = _swig_new_instance_method(_OpenLxApp.vector_Site_pop_back)
    erase = _swig_new_instance_method(_OpenLxApp.vector_Site_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_Site self) -> vector_Site
        __init__(vector_Site self, vector_Site other) -> vector_Site
        __init__(vector_Site self, std::vector< std::shared_ptr< OpenLxApp::Site > >::size_type size) -> vector_Site
        __init__(vector_Site self, std::vector< std::shared_ptr< OpenLxApp::Site > >::size_type size, std::vector< std::shared_ptr< OpenLxApp::Site > >::value_type const & value) -> vector_Site
        """
        _OpenLxApp.vector_Site_swiginit(self, _OpenLxApp.new_vector_Site(*args))
    push_back = _swig_new_instance_method(_OpenLxApp.vector_Site_push_back)
    front = _swig_new_instance_method(_OpenLxApp.vector_Site_front)
    back = _swig_new_instance_method(_OpenLxApp.vector_Site_back)
    assign = _swig_new_instance_method(_OpenLxApp.vector_Site_assign)
    resize = _swig_new_instance_method(_OpenLxApp.vector_Site_resize)
    insert = _swig_new_instance_method(_OpenLxApp.vector_Site_insert)
    reserve = _swig_new_instance_method(_OpenLxApp.vector_Site_reserve)
    capacity = _swig_new_instance_method(_OpenLxApp.vector_Site_capacity)
    __swig_destroy__ = _OpenLxApp.delete_vector_Site

# Register vector_Site in _OpenLxApp:
_OpenLxApp.vector_Site_swigregister(vector_Site)
class vector_Slab(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< OpenLxApp::Slab > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_OpenLxApp.vector_Slab_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_OpenLxApp.vector_Slab___nonzero__)
    __bool__ = _swig_new_instance_method(_OpenLxApp.vector_Slab___bool__)
    __len__ = _swig_new_instance_method(_OpenLxApp.vector_Slab___len__)
    __getslice__ = _swig_new_instance_method(_OpenLxApp.vector_Slab___getslice__)
    __setslice__ = _swig_new_instance_method(_OpenLxApp.vector_Slab___setslice__)
    __delslice__ = _swig_new_instance_method(_OpenLxApp.vector_Slab___delslice__)
    __delitem__ = _swig_new_instance_method(_OpenLxApp.vector_Slab___delitem__)
    __getitem__ = _swig_new_instance_method(_OpenLxApp.vector_Slab___getitem__)
    __setitem__ = _swig_new_instance_method(_OpenLxApp.vector_Slab___setitem__)
    pop = _swig_new_instance_method(_OpenLxApp.vector_Slab_pop)
    append = _swig_new_instance_method(_OpenLxApp.vector_Slab_append)
    empty = _swig_new_instance_method(_OpenLxApp.vector_Slab_empty)
    size = _swig_new_instance_method(_OpenLxApp.vector_Slab_size)
    swap = _swig_new_instance_method(_OpenLxApp.vector_Slab_swap)
    begin = _swig_new_instance_method(_OpenLxApp.vector_Slab_begin)
    end = _swig_new_instance_method(_OpenLxApp.vector_Slab_end)
    rbegin = _swig_new_instance_method(_OpenLxApp.vector_Slab_rbegin)
    rend = _swig_new_instance_method(_OpenLxApp.vector_Slab_rend)
    clear = _swig_new_instance_method(_OpenLxApp.vector_Slab_clear)
    get_allocator = _swig_new_instance_method(_OpenLxApp.vector_Slab_get_allocator)
    pop_back = _swig_new_instance_method(_OpenLxApp.vector_Slab_pop_back)
    erase = _swig_new_instance_method(_OpenLxApp.vector_Slab_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_Slab self) -> vector_Slab
        __init__(vector_Slab self, vector_Slab other) -> vector_Slab
        __init__(vector_Slab self, std::vector< std::shared_ptr< OpenLxApp::Slab > >::size_type size) -> vector_Slab
        __init__(vector_Slab self, std::vector< std::shared_ptr< OpenLxApp::Slab > >::size_type size, std::vector< std::shared_ptr< OpenLxApp::Slab > >::value_type const & value) -> vector_Slab
        """
        _OpenLxApp.vector_Slab_swiginit(self, _OpenLxApp.new_vector_Slab(*args))
    push_back = _swig_new_instance_method(_OpenLxApp.vector_Slab_push_back)
    front = _swig_new_instance_method(_OpenLxApp.vector_Slab_front)
    back = _swig_new_instance_method(_OpenLxApp.vector_Slab_back)
    assign = _swig_new_instance_method(_OpenLxApp.vector_Slab_assign)
    resize = _swig_new_instance_method(_OpenLxApp.vector_Slab_resize)
    insert = _swig_new_instance_method(_OpenLxApp.vector_Slab_insert)
    reserve = _swig_new_instance_method(_OpenLxApp.vector_Slab_reserve)
    capacity = _swig_new_instance_method(_OpenLxApp.vector_Slab_capacity)
    __swig_destroy__ = _OpenLxApp.delete_vector_Slab

# Register vector_Slab in _OpenLxApp:
_OpenLxApp.vector_Slab_swigregister(vector_Slab)
class vector_SlabElementedCase(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< OpenLxApp::SlabElementedCase > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_OpenLxApp.vector_SlabElementedCase_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_OpenLxApp.vector_SlabElementedCase___nonzero__)
    __bool__ = _swig_new_instance_method(_OpenLxApp.vector_SlabElementedCase___bool__)
    __len__ = _swig_new_instance_method(_OpenLxApp.vector_SlabElementedCase___len__)
    __getslice__ = _swig_new_instance_method(_OpenLxApp.vector_SlabElementedCase___getslice__)
    __setslice__ = _swig_new_instance_method(_OpenLxApp.vector_SlabElementedCase___setslice__)
    __delslice__ = _swig_new_instance_method(_OpenLxApp.vector_SlabElementedCase___delslice__)
    __delitem__ = _swig_new_instance_method(_OpenLxApp.vector_SlabElementedCase___delitem__)
    __getitem__ = _swig_new_instance_method(_OpenLxApp.vector_SlabElementedCase___getitem__)
    __setitem__ = _swig_new_instance_method(_OpenLxApp.vector_SlabElementedCase___setitem__)
    pop = _swig_new_instance_method(_OpenLxApp.vector_SlabElementedCase_pop)
    append = _swig_new_instance_method(_OpenLxApp.vector_SlabElementedCase_append)
    empty = _swig_new_instance_method(_OpenLxApp.vector_SlabElementedCase_empty)
    size = _swig_new_instance_method(_OpenLxApp.vector_SlabElementedCase_size)
    swap = _swig_new_instance_method(_OpenLxApp.vector_SlabElementedCase_swap)
    begin = _swig_new_instance_method(_OpenLxApp.vector_SlabElementedCase_begin)
    end = _swig_new_instance_method(_OpenLxApp.vector_SlabElementedCase_end)
    rbegin = _swig_new_instance_method(_OpenLxApp.vector_SlabElementedCase_rbegin)
    rend = _swig_new_instance_method(_OpenLxApp.vector_SlabElementedCase_rend)
    clear = _swig_new_instance_method(_OpenLxApp.vector_SlabElementedCase_clear)
    get_allocator = _swig_new_instance_method(_OpenLxApp.vector_SlabElementedCase_get_allocator)
    pop_back = _swig_new_instance_method(_OpenLxApp.vector_SlabElementedCase_pop_back)
    erase = _swig_new_instance_method(_OpenLxApp.vector_SlabElementedCase_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_SlabElementedCase self) -> vector_SlabElementedCase
        __init__(vector_SlabElementedCase self, vector_SlabElementedCase other) -> vector_SlabElementedCase
        __init__(vector_SlabElementedCase self, std::vector< std::shared_ptr< OpenLxApp::SlabElementedCase > >::size_type size) -> vector_SlabElementedCase
        __init__(vector_SlabElementedCase self, std::vector< std::shared_ptr< OpenLxApp::SlabElementedCase > >::size_type size, std::vector< std::shared_ptr< OpenLxApp::SlabElementedCase > >::value_type const & value) -> vector_SlabElementedCase
        """
        _OpenLxApp.vector_SlabElementedCase_swiginit(self, _OpenLxApp.new_vector_SlabElementedCase(*args))
    push_back = _swig_new_instance_method(_OpenLxApp.vector_SlabElementedCase_push_back)
    front = _swig_new_instance_method(_OpenLxApp.vector_SlabElementedCase_front)
    back = _swig_new_instance_method(_OpenLxApp.vector_SlabElementedCase_back)
    assign = _swig_new_instance_method(_OpenLxApp.vector_SlabElementedCase_assign)
    resize = _swig_new_instance_method(_OpenLxApp.vector_SlabElementedCase_resize)
    insert = _swig_new_instance_method(_OpenLxApp.vector_SlabElementedCase_insert)
    reserve = _swig_new_instance_method(_OpenLxApp.vector_SlabElementedCase_reserve)
    capacity = _swig_new_instance_method(_OpenLxApp.vector_SlabElementedCase_capacity)
    __swig_destroy__ = _OpenLxApp.delete_vector_SlabElementedCase

# Register vector_SlabElementedCase in _OpenLxApp:
_OpenLxApp.vector_SlabElementedCase_swigregister(vector_SlabElementedCase)
class vector_SlabStandardCase(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< OpenLxApp::SlabStandardCase > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_OpenLxApp.vector_SlabStandardCase_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_OpenLxApp.vector_SlabStandardCase___nonzero__)
    __bool__ = _swig_new_instance_method(_OpenLxApp.vector_SlabStandardCase___bool__)
    __len__ = _swig_new_instance_method(_OpenLxApp.vector_SlabStandardCase___len__)
    __getslice__ = _swig_new_instance_method(_OpenLxApp.vector_SlabStandardCase___getslice__)
    __setslice__ = _swig_new_instance_method(_OpenLxApp.vector_SlabStandardCase___setslice__)
    __delslice__ = _swig_new_instance_method(_OpenLxApp.vector_SlabStandardCase___delslice__)
    __delitem__ = _swig_new_instance_method(_OpenLxApp.vector_SlabStandardCase___delitem__)
    __getitem__ = _swig_new_instance_method(_OpenLxApp.vector_SlabStandardCase___getitem__)
    __setitem__ = _swig_new_instance_method(_OpenLxApp.vector_SlabStandardCase___setitem__)
    pop = _swig_new_instance_method(_OpenLxApp.vector_SlabStandardCase_pop)
    append = _swig_new_instance_method(_OpenLxApp.vector_SlabStandardCase_append)
    empty = _swig_new_instance_method(_OpenLxApp.vector_SlabStandardCase_empty)
    size = _swig_new_instance_method(_OpenLxApp.vector_SlabStandardCase_size)
    swap = _swig_new_instance_method(_OpenLxApp.vector_SlabStandardCase_swap)
    begin = _swig_new_instance_method(_OpenLxApp.vector_SlabStandardCase_begin)
    end = _swig_new_instance_method(_OpenLxApp.vector_SlabStandardCase_end)
    rbegin = _swig_new_instance_method(_OpenLxApp.vector_SlabStandardCase_rbegin)
    rend = _swig_new_instance_method(_OpenLxApp.vector_SlabStandardCase_rend)
    clear = _swig_new_instance_method(_OpenLxApp.vector_SlabStandardCase_clear)
    get_allocator = _swig_new_instance_method(_OpenLxApp.vector_SlabStandardCase_get_allocator)
    pop_back = _swig_new_instance_method(_OpenLxApp.vector_SlabStandardCase_pop_back)
    erase = _swig_new_instance_method(_OpenLxApp.vector_SlabStandardCase_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_SlabStandardCase self) -> vector_SlabStandardCase
        __init__(vector_SlabStandardCase self, vector_SlabStandardCase other) -> vector_SlabStandardCase
        __init__(vector_SlabStandardCase self, std::vector< std::shared_ptr< OpenLxApp::SlabStandardCase > >::size_type size) -> vector_SlabStandardCase
        __init__(vector_SlabStandardCase self, std::vector< std::shared_ptr< OpenLxApp::SlabStandardCase > >::size_type size, std::vector< std::shared_ptr< OpenLxApp::SlabStandardCase > >::value_type const & value) -> vector_SlabStandardCase
        """
        _OpenLxApp.vector_SlabStandardCase_swiginit(self, _OpenLxApp.new_vector_SlabStandardCase(*args))
    push_back = _swig_new_instance_method(_OpenLxApp.vector_SlabStandardCase_push_back)
    front = _swig_new_instance_method(_OpenLxApp.vector_SlabStandardCase_front)
    back = _swig_new_instance_method(_OpenLxApp.vector_SlabStandardCase_back)
    assign = _swig_new_instance_method(_OpenLxApp.vector_SlabStandardCase_assign)
    resize = _swig_new_instance_method(_OpenLxApp.vector_SlabStandardCase_resize)
    insert = _swig_new_instance_method(_OpenLxApp.vector_SlabStandardCase_insert)
    reserve = _swig_new_instance_method(_OpenLxApp.vector_SlabStandardCase_reserve)
    capacity = _swig_new_instance_method(_OpenLxApp.vector_SlabStandardCase_capacity)
    __swig_destroy__ = _OpenLxApp.delete_vector_SlabStandardCase

# Register vector_SlabStandardCase in _OpenLxApp:
_OpenLxApp.vector_SlabStandardCase_swigregister(vector_SlabStandardCase)
class vector_Space(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< OpenLxApp::Space > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_OpenLxApp.vector_Space_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_OpenLxApp.vector_Space___nonzero__)
    __bool__ = _swig_new_instance_method(_OpenLxApp.vector_Space___bool__)
    __len__ = _swig_new_instance_method(_OpenLxApp.vector_Space___len__)
    __getslice__ = _swig_new_instance_method(_OpenLxApp.vector_Space___getslice__)
    __setslice__ = _swig_new_instance_method(_OpenLxApp.vector_Space___setslice__)
    __delslice__ = _swig_new_instance_method(_OpenLxApp.vector_Space___delslice__)
    __delitem__ = _swig_new_instance_method(_OpenLxApp.vector_Space___delitem__)
    __getitem__ = _swig_new_instance_method(_OpenLxApp.vector_Space___getitem__)
    __setitem__ = _swig_new_instance_method(_OpenLxApp.vector_Space___setitem__)
    pop = _swig_new_instance_method(_OpenLxApp.vector_Space_pop)
    append = _swig_new_instance_method(_OpenLxApp.vector_Space_append)
    empty = _swig_new_instance_method(_OpenLxApp.vector_Space_empty)
    size = _swig_new_instance_method(_OpenLxApp.vector_Space_size)
    swap = _swig_new_instance_method(_OpenLxApp.vector_Space_swap)
    begin = _swig_new_instance_method(_OpenLxApp.vector_Space_begin)
    end = _swig_new_instance_method(_OpenLxApp.vector_Space_end)
    rbegin = _swig_new_instance_method(_OpenLxApp.vector_Space_rbegin)
    rend = _swig_new_instance_method(_OpenLxApp.vector_Space_rend)
    clear = _swig_new_instance_method(_OpenLxApp.vector_Space_clear)
    get_allocator = _swig_new_instance_method(_OpenLxApp.vector_Space_get_allocator)
    pop_back = _swig_new_instance_method(_OpenLxApp.vector_Space_pop_back)
    erase = _swig_new_instance_method(_OpenLxApp.vector_Space_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_Space self) -> vector_Space
        __init__(vector_Space self, vector_Space other) -> vector_Space
        __init__(vector_Space self, std::vector< std::shared_ptr< OpenLxApp::Space > >::size_type size) -> vector_Space
        __init__(vector_Space self, std::vector< std::shared_ptr< OpenLxApp::Space > >::size_type size, std::vector< std::shared_ptr< OpenLxApp::Space > >::value_type const & value) -> vector_Space
        """
        _OpenLxApp.vector_Space_swiginit(self, _OpenLxApp.new_vector_Space(*args))
    push_back = _swig_new_instance_method(_OpenLxApp.vector_Space_push_back)
    front = _swig_new_instance_method(_OpenLxApp.vector_Space_front)
    back = _swig_new_instance_method(_OpenLxApp.vector_Space_back)
    assign = _swig_new_instance_method(_OpenLxApp.vector_Space_assign)
    resize = _swig_new_instance_method(_OpenLxApp.vector_Space_resize)
    insert = _swig_new_instance_method(_OpenLxApp.vector_Space_insert)
    reserve = _swig_new_instance_method(_OpenLxApp.vector_Space_reserve)
    capacity = _swig_new_instance_method(_OpenLxApp.vector_Space_capacity)
    __swig_destroy__ = _OpenLxApp.delete_vector_Space

# Register vector_Space in _OpenLxApp:
_OpenLxApp.vector_Space_swigregister(vector_Space)
class vector_SpatialElement(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< OpenLxApp::SpatialElement > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_OpenLxApp.vector_SpatialElement_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_OpenLxApp.vector_SpatialElement___nonzero__)
    __bool__ = _swig_new_instance_method(_OpenLxApp.vector_SpatialElement___bool__)
    __len__ = _swig_new_instance_method(_OpenLxApp.vector_SpatialElement___len__)
    __getslice__ = _swig_new_instance_method(_OpenLxApp.vector_SpatialElement___getslice__)
    __setslice__ = _swig_new_instance_method(_OpenLxApp.vector_SpatialElement___setslice__)
    __delslice__ = _swig_new_instance_method(_OpenLxApp.vector_SpatialElement___delslice__)
    __delitem__ = _swig_new_instance_method(_OpenLxApp.vector_SpatialElement___delitem__)
    __getitem__ = _swig_new_instance_method(_OpenLxApp.vector_SpatialElement___getitem__)
    __setitem__ = _swig_new_instance_method(_OpenLxApp.vector_SpatialElement___setitem__)
    pop = _swig_new_instance_method(_OpenLxApp.vector_SpatialElement_pop)
    append = _swig_new_instance_method(_OpenLxApp.vector_SpatialElement_append)
    empty = _swig_new_instance_method(_OpenLxApp.vector_SpatialElement_empty)
    size = _swig_new_instance_method(_OpenLxApp.vector_SpatialElement_size)
    swap = _swig_new_instance_method(_OpenLxApp.vector_SpatialElement_swap)
    begin = _swig_new_instance_method(_OpenLxApp.vector_SpatialElement_begin)
    end = _swig_new_instance_method(_OpenLxApp.vector_SpatialElement_end)
    rbegin = _swig_new_instance_method(_OpenLxApp.vector_SpatialElement_rbegin)
    rend = _swig_new_instance_method(_OpenLxApp.vector_SpatialElement_rend)
    clear = _swig_new_instance_method(_OpenLxApp.vector_SpatialElement_clear)
    get_allocator = _swig_new_instance_method(_OpenLxApp.vector_SpatialElement_get_allocator)
    pop_back = _swig_new_instance_method(_OpenLxApp.vector_SpatialElement_pop_back)
    erase = _swig_new_instance_method(_OpenLxApp.vector_SpatialElement_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_SpatialElement self) -> vector_SpatialElement
        __init__(vector_SpatialElement self, vector_SpatialElement other) -> vector_SpatialElement
        __init__(vector_SpatialElement self, std::vector< std::shared_ptr< OpenLxApp::SpatialElement > >::size_type size) -> vector_SpatialElement
        __init__(vector_SpatialElement self, std::vector< std::shared_ptr< OpenLxApp::SpatialElement > >::size_type size, std::vector< std::shared_ptr< OpenLxApp::SpatialElement > >::value_type const & value) -> vector_SpatialElement
        """
        _OpenLxApp.vector_SpatialElement_swiginit(self, _OpenLxApp.new_vector_SpatialElement(*args))
    push_back = _swig_new_instance_method(_OpenLxApp.vector_SpatialElement_push_back)
    front = _swig_new_instance_method(_OpenLxApp.vector_SpatialElement_front)
    back = _swig_new_instance_method(_OpenLxApp.vector_SpatialElement_back)
    assign = _swig_new_instance_method(_OpenLxApp.vector_SpatialElement_assign)
    resize = _swig_new_instance_method(_OpenLxApp.vector_SpatialElement_resize)
    insert = _swig_new_instance_method(_OpenLxApp.vector_SpatialElement_insert)
    reserve = _swig_new_instance_method(_OpenLxApp.vector_SpatialElement_reserve)
    capacity = _swig_new_instance_method(_OpenLxApp.vector_SpatialElement_capacity)
    __swig_destroy__ = _OpenLxApp.delete_vector_SpatialElement

# Register vector_SpatialElement in _OpenLxApp:
_OpenLxApp.vector_SpatialElement_swigregister(vector_SpatialElement)
class vector_SpatialStructureElement(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< OpenLxApp::SpatialStructureElement > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_OpenLxApp.vector_SpatialStructureElement_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_OpenLxApp.vector_SpatialStructureElement___nonzero__)
    __bool__ = _swig_new_instance_method(_OpenLxApp.vector_SpatialStructureElement___bool__)
    __len__ = _swig_new_instance_method(_OpenLxApp.vector_SpatialStructureElement___len__)
    __getslice__ = _swig_new_instance_method(_OpenLxApp.vector_SpatialStructureElement___getslice__)
    __setslice__ = _swig_new_instance_method(_OpenLxApp.vector_SpatialStructureElement___setslice__)
    __delslice__ = _swig_new_instance_method(_OpenLxApp.vector_SpatialStructureElement___delslice__)
    __delitem__ = _swig_new_instance_method(_OpenLxApp.vector_SpatialStructureElement___delitem__)
    __getitem__ = _swig_new_instance_method(_OpenLxApp.vector_SpatialStructureElement___getitem__)
    __setitem__ = _swig_new_instance_method(_OpenLxApp.vector_SpatialStructureElement___setitem__)
    pop = _swig_new_instance_method(_OpenLxApp.vector_SpatialStructureElement_pop)
    append = _swig_new_instance_method(_OpenLxApp.vector_SpatialStructureElement_append)
    empty = _swig_new_instance_method(_OpenLxApp.vector_SpatialStructureElement_empty)
    size = _swig_new_instance_method(_OpenLxApp.vector_SpatialStructureElement_size)
    swap = _swig_new_instance_method(_OpenLxApp.vector_SpatialStructureElement_swap)
    begin = _swig_new_instance_method(_OpenLxApp.vector_SpatialStructureElement_begin)
    end = _swig_new_instance_method(_OpenLxApp.vector_SpatialStructureElement_end)
    rbegin = _swig_new_instance_method(_OpenLxApp.vector_SpatialStructureElement_rbegin)
    rend = _swig_new_instance_method(_OpenLxApp.vector_SpatialStructureElement_rend)
    clear = _swig_new_instance_method(_OpenLxApp.vector_SpatialStructureElement_clear)
    get_allocator = _swig_new_instance_method(_OpenLxApp.vector_SpatialStructureElement_get_allocator)
    pop_back = _swig_new_instance_method(_OpenLxApp.vector_SpatialStructureElement_pop_back)
    erase = _swig_new_instance_method(_OpenLxApp.vector_SpatialStructureElement_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_SpatialStructureElement self) -> vector_SpatialStructureElement
        __init__(vector_SpatialStructureElement self, vector_SpatialStructureElement other) -> vector_SpatialStructureElement
        __init__(vector_SpatialStructureElement self, std::vector< std::shared_ptr< OpenLxApp::SpatialStructureElement > >::size_type size) -> vector_SpatialStructureElement
        __init__(vector_SpatialStructureElement self, std::vector< std::shared_ptr< OpenLxApp::SpatialStructureElement > >::size_type size, std::vector< std::shared_ptr< OpenLxApp::SpatialStructureElement > >::value_type const & value) -> vector_SpatialStructureElement
        """
        _OpenLxApp.vector_SpatialStructureElement_swiginit(self, _OpenLxApp.new_vector_SpatialStructureElement(*args))
    push_back = _swig_new_instance_method(_OpenLxApp.vector_SpatialStructureElement_push_back)
    front = _swig_new_instance_method(_OpenLxApp.vector_SpatialStructureElement_front)
    back = _swig_new_instance_method(_OpenLxApp.vector_SpatialStructureElement_back)
    assign = _swig_new_instance_method(_OpenLxApp.vector_SpatialStructureElement_assign)
    resize = _swig_new_instance_method(_OpenLxApp.vector_SpatialStructureElement_resize)
    insert = _swig_new_instance_method(_OpenLxApp.vector_SpatialStructureElement_insert)
    reserve = _swig_new_instance_method(_OpenLxApp.vector_SpatialStructureElement_reserve)
    capacity = _swig_new_instance_method(_OpenLxApp.vector_SpatialStructureElement_capacity)
    __swig_destroy__ = _OpenLxApp.delete_vector_SpatialStructureElement

# Register vector_SpatialStructureElement in _OpenLxApp:
_OpenLxApp.vector_SpatialStructureElement_swigregister(vector_SpatialStructureElement)
class vector_SpatialZone(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< OpenLxApp::SpatialZone > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_OpenLxApp.vector_SpatialZone_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_OpenLxApp.vector_SpatialZone___nonzero__)
    __bool__ = _swig_new_instance_method(_OpenLxApp.vector_SpatialZone___bool__)
    __len__ = _swig_new_instance_method(_OpenLxApp.vector_SpatialZone___len__)
    __getslice__ = _swig_new_instance_method(_OpenLxApp.vector_SpatialZone___getslice__)
    __setslice__ = _swig_new_instance_method(_OpenLxApp.vector_SpatialZone___setslice__)
    __delslice__ = _swig_new_instance_method(_OpenLxApp.vector_SpatialZone___delslice__)
    __delitem__ = _swig_new_instance_method(_OpenLxApp.vector_SpatialZone___delitem__)
    __getitem__ = _swig_new_instance_method(_OpenLxApp.vector_SpatialZone___getitem__)
    __setitem__ = _swig_new_instance_method(_OpenLxApp.vector_SpatialZone___setitem__)
    pop = _swig_new_instance_method(_OpenLxApp.vector_SpatialZone_pop)
    append = _swig_new_instance_method(_OpenLxApp.vector_SpatialZone_append)
    empty = _swig_new_instance_method(_OpenLxApp.vector_SpatialZone_empty)
    size = _swig_new_instance_method(_OpenLxApp.vector_SpatialZone_size)
    swap = _swig_new_instance_method(_OpenLxApp.vector_SpatialZone_swap)
    begin = _swig_new_instance_method(_OpenLxApp.vector_SpatialZone_begin)
    end = _swig_new_instance_method(_OpenLxApp.vector_SpatialZone_end)
    rbegin = _swig_new_instance_method(_OpenLxApp.vector_SpatialZone_rbegin)
    rend = _swig_new_instance_method(_OpenLxApp.vector_SpatialZone_rend)
    clear = _swig_new_instance_method(_OpenLxApp.vector_SpatialZone_clear)
    get_allocator = _swig_new_instance_method(_OpenLxApp.vector_SpatialZone_get_allocator)
    pop_back = _swig_new_instance_method(_OpenLxApp.vector_SpatialZone_pop_back)
    erase = _swig_new_instance_method(_OpenLxApp.vector_SpatialZone_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_SpatialZone self) -> vector_SpatialZone
        __init__(vector_SpatialZone self, vector_SpatialZone other) -> vector_SpatialZone
        __init__(vector_SpatialZone self, std::vector< std::shared_ptr< OpenLxApp::SpatialZone > >::size_type size) -> vector_SpatialZone
        __init__(vector_SpatialZone self, std::vector< std::shared_ptr< OpenLxApp::SpatialZone > >::size_type size, std::vector< std::shared_ptr< OpenLxApp::SpatialZone > >::value_type const & value) -> vector_SpatialZone
        """
        _OpenLxApp.vector_SpatialZone_swiginit(self, _OpenLxApp.new_vector_SpatialZone(*args))
    push_back = _swig_new_instance_method(_OpenLxApp.vector_SpatialZone_push_back)
    front = _swig_new_instance_method(_OpenLxApp.vector_SpatialZone_front)
    back = _swig_new_instance_method(_OpenLxApp.vector_SpatialZone_back)
    assign = _swig_new_instance_method(_OpenLxApp.vector_SpatialZone_assign)
    resize = _swig_new_instance_method(_OpenLxApp.vector_SpatialZone_resize)
    insert = _swig_new_instance_method(_OpenLxApp.vector_SpatialZone_insert)
    reserve = _swig_new_instance_method(_OpenLxApp.vector_SpatialZone_reserve)
    capacity = _swig_new_instance_method(_OpenLxApp.vector_SpatialZone_capacity)
    __swig_destroy__ = _OpenLxApp.delete_vector_SpatialZone

# Register vector_SpatialZone in _OpenLxApp:
_OpenLxApp.vector_SpatialZone_swigregister(vector_SpatialZone)
class vector_Sphere(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< OpenLxApp::Sphere > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_OpenLxApp.vector_Sphere_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_OpenLxApp.vector_Sphere___nonzero__)
    __bool__ = _swig_new_instance_method(_OpenLxApp.vector_Sphere___bool__)
    __len__ = _swig_new_instance_method(_OpenLxApp.vector_Sphere___len__)
    __getslice__ = _swig_new_instance_method(_OpenLxApp.vector_Sphere___getslice__)
    __setslice__ = _swig_new_instance_method(_OpenLxApp.vector_Sphere___setslice__)
    __delslice__ = _swig_new_instance_method(_OpenLxApp.vector_Sphere___delslice__)
    __delitem__ = _swig_new_instance_method(_OpenLxApp.vector_Sphere___delitem__)
    __getitem__ = _swig_new_instance_method(_OpenLxApp.vector_Sphere___getitem__)
    __setitem__ = _swig_new_instance_method(_OpenLxApp.vector_Sphere___setitem__)
    pop = _swig_new_instance_method(_OpenLxApp.vector_Sphere_pop)
    append = _swig_new_instance_method(_OpenLxApp.vector_Sphere_append)
    empty = _swig_new_instance_method(_OpenLxApp.vector_Sphere_empty)
    size = _swig_new_instance_method(_OpenLxApp.vector_Sphere_size)
    swap = _swig_new_instance_method(_OpenLxApp.vector_Sphere_swap)
    begin = _swig_new_instance_method(_OpenLxApp.vector_Sphere_begin)
    end = _swig_new_instance_method(_OpenLxApp.vector_Sphere_end)
    rbegin = _swig_new_instance_method(_OpenLxApp.vector_Sphere_rbegin)
    rend = _swig_new_instance_method(_OpenLxApp.vector_Sphere_rend)
    clear = _swig_new_instance_method(_OpenLxApp.vector_Sphere_clear)
    get_allocator = _swig_new_instance_method(_OpenLxApp.vector_Sphere_get_allocator)
    pop_back = _swig_new_instance_method(_OpenLxApp.vector_Sphere_pop_back)
    erase = _swig_new_instance_method(_OpenLxApp.vector_Sphere_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_Sphere self) -> vector_Sphere
        __init__(vector_Sphere self, vector_Sphere other) -> vector_Sphere
        __init__(vector_Sphere self, std::vector< std::shared_ptr< OpenLxApp::Sphere > >::size_type size) -> vector_Sphere
        __init__(vector_Sphere self, std::vector< std::shared_ptr< OpenLxApp::Sphere > >::size_type size, std::vector< std::shared_ptr< OpenLxApp::Sphere > >::value_type const & value) -> vector_Sphere
        """
        _OpenLxApp.vector_Sphere_swiginit(self, _OpenLxApp.new_vector_Sphere(*args))
    push_back = _swig_new_instance_method(_OpenLxApp.vector_Sphere_push_back)
    front = _swig_new_instance_method(_OpenLxApp.vector_Sphere_front)
    back = _swig_new_instance_method(_OpenLxApp.vector_Sphere_back)
    assign = _swig_new_instance_method(_OpenLxApp.vector_Sphere_assign)
    resize = _swig_new_instance_method(_OpenLxApp.vector_Sphere_resize)
    insert = _swig_new_instance_method(_OpenLxApp.vector_Sphere_insert)
    reserve = _swig_new_instance_method(_OpenLxApp.vector_Sphere_reserve)
    capacity = _swig_new_instance_method(_OpenLxApp.vector_Sphere_capacity)
    __swig_destroy__ = _OpenLxApp.delete_vector_Sphere

# Register vector_Sphere in _OpenLxApp:
_OpenLxApp.vector_Sphere_swigregister(vector_Sphere)
class vector_Stair(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< OpenLxApp::Stair > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_OpenLxApp.vector_Stair_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_OpenLxApp.vector_Stair___nonzero__)
    __bool__ = _swig_new_instance_method(_OpenLxApp.vector_Stair___bool__)
    __len__ = _swig_new_instance_method(_OpenLxApp.vector_Stair___len__)
    __getslice__ = _swig_new_instance_method(_OpenLxApp.vector_Stair___getslice__)
    __setslice__ = _swig_new_instance_method(_OpenLxApp.vector_Stair___setslice__)
    __delslice__ = _swig_new_instance_method(_OpenLxApp.vector_Stair___delslice__)
    __delitem__ = _swig_new_instance_method(_OpenLxApp.vector_Stair___delitem__)
    __getitem__ = _swig_new_instance_method(_OpenLxApp.vector_Stair___getitem__)
    __setitem__ = _swig_new_instance_method(_OpenLxApp.vector_Stair___setitem__)
    pop = _swig_new_instance_method(_OpenLxApp.vector_Stair_pop)
    append = _swig_new_instance_method(_OpenLxApp.vector_Stair_append)
    empty = _swig_new_instance_method(_OpenLxApp.vector_Stair_empty)
    size = _swig_new_instance_method(_OpenLxApp.vector_Stair_size)
    swap = _swig_new_instance_method(_OpenLxApp.vector_Stair_swap)
    begin = _swig_new_instance_method(_OpenLxApp.vector_Stair_begin)
    end = _swig_new_instance_method(_OpenLxApp.vector_Stair_end)
    rbegin = _swig_new_instance_method(_OpenLxApp.vector_Stair_rbegin)
    rend = _swig_new_instance_method(_OpenLxApp.vector_Stair_rend)
    clear = _swig_new_instance_method(_OpenLxApp.vector_Stair_clear)
    get_allocator = _swig_new_instance_method(_OpenLxApp.vector_Stair_get_allocator)
    pop_back = _swig_new_instance_method(_OpenLxApp.vector_Stair_pop_back)
    erase = _swig_new_instance_method(_OpenLxApp.vector_Stair_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_Stair self) -> vector_Stair
        __init__(vector_Stair self, vector_Stair other) -> vector_Stair
        __init__(vector_Stair self, std::vector< std::shared_ptr< OpenLxApp::Stair > >::size_type size) -> vector_Stair
        __init__(vector_Stair self, std::vector< std::shared_ptr< OpenLxApp::Stair > >::size_type size, std::vector< std::shared_ptr< OpenLxApp::Stair > >::value_type const & value) -> vector_Stair
        """
        _OpenLxApp.vector_Stair_swiginit(self, _OpenLxApp.new_vector_Stair(*args))
    push_back = _swig_new_instance_method(_OpenLxApp.vector_Stair_push_back)
    front = _swig_new_instance_method(_OpenLxApp.vector_Stair_front)
    back = _swig_new_instance_method(_OpenLxApp.vector_Stair_back)
    assign = _swig_new_instance_method(_OpenLxApp.vector_Stair_assign)
    resize = _swig_new_instance_method(_OpenLxApp.vector_Stair_resize)
    insert = _swig_new_instance_method(_OpenLxApp.vector_Stair_insert)
    reserve = _swig_new_instance_method(_OpenLxApp.vector_Stair_reserve)
    capacity = _swig_new_instance_method(_OpenLxApp.vector_Stair_capacity)
    __swig_destroy__ = _OpenLxApp.delete_vector_Stair

# Register vector_Stair in _OpenLxApp:
_OpenLxApp.vector_Stair_swigregister(vector_Stair)
class vector_StairFlight(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< OpenLxApp::StairFlight > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_OpenLxApp.vector_StairFlight_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_OpenLxApp.vector_StairFlight___nonzero__)
    __bool__ = _swig_new_instance_method(_OpenLxApp.vector_StairFlight___bool__)
    __len__ = _swig_new_instance_method(_OpenLxApp.vector_StairFlight___len__)
    __getslice__ = _swig_new_instance_method(_OpenLxApp.vector_StairFlight___getslice__)
    __setslice__ = _swig_new_instance_method(_OpenLxApp.vector_StairFlight___setslice__)
    __delslice__ = _swig_new_instance_method(_OpenLxApp.vector_StairFlight___delslice__)
    __delitem__ = _swig_new_instance_method(_OpenLxApp.vector_StairFlight___delitem__)
    __getitem__ = _swig_new_instance_method(_OpenLxApp.vector_StairFlight___getitem__)
    __setitem__ = _swig_new_instance_method(_OpenLxApp.vector_StairFlight___setitem__)
    pop = _swig_new_instance_method(_OpenLxApp.vector_StairFlight_pop)
    append = _swig_new_instance_method(_OpenLxApp.vector_StairFlight_append)
    empty = _swig_new_instance_method(_OpenLxApp.vector_StairFlight_empty)
    size = _swig_new_instance_method(_OpenLxApp.vector_StairFlight_size)
    swap = _swig_new_instance_method(_OpenLxApp.vector_StairFlight_swap)
    begin = _swig_new_instance_method(_OpenLxApp.vector_StairFlight_begin)
    end = _swig_new_instance_method(_OpenLxApp.vector_StairFlight_end)
    rbegin = _swig_new_instance_method(_OpenLxApp.vector_StairFlight_rbegin)
    rend = _swig_new_instance_method(_OpenLxApp.vector_StairFlight_rend)
    clear = _swig_new_instance_method(_OpenLxApp.vector_StairFlight_clear)
    get_allocator = _swig_new_instance_method(_OpenLxApp.vector_StairFlight_get_allocator)
    pop_back = _swig_new_instance_method(_OpenLxApp.vector_StairFlight_pop_back)
    erase = _swig_new_instance_method(_OpenLxApp.vector_StairFlight_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_StairFlight self) -> vector_StairFlight
        __init__(vector_StairFlight self, vector_StairFlight other) -> vector_StairFlight
        __init__(vector_StairFlight self, std::vector< std::shared_ptr< OpenLxApp::StairFlight > >::size_type size) -> vector_StairFlight
        __init__(vector_StairFlight self, std::vector< std::shared_ptr< OpenLxApp::StairFlight > >::size_type size, std::vector< std::shared_ptr< OpenLxApp::StairFlight > >::value_type const & value) -> vector_StairFlight
        """
        _OpenLxApp.vector_StairFlight_swiginit(self, _OpenLxApp.new_vector_StairFlight(*args))
    push_back = _swig_new_instance_method(_OpenLxApp.vector_StairFlight_push_back)
    front = _swig_new_instance_method(_OpenLxApp.vector_StairFlight_front)
    back = _swig_new_instance_method(_OpenLxApp.vector_StairFlight_back)
    assign = _swig_new_instance_method(_OpenLxApp.vector_StairFlight_assign)
    resize = _swig_new_instance_method(_OpenLxApp.vector_StairFlight_resize)
    insert = _swig_new_instance_method(_OpenLxApp.vector_StairFlight_insert)
    reserve = _swig_new_instance_method(_OpenLxApp.vector_StairFlight_reserve)
    capacity = _swig_new_instance_method(_OpenLxApp.vector_StairFlight_capacity)
    __swig_destroy__ = _OpenLxApp.delete_vector_StairFlight

# Register vector_StairFlight in _OpenLxApp:
_OpenLxApp.vector_StairFlight_swigregister(vector_StairFlight)
class vector_SubElement(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< OpenLxApp::SubElement > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_OpenLxApp.vector_SubElement_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_OpenLxApp.vector_SubElement___nonzero__)
    __bool__ = _swig_new_instance_method(_OpenLxApp.vector_SubElement___bool__)
    __len__ = _swig_new_instance_method(_OpenLxApp.vector_SubElement___len__)
    __getslice__ = _swig_new_instance_method(_OpenLxApp.vector_SubElement___getslice__)
    __setslice__ = _swig_new_instance_method(_OpenLxApp.vector_SubElement___setslice__)
    __delslice__ = _swig_new_instance_method(_OpenLxApp.vector_SubElement___delslice__)
    __delitem__ = _swig_new_instance_method(_OpenLxApp.vector_SubElement___delitem__)
    __getitem__ = _swig_new_instance_method(_OpenLxApp.vector_SubElement___getitem__)
    __setitem__ = _swig_new_instance_method(_OpenLxApp.vector_SubElement___setitem__)
    pop = _swig_new_instance_method(_OpenLxApp.vector_SubElement_pop)
    append = _swig_new_instance_method(_OpenLxApp.vector_SubElement_append)
    empty = _swig_new_instance_method(_OpenLxApp.vector_SubElement_empty)
    size = _swig_new_instance_method(_OpenLxApp.vector_SubElement_size)
    swap = _swig_new_instance_method(_OpenLxApp.vector_SubElement_swap)
    begin = _swig_new_instance_method(_OpenLxApp.vector_SubElement_begin)
    end = _swig_new_instance_method(_OpenLxApp.vector_SubElement_end)
    rbegin = _swig_new_instance_method(_OpenLxApp.vector_SubElement_rbegin)
    rend = _swig_new_instance_method(_OpenLxApp.vector_SubElement_rend)
    clear = _swig_new_instance_method(_OpenLxApp.vector_SubElement_clear)
    get_allocator = _swig_new_instance_method(_OpenLxApp.vector_SubElement_get_allocator)
    pop_back = _swig_new_instance_method(_OpenLxApp.vector_SubElement_pop_back)
    erase = _swig_new_instance_method(_OpenLxApp.vector_SubElement_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_SubElement self) -> vector_SubElement
        __init__(vector_SubElement self, vector_SubElement other) -> vector_SubElement
        __init__(vector_SubElement self, std::vector< std::shared_ptr< OpenLxApp::SubElement > >::size_type size) -> vector_SubElement
        __init__(vector_SubElement self, std::vector< std::shared_ptr< OpenLxApp::SubElement > >::size_type size, std::vector< std::shared_ptr< OpenLxApp::SubElement > >::value_type const & value) -> vector_SubElement
        """
        _OpenLxApp.vector_SubElement_swiginit(self, _OpenLxApp.new_vector_SubElement(*args))
    push_back = _swig_new_instance_method(_OpenLxApp.vector_SubElement_push_back)
    front = _swig_new_instance_method(_OpenLxApp.vector_SubElement_front)
    back = _swig_new_instance_method(_OpenLxApp.vector_SubElement_back)
    assign = _swig_new_instance_method(_OpenLxApp.vector_SubElement_assign)
    resize = _swig_new_instance_method(_OpenLxApp.vector_SubElement_resize)
    insert = _swig_new_instance_method(_OpenLxApp.vector_SubElement_insert)
    reserve = _swig_new_instance_method(_OpenLxApp.vector_SubElement_reserve)
    capacity = _swig_new_instance_method(_OpenLxApp.vector_SubElement_capacity)
    __swig_destroy__ = _OpenLxApp.delete_vector_SubElement

# Register vector_SubElement in _OpenLxApp:
_OpenLxApp.vector_SubElement_swigregister(vector_SubElement)
class vector_Surface(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< OpenLxApp::Surface > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_OpenLxApp.vector_Surface_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_OpenLxApp.vector_Surface___nonzero__)
    __bool__ = _swig_new_instance_method(_OpenLxApp.vector_Surface___bool__)
    __len__ = _swig_new_instance_method(_OpenLxApp.vector_Surface___len__)
    __getslice__ = _swig_new_instance_method(_OpenLxApp.vector_Surface___getslice__)
    __setslice__ = _swig_new_instance_method(_OpenLxApp.vector_Surface___setslice__)
    __delslice__ = _swig_new_instance_method(_OpenLxApp.vector_Surface___delslice__)
    __delitem__ = _swig_new_instance_method(_OpenLxApp.vector_Surface___delitem__)
    __getitem__ = _swig_new_instance_method(_OpenLxApp.vector_Surface___getitem__)
    __setitem__ = _swig_new_instance_method(_OpenLxApp.vector_Surface___setitem__)
    pop = _swig_new_instance_method(_OpenLxApp.vector_Surface_pop)
    append = _swig_new_instance_method(_OpenLxApp.vector_Surface_append)
    empty = _swig_new_instance_method(_OpenLxApp.vector_Surface_empty)
    size = _swig_new_instance_method(_OpenLxApp.vector_Surface_size)
    swap = _swig_new_instance_method(_OpenLxApp.vector_Surface_swap)
    begin = _swig_new_instance_method(_OpenLxApp.vector_Surface_begin)
    end = _swig_new_instance_method(_OpenLxApp.vector_Surface_end)
    rbegin = _swig_new_instance_method(_OpenLxApp.vector_Surface_rbegin)
    rend = _swig_new_instance_method(_OpenLxApp.vector_Surface_rend)
    clear = _swig_new_instance_method(_OpenLxApp.vector_Surface_clear)
    get_allocator = _swig_new_instance_method(_OpenLxApp.vector_Surface_get_allocator)
    pop_back = _swig_new_instance_method(_OpenLxApp.vector_Surface_pop_back)
    erase = _swig_new_instance_method(_OpenLxApp.vector_Surface_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_Surface self) -> vector_Surface
        __init__(vector_Surface self, vector_Surface other) -> vector_Surface
        __init__(vector_Surface self, std::vector< std::shared_ptr< OpenLxApp::Surface > >::size_type size) -> vector_Surface
        __init__(vector_Surface self, std::vector< std::shared_ptr< OpenLxApp::Surface > >::size_type size, std::vector< std::shared_ptr< OpenLxApp::Surface > >::value_type const & value) -> vector_Surface
        """
        _OpenLxApp.vector_Surface_swiginit(self, _OpenLxApp.new_vector_Surface(*args))
    push_back = _swig_new_instance_method(_OpenLxApp.vector_Surface_push_back)
    front = _swig_new_instance_method(_OpenLxApp.vector_Surface_front)
    back = _swig_new_instance_method(_OpenLxApp.vector_Surface_back)
    assign = _swig_new_instance_method(_OpenLxApp.vector_Surface_assign)
    resize = _swig_new_instance_method(_OpenLxApp.vector_Surface_resize)
    insert = _swig_new_instance_method(_OpenLxApp.vector_Surface_insert)
    reserve = _swig_new_instance_method(_OpenLxApp.vector_Surface_reserve)
    capacity = _swig_new_instance_method(_OpenLxApp.vector_Surface_capacity)
    __swig_destroy__ = _OpenLxApp.delete_vector_Surface

# Register vector_Surface in _OpenLxApp:
_OpenLxApp.vector_Surface_swigregister(vector_Surface)
class vector_SurfaceFeature(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< OpenLxApp::SurfaceFeature > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_OpenLxApp.vector_SurfaceFeature_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_OpenLxApp.vector_SurfaceFeature___nonzero__)
    __bool__ = _swig_new_instance_method(_OpenLxApp.vector_SurfaceFeature___bool__)
    __len__ = _swig_new_instance_method(_OpenLxApp.vector_SurfaceFeature___len__)
    __getslice__ = _swig_new_instance_method(_OpenLxApp.vector_SurfaceFeature___getslice__)
    __setslice__ = _swig_new_instance_method(_OpenLxApp.vector_SurfaceFeature___setslice__)
    __delslice__ = _swig_new_instance_method(_OpenLxApp.vector_SurfaceFeature___delslice__)
    __delitem__ = _swig_new_instance_method(_OpenLxApp.vector_SurfaceFeature___delitem__)
    __getitem__ = _swig_new_instance_method(_OpenLxApp.vector_SurfaceFeature___getitem__)
    __setitem__ = _swig_new_instance_method(_OpenLxApp.vector_SurfaceFeature___setitem__)
    pop = _swig_new_instance_method(_OpenLxApp.vector_SurfaceFeature_pop)
    append = _swig_new_instance_method(_OpenLxApp.vector_SurfaceFeature_append)
    empty = _swig_new_instance_method(_OpenLxApp.vector_SurfaceFeature_empty)
    size = _swig_new_instance_method(_OpenLxApp.vector_SurfaceFeature_size)
    swap = _swig_new_instance_method(_OpenLxApp.vector_SurfaceFeature_swap)
    begin = _swig_new_instance_method(_OpenLxApp.vector_SurfaceFeature_begin)
    end = _swig_new_instance_method(_OpenLxApp.vector_SurfaceFeature_end)
    rbegin = _swig_new_instance_method(_OpenLxApp.vector_SurfaceFeature_rbegin)
    rend = _swig_new_instance_method(_OpenLxApp.vector_SurfaceFeature_rend)
    clear = _swig_new_instance_method(_OpenLxApp.vector_SurfaceFeature_clear)
    get_allocator = _swig_new_instance_method(_OpenLxApp.vector_SurfaceFeature_get_allocator)
    pop_back = _swig_new_instance_method(_OpenLxApp.vector_SurfaceFeature_pop_back)
    erase = _swig_new_instance_method(_OpenLxApp.vector_SurfaceFeature_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_SurfaceFeature self) -> vector_SurfaceFeature
        __init__(vector_SurfaceFeature self, vector_SurfaceFeature other) -> vector_SurfaceFeature
        __init__(vector_SurfaceFeature self, std::vector< std::shared_ptr< OpenLxApp::SurfaceFeature > >::size_type size) -> vector_SurfaceFeature
        __init__(vector_SurfaceFeature self, std::vector< std::shared_ptr< OpenLxApp::SurfaceFeature > >::size_type size, std::vector< std::shared_ptr< OpenLxApp::SurfaceFeature > >::value_type const & value) -> vector_SurfaceFeature
        """
        _OpenLxApp.vector_SurfaceFeature_swiginit(self, _OpenLxApp.new_vector_SurfaceFeature(*args))
    push_back = _swig_new_instance_method(_OpenLxApp.vector_SurfaceFeature_push_back)
    front = _swig_new_instance_method(_OpenLxApp.vector_SurfaceFeature_front)
    back = _swig_new_instance_method(_OpenLxApp.vector_SurfaceFeature_back)
    assign = _swig_new_instance_method(_OpenLxApp.vector_SurfaceFeature_assign)
    resize = _swig_new_instance_method(_OpenLxApp.vector_SurfaceFeature_resize)
    insert = _swig_new_instance_method(_OpenLxApp.vector_SurfaceFeature_insert)
    reserve = _swig_new_instance_method(_OpenLxApp.vector_SurfaceFeature_reserve)
    capacity = _swig_new_instance_method(_OpenLxApp.vector_SurfaceFeature_capacity)
    __swig_destroy__ = _OpenLxApp.delete_vector_SurfaceFeature

# Register vector_SurfaceFeature in _OpenLxApp:
_OpenLxApp.vector_SurfaceFeature_swigregister(vector_SurfaceFeature)
class vector_SweptDiskSolid(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< OpenLxApp::SweptDiskSolid > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_OpenLxApp.vector_SweptDiskSolid_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_OpenLxApp.vector_SweptDiskSolid___nonzero__)
    __bool__ = _swig_new_instance_method(_OpenLxApp.vector_SweptDiskSolid___bool__)
    __len__ = _swig_new_instance_method(_OpenLxApp.vector_SweptDiskSolid___len__)
    __getslice__ = _swig_new_instance_method(_OpenLxApp.vector_SweptDiskSolid___getslice__)
    __setslice__ = _swig_new_instance_method(_OpenLxApp.vector_SweptDiskSolid___setslice__)
    __delslice__ = _swig_new_instance_method(_OpenLxApp.vector_SweptDiskSolid___delslice__)
    __delitem__ = _swig_new_instance_method(_OpenLxApp.vector_SweptDiskSolid___delitem__)
    __getitem__ = _swig_new_instance_method(_OpenLxApp.vector_SweptDiskSolid___getitem__)
    __setitem__ = _swig_new_instance_method(_OpenLxApp.vector_SweptDiskSolid___setitem__)
    pop = _swig_new_instance_method(_OpenLxApp.vector_SweptDiskSolid_pop)
    append = _swig_new_instance_method(_OpenLxApp.vector_SweptDiskSolid_append)
    empty = _swig_new_instance_method(_OpenLxApp.vector_SweptDiskSolid_empty)
    size = _swig_new_instance_method(_OpenLxApp.vector_SweptDiskSolid_size)
    swap = _swig_new_instance_method(_OpenLxApp.vector_SweptDiskSolid_swap)
    begin = _swig_new_instance_method(_OpenLxApp.vector_SweptDiskSolid_begin)
    end = _swig_new_instance_method(_OpenLxApp.vector_SweptDiskSolid_end)
    rbegin = _swig_new_instance_method(_OpenLxApp.vector_SweptDiskSolid_rbegin)
    rend = _swig_new_instance_method(_OpenLxApp.vector_SweptDiskSolid_rend)
    clear = _swig_new_instance_method(_OpenLxApp.vector_SweptDiskSolid_clear)
    get_allocator = _swig_new_instance_method(_OpenLxApp.vector_SweptDiskSolid_get_allocator)
    pop_back = _swig_new_instance_method(_OpenLxApp.vector_SweptDiskSolid_pop_back)
    erase = _swig_new_instance_method(_OpenLxApp.vector_SweptDiskSolid_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_SweptDiskSolid self) -> vector_SweptDiskSolid
        __init__(vector_SweptDiskSolid self, vector_SweptDiskSolid other) -> vector_SweptDiskSolid
        __init__(vector_SweptDiskSolid self, std::vector< std::shared_ptr< OpenLxApp::SweptDiskSolid > >::size_type size) -> vector_SweptDiskSolid
        __init__(vector_SweptDiskSolid self, std::vector< std::shared_ptr< OpenLxApp::SweptDiskSolid > >::size_type size, std::vector< std::shared_ptr< OpenLxApp::SweptDiskSolid > >::value_type const & value) -> vector_SweptDiskSolid
        """
        _OpenLxApp.vector_SweptDiskSolid_swiginit(self, _OpenLxApp.new_vector_SweptDiskSolid(*args))
    push_back = _swig_new_instance_method(_OpenLxApp.vector_SweptDiskSolid_push_back)
    front = _swig_new_instance_method(_OpenLxApp.vector_SweptDiskSolid_front)
    back = _swig_new_instance_method(_OpenLxApp.vector_SweptDiskSolid_back)
    assign = _swig_new_instance_method(_OpenLxApp.vector_SweptDiskSolid_assign)
    resize = _swig_new_instance_method(_OpenLxApp.vector_SweptDiskSolid_resize)
    insert = _swig_new_instance_method(_OpenLxApp.vector_SweptDiskSolid_insert)
    reserve = _swig_new_instance_method(_OpenLxApp.vector_SweptDiskSolid_reserve)
    capacity = _swig_new_instance_method(_OpenLxApp.vector_SweptDiskSolid_capacity)
    __swig_destroy__ = _OpenLxApp.delete_vector_SweptDiskSolid

# Register vector_SweptDiskSolid in _OpenLxApp:
_OpenLxApp.vector_SweptDiskSolid_swigregister(vector_SweptDiskSolid)
class vector_TrackElement(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< OpenLxApp::TrackElement > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_OpenLxApp.vector_TrackElement_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_OpenLxApp.vector_TrackElement___nonzero__)
    __bool__ = _swig_new_instance_method(_OpenLxApp.vector_TrackElement___bool__)
    __len__ = _swig_new_instance_method(_OpenLxApp.vector_TrackElement___len__)
    __getslice__ = _swig_new_instance_method(_OpenLxApp.vector_TrackElement___getslice__)
    __setslice__ = _swig_new_instance_method(_OpenLxApp.vector_TrackElement___setslice__)
    __delslice__ = _swig_new_instance_method(_OpenLxApp.vector_TrackElement___delslice__)
    __delitem__ = _swig_new_instance_method(_OpenLxApp.vector_TrackElement___delitem__)
    __getitem__ = _swig_new_instance_method(_OpenLxApp.vector_TrackElement___getitem__)
    __setitem__ = _swig_new_instance_method(_OpenLxApp.vector_TrackElement___setitem__)
    pop = _swig_new_instance_method(_OpenLxApp.vector_TrackElement_pop)
    append = _swig_new_instance_method(_OpenLxApp.vector_TrackElement_append)
    empty = _swig_new_instance_method(_OpenLxApp.vector_TrackElement_empty)
    size = _swig_new_instance_method(_OpenLxApp.vector_TrackElement_size)
    swap = _swig_new_instance_method(_OpenLxApp.vector_TrackElement_swap)
    begin = _swig_new_instance_method(_OpenLxApp.vector_TrackElement_begin)
    end = _swig_new_instance_method(_OpenLxApp.vector_TrackElement_end)
    rbegin = _swig_new_instance_method(_OpenLxApp.vector_TrackElement_rbegin)
    rend = _swig_new_instance_method(_OpenLxApp.vector_TrackElement_rend)
    clear = _swig_new_instance_method(_OpenLxApp.vector_TrackElement_clear)
    get_allocator = _swig_new_instance_method(_OpenLxApp.vector_TrackElement_get_allocator)
    pop_back = _swig_new_instance_method(_OpenLxApp.vector_TrackElement_pop_back)
    erase = _swig_new_instance_method(_OpenLxApp.vector_TrackElement_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_TrackElement self) -> vector_TrackElement
        __init__(vector_TrackElement self, vector_TrackElement other) -> vector_TrackElement
        __init__(vector_TrackElement self, std::vector< std::shared_ptr< OpenLxApp::TrackElement > >::size_type size) -> vector_TrackElement
        __init__(vector_TrackElement self, std::vector< std::shared_ptr< OpenLxApp::TrackElement > >::size_type size, std::vector< std::shared_ptr< OpenLxApp::TrackElement > >::value_type const & value) -> vector_TrackElement
        """
        _OpenLxApp.vector_TrackElement_swiginit(self, _OpenLxApp.new_vector_TrackElement(*args))
    push_back = _swig_new_instance_method(_OpenLxApp.vector_TrackElement_push_back)
    front = _swig_new_instance_method(_OpenLxApp.vector_TrackElement_front)
    back = _swig_new_instance_method(_OpenLxApp.vector_TrackElement_back)
    assign = _swig_new_instance_method(_OpenLxApp.vector_TrackElement_assign)
    resize = _swig_new_instance_method(_OpenLxApp.vector_TrackElement_resize)
    insert = _swig_new_instance_method(_OpenLxApp.vector_TrackElement_insert)
    reserve = _swig_new_instance_method(_OpenLxApp.vector_TrackElement_reserve)
    capacity = _swig_new_instance_method(_OpenLxApp.vector_TrackElement_capacity)
    __swig_destroy__ = _OpenLxApp.delete_vector_TrackElement

# Register vector_TrackElement in _OpenLxApp:
_OpenLxApp.vector_TrackElement_swigregister(vector_TrackElement)
class vector_TrimmedCurve(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< OpenLxApp::TrimmedCurve > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_OpenLxApp.vector_TrimmedCurve_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_OpenLxApp.vector_TrimmedCurve___nonzero__)
    __bool__ = _swig_new_instance_method(_OpenLxApp.vector_TrimmedCurve___bool__)
    __len__ = _swig_new_instance_method(_OpenLxApp.vector_TrimmedCurve___len__)
    __getslice__ = _swig_new_instance_method(_OpenLxApp.vector_TrimmedCurve___getslice__)
    __setslice__ = _swig_new_instance_method(_OpenLxApp.vector_TrimmedCurve___setslice__)
    __delslice__ = _swig_new_instance_method(_OpenLxApp.vector_TrimmedCurve___delslice__)
    __delitem__ = _swig_new_instance_method(_OpenLxApp.vector_TrimmedCurve___delitem__)
    __getitem__ = _swig_new_instance_method(_OpenLxApp.vector_TrimmedCurve___getitem__)
    __setitem__ = _swig_new_instance_method(_OpenLxApp.vector_TrimmedCurve___setitem__)
    pop = _swig_new_instance_method(_OpenLxApp.vector_TrimmedCurve_pop)
    append = _swig_new_instance_method(_OpenLxApp.vector_TrimmedCurve_append)
    empty = _swig_new_instance_method(_OpenLxApp.vector_TrimmedCurve_empty)
    size = _swig_new_instance_method(_OpenLxApp.vector_TrimmedCurve_size)
    swap = _swig_new_instance_method(_OpenLxApp.vector_TrimmedCurve_swap)
    begin = _swig_new_instance_method(_OpenLxApp.vector_TrimmedCurve_begin)
    end = _swig_new_instance_method(_OpenLxApp.vector_TrimmedCurve_end)
    rbegin = _swig_new_instance_method(_OpenLxApp.vector_TrimmedCurve_rbegin)
    rend = _swig_new_instance_method(_OpenLxApp.vector_TrimmedCurve_rend)
    clear = _swig_new_instance_method(_OpenLxApp.vector_TrimmedCurve_clear)
    get_allocator = _swig_new_instance_method(_OpenLxApp.vector_TrimmedCurve_get_allocator)
    pop_back = _swig_new_instance_method(_OpenLxApp.vector_TrimmedCurve_pop_back)
    erase = _swig_new_instance_method(_OpenLxApp.vector_TrimmedCurve_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_TrimmedCurve self) -> vector_TrimmedCurve
        __init__(vector_TrimmedCurve self, vector_TrimmedCurve other) -> vector_TrimmedCurve
        __init__(vector_TrimmedCurve self, std::vector< std::shared_ptr< OpenLxApp::TrimmedCurve > >::size_type size) -> vector_TrimmedCurve
        __init__(vector_TrimmedCurve self, std::vector< std::shared_ptr< OpenLxApp::TrimmedCurve > >::size_type size, std::vector< std::shared_ptr< OpenLxApp::TrimmedCurve > >::value_type const & value) -> vector_TrimmedCurve
        """
        _OpenLxApp.vector_TrimmedCurve_swiginit(self, _OpenLxApp.new_vector_TrimmedCurve(*args))
    push_back = _swig_new_instance_method(_OpenLxApp.vector_TrimmedCurve_push_back)
    front = _swig_new_instance_method(_OpenLxApp.vector_TrimmedCurve_front)
    back = _swig_new_instance_method(_OpenLxApp.vector_TrimmedCurve_back)
    assign = _swig_new_instance_method(_OpenLxApp.vector_TrimmedCurve_assign)
    resize = _swig_new_instance_method(_OpenLxApp.vector_TrimmedCurve_resize)
    insert = _swig_new_instance_method(_OpenLxApp.vector_TrimmedCurve_insert)
    reserve = _swig_new_instance_method(_OpenLxApp.vector_TrimmedCurve_reserve)
    capacity = _swig_new_instance_method(_OpenLxApp.vector_TrimmedCurve_capacity)
    __swig_destroy__ = _OpenLxApp.delete_vector_TrimmedCurve

# Register vector_TrimmedCurve in _OpenLxApp:
_OpenLxApp.vector_TrimmedCurve_swigregister(vector_TrimmedCurve)
class vector_Valve(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< OpenLxApp::Valve > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_OpenLxApp.vector_Valve_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_OpenLxApp.vector_Valve___nonzero__)
    __bool__ = _swig_new_instance_method(_OpenLxApp.vector_Valve___bool__)
    __len__ = _swig_new_instance_method(_OpenLxApp.vector_Valve___len__)
    __getslice__ = _swig_new_instance_method(_OpenLxApp.vector_Valve___getslice__)
    __setslice__ = _swig_new_instance_method(_OpenLxApp.vector_Valve___setslice__)
    __delslice__ = _swig_new_instance_method(_OpenLxApp.vector_Valve___delslice__)
    __delitem__ = _swig_new_instance_method(_OpenLxApp.vector_Valve___delitem__)
    __getitem__ = _swig_new_instance_method(_OpenLxApp.vector_Valve___getitem__)
    __setitem__ = _swig_new_instance_method(_OpenLxApp.vector_Valve___setitem__)
    pop = _swig_new_instance_method(_OpenLxApp.vector_Valve_pop)
    append = _swig_new_instance_method(_OpenLxApp.vector_Valve_append)
    empty = _swig_new_instance_method(_OpenLxApp.vector_Valve_empty)
    size = _swig_new_instance_method(_OpenLxApp.vector_Valve_size)
    swap = _swig_new_instance_method(_OpenLxApp.vector_Valve_swap)
    begin = _swig_new_instance_method(_OpenLxApp.vector_Valve_begin)
    end = _swig_new_instance_method(_OpenLxApp.vector_Valve_end)
    rbegin = _swig_new_instance_method(_OpenLxApp.vector_Valve_rbegin)
    rend = _swig_new_instance_method(_OpenLxApp.vector_Valve_rend)
    clear = _swig_new_instance_method(_OpenLxApp.vector_Valve_clear)
    get_allocator = _swig_new_instance_method(_OpenLxApp.vector_Valve_get_allocator)
    pop_back = _swig_new_instance_method(_OpenLxApp.vector_Valve_pop_back)
    erase = _swig_new_instance_method(_OpenLxApp.vector_Valve_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_Valve self) -> vector_Valve
        __init__(vector_Valve self, vector_Valve other) -> vector_Valve
        __init__(vector_Valve self, std::vector< std::shared_ptr< OpenLxApp::Valve > >::size_type size) -> vector_Valve
        __init__(vector_Valve self, std::vector< std::shared_ptr< OpenLxApp::Valve > >::size_type size, std::vector< std::shared_ptr< OpenLxApp::Valve > >::value_type const & value) -> vector_Valve
        """
        _OpenLxApp.vector_Valve_swiginit(self, _OpenLxApp.new_vector_Valve(*args))
    push_back = _swig_new_instance_method(_OpenLxApp.vector_Valve_push_back)
    front = _swig_new_instance_method(_OpenLxApp.vector_Valve_front)
    back = _swig_new_instance_method(_OpenLxApp.vector_Valve_back)
    assign = _swig_new_instance_method(_OpenLxApp.vector_Valve_assign)
    resize = _swig_new_instance_method(_OpenLxApp.vector_Valve_resize)
    insert = _swig_new_instance_method(_OpenLxApp.vector_Valve_insert)
    reserve = _swig_new_instance_method(_OpenLxApp.vector_Valve_reserve)
    capacity = _swig_new_instance_method(_OpenLxApp.vector_Valve_capacity)
    __swig_destroy__ = _OpenLxApp.delete_vector_Valve

# Register vector_Valve in _OpenLxApp:
_OpenLxApp.vector_Valve_swigregister(vector_Valve)
class vector_Wall(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< OpenLxApp::Wall > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_OpenLxApp.vector_Wall_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_OpenLxApp.vector_Wall___nonzero__)
    __bool__ = _swig_new_instance_method(_OpenLxApp.vector_Wall___bool__)
    __len__ = _swig_new_instance_method(_OpenLxApp.vector_Wall___len__)
    __getslice__ = _swig_new_instance_method(_OpenLxApp.vector_Wall___getslice__)
    __setslice__ = _swig_new_instance_method(_OpenLxApp.vector_Wall___setslice__)
    __delslice__ = _swig_new_instance_method(_OpenLxApp.vector_Wall___delslice__)
    __delitem__ = _swig_new_instance_method(_OpenLxApp.vector_Wall___delitem__)
    __getitem__ = _swig_new_instance_method(_OpenLxApp.vector_Wall___getitem__)
    __setitem__ = _swig_new_instance_method(_OpenLxApp.vector_Wall___setitem__)
    pop = _swig_new_instance_method(_OpenLxApp.vector_Wall_pop)
    append = _swig_new_instance_method(_OpenLxApp.vector_Wall_append)
    empty = _swig_new_instance_method(_OpenLxApp.vector_Wall_empty)
    size = _swig_new_instance_method(_OpenLxApp.vector_Wall_size)
    swap = _swig_new_instance_method(_OpenLxApp.vector_Wall_swap)
    begin = _swig_new_instance_method(_OpenLxApp.vector_Wall_begin)
    end = _swig_new_instance_method(_OpenLxApp.vector_Wall_end)
    rbegin = _swig_new_instance_method(_OpenLxApp.vector_Wall_rbegin)
    rend = _swig_new_instance_method(_OpenLxApp.vector_Wall_rend)
    clear = _swig_new_instance_method(_OpenLxApp.vector_Wall_clear)
    get_allocator = _swig_new_instance_method(_OpenLxApp.vector_Wall_get_allocator)
    pop_back = _swig_new_instance_method(_OpenLxApp.vector_Wall_pop_back)
    erase = _swig_new_instance_method(_OpenLxApp.vector_Wall_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_Wall self) -> vector_Wall
        __init__(vector_Wall self, vector_Wall other) -> vector_Wall
        __init__(vector_Wall self, std::vector< std::shared_ptr< OpenLxApp::Wall > >::size_type size) -> vector_Wall
        __init__(vector_Wall self, std::vector< std::shared_ptr< OpenLxApp::Wall > >::size_type size, std::vector< std::shared_ptr< OpenLxApp::Wall > >::value_type const & value) -> vector_Wall
        """
        _OpenLxApp.vector_Wall_swiginit(self, _OpenLxApp.new_vector_Wall(*args))
    push_back = _swig_new_instance_method(_OpenLxApp.vector_Wall_push_back)
    front = _swig_new_instance_method(_OpenLxApp.vector_Wall_front)
    back = _swig_new_instance_method(_OpenLxApp.vector_Wall_back)
    assign = _swig_new_instance_method(_OpenLxApp.vector_Wall_assign)
    resize = _swig_new_instance_method(_OpenLxApp.vector_Wall_resize)
    insert = _swig_new_instance_method(_OpenLxApp.vector_Wall_insert)
    reserve = _swig_new_instance_method(_OpenLxApp.vector_Wall_reserve)
    capacity = _swig_new_instance_method(_OpenLxApp.vector_Wall_capacity)
    __swig_destroy__ = _OpenLxApp.delete_vector_Wall

# Register vector_Wall in _OpenLxApp:
_OpenLxApp.vector_Wall_swigregister(vector_Wall)
class vector_WallElementedCase(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< OpenLxApp::WallElementedCase > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_OpenLxApp.vector_WallElementedCase_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_OpenLxApp.vector_WallElementedCase___nonzero__)
    __bool__ = _swig_new_instance_method(_OpenLxApp.vector_WallElementedCase___bool__)
    __len__ = _swig_new_instance_method(_OpenLxApp.vector_WallElementedCase___len__)
    __getslice__ = _swig_new_instance_method(_OpenLxApp.vector_WallElementedCase___getslice__)
    __setslice__ = _swig_new_instance_method(_OpenLxApp.vector_WallElementedCase___setslice__)
    __delslice__ = _swig_new_instance_method(_OpenLxApp.vector_WallElementedCase___delslice__)
    __delitem__ = _swig_new_instance_method(_OpenLxApp.vector_WallElementedCase___delitem__)
    __getitem__ = _swig_new_instance_method(_OpenLxApp.vector_WallElementedCase___getitem__)
    __setitem__ = _swig_new_instance_method(_OpenLxApp.vector_WallElementedCase___setitem__)
    pop = _swig_new_instance_method(_OpenLxApp.vector_WallElementedCase_pop)
    append = _swig_new_instance_method(_OpenLxApp.vector_WallElementedCase_append)
    empty = _swig_new_instance_method(_OpenLxApp.vector_WallElementedCase_empty)
    size = _swig_new_instance_method(_OpenLxApp.vector_WallElementedCase_size)
    swap = _swig_new_instance_method(_OpenLxApp.vector_WallElementedCase_swap)
    begin = _swig_new_instance_method(_OpenLxApp.vector_WallElementedCase_begin)
    end = _swig_new_instance_method(_OpenLxApp.vector_WallElementedCase_end)
    rbegin = _swig_new_instance_method(_OpenLxApp.vector_WallElementedCase_rbegin)
    rend = _swig_new_instance_method(_OpenLxApp.vector_WallElementedCase_rend)
    clear = _swig_new_instance_method(_OpenLxApp.vector_WallElementedCase_clear)
    get_allocator = _swig_new_instance_method(_OpenLxApp.vector_WallElementedCase_get_allocator)
    pop_back = _swig_new_instance_method(_OpenLxApp.vector_WallElementedCase_pop_back)
    erase = _swig_new_instance_method(_OpenLxApp.vector_WallElementedCase_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_WallElementedCase self) -> vector_WallElementedCase
        __init__(vector_WallElementedCase self, vector_WallElementedCase other) -> vector_WallElementedCase
        __init__(vector_WallElementedCase self, std::vector< std::shared_ptr< OpenLxApp::WallElementedCase > >::size_type size) -> vector_WallElementedCase
        __init__(vector_WallElementedCase self, std::vector< std::shared_ptr< OpenLxApp::WallElementedCase > >::size_type size, std::vector< std::shared_ptr< OpenLxApp::WallElementedCase > >::value_type const & value) -> vector_WallElementedCase
        """
        _OpenLxApp.vector_WallElementedCase_swiginit(self, _OpenLxApp.new_vector_WallElementedCase(*args))
    push_back = _swig_new_instance_method(_OpenLxApp.vector_WallElementedCase_push_back)
    front = _swig_new_instance_method(_OpenLxApp.vector_WallElementedCase_front)
    back = _swig_new_instance_method(_OpenLxApp.vector_WallElementedCase_back)
    assign = _swig_new_instance_method(_OpenLxApp.vector_WallElementedCase_assign)
    resize = _swig_new_instance_method(_OpenLxApp.vector_WallElementedCase_resize)
    insert = _swig_new_instance_method(_OpenLxApp.vector_WallElementedCase_insert)
    reserve = _swig_new_instance_method(_OpenLxApp.vector_WallElementedCase_reserve)
    capacity = _swig_new_instance_method(_OpenLxApp.vector_WallElementedCase_capacity)
    __swig_destroy__ = _OpenLxApp.delete_vector_WallElementedCase

# Register vector_WallElementedCase in _OpenLxApp:
_OpenLxApp.vector_WallElementedCase_swigregister(vector_WallElementedCase)
class vector_WallStandardCase(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< OpenLxApp::WallStandardCase > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_OpenLxApp.vector_WallStandardCase_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_OpenLxApp.vector_WallStandardCase___nonzero__)
    __bool__ = _swig_new_instance_method(_OpenLxApp.vector_WallStandardCase___bool__)
    __len__ = _swig_new_instance_method(_OpenLxApp.vector_WallStandardCase___len__)
    __getslice__ = _swig_new_instance_method(_OpenLxApp.vector_WallStandardCase___getslice__)
    __setslice__ = _swig_new_instance_method(_OpenLxApp.vector_WallStandardCase___setslice__)
    __delslice__ = _swig_new_instance_method(_OpenLxApp.vector_WallStandardCase___delslice__)
    __delitem__ = _swig_new_instance_method(_OpenLxApp.vector_WallStandardCase___delitem__)
    __getitem__ = _swig_new_instance_method(_OpenLxApp.vector_WallStandardCase___getitem__)
    __setitem__ = _swig_new_instance_method(_OpenLxApp.vector_WallStandardCase___setitem__)
    pop = _swig_new_instance_method(_OpenLxApp.vector_WallStandardCase_pop)
    append = _swig_new_instance_method(_OpenLxApp.vector_WallStandardCase_append)
    empty = _swig_new_instance_method(_OpenLxApp.vector_WallStandardCase_empty)
    size = _swig_new_instance_method(_OpenLxApp.vector_WallStandardCase_size)
    swap = _swig_new_instance_method(_OpenLxApp.vector_WallStandardCase_swap)
    begin = _swig_new_instance_method(_OpenLxApp.vector_WallStandardCase_begin)
    end = _swig_new_instance_method(_OpenLxApp.vector_WallStandardCase_end)
    rbegin = _swig_new_instance_method(_OpenLxApp.vector_WallStandardCase_rbegin)
    rend = _swig_new_instance_method(_OpenLxApp.vector_WallStandardCase_rend)
    clear = _swig_new_instance_method(_OpenLxApp.vector_WallStandardCase_clear)
    get_allocator = _swig_new_instance_method(_OpenLxApp.vector_WallStandardCase_get_allocator)
    pop_back = _swig_new_instance_method(_OpenLxApp.vector_WallStandardCase_pop_back)
    erase = _swig_new_instance_method(_OpenLxApp.vector_WallStandardCase_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_WallStandardCase self) -> vector_WallStandardCase
        __init__(vector_WallStandardCase self, vector_WallStandardCase other) -> vector_WallStandardCase
        __init__(vector_WallStandardCase self, std::vector< std::shared_ptr< OpenLxApp::WallStandardCase > >::size_type size) -> vector_WallStandardCase
        __init__(vector_WallStandardCase self, std::vector< std::shared_ptr< OpenLxApp::WallStandardCase > >::size_type size, std::vector< std::shared_ptr< OpenLxApp::WallStandardCase > >::value_type const & value) -> vector_WallStandardCase
        """
        _OpenLxApp.vector_WallStandardCase_swiginit(self, _OpenLxApp.new_vector_WallStandardCase(*args))
    push_back = _swig_new_instance_method(_OpenLxApp.vector_WallStandardCase_push_back)
    front = _swig_new_instance_method(_OpenLxApp.vector_WallStandardCase_front)
    back = _swig_new_instance_method(_OpenLxApp.vector_WallStandardCase_back)
    assign = _swig_new_instance_method(_OpenLxApp.vector_WallStandardCase_assign)
    resize = _swig_new_instance_method(_OpenLxApp.vector_WallStandardCase_resize)
    insert = _swig_new_instance_method(_OpenLxApp.vector_WallStandardCase_insert)
    reserve = _swig_new_instance_method(_OpenLxApp.vector_WallStandardCase_reserve)
    capacity = _swig_new_instance_method(_OpenLxApp.vector_WallStandardCase_capacity)
    __swig_destroy__ = _OpenLxApp.delete_vector_WallStandardCase

# Register vector_WallStandardCase in _OpenLxApp:
_OpenLxApp.vector_WallStandardCase_swigregister(vector_WallStandardCase)
class vector_Window(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< OpenLxApp::Window > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_OpenLxApp.vector_Window_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_OpenLxApp.vector_Window___nonzero__)
    __bool__ = _swig_new_instance_method(_OpenLxApp.vector_Window___bool__)
    __len__ = _swig_new_instance_method(_OpenLxApp.vector_Window___len__)
    __getslice__ = _swig_new_instance_method(_OpenLxApp.vector_Window___getslice__)
    __setslice__ = _swig_new_instance_method(_OpenLxApp.vector_Window___setslice__)
    __delslice__ = _swig_new_instance_method(_OpenLxApp.vector_Window___delslice__)
    __delitem__ = _swig_new_instance_method(_OpenLxApp.vector_Window___delitem__)
    __getitem__ = _swig_new_instance_method(_OpenLxApp.vector_Window___getitem__)
    __setitem__ = _swig_new_instance_method(_OpenLxApp.vector_Window___setitem__)
    pop = _swig_new_instance_method(_OpenLxApp.vector_Window_pop)
    append = _swig_new_instance_method(_OpenLxApp.vector_Window_append)
    empty = _swig_new_instance_method(_OpenLxApp.vector_Window_empty)
    size = _swig_new_instance_method(_OpenLxApp.vector_Window_size)
    swap = _swig_new_instance_method(_OpenLxApp.vector_Window_swap)
    begin = _swig_new_instance_method(_OpenLxApp.vector_Window_begin)
    end = _swig_new_instance_method(_OpenLxApp.vector_Window_end)
    rbegin = _swig_new_instance_method(_OpenLxApp.vector_Window_rbegin)
    rend = _swig_new_instance_method(_OpenLxApp.vector_Window_rend)
    clear = _swig_new_instance_method(_OpenLxApp.vector_Window_clear)
    get_allocator = _swig_new_instance_method(_OpenLxApp.vector_Window_get_allocator)
    pop_back = _swig_new_instance_method(_OpenLxApp.vector_Window_pop_back)
    erase = _swig_new_instance_method(_OpenLxApp.vector_Window_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_Window self) -> vector_Window
        __init__(vector_Window self, vector_Window other) -> vector_Window
        __init__(vector_Window self, std::vector< std::shared_ptr< OpenLxApp::Window > >::size_type size) -> vector_Window
        __init__(vector_Window self, std::vector< std::shared_ptr< OpenLxApp::Window > >::size_type size, std::vector< std::shared_ptr< OpenLxApp::Window > >::value_type const & value) -> vector_Window
        """
        _OpenLxApp.vector_Window_swiginit(self, _OpenLxApp.new_vector_Window(*args))
    push_back = _swig_new_instance_method(_OpenLxApp.vector_Window_push_back)
    front = _swig_new_instance_method(_OpenLxApp.vector_Window_front)
    back = _swig_new_instance_method(_OpenLxApp.vector_Window_back)
    assign = _swig_new_instance_method(_OpenLxApp.vector_Window_assign)
    resize = _swig_new_instance_method(_OpenLxApp.vector_Window_resize)
    insert = _swig_new_instance_method(_OpenLxApp.vector_Window_insert)
    reserve = _swig_new_instance_method(_OpenLxApp.vector_Window_reserve)
    capacity = _swig_new_instance_method(_OpenLxApp.vector_Window_capacity)
    __swig_destroy__ = _OpenLxApp.delete_vector_Window

# Register vector_Window in _OpenLxApp:
_OpenLxApp.vector_Window_swigregister(vector_Window)
class vector_WindowStandardCase(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< OpenLxApp::WindowStandardCase > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_OpenLxApp.vector_WindowStandardCase_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_OpenLxApp.vector_WindowStandardCase___nonzero__)
    __bool__ = _swig_new_instance_method(_OpenLxApp.vector_WindowStandardCase___bool__)
    __len__ = _swig_new_instance_method(_OpenLxApp.vector_WindowStandardCase___len__)
    __getslice__ = _swig_new_instance_method(_OpenLxApp.vector_WindowStandardCase___getslice__)
    __setslice__ = _swig_new_instance_method(_OpenLxApp.vector_WindowStandardCase___setslice__)
    __delslice__ = _swig_new_instance_method(_OpenLxApp.vector_WindowStandardCase___delslice__)
    __delitem__ = _swig_new_instance_method(_OpenLxApp.vector_WindowStandardCase___delitem__)
    __getitem__ = _swig_new_instance_method(_OpenLxApp.vector_WindowStandardCase___getitem__)
    __setitem__ = _swig_new_instance_method(_OpenLxApp.vector_WindowStandardCase___setitem__)
    pop = _swig_new_instance_method(_OpenLxApp.vector_WindowStandardCase_pop)
    append = _swig_new_instance_method(_OpenLxApp.vector_WindowStandardCase_append)
    empty = _swig_new_instance_method(_OpenLxApp.vector_WindowStandardCase_empty)
    size = _swig_new_instance_method(_OpenLxApp.vector_WindowStandardCase_size)
    swap = _swig_new_instance_method(_OpenLxApp.vector_WindowStandardCase_swap)
    begin = _swig_new_instance_method(_OpenLxApp.vector_WindowStandardCase_begin)
    end = _swig_new_instance_method(_OpenLxApp.vector_WindowStandardCase_end)
    rbegin = _swig_new_instance_method(_OpenLxApp.vector_WindowStandardCase_rbegin)
    rend = _swig_new_instance_method(_OpenLxApp.vector_WindowStandardCase_rend)
    clear = _swig_new_instance_method(_OpenLxApp.vector_WindowStandardCase_clear)
    get_allocator = _swig_new_instance_method(_OpenLxApp.vector_WindowStandardCase_get_allocator)
    pop_back = _swig_new_instance_method(_OpenLxApp.vector_WindowStandardCase_pop_back)
    erase = _swig_new_instance_method(_OpenLxApp.vector_WindowStandardCase_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_WindowStandardCase self) -> vector_WindowStandardCase
        __init__(vector_WindowStandardCase self, vector_WindowStandardCase other) -> vector_WindowStandardCase
        __init__(vector_WindowStandardCase self, std::vector< std::shared_ptr< OpenLxApp::WindowStandardCase > >::size_type size) -> vector_WindowStandardCase
        __init__(vector_WindowStandardCase self, std::vector< std::shared_ptr< OpenLxApp::WindowStandardCase > >::size_type size, std::vector< std::shared_ptr< OpenLxApp::WindowStandardCase > >::value_type const & value) -> vector_WindowStandardCase
        """
        _OpenLxApp.vector_WindowStandardCase_swiginit(self, _OpenLxApp.new_vector_WindowStandardCase(*args))
    push_back = _swig_new_instance_method(_OpenLxApp.vector_WindowStandardCase_push_back)
    front = _swig_new_instance_method(_OpenLxApp.vector_WindowStandardCase_front)
    back = _swig_new_instance_method(_OpenLxApp.vector_WindowStandardCase_back)
    assign = _swig_new_instance_method(_OpenLxApp.vector_WindowStandardCase_assign)
    resize = _swig_new_instance_method(_OpenLxApp.vector_WindowStandardCase_resize)
    insert = _swig_new_instance_method(_OpenLxApp.vector_WindowStandardCase_insert)
    reserve = _swig_new_instance_method(_OpenLxApp.vector_WindowStandardCase_reserve)
    capacity = _swig_new_instance_method(_OpenLxApp.vector_WindowStandardCase_capacity)
    __swig_destroy__ = _OpenLxApp.delete_vector_WindowStandardCase

# Register vector_WindowStandardCase in _OpenLxApp:
_OpenLxApp.vector_WindowStandardCase_swigregister(vector_WindowStandardCase)

