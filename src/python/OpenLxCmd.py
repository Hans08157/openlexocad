# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _OpenLxCmd
else:
    import _OpenLxCmd

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _OpenLxCmd.SWIG_PyInstanceMethod_New
_swig_new_static_method = _OpenLxCmd.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

class SwigPyIterator(object):
    r"""Proxy of C++ swig::SwigPyIterator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _OpenLxCmd.delete_SwigPyIterator
    value = _swig_new_instance_method(_OpenLxCmd.SwigPyIterator_value)
    incr = _swig_new_instance_method(_OpenLxCmd.SwigPyIterator_incr)
    decr = _swig_new_instance_method(_OpenLxCmd.SwigPyIterator_decr)
    distance = _swig_new_instance_method(_OpenLxCmd.SwigPyIterator_distance)
    equal = _swig_new_instance_method(_OpenLxCmd.SwigPyIterator_equal)
    copy = _swig_new_instance_method(_OpenLxCmd.SwigPyIterator_copy)
    next = _swig_new_instance_method(_OpenLxCmd.SwigPyIterator_next)
    __next__ = _swig_new_instance_method(_OpenLxCmd.SwigPyIterator___next__)
    previous = _swig_new_instance_method(_OpenLxCmd.SwigPyIterator_previous)
    advance = _swig_new_instance_method(_OpenLxCmd.SwigPyIterator_advance)
    __eq__ = _swig_new_instance_method(_OpenLxCmd.SwigPyIterator___eq__)
    __ne__ = _swig_new_instance_method(_OpenLxCmd.SwigPyIterator___ne__)
    __iadd__ = _swig_new_instance_method(_OpenLxCmd.SwigPyIterator___iadd__)
    __isub__ = _swig_new_instance_method(_OpenLxCmd.SwigPyIterator___isub__)
    __add__ = _swig_new_instance_method(_OpenLxCmd.SwigPyIterator___add__)
    __sub__ = _swig_new_instance_method(_OpenLxCmd.SwigPyIterator___sub__)
    def __iter__(self):
        return self

# Register SwigPyIterator in _OpenLxCmd:
_OpenLxCmd.SwigPyIterator_swigregister(SwigPyIterator)
SHARED_PTR_DISOWN = _OpenLxCmd.SHARED_PTR_DISOWN

import OpenLxUI
import Gui
import Core
import Base
import Geom
import Topo
import Draw
import OpenLxApp
import LxIfcBase
class OpenLxCommand(Core.Command):
    r"""Proxy of C++ OpenLxCmd::OpenLxCommand class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    redo = _swig_new_instance_method(_OpenLxCmd.OpenLxCommand_redo)
    undo = _swig_new_instance_method(_OpenLxCmd.OpenLxCommand_undo)
    getDescription = _swig_new_instance_method(_OpenLxCmd.OpenLxCommand_getDescription)
    getDoRecomputeInRedo = _swig_new_instance_method(_OpenLxCmd.OpenLxCommand_getDoRecomputeInRedo)
    getDoRecomputeInUndo = _swig_new_instance_method(_OpenLxCmd.OpenLxCommand_getDoRecomputeInUndo)
    getParameter = _swig_new_instance_method(_OpenLxCmd.OpenLxCommand_getParameter)
    getParameters = _swig_new_instance_method(_OpenLxCmd.OpenLxCommand_getParameters)
    isDone = _swig_new_instance_method(_OpenLxCmd.OpenLxCommand_isDone)
    isInSilentMode = _swig_new_instance_method(_OpenLxCmd.OpenLxCommand_isInSilentMode)
    setDescription = _swig_new_instance_method(_OpenLxCmd.OpenLxCommand_setDescription)
    setDone = _swig_new_instance_method(_OpenLxCmd.OpenLxCommand_setDone)
    setDoRecomputeInRedo = _swig_new_instance_method(_OpenLxCmd.OpenLxCommand_setDoRecomputeInRedo)
    setDoRecomputeInUndo = _swig_new_instance_method(_OpenLxCmd.OpenLxCommand_setDoRecomputeInUndo)
    setParameter = _swig_new_instance_method(_OpenLxCmd.OpenLxCommand_setParameter)
    setSilentMode = _swig_new_instance_method(_OpenLxCmd.OpenLxCommand_setSilentMode)

    def __init__(self):
        r"""__init__(OpenLxCommand self) -> OpenLxCommand"""
        if self.__class__ == OpenLxCommand:
            _self = None
        else:
            _self = self
        _OpenLxCmd.OpenLxCommand_swiginit(self, _OpenLxCmd.new_OpenLxCommand(_self, ))
    def __disown__(self):
        self.this.disown()
        _OpenLxCmd.disown_OpenLxCommand(self)
        return weakref.proxy(self)

# Register OpenLxCommand in _OpenLxCmd:
_OpenLxCmd.OpenLxCommand_swigregister(OpenLxCommand)
class CmdAddCanalizationAssembly(Core.Command):
    r"""Proxy of C++ OpenLxCmd::CmdAddCanalizationAssembly class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(CmdAddCanalizationAssembly self) -> CmdAddCanalizationAssembly"""
        if self.__class__ == CmdAddCanalizationAssembly:
            _self = None
        else:
            _self = self
        _OpenLxCmd.CmdAddCanalizationAssembly_swiginit(self, _OpenLxCmd.new_CmdAddCanalizationAssembly(_self, ))
    __swig_destroy__ = _OpenLxCmd.delete_CmdAddCanalizationAssembly
    getElement = _swig_new_instance_method(_OpenLxCmd.CmdAddCanalizationAssembly_getElement)
    redo = _swig_new_instance_method(_OpenLxCmd.CmdAddCanalizationAssembly_redo)
    undo = _swig_new_instance_method(_OpenLxCmd.CmdAddCanalizationAssembly_undo)
    def __disown__(self):
        self.this.disown()
        _OpenLxCmd.disown_CmdAddCanalizationAssembly(self)
        return weakref.proxy(self)

# Register CmdAddCanalizationAssembly in _OpenLxCmd:
_OpenLxCmd.CmdAddCanalizationAssembly_swigregister(CmdAddCanalizationAssembly)
class CmdAddCentroid(Core.Command):
    r"""Proxy of C++ OpenLxCmd::CmdAddCentroid class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(CmdAddCentroid self) -> CmdAddCentroid
        __init__(CmdAddCentroid self, std::shared_ptr< OpenLxApp::Element > curveElement) -> CmdAddCentroid
        __init__(CmdAddCentroid self, vector_Element aElems) -> CmdAddCentroid
        """
        if self.__class__ == CmdAddCentroid:
            _self = None
        else:
            _self = self
        _OpenLxCmd.CmdAddCentroid_swiginit(self, _OpenLxCmd.new_CmdAddCentroid(_self, *args))
    __swig_destroy__ = _OpenLxCmd.delete_CmdAddCentroid
    redo = _swig_new_instance_method(_OpenLxCmd.CmdAddCentroid_redo)
    undo = _swig_new_instance_method(_OpenLxCmd.CmdAddCentroid_undo)
    def __disown__(self):
        self.this.disown()
        _OpenLxCmd.disown_CmdAddCentroid(self)
        return weakref.proxy(self)

# Register CmdAddCentroid in _OpenLxCmd:
_OpenLxCmd.CmdAddCentroid_swigregister(CmdAddCentroid)
class CmdAddConeReferent(Core.Command):
    r"""Proxy of C++ OpenLxCmd::CmdAddConeReferent class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(CmdAddConeReferent self) -> CmdAddConeReferent"""
        if self.__class__ == CmdAddConeReferent:
            _self = None
        else:
            _self = self
        _OpenLxCmd.CmdAddConeReferent_swiginit(self, _OpenLxCmd.new_CmdAddConeReferent(_self, ))
    __swig_destroy__ = _OpenLxCmd.delete_CmdAddConeReferent
    getElement = _swig_new_instance_method(_OpenLxCmd.CmdAddConeReferent_getElement)
    redo = _swig_new_instance_method(_OpenLxCmd.CmdAddConeReferent_redo)
    undo = _swig_new_instance_method(_OpenLxCmd.CmdAddConeReferent_undo)
    def __disown__(self):
        self.this.disown()
        _OpenLxCmd.disown_CmdAddConeReferent(self)
        return weakref.proxy(self)

# Register CmdAddConeReferent in _OpenLxCmd:
_OpenLxCmd.CmdAddConeReferent_swigregister(CmdAddConeReferent)
class CmdAddDistributionChamberElement(Core.Command):
    r"""Proxy of C++ OpenLxCmd::CmdAddDistributionChamberElement class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(CmdAddDistributionChamberElement self) -> CmdAddDistributionChamberElement"""
        if self.__class__ == CmdAddDistributionChamberElement:
            _self = None
        else:
            _self = self
        _OpenLxCmd.CmdAddDistributionChamberElement_swiginit(self, _OpenLxCmd.new_CmdAddDistributionChamberElement(_self, ))
    __swig_destroy__ = _OpenLxCmd.delete_CmdAddDistributionChamberElement
    getElement = _swig_new_instance_method(_OpenLxCmd.CmdAddDistributionChamberElement_getElement)
    redo = _swig_new_instance_method(_OpenLxCmd.CmdAddDistributionChamberElement_redo)
    undo = _swig_new_instance_method(_OpenLxCmd.CmdAddDistributionChamberElement_undo)
    def __disown__(self):
        self.this.disown()
        _OpenLxCmd.disown_CmdAddDistributionChamberElement(self)
        return weakref.proxy(self)

# Register CmdAddDistributionChamberElement in _OpenLxCmd:
_OpenLxCmd.CmdAddDistributionChamberElement_swigregister(CmdAddDistributionChamberElement)
class CmdAddFormwork(Core.Command):
    r"""Proxy of C++ OpenLxCmd::CmdAddFormwork class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(CmdAddFormwork self) -> CmdAddFormwork"""
        if self.__class__ == CmdAddFormwork:
            _self = None
        else:
            _self = self
        _OpenLxCmd.CmdAddFormwork_swiginit(self, _OpenLxCmd.new_CmdAddFormwork(_self, ))
    __swig_destroy__ = _OpenLxCmd.delete_CmdAddFormwork
    redo = _swig_new_instance_method(_OpenLxCmd.CmdAddFormwork_redo)
    undo = _swig_new_instance_method(_OpenLxCmd.CmdAddFormwork_undo)
    def __disown__(self):
        self.this.disown()
        _OpenLxCmd.disown_CmdAddFormwork(self)
        return weakref.proxy(self)

# Register CmdAddFormwork in _OpenLxCmd:
_OpenLxCmd.CmdAddFormwork_swigregister(CmdAddFormwork)
class CmdAddBeamStandardCaseAxis(Core.Command):
    r"""Proxy of C++ OpenLxCmd::CmdAddBeamStandardCaseAxis class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(CmdAddBeamStandardCaseAxis self) -> CmdAddBeamStandardCaseAxis"""
        if self.__class__ == CmdAddBeamStandardCaseAxis:
            _self = None
        else:
            _self = self
        _OpenLxCmd.CmdAddBeamStandardCaseAxis_swiginit(self, _OpenLxCmd.new_CmdAddBeamStandardCaseAxis(_self, ))
    __swig_destroy__ = _OpenLxCmd.delete_CmdAddBeamStandardCaseAxis
    redo = _swig_new_instance_method(_OpenLxCmd.CmdAddBeamStandardCaseAxis_redo)
    undo = _swig_new_instance_method(_OpenLxCmd.CmdAddBeamStandardCaseAxis_undo)
    def __disown__(self):
        self.this.disown()
        _OpenLxCmd.disown_CmdAddBeamStandardCaseAxis(self)
        return weakref.proxy(self)

# Register CmdAddBeamStandardCaseAxis in _OpenLxCmd:
_OpenLxCmd.CmdAddBeamStandardCaseAxis_swigregister(CmdAddBeamStandardCaseAxis)
class CmdAddColumnStandardCaseAxis(Core.Command):
    r"""Proxy of C++ OpenLxCmd::CmdAddColumnStandardCaseAxis class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(CmdAddColumnStandardCaseAxis self) -> CmdAddColumnStandardCaseAxis"""
        if self.__class__ == CmdAddColumnStandardCaseAxis:
            _self = None
        else:
            _self = self
        _OpenLxCmd.CmdAddColumnStandardCaseAxis_swiginit(self, _OpenLxCmd.new_CmdAddColumnStandardCaseAxis(_self, ))
    __swig_destroy__ = _OpenLxCmd.delete_CmdAddColumnStandardCaseAxis
    redo = _swig_new_instance_method(_OpenLxCmd.CmdAddColumnStandardCaseAxis_redo)
    undo = _swig_new_instance_method(_OpenLxCmd.CmdAddColumnStandardCaseAxis_undo)
    def __disown__(self):
        self.this.disown()
        _OpenLxCmd.disown_CmdAddColumnStandardCaseAxis(self)
        return weakref.proxy(self)

# Register CmdAddColumnStandardCaseAxis in _OpenLxCmd:
_OpenLxCmd.CmdAddColumnStandardCaseAxis_swigregister(CmdAddColumnStandardCaseAxis)
class CmdAddMemberStandardCaseAxis(Core.Command):
    r"""Proxy of C++ OpenLxCmd::CmdAddMemberStandardCaseAxis class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(CmdAddMemberStandardCaseAxis self) -> CmdAddMemberStandardCaseAxis"""
        if self.__class__ == CmdAddMemberStandardCaseAxis:
            _self = None
        else:
            _self = self
        _OpenLxCmd.CmdAddMemberStandardCaseAxis_swiginit(self, _OpenLxCmd.new_CmdAddMemberStandardCaseAxis(_self, ))
    __swig_destroy__ = _OpenLxCmd.delete_CmdAddMemberStandardCaseAxis
    redo = _swig_new_instance_method(_OpenLxCmd.CmdAddMemberStandardCaseAxis_redo)
    undo = _swig_new_instance_method(_OpenLxCmd.CmdAddMemberStandardCaseAxis_undo)
    def __disown__(self):
        self.this.disown()
        _OpenLxCmd.disown_CmdAddMemberStandardCaseAxis(self)
        return weakref.proxy(self)

# Register CmdAddMemberStandardCaseAxis in _OpenLxCmd:
_OpenLxCmd.CmdAddMemberStandardCaseAxis_swigregister(CmdAddMemberStandardCaseAxis)
class CmdAddIsoParamLines(Core.Command):
    r"""Proxy of C++ OpenLxCmd::CmdAddIsoParamLines class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(CmdAddIsoParamLines self) -> CmdAddIsoParamLines
        __init__(CmdAddIsoParamLines self, std::shared_ptr< OpenLxApp::Element > aElem) -> CmdAddIsoParamLines
        __init__(CmdAddIsoParamLines self, vector_Element aElems) -> CmdAddIsoParamLines
        __init__(CmdAddIsoParamLines self, std::shared_ptr< OpenLxApp::Element > aElem, size_t u, size_t v) -> CmdAddIsoParamLines
        __init__(CmdAddIsoParamLines self, vector_Element aElems, size_t u, size_t v) -> CmdAddIsoParamLines
        """
        if self.__class__ == CmdAddIsoParamLines:
            _self = None
        else:
            _self = self
        _OpenLxCmd.CmdAddIsoParamLines_swiginit(self, _OpenLxCmd.new_CmdAddIsoParamLines(_self, *args))
    __swig_destroy__ = _OpenLxCmd.delete_CmdAddIsoParamLines
    redo = _swig_new_instance_method(_OpenLxCmd.CmdAddIsoParamLines_redo)
    undo = _swig_new_instance_method(_OpenLxCmd.CmdAddIsoParamLines_undo)
    getIsoParamLineElements = _swig_new_instance_method(_OpenLxCmd.CmdAddIsoParamLines_getIsoParamLineElements)
    def __disown__(self):
        self.this.disown()
        _OpenLxCmd.disown_CmdAddIsoParamLines(self)
        return weakref.proxy(self)

# Register CmdAddIsoParamLines in _OpenLxCmd:
_OpenLxCmd.CmdAddIsoParamLines_swigregister(CmdAddIsoParamLines)
class CmdAddLoftNURBS(Core.Command):
    r"""Proxy of C++ OpenLxCmd::CmdAddLoftNURBS class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ResultingShape_OPEN = _OpenLxCmd.CmdAddLoftNURBS_ResultingShape_OPEN
    
    ResultingShape_CLOSED = _OpenLxCmd.CmdAddLoftNURBS_ResultingShape_CLOSED
    

    def __init__(self, *args):
        r"""
        __init__(CmdAddLoftNURBS self) -> CmdAddLoftNURBS
        __init__(CmdAddLoftNURBS self, vector_Element uElements, vector_Element vElements, OpenLxCmd::CmdAddLoftNURBS::ResultingShape aResultingShapeEnum) -> CmdAddLoftNURBS
        """
        if self.__class__ == CmdAddLoftNURBS:
            _self = None
        else:
            _self = self
        _OpenLxCmd.CmdAddLoftNURBS_swiginit(self, _OpenLxCmd.new_CmdAddLoftNURBS(_self, *args))
    __swig_destroy__ = _OpenLxCmd.delete_CmdAddLoftNURBS
    redo = _swig_new_instance_method(_OpenLxCmd.CmdAddLoftNURBS_redo)
    undo = _swig_new_instance_method(_OpenLxCmd.CmdAddLoftNURBS_undo)
    getLoftedElement = _swig_new_instance_method(_OpenLxCmd.CmdAddLoftNURBS_getLoftedElement)
    def __disown__(self):
        self.this.disown()
        _OpenLxCmd.disown_CmdAddLoftNURBS(self)
        return weakref.proxy(self)

# Register CmdAddLoftNURBS in _OpenLxCmd:
_OpenLxCmd.CmdAddLoftNURBS_swigregister(CmdAddLoftNURBS)
class CmdAddPropertySet(Core.Command):
    r"""Proxy of C++ OpenLxCmd::CmdAddPropertySet class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(CmdAddPropertySet self) -> CmdAddPropertySet
        __init__(CmdAddPropertySet self, std::string const & propertySetName, std::string const & propertyName) -> CmdAddPropertySet
        __init__(CmdAddPropertySet self, std::string const & propertySetName, std::string const & propertyName, std::shared_ptr< OpenLxApp::Element > aElement) -> CmdAddPropertySet
        __init__(CmdAddPropertySet self, std::string const & propertySetName, std::string const & propertyName, vector_Element aElements) -> CmdAddPropertySet
        __init__(CmdAddPropertySet self, std::string const & propertySetName, vector_CString propertyNames) -> CmdAddPropertySet
        __init__(CmdAddPropertySet self, std::string const & propertySetName, vector_CString propertyNames, std::shared_ptr< OpenLxApp::Element > aElement) -> CmdAddPropertySet
        __init__(CmdAddPropertySet self, std::string const & propertySetName, vector_CString propertyNames, vector_Element aElements) -> CmdAddPropertySet
        """
        if self.__class__ == CmdAddPropertySet:
            _self = None
        else:
            _self = self
        _OpenLxCmd.CmdAddPropertySet_swiginit(self, _OpenLxCmd.new_CmdAddPropertySet(_self, *args))
    __swig_destroy__ = _OpenLxCmd.delete_CmdAddPropertySet
    redo = _swig_new_instance_method(_OpenLxCmd.CmdAddPropertySet_redo)
    undo = _swig_new_instance_method(_OpenLxCmd.CmdAddPropertySet_undo)
    def __disown__(self):
        self.this.disown()
        _OpenLxCmd.disown_CmdAddPropertySet(self)
        return weakref.proxy(self)

# Register CmdAddPropertySet in _OpenLxCmd:
_OpenLxCmd.CmdAddPropertySet_swigregister(CmdAddPropertySet)
class CmdAddSkinGuidesNURBS(Core.Command):
    r"""Proxy of C++ OpenLxCmd::CmdAddSkinGuidesNURBS class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ResultingShape_AUTO = _OpenLxCmd.CmdAddSkinGuidesNURBS_ResultingShape_AUTO
    
    ResultingShape_OPEN = _OpenLxCmd.CmdAddSkinGuidesNURBS_ResultingShape_OPEN
    
    ResultingShape_CLOSED = _OpenLxCmd.CmdAddSkinGuidesNURBS_ResultingShape_CLOSED
    

    def __init__(self, *args):
        r"""
        __init__(CmdAddSkinGuidesNURBS self) -> CmdAddSkinGuidesNURBS
        __init__(CmdAddSkinGuidesNURBS self, OpenLxCmd::CmdAddSkinGuidesNURBS::ResultingShape const & aResultingShapeEnum) -> CmdAddSkinGuidesNURBS
        __init__(CmdAddSkinGuidesNURBS self, vector_Element aElements, vector_Element aGuideElements, OpenLxCmd::CmdAddSkinGuidesNURBS::ResultingShape const & aResultingShapeEnum=AUTO) -> CmdAddSkinGuidesNURBS
        __init__(CmdAddSkinGuidesNURBS self, vector_ConstShape aShapes, vector_ConstShape aGuideShapes, OpenLxCmd::CmdAddSkinGuidesNURBS::ResultingShape const & aResultingShapeEnum=AUTO) -> CmdAddSkinGuidesNURBS
        """
        if self.__class__ == CmdAddSkinGuidesNURBS:
            _self = None
        else:
            _self = self
        _OpenLxCmd.CmdAddSkinGuidesNURBS_swiginit(self, _OpenLxCmd.new_CmdAddSkinGuidesNURBS(_self, *args))
    __swig_destroy__ = _OpenLxCmd.delete_CmdAddSkinGuidesNURBS
    redo = _swig_new_instance_method(_OpenLxCmd.CmdAddSkinGuidesNURBS_redo)
    undo = _swig_new_instance_method(_OpenLxCmd.CmdAddSkinGuidesNURBS_undo)
    getElement = _swig_new_instance_method(_OpenLxCmd.CmdAddSkinGuidesNURBS_getElement)
    def __disown__(self):
        self.this.disown()
        _OpenLxCmd.disown_CmdAddSkinGuidesNURBS(self)
        return weakref.proxy(self)

# Register CmdAddSkinGuidesNURBS in _OpenLxCmd:
_OpenLxCmd.CmdAddSkinGuidesNURBS_swigregister(CmdAddSkinGuidesNURBS)
class CmdAddSkinLinearNURBS(Core.Command):
    r"""Proxy of C++ OpenLxCmd::CmdAddSkinLinearNURBS class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ResultingShape_AUTO = _OpenLxCmd.CmdAddSkinLinearNURBS_ResultingShape_AUTO
    
    ResultingShape_OPEN = _OpenLxCmd.CmdAddSkinLinearNURBS_ResultingShape_OPEN
    
    ResultingShape_CLOSED = _OpenLxCmd.CmdAddSkinLinearNURBS_ResultingShape_CLOSED
    

    def __init__(self, *args):
        r"""
        __init__(CmdAddSkinLinearNURBS self) -> CmdAddSkinLinearNURBS
        __init__(CmdAddSkinLinearNURBS self, OpenLxCmd::CmdAddSkinLinearNURBS::ResultingShape const & aResultingShapeEnum) -> CmdAddSkinLinearNURBS
        __init__(CmdAddSkinLinearNURBS self, vector_Element aElements, OpenLxCmd::CmdAddSkinLinearNURBS::ResultingShape const & aResultingShapeEnum=AUTO) -> CmdAddSkinLinearNURBS
        __init__(CmdAddSkinLinearNURBS self, vector_ConstShape aElements, OpenLxCmd::CmdAddSkinLinearNURBS::ResultingShape const & aResultingShapeEnum=AUTO) -> CmdAddSkinLinearNURBS
        """
        if self.__class__ == CmdAddSkinLinearNURBS:
            _self = None
        else:
            _self = self
        _OpenLxCmd.CmdAddSkinLinearNURBS_swiginit(self, _OpenLxCmd.new_CmdAddSkinLinearNURBS(_self, *args))
    __swig_destroy__ = _OpenLxCmd.delete_CmdAddSkinLinearNURBS
    redo = _swig_new_instance_method(_OpenLxCmd.CmdAddSkinLinearNURBS_redo)
    undo = _swig_new_instance_method(_OpenLxCmd.CmdAddSkinLinearNURBS_undo)
    getElement = _swig_new_instance_method(_OpenLxCmd.CmdAddSkinLinearNURBS_getElement)
    def __disown__(self):
        self.this.disown()
        _OpenLxCmd.disown_CmdAddSkinLinearNURBS(self)
        return weakref.proxy(self)

# Register CmdAddSkinLinearNURBS in _OpenLxCmd:
_OpenLxCmd.CmdAddSkinLinearNURBS_swigregister(CmdAddSkinLinearNURBS)
class CmdAddSpatialStructureElement(OpenLxCommand):
    r"""Proxy of C++ OpenLxCmd::CmdAddSpatialStructureElement class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(CmdAddSpatialStructureElement self) -> CmdAddSpatialStructureElement
        __init__(CmdAddSpatialStructureElement self, Type type, std::string const & name, std::shared_ptr< OpenLxApp::SpatialStructureElement > parent=0) -> CmdAddSpatialStructureElement
        """
        if self.__class__ == CmdAddSpatialStructureElement:
            _self = None
        else:
            _self = self
        _OpenLxCmd.CmdAddSpatialStructureElement_swiginit(self, _OpenLxCmd.new_CmdAddSpatialStructureElement(_self, *args))
    getSpatialStructure = _swig_new_instance_method(_OpenLxCmd.CmdAddSpatialStructureElement_getSpatialStructure)
    __swig_destroy__ = _OpenLxCmd.delete_CmdAddSpatialStructureElement
    def __disown__(self):
        self.this.disown()
        _OpenLxCmd.disown_CmdAddSpatialStructureElement(self)
        return weakref.proxy(self)

# Register CmdAddSpatialStructureElement in _OpenLxCmd:
_OpenLxCmd.CmdAddSpatialStructureElement_swigregister(CmdAddSpatialStructureElement)
class CmdAddSpatialStructure_Building(CmdAddSpatialStructureElement):
    r"""Proxy of C++ OpenLxCmd::CmdAddSpatialStructure_Building class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(CmdAddSpatialStructure_Building self) -> CmdAddSpatialStructure_Building
        __init__(CmdAddSpatialStructure_Building self, std::string const & name, std::shared_ptr< OpenLxApp::SpatialStructureElement > parent=0) -> CmdAddSpatialStructure_Building
        """
        if self.__class__ == CmdAddSpatialStructure_Building:
            _self = None
        else:
            _self = self
        _OpenLxCmd.CmdAddSpatialStructure_Building_swiginit(self, _OpenLxCmd.new_CmdAddSpatialStructure_Building(_self, *args))
    __swig_destroy__ = _OpenLxCmd.delete_CmdAddSpatialStructure_Building
    def __disown__(self):
        self.this.disown()
        _OpenLxCmd.disown_CmdAddSpatialStructure_Building(self)
        return weakref.proxy(self)

# Register CmdAddSpatialStructure_Building in _OpenLxCmd:
_OpenLxCmd.CmdAddSpatialStructure_Building_swigregister(CmdAddSpatialStructure_Building)
class CmdAddSpatialStructure_Storey(CmdAddSpatialStructureElement):
    r"""Proxy of C++ OpenLxCmd::CmdAddSpatialStructure_Storey class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(CmdAddSpatialStructure_Storey self) -> CmdAddSpatialStructure_Storey
        __init__(CmdAddSpatialStructure_Storey self, std::string const & name, std::shared_ptr< OpenLxApp::SpatialStructureElement > parent=0) -> CmdAddSpatialStructure_Storey
        """
        if self.__class__ == CmdAddSpatialStructure_Storey:
            _self = None
        else:
            _self = self
        _OpenLxCmd.CmdAddSpatialStructure_Storey_swiginit(self, _OpenLxCmd.new_CmdAddSpatialStructure_Storey(_self, *args))
    __swig_destroy__ = _OpenLxCmd.delete_CmdAddSpatialStructure_Storey
    def __disown__(self):
        self.this.disown()
        _OpenLxCmd.disown_CmdAddSpatialStructure_Storey(self)
        return weakref.proxy(self)

# Register CmdAddSpatialStructure_Storey in _OpenLxCmd:
_OpenLxCmd.CmdAddSpatialStructure_Storey_swigregister(CmdAddSpatialStructure_Storey)
class CmdAddStructuralAction(Core.Command):
    r"""Proxy of C++ OpenLxCmd::CmdAddStructuralAction class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(CmdAddStructuralAction self) -> CmdAddStructuralAction
        __init__(CmdAddStructuralAction self, Command command) -> CmdAddStructuralAction
        """
        if self.__class__ == CmdAddStructuralAction:
            _self = None
        else:
            _self = self
        _OpenLxCmd.CmdAddStructuralAction_swiginit(self, _OpenLxCmd.new_CmdAddStructuralAction(_self, *args))
    __swig_destroy__ = _OpenLxCmd.delete_CmdAddStructuralAction
    redo = _swig_new_instance_method(_OpenLxCmd.CmdAddStructuralAction_redo)
    undo = _swig_new_instance_method(_OpenLxCmd.CmdAddStructuralAction_undo)
    getNewElement = _swig_new_instance_method(_OpenLxCmd.CmdAddStructuralAction_getNewElement)
    def __disown__(self):
        self.this.disown()
        _OpenLxCmd.disown_CmdAddStructuralAction(self)
        return weakref.proxy(self)

# Register CmdAddStructuralAction in _OpenLxCmd:
_OpenLxCmd.CmdAddStructuralAction_swigregister(CmdAddStructuralAction)
class CmdAddStructuralCurveAction(CmdAddStructuralAction):
    r"""Proxy of C++ OpenLxCmd::CmdAddStructuralCurveAction class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(CmdAddStructuralCurveAction self) -> CmdAddStructuralCurveAction
        __init__(CmdAddStructuralCurveAction self, std::shared_ptr< OpenLxApp::Element > relatingElement) -> CmdAddStructuralCurveAction
        __init__(CmdAddStructuralCurveAction self, std::shared_ptr< OpenLxApp::Element > relatingElement, vector_Pnt pickedPoints) -> CmdAddStructuralCurveAction
        """
        if self.__class__ == CmdAddStructuralCurveAction:
            _self = None
        else:
            _self = self
        _OpenLxCmd.CmdAddStructuralCurveAction_swiginit(self, _OpenLxCmd.new_CmdAddStructuralCurveAction(_self, *args))
    __swig_destroy__ = _OpenLxCmd.delete_CmdAddStructuralCurveAction
    def __disown__(self):
        self.this.disown()
        _OpenLxCmd.disown_CmdAddStructuralCurveAction(self)
        return weakref.proxy(self)

# Register CmdAddStructuralCurveAction in _OpenLxCmd:
_OpenLxCmd.CmdAddStructuralCurveAction_swigregister(CmdAddStructuralCurveAction)
class CmdAddStructuralPlanarAction(CmdAddStructuralAction):
    r"""Proxy of C++ OpenLxCmd::CmdAddStructuralPlanarAction class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(CmdAddStructuralPlanarAction self) -> CmdAddStructuralPlanarAction
        __init__(CmdAddStructuralPlanarAction self, std::shared_ptr< OpenLxApp::Element > relatingElement) -> CmdAddStructuralPlanarAction
        __init__(CmdAddStructuralPlanarAction self, std::shared_ptr< OpenLxApp::Element > relatingElement, vector_Pnt pickedPoints) -> CmdAddStructuralPlanarAction
        """
        if self.__class__ == CmdAddStructuralPlanarAction:
            _self = None
        else:
            _self = self
        _OpenLxCmd.CmdAddStructuralPlanarAction_swiginit(self, _OpenLxCmd.new_CmdAddStructuralPlanarAction(_self, *args))
    __swig_destroy__ = _OpenLxCmd.delete_CmdAddStructuralPlanarAction
    def __disown__(self):
        self.this.disown()
        _OpenLxCmd.disown_CmdAddStructuralPlanarAction(self)
        return weakref.proxy(self)

# Register CmdAddStructuralPlanarAction in _OpenLxCmd:
_OpenLxCmd.CmdAddStructuralPlanarAction_swigregister(CmdAddStructuralPlanarAction)
class CmdAddStructuralPointAction(CmdAddStructuralAction):
    r"""Proxy of C++ OpenLxCmd::CmdAddStructuralPointAction class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(CmdAddStructuralPointAction self) -> CmdAddStructuralPointAction
        __init__(CmdAddStructuralPointAction self, std::shared_ptr< OpenLxApp::Element > relatingElement) -> CmdAddStructuralPointAction
        __init__(CmdAddStructuralPointAction self, std::shared_ptr< OpenLxApp::Element > relatingElement, Pnt pickedPoint) -> CmdAddStructuralPointAction
        """
        if self.__class__ == CmdAddStructuralPointAction:
            _self = None
        else:
            _self = self
        _OpenLxCmd.CmdAddStructuralPointAction_swiginit(self, _OpenLxCmd.new_CmdAddStructuralPointAction(_self, *args))
    __swig_destroy__ = _OpenLxCmd.delete_CmdAddStructuralPointAction
    def __disown__(self):
        self.this.disown()
        _OpenLxCmd.disown_CmdAddStructuralPointAction(self)
        return weakref.proxy(self)

# Register CmdAddStructuralPointAction in _OpenLxCmd:
_OpenLxCmd.CmdAddStructuralPointAction_swigregister(CmdAddStructuralPointAction)
class CmdAddStructuralPointConnection(Core.Command):
    r"""Proxy of C++ OpenLxCmd::CmdAddStructuralPointConnection class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(CmdAddStructuralPointConnection self) -> CmdAddStructuralPointConnection
        __init__(CmdAddStructuralPointConnection self, Pnt pnt) -> CmdAddStructuralPointConnection
        """
        if self.__class__ == CmdAddStructuralPointConnection:
            _self = None
        else:
            _self = self
        _OpenLxCmd.CmdAddStructuralPointConnection_swiginit(self, _OpenLxCmd.new_CmdAddStructuralPointConnection(_self, *args))
    __swig_destroy__ = _OpenLxCmd.delete_CmdAddStructuralPointConnection
    redo = _swig_new_instance_method(_OpenLxCmd.CmdAddStructuralPointConnection_redo)
    undo = _swig_new_instance_method(_OpenLxCmd.CmdAddStructuralPointConnection_undo)
    def __disown__(self):
        self.this.disown()
        _OpenLxCmd.disown_CmdAddStructuralPointConnection(self)
        return weakref.proxy(self)

# Register CmdAddStructuralPointConnection in _OpenLxCmd:
_OpenLxCmd.CmdAddStructuralPointConnection_swigregister(CmdAddStructuralPointConnection)
class CmdAddStructuralCurveConnection(Core.Command):
    r"""Proxy of C++ OpenLxCmd::CmdAddStructuralCurveConnection class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(CmdAddStructuralCurveConnection self) -> CmdAddStructuralCurveConnection
        __init__(CmdAddStructuralCurveConnection self, Pnt pnt1) -> CmdAddStructuralCurveConnection
        __init__(CmdAddStructuralCurveConnection self, Pnt pnt1, Pnt pnt2) -> CmdAddStructuralCurveConnection
        """
        if self.__class__ == CmdAddStructuralCurveConnection:
            _self = None
        else:
            _self = self
        _OpenLxCmd.CmdAddStructuralCurveConnection_swiginit(self, _OpenLxCmd.new_CmdAddStructuralCurveConnection(_self, *args))
    __swig_destroy__ = _OpenLxCmd.delete_CmdAddStructuralCurveConnection
    redo = _swig_new_instance_method(_OpenLxCmd.CmdAddStructuralCurveConnection_redo)
    undo = _swig_new_instance_method(_OpenLxCmd.CmdAddStructuralCurveConnection_undo)
    def __disown__(self):
        self.this.disown()
        _OpenLxCmd.disown_CmdAddStructuralCurveConnection(self)
        return weakref.proxy(self)

# Register CmdAddStructuralCurveConnection in _OpenLxCmd:
_OpenLxCmd.CmdAddStructuralCurveConnection_swigregister(CmdAddStructuralCurveConnection)
class CmdAddStructuralSurfaceMember(Core.Command):
    r"""Proxy of C++ OpenLxCmd::CmdAddStructuralSurfaceMember class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(CmdAddStructuralSurfaceMember self) -> CmdAddStructuralSurfaceMember"""
        if self.__class__ == CmdAddStructuralSurfaceMember:
            _self = None
        else:
            _self = self
        _OpenLxCmd.CmdAddStructuralSurfaceMember_swiginit(self, _OpenLxCmd.new_CmdAddStructuralSurfaceMember(_self, ))
    __swig_destroy__ = _OpenLxCmd.delete_CmdAddStructuralSurfaceMember
    redo = _swig_new_instance_method(_OpenLxCmd.CmdAddStructuralSurfaceMember_redo)
    undo = _swig_new_instance_method(_OpenLxCmd.CmdAddStructuralSurfaceMember_undo)
    def __disown__(self):
        self.this.disown()
        _OpenLxCmd.disown_CmdAddStructuralSurfaceMember(self)
        return weakref.proxy(self)

# Register CmdAddStructuralSurfaceMember in _OpenLxCmd:
_OpenLxCmd.CmdAddStructuralSurfaceMember_swigregister(CmdAddStructuralSurfaceMember)
class CmdAddSweepPathNURBS(Core.Command):
    r"""Proxy of C++ OpenLxCmd::CmdAddSweepPathNURBS class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ResultingShape_AUTO = _OpenLxCmd.CmdAddSweepPathNURBS_ResultingShape_AUTO
    
    ResultingShape_OPEN = _OpenLxCmd.CmdAddSweepPathNURBS_ResultingShape_OPEN
    
    ResultingShape_CLOSED = _OpenLxCmd.CmdAddSweepPathNURBS_ResultingShape_CLOSED
    

    def __init__(self, *args):
        r"""
        __init__(CmdAddSweepPathNURBS self) -> CmdAddSweepPathNURBS
        __init__(CmdAddSweepPathNURBS self, OpenLxCmd::CmdAddSweepPathNURBS::ResultingShape const & aResultingShapeEnum) -> CmdAddSweepPathNURBS
        __init__(CmdAddSweepPathNURBS self, std::shared_ptr< OpenLxApp::Element > aProfileElement, std::shared_ptr< OpenLxApp::Element > aPathElement, OpenLxCmd::CmdAddSweepPathNURBS::ResultingShape const & aResultingShapeEnum=AUTO) -> CmdAddSweepPathNURBS
        __init__(CmdAddSweepPathNURBS self, pConstShape aProfileShape, pConstShape aPathShape, OpenLxCmd::CmdAddSweepPathNURBS::ResultingShape const & aResultingShapeEnum=AUTO) -> CmdAddSweepPathNURBS
        """
        if self.__class__ == CmdAddSweepPathNURBS:
            _self = None
        else:
            _self = self
        _OpenLxCmd.CmdAddSweepPathNURBS_swiginit(self, _OpenLxCmd.new_CmdAddSweepPathNURBS(_self, *args))
    __swig_destroy__ = _OpenLxCmd.delete_CmdAddSweepPathNURBS
    redo = _swig_new_instance_method(_OpenLxCmd.CmdAddSweepPathNURBS_redo)
    undo = _swig_new_instance_method(_OpenLxCmd.CmdAddSweepPathNURBS_undo)
    getElement = _swig_new_instance_method(_OpenLxCmd.CmdAddSweepPathNURBS_getElement)
    def __disown__(self):
        self.this.disown()
        _OpenLxCmd.disown_CmdAddSweepPathNURBS(self)
        return weakref.proxy(self)

# Register CmdAddSweepPathNURBS in _OpenLxCmd:
_OpenLxCmd.CmdAddSweepPathNURBS_swigregister(CmdAddSweepPathNURBS)
class CmdApplyComponentTypes(Core.Command):
    r"""Proxy of C++ OpenLxCmd::CmdApplyComponentTypes class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(CmdApplyComponentTypes self) -> CmdApplyComponentTypes
        __init__(CmdApplyComponentTypes self, std::shared_ptr< OpenLxApp::Element > & aElem) -> CmdApplyComponentTypes
        __init__(CmdApplyComponentTypes self, vector_Element aElems) -> CmdApplyComponentTypes
        """
        if self.__class__ == CmdApplyComponentTypes:
            _self = None
        else:
            _self = self
        _OpenLxCmd.CmdApplyComponentTypes_swiginit(self, _OpenLxCmd.new_CmdApplyComponentTypes(_self, *args))
    __swig_destroy__ = _OpenLxCmd.delete_CmdApplyComponentTypes
    redo = _swig_new_instance_method(_OpenLxCmd.CmdApplyComponentTypes_redo)
    undo = _swig_new_instance_method(_OpenLxCmd.CmdApplyComponentTypes_undo)
    def __disown__(self):
        self.this.disown()
        _OpenLxCmd.disown_CmdApplyComponentTypes(self)
        return weakref.proxy(self)

# Register CmdApplyComponentTypes in _OpenLxCmd:
_OpenLxCmd.CmdApplyComponentTypes_swigregister(CmdApplyComponentTypes)
class CmdAttachToLayerIfc(Core.Command):
    r"""Proxy of C++ OpenLxCmd::CmdAttachToLayerIfc class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(CmdAttachToLayerIfc self) -> CmdAttachToLayerIfc
        __init__(CmdAttachToLayerIfc self, std::shared_ptr< OpenLxApp::LayerIfc > const & aLayerIfc, std::shared_ptr< OpenLxApp::Element > const & aElem) -> CmdAttachToLayerIfc
        __init__(CmdAttachToLayerIfc self, std::shared_ptr< OpenLxApp::LayerIfc > const & aLayerIfc, vector_Element aElems) -> CmdAttachToLayerIfc
        """
        if self.__class__ == CmdAttachToLayerIfc:
            _self = None
        else:
            _self = self
        _OpenLxCmd.CmdAttachToLayerIfc_swiginit(self, _OpenLxCmd.new_CmdAttachToLayerIfc(_self, *args))
    __swig_destroy__ = _OpenLxCmd.delete_CmdAttachToLayerIfc
    redo = _swig_new_instance_method(_OpenLxCmd.CmdAttachToLayerIfc_redo)
    undo = _swig_new_instance_method(_OpenLxCmd.CmdAttachToLayerIfc_undo)
    def __disown__(self):
        self.this.disown()
        _OpenLxCmd.disown_CmdAttachToLayerIfc(self)
        return weakref.proxy(self)

# Register CmdAttachToLayerIfc in _OpenLxCmd:
_OpenLxCmd.CmdAttachToLayerIfc_swigregister(CmdAttachToLayerIfc)
class CmdAttachToTask(Core.Command):
    r"""Proxy of C++ OpenLxCmd::CmdAttachToTask class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, taskId, element):
        r"""__init__(CmdAttachToTask self, String taskId, std::shared_ptr< OpenLxApp::Element > element) -> CmdAttachToTask"""
        if self.__class__ == CmdAttachToTask:
            _self = None
        else:
            _self = self
        _OpenLxCmd.CmdAttachToTask_swiginit(self, _OpenLxCmd.new_CmdAttachToTask(_self, taskId, element))
    __swig_destroy__ = _OpenLxCmd.delete_CmdAttachToTask
    redo = _swig_new_instance_method(_OpenLxCmd.CmdAttachToTask_redo)
    undo = _swig_new_instance_method(_OpenLxCmd.CmdAttachToTask_undo)
    def __disown__(self):
        self.this.disown()
        _OpenLxCmd.disown_CmdAttachToTask(self)
        return weakref.proxy(self)

# Register CmdAttachToTask in _OpenLxCmd:
_OpenLxCmd.CmdAttachToTask_swigregister(CmdAttachToTask)
class CmdBIMTeamExportDialog(OpenLxCommand):
    r"""Proxy of C++ OpenLxCmd::CmdBIMTeamExportDialog class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(CmdBIMTeamExportDialog self) -> CmdBIMTeamExportDialog"""
        if self.__class__ == CmdBIMTeamExportDialog:
            _self = None
        else:
            _self = self
        _OpenLxCmd.CmdBIMTeamExportDialog_swiginit(self, _OpenLxCmd.new_CmdBIMTeamExportDialog(_self, ))
    __swig_destroy__ = _OpenLxCmd.delete_CmdBIMTeamExportDialog
    def __disown__(self):
        self.this.disown()
        _OpenLxCmd.disown_CmdBIMTeamExportDialog(self)
        return weakref.proxy(self)

# Register CmdBIMTeamExportDialog in _OpenLxCmd:
_OpenLxCmd.CmdBIMTeamExportDialog_swigregister(CmdBIMTeamExportDialog)
class CmdBooleanCut(Core.Command):
    r"""Proxy of C++ OpenLxCmd::CmdBooleanCut class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(CmdBooleanCut self, vector_Element hardElements, std::shared_ptr< OpenLxApp::Element > softElement) -> CmdBooleanCut
        __init__(CmdBooleanCut self, std::shared_ptr< OpenLxApp::Element > hardElement, std::shared_ptr< OpenLxApp::Element > softElement) -> CmdBooleanCut
        """
        if self.__class__ == CmdBooleanCut:
            _self = None
        else:
            _self = self
        _OpenLxCmd.CmdBooleanCut_swiginit(self, _OpenLxCmd.new_CmdBooleanCut(_self, *args))
    __swig_destroy__ = _OpenLxCmd.delete_CmdBooleanCut
    redo = _swig_new_instance_method(_OpenLxCmd.CmdBooleanCut_redo)
    undo = _swig_new_instance_method(_OpenLxCmd.CmdBooleanCut_undo)
    getElements = _swig_new_instance_method(_OpenLxCmd.CmdBooleanCut_getElements)
    def __disown__(self):
        self.this.disown()
        _OpenLxCmd.disown_CmdBooleanCut(self)
        return weakref.proxy(self)

# Register CmdBooleanCut in _OpenLxCmd:
_OpenLxCmd.CmdBooleanCut_swigregister(CmdBooleanCut)
class CmdComputeKmReference(Core.Command):
    r"""Proxy of C++ OpenLxCmd::CmdComputeKmReference class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(CmdComputeKmReference self) -> CmdComputeKmReference
        __init__(CmdComputeKmReference self, double km) -> CmdComputeKmReference
        __init__(CmdComputeKmReference self, std::shared_ptr< OpenLxApp::Element > curveElement, double km=0) -> CmdComputeKmReference
        __init__(CmdComputeKmReference self, vector_Element aElems, std::shared_ptr< OpenLxApp::Element > curveElement, double km=0) -> CmdComputeKmReference
        """
        if self.__class__ == CmdComputeKmReference:
            _self = None
        else:
            _self = self
        _OpenLxCmd.CmdComputeKmReference_swiginit(self, _OpenLxCmd.new_CmdComputeKmReference(_self, *args))
    __swig_destroy__ = _OpenLxCmd.delete_CmdComputeKmReference
    redo = _swig_new_instance_method(_OpenLxCmd.CmdComputeKmReference_redo)
    undo = _swig_new_instance_method(_OpenLxCmd.CmdComputeKmReference_undo)
    def __disown__(self):
        self.this.disown()
        _OpenLxCmd.disown_CmdComputeKmReference(self)
        return weakref.proxy(self)

# Register CmdComputeKmReference in _OpenLxCmd:
_OpenLxCmd.CmdComputeKmReference_swigregister(CmdComputeKmReference)
class CmdConvertIfcToLxz(OpenLxCommand):
    r"""Proxy of C++ OpenLxCmd::CmdConvertIfcToLxz class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(CmdConvertIfcToLxz self) -> CmdConvertIfcToLxz
        __init__(CmdConvertIfcToLxz self, std::string const & source, std::string const & destinationFolder="") -> CmdConvertIfcToLxz
        __init__(CmdConvertIfcToLxz self, vector_CString sources, std::string const & destinationFolder="") -> CmdConvertIfcToLxz
        """
        if self.__class__ == CmdConvertIfcToLxz:
            _self = None
        else:
            _self = self
        _OpenLxCmd.CmdConvertIfcToLxz_swiginit(self, _OpenLxCmd.new_CmdConvertIfcToLxz(_self, *args))
    __swig_destroy__ = _OpenLxCmd.delete_CmdConvertIfcToLxz
    def __disown__(self):
        self.this.disown()
        _OpenLxCmd.disown_CmdConvertIfcToLxz(self)
        return weakref.proxy(self)

# Register CmdConvertIfcToLxz in _OpenLxCmd:
_OpenLxCmd.CmdConvertIfcToLxz_swigregister(CmdConvertIfcToLxz)
class CmdConvertLxzToIv(OpenLxCommand):
    r"""Proxy of C++ OpenLxCmd::CmdConvertLxzToIv class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(CmdConvertLxzToIv self) -> CmdConvertLxzToIv
        __init__(CmdConvertLxzToIv self, std::string const & source, std::string const & destinationFolder="") -> CmdConvertLxzToIv
        __init__(CmdConvertLxzToIv self, vector_CString sources, std::string const & destinationFolder="") -> CmdConvertLxzToIv
        """
        if self.__class__ == CmdConvertLxzToIv:
            _self = None
        else:
            _self = self
        _OpenLxCmd.CmdConvertLxzToIv_swiginit(self, _OpenLxCmd.new_CmdConvertLxzToIv(_self, *args))
    __swig_destroy__ = _OpenLxCmd.delete_CmdConvertLxzToIv
    def __disown__(self):
        self.this.disown()
        _OpenLxCmd.disown_CmdConvertLxzToIv(self)
        return weakref.proxy(self)

# Register CmdConvertLxzToIv in _OpenLxCmd:
_OpenLxCmd.CmdConvertLxzToIv_swigregister(CmdConvertLxzToIv)
class CmdConvertToBSpline(Core.Command):
    r"""Proxy of C++ OpenLxCmd::CmdConvertToBSpline class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(CmdConvertToBSpline self) -> CmdConvertToBSpline
        __init__(CmdConvertToBSpline self, vector_Element aElems) -> CmdConvertToBSpline
        """
        if self.__class__ == CmdConvertToBSpline:
            _self = None
        else:
            _self = self
        _OpenLxCmd.CmdConvertToBSpline_swiginit(self, _OpenLxCmd.new_CmdConvertToBSpline(_self, *args))
    __swig_destroy__ = _OpenLxCmd.delete_CmdConvertToBSpline
    redo = _swig_new_instance_method(_OpenLxCmd.CmdConvertToBSpline_redo)
    undo = _swig_new_instance_method(_OpenLxCmd.CmdConvertToBSpline_undo)
    def __disown__(self):
        self.this.disown()
        _OpenLxCmd.disown_CmdConvertToBSpline(self)
        return weakref.proxy(self)

# Register CmdConvertToBSpline in _OpenLxCmd:
_OpenLxCmd.CmdConvertToBSpline_swigregister(CmdConvertToBSpline)
class CmdConvertToConstructionElement(Core.Command):
    r"""Proxy of C++ OpenLxCmd::CmdConvertToConstructionElement class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(CmdConvertToConstructionElement self) -> CmdConvertToConstructionElement
        __init__(CmdConvertToConstructionElement self, std::shared_ptr< OpenLxApp::Element > aElement) -> CmdConvertToConstructionElement
        __init__(CmdConvertToConstructionElement self, vector_Element aElems) -> CmdConvertToConstructionElement
        """
        if self.__class__ == CmdConvertToConstructionElement:
            _self = None
        else:
            _self = self
        _OpenLxCmd.CmdConvertToConstructionElement_swiginit(self, _OpenLxCmd.new_CmdConvertToConstructionElement(_self, *args))
    __swig_destroy__ = _OpenLxCmd.delete_CmdConvertToConstructionElement
    redo = _swig_new_instance_method(_OpenLxCmd.CmdConvertToConstructionElement_redo)
    undo = _swig_new_instance_method(_OpenLxCmd.CmdConvertToConstructionElement_undo)
    def __disown__(self):
        self.this.disown()
        _OpenLxCmd.disown_CmdConvertToConstructionElement(self)
        return weakref.proxy(self)

# Register CmdConvertToConstructionElement in _OpenLxCmd:
_OpenLxCmd.CmdConvertToConstructionElement_swigregister(CmdConvertToConstructionElement)
class CmdConvertToFacetedBrep(Core.Command):
    r"""Proxy of C++ OpenLxCmd::CmdConvertToFacetedBrep class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(CmdConvertToFacetedBrep self, std::shared_ptr< OpenLxApp::Element > element) -> CmdConvertToFacetedBrep
        __init__(CmdConvertToFacetedBrep self, vector_Element elements) -> CmdConvertToFacetedBrep
        """
        if self.__class__ == CmdConvertToFacetedBrep:
            _self = None
        else:
            _self = self
        _OpenLxCmd.CmdConvertToFacetedBrep_swiginit(self, _OpenLxCmd.new_CmdConvertToFacetedBrep(_self, *args))
    __swig_destroy__ = _OpenLxCmd.delete_CmdConvertToFacetedBrep
    redo = _swig_new_instance_method(_OpenLxCmd.CmdConvertToFacetedBrep_redo)
    undo = _swig_new_instance_method(_OpenLxCmd.CmdConvertToFacetedBrep_undo)
    getElements = _swig_new_instance_method(_OpenLxCmd.CmdConvertToFacetedBrep_getElements)
    def __disown__(self):
        self.this.disown()
        _OpenLxCmd.disown_CmdConvertToFacetedBrep(self)
        return weakref.proxy(self)

# Register CmdConvertToFacetedBrep in _OpenLxCmd:
_OpenLxCmd.CmdConvertToFacetedBrep_swigregister(CmdConvertToFacetedBrep)
class CmdConvertToBeamElement(Core.Command):
    r"""Proxy of C++ OpenLxCmd::CmdConvertToBeamElement class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, element):
        r"""__init__(CmdConvertToBeamElement self, std::shared_ptr< OpenLxApp::Element > element) -> CmdConvertToBeamElement"""
        if self.__class__ == CmdConvertToBeamElement:
            _self = None
        else:
            _self = self
        _OpenLxCmd.CmdConvertToBeamElement_swiginit(self, _OpenLxCmd.new_CmdConvertToBeamElement(_self, element))
    redo = _swig_new_instance_method(_OpenLxCmd.CmdConvertToBeamElement_redo)
    undo = _swig_new_instance_method(_OpenLxCmd.CmdConvertToBeamElement_undo)
    __swig_destroy__ = _OpenLxCmd.delete_CmdConvertToBeamElement
    def __disown__(self):
        self.this.disown()
        _OpenLxCmd.disown_CmdConvertToBeamElement(self)
        return weakref.proxy(self)

# Register CmdConvertToBeamElement in _OpenLxCmd:
_OpenLxCmd.CmdConvertToBeamElement_swigregister(CmdConvertToBeamElement)
class CmdConvertToNewElementType(Core.Command):
    r"""Proxy of C++ OpenLxCmd::CmdConvertToNewElementType class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(CmdConvertToNewElementType self) -> CmdConvertToNewElementType
        __init__(CmdConvertToNewElementType self, std::shared_ptr< OpenLxApp::Element > aElem, int userType) -> CmdConvertToNewElementType
        __init__(CmdConvertToNewElementType self, vector_Element aElems, int userType) -> CmdConvertToNewElementType
        """
        if self.__class__ == CmdConvertToNewElementType:
            _self = None
        else:
            _self = self
        _OpenLxCmd.CmdConvertToNewElementType_swiginit(self, _OpenLxCmd.new_CmdConvertToNewElementType(_self, *args))
    __swig_destroy__ = _OpenLxCmd.delete_CmdConvertToNewElementType
    redo = _swig_new_instance_method(_OpenLxCmd.CmdConvertToNewElementType_redo)
    undo = _swig_new_instance_method(_OpenLxCmd.CmdConvertToNewElementType_undo)
    def __disown__(self):
        self.this.disown()
        _OpenLxCmd.disown_CmdConvertToNewElementType(self)
        return weakref.proxy(self)

# Register CmdConvertToNewElementType in _OpenLxCmd:
_OpenLxCmd.CmdConvertToNewElementType_swigregister(CmdConvertToNewElementType)
class CmdCopyAlongCurve(Core.Command):
    r"""Proxy of C++ OpenLxCmd::CmdCopyAlongCurve class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(CmdCopyAlongCurve self) -> CmdCopyAlongCurve
        __init__(CmdCopyAlongCurve self, std::shared_ptr< OpenLxApp::Element > aElem, std::shared_ptr< OpenLxApp::Element > aPathElem, bool fromEnd, int number, bool useRepetitions, bool blockRotationX, bool blockRotationY, bool blockRotationZ) -> CmdCopyAlongCurve
        __init__(CmdCopyAlongCurve self, vector_Element aElems, std::shared_ptr< OpenLxApp::Element > aPathElem, bool fromEnd, int number, bool useRepetitions, bool blockRotationX, bool blockRotationY, bool blockRotationZ) -> CmdCopyAlongCurve
        __init__(CmdCopyAlongCurve self, std::shared_ptr< OpenLxApp::Element > aElem, std::shared_ptr< OpenLxApp::Element > aPathElem, bool fromEnd, double distance, bool useRepetitions, bool blockRotationX, bool blockRotationY, bool blockRotationZ) -> CmdCopyAlongCurve
        __init__(CmdCopyAlongCurve self, vector_Element aElems, std::shared_ptr< OpenLxApp::Element > aPathElem, bool fromEnd, double distance, bool useRepetitions, bool blockRotationX, bool blockRotationY, bool blockRotationZ) -> CmdCopyAlongCurve
        """
        if self.__class__ == CmdCopyAlongCurve:
            _self = None
        else:
            _self = self
        _OpenLxCmd.CmdCopyAlongCurve_swiginit(self, _OpenLxCmd.new_CmdCopyAlongCurve(_self, *args))
    __swig_destroy__ = _OpenLxCmd.delete_CmdCopyAlongCurve
    redo = _swig_new_instance_method(_OpenLxCmd.CmdCopyAlongCurve_redo)
    undo = _swig_new_instance_method(_OpenLxCmd.CmdCopyAlongCurve_undo)
    getCopiedElements = _swig_new_instance_method(_OpenLxCmd.CmdCopyAlongCurve_getCopiedElements)
    def __disown__(self):
        self.this.disown()
        _OpenLxCmd.disown_CmdCopyAlongCurve(self)
        return weakref.proxy(self)

# Register CmdCopyAlongCurve in _OpenLxCmd:
_OpenLxCmd.CmdCopyAlongCurve_swigregister(CmdCopyAlongCurve)
class CmdCreateGenericCommand(Core.Command):
    r"""Proxy of C++ OpenLxCmd::CmdCreateGenericCommand class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(CmdCreateGenericCommand self) -> CmdCreateGenericCommand
        __init__(CmdCreateGenericCommand self, std::string const & commandName) -> CmdCreateGenericCommand
        """
        if self.__class__ == CmdCreateGenericCommand:
            _self = None
        else:
            _self = self
        _OpenLxCmd.CmdCreateGenericCommand_swiginit(self, _OpenLxCmd.new_CmdCreateGenericCommand(_self, *args))
    __swig_destroy__ = _OpenLxCmd.delete_CmdCreateGenericCommand
    created = _swig_new_instance_method(_OpenLxCmd.CmdCreateGenericCommand_created)
    redo = _swig_new_instance_method(_OpenLxCmd.CmdCreateGenericCommand_redo)
    undo = _swig_new_instance_method(_OpenLxCmd.CmdCreateGenericCommand_undo)
    def __disown__(self):
        self.this.disown()
        _OpenLxCmd.disown_CmdCreateGenericCommand(self)
        return weakref.proxy(self)

# Register CmdCreateGenericCommand in _OpenLxCmd:
_OpenLxCmd.CmdCreateGenericCommand_swigregister(CmdCreateGenericCommand)
class CmdDebugCurveDirection(Core.Command):
    r"""Proxy of C++ OpenLxCmd::CmdDebugCurveDirection class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(CmdDebugCurveDirection self) -> CmdDebugCurveDirection
        __init__(CmdDebugCurveDirection self, std::shared_ptr< OpenLxApp::Element > aPathElem, size_t repetitions) -> CmdDebugCurveDirection
        """
        if self.__class__ == CmdDebugCurveDirection:
            _self = None
        else:
            _self = self
        _OpenLxCmd.CmdDebugCurveDirection_swiginit(self, _OpenLxCmd.new_CmdDebugCurveDirection(_self, *args))
    __swig_destroy__ = _OpenLxCmd.delete_CmdDebugCurveDirection
    redo = _swig_new_instance_method(_OpenLxCmd.CmdDebugCurveDirection_redo)
    undo = _swig_new_instance_method(_OpenLxCmd.CmdDebugCurveDirection_undo)
    def __disown__(self):
        self.this.disown()
        _OpenLxCmd.disown_CmdDebugCurveDirection(self)
        return weakref.proxy(self)

# Register CmdDebugCurveDirection in _OpenLxCmd:
_OpenLxCmd.CmdDebugCurveDirection_swigregister(CmdDebugCurveDirection)
class CmdDeleteComponentType(OpenLxCommand):
    r"""Proxy of C++ OpenLxCmd::CmdDeleteComponentType class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(CmdDeleteComponentType self) -> CmdDeleteComponentType
        __init__(CmdDeleteComponentType self, std::string const & ifcType, Color color) -> CmdDeleteComponentType
        __init__(CmdDeleteComponentType self, std::string const & ifcType, int cwColor) -> CmdDeleteComponentType
        """
        if self.__class__ == CmdDeleteComponentType:
            _self = None
        else:
            _self = self
        _OpenLxCmd.CmdDeleteComponentType_swiginit(self, _OpenLxCmd.new_CmdDeleteComponentType(_self, *args))
    __swig_destroy__ = _OpenLxCmd.delete_CmdDeleteComponentType
    def __disown__(self):
        self.this.disown()
        _OpenLxCmd.disown_CmdDeleteComponentType(self)
        return weakref.proxy(self)

# Register CmdDeleteComponentType in _OpenLxCmd:
_OpenLxCmd.CmdDeleteComponentType_swigregister(CmdDeleteComponentType)
class CmdDeleteElement(OpenLxCommand):
    r"""Proxy of C++ OpenLxCmd::CmdDeleteElement class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(CmdDeleteElement self) -> CmdDeleteElement
        __init__(CmdDeleteElement self, bool deleteOpening) -> CmdDeleteElement
        __init__(CmdDeleteElement self, std::shared_ptr< OpenLxApp::Element > const & aElem, bool deleteOpening=True) -> CmdDeleteElement
        __init__(CmdDeleteElement self, vector_Element aElems, bool deleteOpening=True) -> CmdDeleteElement
        """
        if self.__class__ == CmdDeleteElement:
            _self = None
        else:
            _self = self
        _OpenLxCmd.CmdDeleteElement_swiginit(self, _OpenLxCmd.new_CmdDeleteElement(_self, *args))
    __swig_destroy__ = _OpenLxCmd.delete_CmdDeleteElement
    def __disown__(self):
        self.this.disown()
        _OpenLxCmd.disown_CmdDeleteElement(self)
        return weakref.proxy(self)

# Register CmdDeleteElement in _OpenLxCmd:
_OpenLxCmd.CmdDeleteElement_swigregister(CmdDeleteElement)
class CmdDeleteUnusedComponentTypes(OpenLxCommand):
    r"""Proxy of C++ OpenLxCmd::CmdDeleteUnusedComponentTypes class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(CmdDeleteUnusedComponentTypes self) -> CmdDeleteUnusedComponentTypes"""
        if self.__class__ == CmdDeleteUnusedComponentTypes:
            _self = None
        else:
            _self = self
        _OpenLxCmd.CmdDeleteUnusedComponentTypes_swiginit(self, _OpenLxCmd.new_CmdDeleteUnusedComponentTypes(_self, ))
    __swig_destroy__ = _OpenLxCmd.delete_CmdDeleteUnusedComponentTypes
    def __disown__(self):
        self.this.disown()
        _OpenLxCmd.disown_CmdDeleteUnusedComponentTypes(self)
        return weakref.proxy(self)

# Register CmdDeleteUnusedComponentTypes in _OpenLxCmd:
_OpenLxCmd.CmdDeleteUnusedComponentTypes_swigregister(CmdDeleteUnusedComponentTypes)
class CmdEmptyStorey(Core.Command):
    r"""Proxy of C++ OpenLxCmd::CmdEmptyStorey class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, elevation, removeElements):
        r"""__init__(CmdEmptyStorey self, double const & elevation, bool removeElements) -> CmdEmptyStorey"""
        if self.__class__ == CmdEmptyStorey:
            _self = None
        else:
            _self = self
        _OpenLxCmd.CmdEmptyStorey_swiginit(self, _OpenLxCmd.new_CmdEmptyStorey(_self, elevation, removeElements))
    __swig_destroy__ = _OpenLxCmd.delete_CmdEmptyStorey
    redo = _swig_new_instance_method(_OpenLxCmd.CmdEmptyStorey_redo)
    undo = _swig_new_instance_method(_OpenLxCmd.CmdEmptyStorey_undo)
    def __disown__(self):
        self.this.disown()
        _OpenLxCmd.disown_CmdEmptyStorey(self)
        return weakref.proxy(self)

# Register CmdEmptyStorey in _OpenLxCmd:
_OpenLxCmd.CmdEmptyStorey_swigregister(CmdEmptyStorey)
class CmdExportIVFile(OpenLxCommand):
    r"""Proxy of C++ OpenLxCmd::CmdExportIVFile class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(CmdExportIVFile self) -> CmdExportIVFile
        __init__(CmdExportIVFile self, bool removeTransparency) -> CmdExportIVFile
        __init__(CmdExportIVFile self, String aPath, bool removeTransparency=False) -> CmdExportIVFile
        __init__(CmdExportIVFile self, std::string const & aPath, bool removeTransparency=False) -> CmdExportIVFile
        """
        if self.__class__ == CmdExportIVFile:
            _self = None
        else:
            _self = self
        _OpenLxCmd.CmdExportIVFile_swiginit(self, _OpenLxCmd.new_CmdExportIVFile(_self, *args))
    __swig_destroy__ = _OpenLxCmd.delete_CmdExportIVFile
    def __disown__(self):
        self.this.disown()
        _OpenLxCmd.disown_CmdExportIVFile(self)
        return weakref.proxy(self)

# Register CmdExportIVFile in _OpenLxCmd:
_OpenLxCmd.CmdExportIVFile_swigregister(CmdExportIVFile)
class CmdExportLXZFile(OpenLxCommand):
    r"""Proxy of C++ OpenLxCmd::CmdExportLXZFile class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(CmdExportLXZFile self) -> CmdExportLXZFile
        __init__(CmdExportLXZFile self, bool visibleOnly, bool resetPlacement=False) -> CmdExportLXZFile
        __init__(CmdExportLXZFile self, String aPath, bool visibleOnly=False, bool resetPlacement=False) -> CmdExportLXZFile
        __init__(CmdExportLXZFile self, std::string const & aPath, bool visibleOnly=False, bool resetPlacement=False) -> CmdExportLXZFile
        """
        if self.__class__ == CmdExportLXZFile:
            _self = None
        else:
            _self = self
        _OpenLxCmd.CmdExportLXZFile_swiginit(self, _OpenLxCmd.new_CmdExportLXZFile(_self, *args))
    __swig_destroy__ = _OpenLxCmd.delete_CmdExportLXZFile
    def __disown__(self):
        self.this.disown()
        _OpenLxCmd.disown_CmdExportLXZFile(self)
        return weakref.proxy(self)

# Register CmdExportLXZFile in _OpenLxCmd:
_OpenLxCmd.CmdExportLXZFile_swigregister(CmdExportLXZFile)
class CmdExportVPFWebDirectory(OpenLxCommand):
    r"""Proxy of C++ OpenLxCmd::CmdExportVPFWebDirectory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(CmdExportVPFWebDirectory self) -> CmdExportVPFWebDirectory
        __init__(CmdExportVPFWebDirectory self, std::string const & path) -> CmdExportVPFWebDirectory
        """
        if self.__class__ == CmdExportVPFWebDirectory:
            _self = None
        else:
            _self = self
        _OpenLxCmd.CmdExportVPFWebDirectory_swiginit(self, _OpenLxCmd.new_CmdExportVPFWebDirectory(_self, *args))
    __swig_destroy__ = _OpenLxCmd.delete_CmdExportVPFWebDirectory
    def __disown__(self):
        self.this.disown()
        _OpenLxCmd.disown_CmdExportVPFWebDirectory(self)
        return weakref.proxy(self)

# Register CmdExportVPFWebDirectory in _OpenLxCmd:
_OpenLxCmd.CmdExportVPFWebDirectory_swigregister(CmdExportVPFWebDirectory)
class CmdExportVPFWebLocal(OpenLxCommand):
    r"""Proxy of C++ OpenLxCmd::CmdExportVPFWebLocal class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(CmdExportVPFWebLocal self) -> CmdExportVPFWebLocal
        __init__(CmdExportVPFWebLocal self, std::string const & path) -> CmdExportVPFWebLocal
        """
        if self.__class__ == CmdExportVPFWebLocal:
            _self = None
        else:
            _self = self
        _OpenLxCmd.CmdExportVPFWebLocal_swiginit(self, _OpenLxCmd.new_CmdExportVPFWebLocal(_self, *args))
    __swig_destroy__ = _OpenLxCmd.delete_CmdExportVPFWebLocal
    def __disown__(self):
        self.this.disown()
        _OpenLxCmd.disown_CmdExportVPFWebLocal(self)
        return weakref.proxy(self)

# Register CmdExportVPFWebLocal in _OpenLxCmd:
_OpenLxCmd.CmdExportVPFWebLocal_swigregister(CmdExportVPFWebLocal)
class CmdExtrudeFace(Core.Command):
    r"""Proxy of C++ OpenLxCmd::CmdExtrudeFace class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(CmdExtrudeFace self) -> CmdExtrudeFace
        __init__(CmdExtrudeFace self, std::shared_ptr< OpenLxApp::Element > aElem, int aFaceindex, Dir aNormal, double aLength) -> CmdExtrudeFace
        """
        if self.__class__ == CmdExtrudeFace:
            _self = None
        else:
            _self = self
        _OpenLxCmd.CmdExtrudeFace_swiginit(self, _OpenLxCmd.new_CmdExtrudeFace(_self, *args))
    __swig_destroy__ = _OpenLxCmd.delete_CmdExtrudeFace
    redo = _swig_new_instance_method(_OpenLxCmd.CmdExtrudeFace_redo)
    undo = _swig_new_instance_method(_OpenLxCmd.CmdExtrudeFace_undo)
    getExtrudedElement = _swig_new_instance_method(_OpenLxCmd.CmdExtrudeFace_getExtrudedElement)
    def __disown__(self):
        self.this.disown()
        _OpenLxCmd.disown_CmdExtrudeFace(self)
        return weakref.proxy(self)

# Register CmdExtrudeFace in _OpenLxCmd:
_OpenLxCmd.CmdExtrudeFace_swigregister(CmdExtrudeFace)
class CmdExtrudeSubElementFace(Core.Command):
    r"""Proxy of C++ OpenLxCmd::CmdExtrudeSubElementFace class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(CmdExtrudeSubElementFace self) -> CmdExtrudeSubElementFace
        __init__(CmdExtrudeSubElementFace self, std::shared_ptr< OpenLxApp::SubElement > aSubElem, int aFaceindex, Dir aNormal, double aLength) -> CmdExtrudeSubElementFace
        """
        if self.__class__ == CmdExtrudeSubElementFace:
            _self = None
        else:
            _self = self
        _OpenLxCmd.CmdExtrudeSubElementFace_swiginit(self, _OpenLxCmd.new_CmdExtrudeSubElementFace(_self, *args))
    __swig_destroy__ = _OpenLxCmd.delete_CmdExtrudeSubElementFace
    redo = _swig_new_instance_method(_OpenLxCmd.CmdExtrudeSubElementFace_redo)
    undo = _swig_new_instance_method(_OpenLxCmd.CmdExtrudeSubElementFace_undo)
    getExtrudedSubElement = _swig_new_instance_method(_OpenLxCmd.CmdExtrudeSubElementFace_getExtrudedSubElement)
    def __disown__(self):
        self.this.disown()
        _OpenLxCmd.disown_CmdExtrudeSubElementFace(self)
        return weakref.proxy(self)

# Register CmdExtrudeSubElementFace in _OpenLxCmd:
_OpenLxCmd.CmdExtrudeSubElementFace_swigregister(CmdExtrudeSubElementFace)
class CmdImportBuildingFromLxz(Core.Command):
    r"""Proxy of C++ OpenLxCmd::CmdImportBuildingFromLxz class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _OpenLxCmd.delete_CmdImportBuildingFromLxz

    def __init__(self, *args):
        r"""
        __init__(CmdImportBuildingFromLxz self) -> CmdImportBuildingFromLxz
        __init__(CmdImportBuildingFromLxz self, std::string const & source) -> CmdImportBuildingFromLxz
        __init__(CmdImportBuildingFromLxz self, vector_CString sources) -> CmdImportBuildingFromLxz
        """
        if self.__class__ == CmdImportBuildingFromLxz:
            _self = None
        else:
            _self = self
        _OpenLxCmd.CmdImportBuildingFromLxz_swiginit(self, _OpenLxCmd.new_CmdImportBuildingFromLxz(_self, *args))
    redo = _swig_new_instance_method(_OpenLxCmd.CmdImportBuildingFromLxz_redo)
    undo = _swig_new_instance_method(_OpenLxCmd.CmdImportBuildingFromLxz_undo)
    def __disown__(self):
        self.this.disown()
        _OpenLxCmd.disown_CmdImportBuildingFromLxz(self)
        return weakref.proxy(self)

# Register CmdImportBuildingFromLxz in _OpenLxCmd:
_OpenLxCmd.CmdImportBuildingFromLxz_swigregister(CmdImportBuildingFromLxz)
class CmdImportFile(OpenLxCommand):
    r"""Proxy of C++ OpenLxCmd::CmdImportFile class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(CmdImportFile self) -> CmdImportFile
        __init__(CmdImportFile self, std::string const & aPath, std::string const & aFormat, bool createLayer=True) -> CmdImportFile
        __init__(CmdImportFile self, String aPath, std::string const & aFormat, bool createLayer=True) -> CmdImportFile
        """
        if self.__class__ == CmdImportFile:
            _self = None
        else:
            _self = self
        _OpenLxCmd.CmdImportFile_swiginit(self, _OpenLxCmd.new_CmdImportFile(_self, *args))
    getImportedElements = _swig_new_instance_method(_OpenLxCmd.CmdImportFile_getImportedElements)
    __swig_destroy__ = _OpenLxCmd.delete_CmdImportFile
    def __disown__(self):
        self.this.disown()
        _OpenLxCmd.disown_CmdImportFile(self)
        return weakref.proxy(self)

# Register CmdImportFile in _OpenLxCmd:
_OpenLxCmd.CmdImportFile_swigregister(CmdImportFile)
class CmdImportLayerFromLxz(Core.Command):
    r"""Proxy of C++ OpenLxCmd::CmdImportLayerFromLxz class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _OpenLxCmd.delete_CmdImportLayerFromLxz

    def __init__(self, *args):
        r"""
        __init__(CmdImportLayerFromLxz self) -> CmdImportLayerFromLxz
        __init__(CmdImportLayerFromLxz self, std::string const & source) -> CmdImportLayerFromLxz
        __init__(CmdImportLayerFromLxz self, vector_CString sources) -> CmdImportLayerFromLxz
        """
        if self.__class__ == CmdImportLayerFromLxz:
            _self = None
        else:
            _self = self
        _OpenLxCmd.CmdImportLayerFromLxz_swiginit(self, _OpenLxCmd.new_CmdImportLayerFromLxz(_self, *args))
    redo = _swig_new_instance_method(_OpenLxCmd.CmdImportLayerFromLxz_redo)
    undo = _swig_new_instance_method(_OpenLxCmd.CmdImportLayerFromLxz_undo)
    def __disown__(self):
        self.this.disown()
        _OpenLxCmd.disown_CmdImportLayerFromLxz(self)
        return weakref.proxy(self)

# Register CmdImportLayerFromLxz in _OpenLxCmd:
_OpenLxCmd.CmdImportLayerFromLxz_swigregister(CmdImportLayerFromLxz)
class CmdImportSiteFromLxz(OpenLxCommand):
    r"""Proxy of C++ OpenLxCmd::CmdImportSiteFromLxz class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(CmdImportSiteFromLxz self) -> CmdImportSiteFromLxz
        __init__(CmdImportSiteFromLxz self, std::string const & source, bool local=False) -> CmdImportSiteFromLxz
        __init__(CmdImportSiteFromLxz self, vector_CString sources, bool local=False) -> CmdImportSiteFromLxz
        """
        if self.__class__ == CmdImportSiteFromLxz:
            _self = None
        else:
            _self = self
        _OpenLxCmd.CmdImportSiteFromLxz_swiginit(self, _OpenLxCmd.new_CmdImportSiteFromLxz(_self, *args))
    __swig_destroy__ = _OpenLxCmd.delete_CmdImportSiteFromLxz
    def __disown__(self):
        self.this.disown()
        _OpenLxCmd.disown_CmdImportSiteFromLxz(self)
        return weakref.proxy(self)

# Register CmdImportSiteFromLxz in _OpenLxCmd:
_OpenLxCmd.CmdImportSiteFromLxz_swigregister(CmdImportSiteFromLxz)
class CmdInterpolateZ(Core.Command):
    r"""Proxy of C++ OpenLxCmd::CmdInterpolateZ class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(CmdInterpolateZ self) -> CmdInterpolateZ
        __init__(CmdInterpolateZ self, std::shared_ptr< OpenLxApp::Element > aElem) -> CmdInterpolateZ
        __init__(CmdInterpolateZ self, std::shared_ptr< OpenLxApp::Element > aElem, Pnt pnt) -> CmdInterpolateZ
        """
        if self.__class__ == CmdInterpolateZ:
            _self = None
        else:
            _self = self
        _OpenLxCmd.CmdInterpolateZ_swiginit(self, _OpenLxCmd.new_CmdInterpolateZ(_self, *args))
    __swig_destroy__ = _OpenLxCmd.delete_CmdInterpolateZ
    redo = _swig_new_instance_method(_OpenLxCmd.CmdInterpolateZ_redo)
    undo = _swig_new_instance_method(_OpenLxCmd.CmdInterpolateZ_undo)
    def __disown__(self):
        self.this.disown()
        _OpenLxCmd.disown_CmdInterpolateZ(self)
        return weakref.proxy(self)

# Register CmdInterpolateZ in _OpenLxCmd:
_OpenLxCmd.CmdInterpolateZ_swigregister(CmdInterpolateZ)
class CmdModifyPropertySetValue(Core.Command):
    r"""Proxy of C++ OpenLxCmd::CmdModifyPropertySetValue class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(CmdModifyPropertySetValue self) -> CmdModifyPropertySetValue
        __init__(CmdModifyPropertySetValue self, std::string const & propertySetName, std::string const & propertyName, Variant propertyValue) -> CmdModifyPropertySetValue
        __init__(CmdModifyPropertySetValue self, std::string const & propertySetName, std::string const & propertyName, Variant propertyValue, std::shared_ptr< OpenLxApp::Element > aElement) -> CmdModifyPropertySetValue
        __init__(CmdModifyPropertySetValue self, std::string const & propertySetName, std::string const & propertyName, Variant propertyValue, vector_Element aElements) -> CmdModifyPropertySetValue
        """
        if self.__class__ == CmdModifyPropertySetValue:
            _self = None
        else:
            _self = self
        _OpenLxCmd.CmdModifyPropertySetValue_swiginit(self, _OpenLxCmd.new_CmdModifyPropertySetValue(_self, *args))
    __swig_destroy__ = _OpenLxCmd.delete_CmdModifyPropertySetValue
    redo = _swig_new_instance_method(_OpenLxCmd.CmdModifyPropertySetValue_redo)
    undo = _swig_new_instance_method(_OpenLxCmd.CmdModifyPropertySetValue_undo)
    def __disown__(self):
        self.this.disown()
        _OpenLxCmd.disown_CmdModifyPropertySetValue(self)
        return weakref.proxy(self)

# Register CmdModifyPropertySetValue in _OpenLxCmd:
_OpenLxCmd.CmdModifyPropertySetValue_swigregister(CmdModifyPropertySetValue)
class CmdOpenFile(OpenLxCommand):
    r"""Proxy of C++ OpenLxCmd::CmdOpenFile class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(CmdOpenFile self) -> CmdOpenFile
        __init__(CmdOpenFile self, std::string const & path) -> CmdOpenFile
        """
        if self.__class__ == CmdOpenFile:
            _self = None
        else:
            _self = self
        _OpenLxCmd.CmdOpenFile_swiginit(self, _OpenLxCmd.new_CmdOpenFile(_self, *args))
    __swig_destroy__ = _OpenLxCmd.delete_CmdOpenFile
    def __disown__(self):
        self.this.disown()
        _OpenLxCmd.disown_CmdOpenFile(self)
        return weakref.proxy(self)

# Register CmdOpenFile in _OpenLxCmd:
_OpenLxCmd.CmdOpenFile_swigregister(CmdOpenFile)
class CmdRemoveTexture(Core.Command):
    r"""Proxy of C++ OpenLxCmd::CmdRemoveTexture class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, elements):
        r"""__init__(CmdRemoveTexture self, vector_Element elements) -> CmdRemoveTexture"""
        if self.__class__ == CmdRemoveTexture:
            _self = None
        else:
            _self = self
        _OpenLxCmd.CmdRemoveTexture_swiginit(self, _OpenLxCmd.new_CmdRemoveTexture(_self, elements))
    __swig_destroy__ = _OpenLxCmd.delete_CmdRemoveTexture
    redo = _swig_new_instance_method(_OpenLxCmd.CmdRemoveTexture_redo)
    undo = _swig_new_instance_method(_OpenLxCmd.CmdRemoveTexture_undo)
    def __disown__(self):
        self.this.disown()
        _OpenLxCmd.disown_CmdRemoveTexture(self)
        return weakref.proxy(self)

# Register CmdRemoveTexture in _OpenLxCmd:
_OpenLxCmd.CmdRemoveTexture_swigregister(CmdRemoveTexture)
class CmdReverseCurve(Core.Command):
    r"""Proxy of C++ OpenLxCmd::CmdReverseCurve class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(CmdReverseCurve self) -> CmdReverseCurve
        __init__(CmdReverseCurve self, vector_Element aElems) -> CmdReverseCurve
        """
        if self.__class__ == CmdReverseCurve:
            _self = None
        else:
            _self = self
        _OpenLxCmd.CmdReverseCurve_swiginit(self, _OpenLxCmd.new_CmdReverseCurve(_self, *args))
    __swig_destroy__ = _OpenLxCmd.delete_CmdReverseCurve
    redo = _swig_new_instance_method(_OpenLxCmd.CmdReverseCurve_redo)
    undo = _swig_new_instance_method(_OpenLxCmd.CmdReverseCurve_undo)
    def __disown__(self):
        self.this.disown()
        _OpenLxCmd.disown_CmdReverseCurve(self)
        return weakref.proxy(self)

# Register CmdReverseCurve in _OpenLxCmd:
_OpenLxCmd.CmdReverseCurve_swigregister(CmdReverseCurve)
class CmdSaveAsFile(OpenLxCommand):
    r"""Proxy of C++ OpenLxCmd::CmdSaveAsFile class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(CmdSaveAsFile self) -> CmdSaveAsFile
        __init__(CmdSaveAsFile self, std::string const & path, bool doNotRename=False) -> CmdSaveAsFile
        """
        if self.__class__ == CmdSaveAsFile:
            _self = None
        else:
            _self = self
        _OpenLxCmd.CmdSaveAsFile_swiginit(self, _OpenLxCmd.new_CmdSaveAsFile(_self, *args))
    __swig_destroy__ = _OpenLxCmd.delete_CmdSaveAsFile
    def __disown__(self):
        self.this.disown()
        _OpenLxCmd.disown_CmdSaveAsFile(self)
        return weakref.proxy(self)

# Register CmdSaveAsFile in _OpenLxCmd:
_OpenLxCmd.CmdSaveAsFile_swigregister(CmdSaveAsFile)
class CmdSetComponentColor(OpenLxCommand):
    r"""Proxy of C++ OpenLxCmd::CmdSetComponentColor class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(CmdSetComponentColor self) -> CmdSetComponentColor
        __init__(CmdSetComponentColor self, std::shared_ptr< OpenLxApp::Element > & aElem, Color color) -> CmdSetComponentColor
        __init__(CmdSetComponentColor self, vector_Element aElems, Color newColor) -> CmdSetComponentColor
        """
        if self.__class__ == CmdSetComponentColor:
            _self = None
        else:
            _self = self
        _OpenLxCmd.CmdSetComponentColor_swiginit(self, _OpenLxCmd.new_CmdSetComponentColor(_self, *args))
    __swig_destroy__ = _OpenLxCmd.delete_CmdSetComponentColor
    def __disown__(self):
        self.this.disown()
        _OpenLxCmd.disown_CmdSetComponentColor(self)
        return weakref.proxy(self)

# Register CmdSetComponentColor in _OpenLxCmd:
_OpenLxCmd.CmdSetComponentColor_swigregister(CmdSetComponentColor)
class CmdSetElementLengthAxis(Core.Command):
    r"""Proxy of C++ OpenLxCmd::CmdSetElementLengthAxis class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(CmdSetElementLengthAxis self) -> CmdSetElementLengthAxis
        __init__(CmdSetElementLengthAxis self, std::shared_ptr< OpenLxApp::Element > aElem, Pnt pnt1, Pnt pnt2) -> CmdSetElementLengthAxis
        """
        if self.__class__ == CmdSetElementLengthAxis:
            _self = None
        else:
            _self = self
        _OpenLxCmd.CmdSetElementLengthAxis_swiginit(self, _OpenLxCmd.new_CmdSetElementLengthAxis(_self, *args))
    __swig_destroy__ = _OpenLxCmd.delete_CmdSetElementLengthAxis
    redo = _swig_new_instance_method(_OpenLxCmd.CmdSetElementLengthAxis_redo)
    undo = _swig_new_instance_method(_OpenLxCmd.CmdSetElementLengthAxis_undo)
    def __disown__(self):
        self.this.disown()
        _OpenLxCmd.disown_CmdSetElementLengthAxis(self)
        return weakref.proxy(self)

# Register CmdSetElementLengthAxis in _OpenLxCmd:
_OpenLxCmd.CmdSetElementLengthAxis_swigregister(CmdSetElementLengthAxis)
class CmdSetGlobalPositioning(Core.Command):
    r"""Proxy of C++ OpenLxCmd::CmdSetGlobalPositioning class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, document, epsgCode, eastings, northings, orthogonalHeight):
        r"""__init__(CmdSetGlobalPositioning self, std::shared_ptr< OpenLxApp::Document > document, String epsgCode, double eastings, double northings, double orthogonalHeight) -> CmdSetGlobalPositioning"""
        if self.__class__ == CmdSetGlobalPositioning:
            _self = None
        else:
            _self = self
        _OpenLxCmd.CmdSetGlobalPositioning_swiginit(self, _OpenLxCmd.new_CmdSetGlobalPositioning(_self, document, epsgCode, eastings, northings, orthogonalHeight))
    __swig_destroy__ = _OpenLxCmd.delete_CmdSetGlobalPositioning
    redo = _swig_new_instance_method(_OpenLxCmd.CmdSetGlobalPositioning_redo)
    undo = _swig_new_instance_method(_OpenLxCmd.CmdSetGlobalPositioning_undo)
    def __disown__(self):
        self.this.disown()
        _OpenLxCmd.disown_CmdSetGlobalPositioning(self)
        return weakref.proxy(self)

# Register CmdSetGlobalPositioning in _OpenLxCmd:
_OpenLxCmd.CmdSetGlobalPositioning_swigregister(CmdSetGlobalPositioning)
class CmdSetPropertySetDefinition(Core.Command):
    r"""Proxy of C++ OpenLxCmd::CmdSetPropertySetDefinition class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _OpenLxCmd.delete_CmdSetPropertySetDefinition

    def __init__(self, *args):
        r"""
        __init__(CmdSetPropertySetDefinition self) -> CmdSetPropertySetDefinition
        __init__(CmdSetPropertySetDefinition self, std::string const & propertySetName, std::string const & propertyName) -> CmdSetPropertySetDefinition
        __init__(CmdSetPropertySetDefinition self, std::string const & propertySetName, std::string const & propertyName, std::shared_ptr< OpenLxApp::Element > aElement) -> CmdSetPropertySetDefinition
        __init__(CmdSetPropertySetDefinition self, std::string const & propertySetName, std::string const & propertyName, vector_Element aElements) -> CmdSetPropertySetDefinition
        __init__(CmdSetPropertySetDefinition self, std::string const & propertySetName, std::string const & propertyName, bool const & propertyValue) -> CmdSetPropertySetDefinition
        __init__(CmdSetPropertySetDefinition self, std::string const & propertySetName, std::string const & propertyName, bool const & propertyValue, std::shared_ptr< OpenLxApp::Element > aElement) -> CmdSetPropertySetDefinition
        __init__(CmdSetPropertySetDefinition self, std::string const & propertySetName, std::string const & propertyName, bool const & propertyValue, vector_Element aElements) -> CmdSetPropertySetDefinition
        __init__(CmdSetPropertySetDefinition self, std::string const & propertySetName, std::string const & propertyName, double const & propertyValue) -> CmdSetPropertySetDefinition
        __init__(CmdSetPropertySetDefinition self, std::string const & propertySetName, std::string const & propertyName, double const & propertyValue, std::shared_ptr< OpenLxApp::Element > aElement) -> CmdSetPropertySetDefinition
        __init__(CmdSetPropertySetDefinition self, std::string const & propertySetName, std::string const & propertyName, double const & propertyValue, vector_Element aElements) -> CmdSetPropertySetDefinition
        __init__(CmdSetPropertySetDefinition self, std::string const & propertySetName, std::string const & propertyName, std::string const & propertyValue) -> CmdSetPropertySetDefinition
        __init__(CmdSetPropertySetDefinition self, std::string const & propertySetName, std::string const & propertyName, std::string const & propertyValue, std::shared_ptr< OpenLxApp::Element > aElement) -> CmdSetPropertySetDefinition
        __init__(CmdSetPropertySetDefinition self, std::string const & propertySetName, std::string const & propertyName, std::string const & propertyValue, vector_Element aElements) -> CmdSetPropertySetDefinition
        __init__(CmdSetPropertySetDefinition self, std::string const & propertySetName, std::string const & propertyName, Variant propertyValue) -> CmdSetPropertySetDefinition
        __init__(CmdSetPropertySetDefinition self, std::string const & propertySetName, std::string const & propertyName, Variant propertyValue, std::shared_ptr< OpenLxApp::Element > aElement) -> CmdSetPropertySetDefinition
        __init__(CmdSetPropertySetDefinition self, std::string const & propertySetName, std::string const & propertyName, Variant propertyValue, vector_Element aElements) -> CmdSetPropertySetDefinition
        __init__(CmdSetPropertySetDefinition self, std::string const & propertySetName, std::string const & propertyName, vector_CString propertyValue, int const & index) -> CmdSetPropertySetDefinition
        __init__(CmdSetPropertySetDefinition self, std::string const & propertySetName, std::string const & propertyName, vector_CString propertyValue, int const & index, std::shared_ptr< OpenLxApp::Element > aElement) -> CmdSetPropertySetDefinition
        __init__(CmdSetPropertySetDefinition self, std::string const & propertySetName, std::string const & propertyName, vector_CString propertyValue, int const & index, vector_Element aElements) -> CmdSetPropertySetDefinition
        """
        if self.__class__ == CmdSetPropertySetDefinition:
            _self = None
        else:
            _self = self
        _OpenLxCmd.CmdSetPropertySetDefinition_swiginit(self, _OpenLxCmd.new_CmdSetPropertySetDefinition(_self, *args))
    redo = _swig_new_instance_method(_OpenLxCmd.CmdSetPropertySetDefinition_redo)
    undo = _swig_new_instance_method(_OpenLxCmd.CmdSetPropertySetDefinition_undo)
    def __disown__(self):
        self.this.disown()
        _OpenLxCmd.disown_CmdSetPropertySetDefinition(self)
        return weakref.proxy(self)

# Register CmdSetPropertySetDefinition in _OpenLxCmd:
_OpenLxCmd.CmdSetPropertySetDefinition_swigregister(CmdSetPropertySetDefinition)
class CmdShowPythonConsole(OpenLxCommand):
    r"""Proxy of C++ OpenLxCmd::CmdShowPythonConsole class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(CmdShowPythonConsole self) -> CmdShowPythonConsole"""
        if self.__class__ == CmdShowPythonConsole:
            _self = None
        else:
            _self = self
        _OpenLxCmd.CmdShowPythonConsole_swiginit(self, _OpenLxCmd.new_CmdShowPythonConsole(_self, ))
    __swig_destroy__ = _OpenLxCmd.delete_CmdShowPythonConsole
    def __disown__(self):
        self.this.disown()
        _OpenLxCmd.disown_CmdShowPythonConsole(self)
        return weakref.proxy(self)

# Register CmdShowPythonConsole in _OpenLxCmd:
_OpenLxCmd.CmdShowPythonConsole_swigregister(CmdShowPythonConsole)
class CmdSizeElement(Core.Command):
    r"""Proxy of C++ OpenLxCmd::CmdSizeElement class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(CmdSizeElement self) -> CmdSizeElement
        __init__(CmdSizeElement self, std::shared_ptr< OpenLxApp::Element > aElem, double length, double width, double height, Pnt scalepointWorld) -> CmdSizeElement
        """
        if self.__class__ == CmdSizeElement:
            _self = None
        else:
            _self = self
        _OpenLxCmd.CmdSizeElement_swiginit(self, _OpenLxCmd.new_CmdSizeElement(_self, *args))
    __swig_destroy__ = _OpenLxCmd.delete_CmdSizeElement
    redo = _swig_new_instance_method(_OpenLxCmd.CmdSizeElement_redo)
    undo = _swig_new_instance_method(_OpenLxCmd.CmdSizeElement_undo)
    def __disown__(self):
        self.this.disown()
        _OpenLxCmd.disown_CmdSizeElement(self)
        return weakref.proxy(self)

# Register CmdSizeElement in _OpenLxCmd:
_OpenLxCmd.CmdSizeElement_swigregister(CmdSizeElement)
class CmdSplitByMaterialLayerSet(Core.Command):
    r"""Proxy of C++ OpenLxCmd::CmdSplitByMaterialLayerSet class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(CmdSplitByMaterialLayerSet self) -> CmdSplitByMaterialLayerSet
        __init__(CmdSplitByMaterialLayerSet self, std::shared_ptr< OpenLxApp::Element > aElem, bool reverseOrder=False) -> CmdSplitByMaterialLayerSet
        __init__(CmdSplitByMaterialLayerSet self, vector_Element aElems, bool reverseOrder=False) -> CmdSplitByMaterialLayerSet
        """
        if self.__class__ == CmdSplitByMaterialLayerSet:
            _self = None
        else:
            _self = self
        _OpenLxCmd.CmdSplitByMaterialLayerSet_swiginit(self, _OpenLxCmd.new_CmdSplitByMaterialLayerSet(_self, *args))
    __swig_destroy__ = _OpenLxCmd.delete_CmdSplitByMaterialLayerSet
    redo = _swig_new_instance_method(_OpenLxCmd.CmdSplitByMaterialLayerSet_redo)
    undo = _swig_new_instance_method(_OpenLxCmd.CmdSplitByMaterialLayerSet_undo)
    getNewElements = _swig_new_instance_method(_OpenLxCmd.CmdSplitByMaterialLayerSet_getNewElements)
    def __disown__(self):
        self.this.disown()
        _OpenLxCmd.disown_CmdSplitByMaterialLayerSet(self)
        return weakref.proxy(self)

# Register CmdSplitByMaterialLayerSet in _OpenLxCmd:
_OpenLxCmd.CmdSplitByMaterialLayerSet_swigregister(CmdSplitByMaterialLayerSet)
class CmdAddCompositeCurve(Core.Command):
    r"""Proxy of C++ OpenLxCmd::CmdAddCompositeCurve class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(CmdAddCompositeCurve self) -> CmdAddCompositeCurve
        __init__(CmdAddCompositeCurve self, Pnt aFirstPnt, bool aAllow3dCurve=True) -> CmdAddCompositeCurve
        """
        if self.__class__ == CmdAddCompositeCurve:
            _self = None
        else:
            _self = self
        _OpenLxCmd.CmdAddCompositeCurve_swiginit(self, _OpenLxCmd.new_CmdAddCompositeCurve(_self, *args))
    __swig_destroy__ = _OpenLxCmd.delete_CmdAddCompositeCurve
    redo = _swig_new_instance_method(_OpenLxCmd.CmdAddCompositeCurve_redo)
    undo = _swig_new_instance_method(_OpenLxCmd.CmdAddCompositeCurve_undo)
    getElement = _swig_new_instance_method(_OpenLxCmd.CmdAddCompositeCurve_getElement)
    def __disown__(self):
        self.this.disown()
        _OpenLxCmd.disown_CmdAddCompositeCurve(self)
        return weakref.proxy(self)

# Register CmdAddCompositeCurve in _OpenLxCmd:
_OpenLxCmd.CmdAddCompositeCurve_swigregister(CmdAddCompositeCurve)
class CmdBooleanSplitShapeWithPlane(Core.Command):
    r"""Proxy of C++ OpenLxCmd::CmdBooleanSplitShapeWithPlane class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(CmdBooleanSplitShapeWithPlane self, std::shared_ptr< OpenLxApp::Element > softElement, Pnt point1, Pnt point2) -> CmdBooleanSplitShapeWithPlane
        __init__(CmdBooleanSplitShapeWithPlane self, std::shared_ptr< OpenLxApp::Element > softElement, std::shared_ptr< OpenLxApp::Element > hardElement, Base::SplitStatus status) -> CmdBooleanSplitShapeWithPlane
        """
        if self.__class__ == CmdBooleanSplitShapeWithPlane:
            _self = None
        else:
            _self = self
        _OpenLxCmd.CmdBooleanSplitShapeWithPlane_swiginit(self, _OpenLxCmd.new_CmdBooleanSplitShapeWithPlane(_self, *args))
    __swig_destroy__ = _OpenLxCmd.delete_CmdBooleanSplitShapeWithPlane
    redo = _swig_new_instance_method(_OpenLxCmd.CmdBooleanSplitShapeWithPlane_redo)
    undo = _swig_new_instance_method(_OpenLxCmd.CmdBooleanSplitShapeWithPlane_undo)
    getElements = _swig_new_instance_method(_OpenLxCmd.CmdBooleanSplitShapeWithPlane_getElements)
    def __disown__(self):
        self.this.disown()
        _OpenLxCmd.disown_CmdBooleanSplitShapeWithPlane(self)
        return weakref.proxy(self)

# Register CmdBooleanSplitShapeWithPlane in _OpenLxCmd:
_OpenLxCmd.CmdBooleanSplitShapeWithPlane_swigregister(CmdBooleanSplitShapeWithPlane)
class CmdAddBuilding(Core.Command):
    r"""Proxy of C++ OpenLxCmd::CmdAddBuilding class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(CmdAddBuilding self) -> CmdAddBuilding
        __init__(CmdAddBuilding self, std::string buildingName) -> CmdAddBuilding
        __init__(CmdAddBuilding self, std::string buildingName, std::string storeyName) -> CmdAddBuilding
        __init__(CmdAddBuilding self, std::string buildingName, std::string storeyName, double elevation) -> CmdAddBuilding
        """
        if self.__class__ == CmdAddBuilding:
            _self = None
        else:
            _self = self
        _OpenLxCmd.CmdAddBuilding_swiginit(self, _OpenLxCmd.new_CmdAddBuilding(_self, *args))
    __swig_destroy__ = _OpenLxCmd.delete_CmdAddBuilding
    redo = _swig_new_instance_method(_OpenLxCmd.CmdAddBuilding_redo)
    undo = _swig_new_instance_method(_OpenLxCmd.CmdAddBuilding_undo)
    def __disown__(self):
        self.this.disown()
        _OpenLxCmd.disown_CmdAddBuilding(self)
        return weakref.proxy(self)

# Register CmdAddBuilding in _OpenLxCmd:
_OpenLxCmd.CmdAddBuilding_swigregister(CmdAddBuilding)
class CmdAddStorey(Core.Command):
    r"""Proxy of C++ OpenLxCmd::CmdAddStorey class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(CmdAddStorey self) -> CmdAddStorey
        __init__(CmdAddStorey self, std::string storeyName) -> CmdAddStorey
        __init__(CmdAddStorey self, std::string storeyName, double z) -> CmdAddStorey
        """
        if self.__class__ == CmdAddStorey:
            _self = None
        else:
            _self = self
        _OpenLxCmd.CmdAddStorey_swiginit(self, _OpenLxCmd.new_CmdAddStorey(_self, *args))
    __swig_destroy__ = _OpenLxCmd.delete_CmdAddStorey
    redo = _swig_new_instance_method(_OpenLxCmd.CmdAddStorey_redo)
    undo = _swig_new_instance_method(_OpenLxCmd.CmdAddStorey_undo)
    def __disown__(self):
        self.this.disown()
        _OpenLxCmd.disown_CmdAddStorey(self)
        return weakref.proxy(self)

# Register CmdAddStorey in _OpenLxCmd:
_OpenLxCmd.CmdAddStorey_swigregister(CmdAddStorey)
class CmdToggleWireFrame(Core.Command):
    r"""Proxy of C++ OpenLxCmd::CmdToggleWireFrame class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(CmdToggleWireFrame self) -> CmdToggleWireFrame
        __init__(CmdToggleWireFrame self, std::shared_ptr< OpenLxApp::Element > element, bool value) -> CmdToggleWireFrame
        __init__(CmdToggleWireFrame self, vector_Element elements, bool value) -> CmdToggleWireFrame
        """
        if self.__class__ == CmdToggleWireFrame:
            _self = None
        else:
            _self = self
        _OpenLxCmd.CmdToggleWireFrame_swiginit(self, _OpenLxCmd.new_CmdToggleWireFrame(_self, *args))
    __swig_destroy__ = _OpenLxCmd.delete_CmdToggleWireFrame
    redo = _swig_new_instance_method(_OpenLxCmd.CmdToggleWireFrame_redo)
    undo = _swig_new_instance_method(_OpenLxCmd.CmdToggleWireFrame_undo)
    def __disown__(self):
        self.this.disown()
        _OpenLxCmd.disown_CmdToggleWireFrame(self)
        return weakref.proxy(self)

# Register CmdToggleWireFrame in _OpenLxCmd:
_OpenLxCmd.CmdToggleWireFrame_swigregister(CmdToggleWireFrame)

