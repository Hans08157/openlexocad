# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _OpenLxUI
else:
    import _OpenLxUI

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _OpenLxUI.SWIG_PyInstanceMethod_New
_swig_new_static_method = _OpenLxUI.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

class SwigPyIterator(object):
    r"""Proxy of C++ swig::SwigPyIterator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _OpenLxUI.delete_SwigPyIterator
    value = _swig_new_instance_method(_OpenLxUI.SwigPyIterator_value)
    incr = _swig_new_instance_method(_OpenLxUI.SwigPyIterator_incr)
    decr = _swig_new_instance_method(_OpenLxUI.SwigPyIterator_decr)
    distance = _swig_new_instance_method(_OpenLxUI.SwigPyIterator_distance)
    equal = _swig_new_instance_method(_OpenLxUI.SwigPyIterator_equal)
    copy = _swig_new_instance_method(_OpenLxUI.SwigPyIterator_copy)
    next = _swig_new_instance_method(_OpenLxUI.SwigPyIterator_next)
    __next__ = _swig_new_instance_method(_OpenLxUI.SwigPyIterator___next__)
    previous = _swig_new_instance_method(_OpenLxUI.SwigPyIterator_previous)
    advance = _swig_new_instance_method(_OpenLxUI.SwigPyIterator_advance)
    __eq__ = _swig_new_instance_method(_OpenLxUI.SwigPyIterator___eq__)
    __ne__ = _swig_new_instance_method(_OpenLxUI.SwigPyIterator___ne__)
    __iadd__ = _swig_new_instance_method(_OpenLxUI.SwigPyIterator___iadd__)
    __isub__ = _swig_new_instance_method(_OpenLxUI.SwigPyIterator___isub__)
    __add__ = _swig_new_instance_method(_OpenLxUI.SwigPyIterator___add__)
    __sub__ = _swig_new_instance_method(_OpenLxUI.SwigPyIterator___sub__)
    def __iter__(self):
        return self

# Register SwigPyIterator in _OpenLxUI:
_OpenLxUI.SwigPyIterator_swigregister(SwigPyIterator)
SHARED_PTR_DISOWN = _OpenLxUI.SHARED_PTR_DISOWN

class intP(object):
    r"""Proxy of C++ intP class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(intP self) -> intP"""
        _OpenLxUI.intP_swiginit(self, _OpenLxUI.new_intP())
    __swig_destroy__ = _OpenLxUI.delete_intP
    assign = _swig_new_instance_method(_OpenLxUI.intP_assign)
    value = _swig_new_instance_method(_OpenLxUI.intP_value)
    cast = _swig_new_instance_method(_OpenLxUI.intP_cast)
    frompointer = _swig_new_static_method(_OpenLxUI.intP_frompointer)

# Register intP in _OpenLxUI:
_OpenLxUI.intP_swigregister(intP)
intP_frompointer = _OpenLxUI.intP_frompointer

class doubleP(object):
    r"""Proxy of C++ doubleP class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(doubleP self) -> doubleP"""
        _OpenLxUI.doubleP_swiginit(self, _OpenLxUI.new_doubleP())
    __swig_destroy__ = _OpenLxUI.delete_doubleP
    assign = _swig_new_instance_method(_OpenLxUI.doubleP_assign)
    value = _swig_new_instance_method(_OpenLxUI.doubleP_value)
    cast = _swig_new_instance_method(_OpenLxUI.doubleP_cast)
    frompointer = _swig_new_static_method(_OpenLxUI.doubleP_frompointer)

# Register doubleP in _OpenLxUI:
_OpenLxUI.doubleP_swigregister(doubleP)
doubleP_frompointer = _OpenLxUI.doubleP_frompointer

class boolP(object):
    r"""Proxy of C++ boolP class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(boolP self) -> boolP"""
        _OpenLxUI.boolP_swiginit(self, _OpenLxUI.new_boolP())
    __swig_destroy__ = _OpenLxUI.delete_boolP
    assign = _swig_new_instance_method(_OpenLxUI.boolP_assign)
    value = _swig_new_instance_method(_OpenLxUI.boolP_value)
    cast = _swig_new_instance_method(_OpenLxUI.boolP_cast)
    frompointer = _swig_new_static_method(_OpenLxUI.boolP_frompointer)

# Register boolP in _OpenLxUI:
_OpenLxUI.boolP_swigregister(boolP)
boolP_frompointer = _OpenLxUI.boolP_frompointer

import Gui
import Core
import Base
import Geom
import Topo
import Draw
import OpenLxApp
import LxIfcBase
class SceneView(object):
    r"""Proxy of C++ OpenLxUI::SceneView class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(SceneView self) -> SceneView
        __init__(SceneView self, Gui::SceneView const & aSceneView) -> SceneView
        """
        _OpenLxUI.SceneView_swiginit(self, _OpenLxUI.new_SceneView(*args))
    __swig_destroy__ = _OpenLxUI.delete_SceneView
    getUserName = _swig_new_instance_method(_OpenLxUI.SceneView_getUserName)
    setUserName = _swig_new_instance_method(_OpenLxUI.SceneView_setUserName)
    getPosition = _swig_new_instance_method(_OpenLxUI.SceneView_getPosition)
    setPosition = _swig_new_instance_method(_OpenLxUI.SceneView_setPosition)
    updatePosition = _swig_new_instance_method(_OpenLxUI.SceneView_updatePosition)
    getOrientation = _swig_new_instance_method(_OpenLxUI.SceneView_getOrientation)
    setOrientation = _swig_new_instance_method(_OpenLxUI.SceneView_setOrientation)
    getAspectRatio = _swig_new_instance_method(_OpenLxUI.SceneView_getAspectRatio)
    setAspectRatio = _swig_new_instance_method(_OpenLxUI.SceneView_setAspectRatio)
    getNearDistance = _swig_new_instance_method(_OpenLxUI.SceneView_getNearDistance)
    setNearDistance = _swig_new_instance_method(_OpenLxUI.SceneView_setNearDistance)
    getFarDistance = _swig_new_instance_method(_OpenLxUI.SceneView_getFarDistance)
    setFarDistance = _swig_new_instance_method(_OpenLxUI.SceneView_setFarDistance)
    getFocalDistance = _swig_new_instance_method(_OpenLxUI.SceneView_getFocalDistance)
    setFocalDistance = _swig_new_instance_method(_OpenLxUI.SceneView_setFocalDistance)
    getHeight = _swig_new_instance_method(_OpenLxUI.SceneView_getHeight)
    setHeight = _swig_new_instance_method(_OpenLxUI.SceneView_setHeight)
    getHeightAngle = _swig_new_instance_method(_OpenLxUI.SceneView_getHeightAngle)
    setHeightAngle = _swig_new_instance_method(_OpenLxUI.SceneView_setHeightAngle)
    setPerspectiveView = _swig_new_instance_method(_OpenLxUI.SceneView_setPerspectiveView)
    isPerspectiveView = _swig_new_instance_method(_OpenLxUI.SceneView_isPerspectiveView)
    getViewPoint = _swig_new_instance_method(_OpenLxUI.SceneView_getViewPoint)
    setViewPoint = _swig_new_instance_method(_OpenLxUI.SceneView_setViewPoint)
    __getInternal__ = _swig_new_instance_method(_OpenLxUI.SceneView___getInternal__)

# Register SceneView in _OpenLxUI:
_OpenLxUI.SceneView_swigregister(SceneView)
getMainWidgetPtr = _OpenLxUI.getMainWidgetPtr
enableKeyboardShortcuts = _OpenLxUI.enableKeyboardShortcuts
viewAll = _OpenLxUI.viewAll
view = _OpenLxUI.view
lookAt = _OpenLxUI.lookAt
viewOrthogonal = _OpenLxUI.viewOrthogonal
viewPerspective = _OpenLxUI.viewPerspective
showMessageBox = _OpenLxUI.showMessageBox
showMessageBoxQuestionYesNo = _OpenLxUI.showMessageBoxQuestionYesNo
showStatusBarMessage = _OpenLxUI.showStatusBarMessage
resetStatusBarMessage = _OpenLxUI.resetStatusBarMessage
getDoubleDialog = _OpenLxUI.getDoubleDialog
getIntDialog = _OpenLxUI.getIntDialog
getTextDialog = _OpenLxUI.getTextDialog
getItemDialog = _OpenLxUI.getItemDialog
class ActiveVertex(object):
    r"""Proxy of C++ OpenLxUI::ActiveVertex class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    globalVertex = property(_OpenLxUI.ActiveVertex_globalVertex_get, _OpenLxUI.ActiveVertex_globalVertex_set, doc=r"""globalVertex : pConstVertex""")
    localVertex = property(_OpenLxUI.ActiveVertex_localVertex_get, _OpenLxUI.ActiveVertex_localVertex_set, doc=r"""localVertex : pConstVertex""")
    element = property(_OpenLxUI.ActiveVertex_element_get, _OpenLxUI.ActiveVertex_element_set, doc=r"""element : std::shared_ptr<(OpenLxApp::Element)>""")

    def __init__(self):
        r"""__init__(ActiveVertex self) -> ActiveVertex"""
        _OpenLxUI.ActiveVertex_swiginit(self, _OpenLxUI.new_ActiveVertex())
    __swig_destroy__ = _OpenLxUI.delete_ActiveVertex

# Register ActiveVertex in _OpenLxUI:
_OpenLxUI.ActiveVertex_swigregister(ActiveVertex)
class ActiveEdge(object):
    r"""Proxy of C++ OpenLxUI::ActiveEdge class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    globalEdge = property(_OpenLxUI.ActiveEdge_globalEdge_get, _OpenLxUI.ActiveEdge_globalEdge_set, doc=r"""globalEdge : pConstEdge""")
    localEdge = property(_OpenLxUI.ActiveEdge_localEdge_get, _OpenLxUI.ActiveEdge_localEdge_set, doc=r"""localEdge : pConstEdge""")
    element = property(_OpenLxUI.ActiveEdge_element_get, _OpenLxUI.ActiveEdge_element_set, doc=r"""element : std::shared_ptr<(OpenLxApp::Element)>""")

    def __init__(self):
        r"""__init__(ActiveEdge self) -> ActiveEdge"""
        _OpenLxUI.ActiveEdge_swiginit(self, _OpenLxUI.new_ActiveEdge())
    __swig_destroy__ = _OpenLxUI.delete_ActiveEdge

# Register ActiveEdge in _OpenLxUI:
_OpenLxUI.ActiveEdge_swigregister(ActiveEdge)
class ActiveFace(object):
    r"""Proxy of C++ OpenLxUI::ActiveFace class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    globalFace = property(_OpenLxUI.ActiveFace_globalFace_get, _OpenLxUI.ActiveFace_globalFace_set, doc=r"""globalFace : pConstFace""")
    localFace = property(_OpenLxUI.ActiveFace_localFace_get, _OpenLxUI.ActiveFace_localFace_set, doc=r"""localFace : pConstFace""")
    element = property(_OpenLxUI.ActiveFace_element_get, _OpenLxUI.ActiveFace_element_set, doc=r"""element : std::shared_ptr<(OpenLxApp::Element)>""")

    def __init__(self):
        r"""__init__(ActiveFace self) -> ActiveFace"""
        _OpenLxUI.ActiveFace_swiginit(self, _OpenLxUI.new_ActiveFace())
    __swig_destroy__ = _OpenLxUI.delete_ActiveFace

# Register ActiveFace in _OpenLxUI:
_OpenLxUI.ActiveFace_swigregister(ActiveFace)
class UIElement(object):
    r"""Proxy of C++ OpenLxUI::UIElement class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    getObject = _swig_new_instance_method(_OpenLxUI.UIElement_getObject)
    getAsRoot = _swig_new_instance_method(_OpenLxUI.UIElement_getAsRoot)
    getAsProduct = _swig_new_instance_method(_OpenLxUI.UIElement_getAsProduct)
    getAsElement = _swig_new_instance_method(_OpenLxUI.UIElement_getAsElement)
    isSelected = _swig_new_instance_method(_OpenLxUI.UIElement_isSelected)
    isDrawable = _swig_new_instance_method(_OpenLxUI.UIElement_isDrawable)
    setTmpVisible = _swig_new_instance_method(_OpenLxUI.UIElement_setTmpVisible)
    isTmpVisible = _swig_new_instance_method(_OpenLxUI.UIElement_isTmpVisible)
    setHighlighted = _swig_new_instance_method(_OpenLxUI.UIElement_setHighlighted)
    setPickable = _swig_new_instance_method(_OpenLxUI.UIElement_setPickable)
    isPickable = _swig_new_instance_method(_OpenLxUI.UIElement_isPickable)
    setTmpBaseColor = _swig_new_instance_method(_OpenLxUI.UIElement_setTmpBaseColor)
    removeTmpBaseColor = _swig_new_instance_method(_OpenLxUI.UIElement_removeTmpBaseColor)
    setTmpWireframe = _swig_new_instance_method(_OpenLxUI.UIElement_setTmpWireframe)
    hasTmpWireframe = _swig_new_instance_method(_OpenLxUI.UIElement_hasTmpWireframe)
    getBoundingBox = _swig_new_instance_method(_OpenLxUI.UIElement_getBoundingBox)
    __swig_destroy__ = _OpenLxUI.delete_UIElement

# Register UIElement in _OpenLxUI:
_OpenLxUI.UIElement_swigregister(UIElement)
class Viewer(object):
    r"""Proxy of C++ OpenLxUI::Viewer class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, aViewer):
        r"""__init__(Viewer self, Gui::Viewer & aViewer) -> Viewer"""
        if self.__class__ == Viewer:
            _self = None
        else:
            _self = self
        _OpenLxUI.Viewer_swiginit(self, _OpenLxUI.new_Viewer(_self, aViewer))
    __swig_destroy__ = _OpenLxUI.delete_Viewer
    EViewDirection_UNDEFINED = _OpenLxUI.Viewer_EViewDirection_UNDEFINED
    
    EViewDirection_TOP = _OpenLxUI.Viewer_EViewDirection_TOP
    
    EViewDirection_BOTTOM = _OpenLxUI.Viewer_EViewDirection_BOTTOM
    
    EViewDirection_FRONT = _OpenLxUI.Viewer_EViewDirection_FRONT
    
    EViewDirection_BACK = _OpenLxUI.Viewer_EViewDirection_BACK
    
    EViewDirection_LEFT = _OpenLxUI.Viewer_EViewDirection_LEFT
    
    EViewDirection_RIGHT = _OpenLxUI.Viewer_EViewDirection_RIGHT
    
    EViewDirection_AXO = _OpenLxUI.Viewer_EViewDirection_AXO
    
    EViewDirection_AXOLEFT = _OpenLxUI.Viewer_EViewDirection_AXOLEFT
    
    EViewDirection_AXOBACKRIGHT = _OpenLxUI.Viewer_EViewDirection_AXOBACKRIGHT
    
    EViewDirection_AXOBACKLEFT = _OpenLxUI.Viewer_EViewDirection_AXOBACKLEFT
    
    lookAt = _swig_new_instance_method(_OpenLxUI.Viewer_lookAt)
    viewLast = _swig_new_instance_method(_OpenLxUI.Viewer_viewLast)
    getCurrentSceneView = _swig_new_instance_method(_OpenLxUI.Viewer_getCurrentSceneView)
    saveSceneView = _swig_new_instance_method(_OpenLxUI.Viewer_saveSceneView)
    setSceneView = _swig_new_instance_method(_OpenLxUI.Viewer_setSceneView)
    isZoomViewAvailable = _swig_new_instance_method(_OpenLxUI.Viewer_isZoomViewAvailable)
    saveZoomView = _swig_new_instance_method(_OpenLxUI.Viewer_saveZoomView)
    viewLastZoomView = _swig_new_instance_method(_OpenLxUI.Viewer_viewLastZoomView)
    clearZoomViews = _swig_new_instance_method(_OpenLxUI.Viewer_clearZoomViews)
    getZGroundPlate = _swig_new_instance_method(_OpenLxUI.Viewer_getZGroundPlate)
    setZGroundPlate = _swig_new_instance_method(_OpenLxUI.Viewer_setZGroundPlate)
    getProjectAllToZGroundPlate = _swig_new_instance_method(_OpenLxUI.Viewer_getProjectAllToZGroundPlate)
    setProjectAllToZGroundPlate = _swig_new_instance_method(_OpenLxUI.Viewer_setProjectAllToZGroundPlate)
    getProjectAllToWPlane = _swig_new_instance_method(_OpenLxUI.Viewer_getProjectAllToWPlane)
    setProjectAllToWPlane = _swig_new_instance_method(_OpenLxUI.Viewer_setProjectAllToWPlane)
    enablePlaneMode = _swig_new_instance_method(_OpenLxUI.Viewer_enablePlaneMode)
    disablePlaneMode = _swig_new_instance_method(_OpenLxUI.Viewer_disablePlaneMode)
    getPlaneMode = _swig_new_instance_method(_OpenLxUI.Viewer_getPlaneMode)
    setPlaneMode = _swig_new_instance_method(_OpenLxUI.Viewer_setPlaneMode)
    setActive = _swig_new_instance_method(_OpenLxUI.Viewer_setActive)
    loadVisibility = _swig_new_instance_method(_OpenLxUI.Viewer_loadVisibility)
    viewAll = _swig_new_instance_method(_OpenLxUI.Viewer_viewAll)
    viewElement = _swig_new_instance_method(_OpenLxUI.Viewer_viewElement)
    viewBoundingBox = _swig_new_instance_method(_OpenLxUI.Viewer_viewBoundingBox)
    view = _swig_new_instance_method(_OpenLxUI.Viewer_view)
    viewOrthogonal = _swig_new_instance_method(_OpenLxUI.Viewer_viewOrthogonal)
    viewPerspective = _swig_new_instance_method(_OpenLxUI.Viewer_viewPerspective)
    zoom = _swig_new_instance_method(_OpenLxUI.Viewer_zoom)
    zoomToPoint = _swig_new_instance_method(_OpenLxUI.Viewer_zoomToPoint)
    redraw = _swig_new_instance_method(_OpenLxUI.Viewer_redraw)
    animateActiveCamera = _swig_new_instance_method(_OpenLxUI.Viewer_animateActiveCamera)
    setBackgroundColor = _swig_new_instance_method(_OpenLxUI.Viewer_setBackgroundColor)
    getBackgroundColor = _swig_new_instance_method(_OpenLxUI.Viewer_getBackgroundColor)
    centeringZoom = _swig_new_instance_method(_OpenLxUI.Viewer_centeringZoom)
    zoomToCursor = _swig_new_instance_method(_OpenLxUI.Viewer_zoomToCursor)
    walkThruMove = _swig_new_instance_method(_OpenLxUI.Viewer_walkThruMove)
    setElementVisibilityInViewer = _swig_new_instance_method(_OpenLxUI.Viewer_setElementVisibilityInViewer)
    setElementsVisibilityInViewer = _swig_new_instance_method(_OpenLxUI.Viewer_setElementsVisibilityInViewer)
    enableShading = _swig_new_instance_method(_OpenLxUI.Viewer_enableShading)
    isShading = _swig_new_instance_method(_OpenLxUI.Viewer_isShading)
    mapToGlobal = _swig_new_instance_method(_OpenLxUI.Viewer_mapToGlobal)
    offScreenSaveImage = _swig_new_instance_method(_OpenLxUI.Viewer_offScreenSaveImage)
    saveScreenImage = _swig_new_instance_method(_OpenLxUI.Viewer_saveScreenImage)
    renderWebThumbnail = _swig_new_instance_method(_OpenLxUI.Viewer_renderWebThumbnail)
    getDefaultCursor = _swig_new_instance_method(_OpenLxUI.Viewer_getDefaultCursor)
    setDefaultCursor = _swig_new_instance_method(_OpenLxUI.Viewer_setDefaultCursor)
    setDraggingRestriction = _swig_new_instance_method(_OpenLxUI.Viewer_setDraggingRestriction)
    checkForCameraUpConstrain = _swig_new_instance_method(_OpenLxUI.Viewer_checkForCameraUpConstrain)
    getSceneBoundingBox = _swig_new_instance_method(_OpenLxUI.Viewer_getSceneBoundingBox)
    hasAutomaticFocalDistance = _swig_new_instance_method(_OpenLxUI.Viewer_hasAutomaticFocalDistance)
    setAutomaticFocalDistance = _swig_new_instance_method(_OpenLxUI.Viewer_setAutomaticFocalDistance)
    getOldFocalDistance = _swig_new_instance_method(_OpenLxUI.Viewer_getOldFocalDistance)
    setOldFocalDistance = _swig_new_instance_method(_OpenLxUI.Viewer_setOldFocalDistance)
    setBlockRedraw = _swig_new_instance_method(_OpenLxUI.Viewer_setBlockRedraw)
    blockRedrawAfterRedrawing = _swig_new_instance_method(_OpenLxUI.Viewer_blockRedrawAfterRedrawing)
    __is2dTopViewer__ = _swig_new_instance_method(_OpenLxUI.Viewer___is2dTopViewer__)
    __hasSecondViewer__ = _swig_new_instance_method(_OpenLxUI.Viewer___hasSecondViewer__)
    __getMultiViewerIndex__ = _swig_new_instance_method(_OpenLxUI.Viewer___getMultiViewerIndex__)
    __getActiveMultiSecondViewerIndex__ = _swig_new_instance_method(_OpenLxUI.Viewer___getActiveMultiSecondViewerIndex__)
    def __disown__(self):
        self.this.disown()
        _OpenLxUI.disown_Viewer(self)
        return weakref.proxy(self)

# Register Viewer in _OpenLxUI:
_OpenLxUI.Viewer_swigregister(Viewer)
class Selection(object):
    r"""Proxy of C++ OpenLxUI::Selection class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    getDocument = _swig_new_instance_method(_OpenLxUI.Selection_getDocument)
    selectAll = _swig_new_instance_method(_OpenLxUI.Selection_selectAll)
    select = _swig_new_instance_method(_OpenLxUI.Selection_select)
    deselectAll = _swig_new_instance_method(_OpenLxUI.Selection_deselectAll)
    deselect = _swig_new_instance_method(_OpenLxUI.Selection_deselect)
    forceUpdate = _swig_new_instance_method(_OpenLxUI.Selection_forceUpdate)
    getDocObjects = _swig_new_instance_method(_OpenLxUI.Selection_getDocObjects)
    getAsElements = _swig_new_instance_method(_OpenLxUI.Selection_getAsElements)
    getUIElements = _swig_new_instance_method(_OpenLxUI.Selection_getUIElements)
    addCallback = _swig_new_instance_method(_OpenLxUI.Selection_addCallback)
    removeCallback = _swig_new_instance_method(_OpenLxUI.Selection_removeCallback)
    removeCallbacks = _swig_new_instance_method(_OpenLxUI.Selection_removeCallbacks)
    getCallbacks = _swig_new_instance_method(_OpenLxUI.Selection_getCallbacks)
    testCB = _swig_new_instance_method(_OpenLxUI.Selection_testCB)

    def __init__(self, aDoc):
        r"""__init__(Selection self, std::shared_ptr< OpenLxApp::Document > aDoc) -> Selection"""
        _OpenLxUI.Selection_swiginit(self, _OpenLxUI.new_Selection(aDoc))
    __swig_destroy__ = _OpenLxUI.delete_Selection

# Register Selection in _OpenLxUI:
_OpenLxUI.Selection_swigregister(Selection)
class SelectionCB(object):
    r"""Proxy of C++ OpenLxUI::SelectionCB class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(SelectionCB self) -> SelectionCB"""
        if self.__class__ == SelectionCB:
            _self = None
        else:
            _self = self
        _OpenLxUI.SelectionCB_swiginit(self, _OpenLxUI.new_SelectionCB(_self, ))
    __swig_destroy__ = _OpenLxUI.delete_SelectionCB
    test = _swig_new_instance_method(_OpenLxUI.SelectionCB_test)
    onSelected = _swig_new_instance_method(_OpenLxUI.SelectionCB_onSelected)
    onDeselected = _swig_new_instance_method(_OpenLxUI.SelectionCB_onDeselected)
    onClearedSelection = _swig_new_instance_method(_OpenLxUI.SelectionCB_onClearedSelection)
    def __disown__(self):
        self.this.disown()
        _OpenLxUI.disown_SelectionCB(self)
        return weakref.proxy(self)

# Register SelectionCB in _OpenLxUI:
_OpenLxUI.SelectionCB_swigregister(SelectionCB)
class UIElementFilter(object):
    r"""Proxy of C++ OpenLxUI::UIElementFilter class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    filterUIElement = _swig_new_instance_method(_OpenLxUI.UIElementFilter_filterUIElement)
    __swig_destroy__ = _OpenLxUI.delete_UIElementFilter

    def __init__(self):
        r"""__init__(UIElementFilter self) -> UIElementFilter"""
        if self.__class__ == UIElementFilter:
            _self = None
        else:
            _self = self
        _OpenLxUI.UIElementFilter_swiginit(self, _OpenLxUI.new_UIElementFilter(_self, ))
    def __disown__(self):
        self.this.disown()
        _OpenLxUI.disown_UIElementFilter(self)
        return weakref.proxy(self)

# Register UIElementFilter in _OpenLxUI:
_OpenLxUI.UIElementFilter_swigregister(UIElementFilter)
class UIDocument(object):
    r"""Proxy of C++ OpenLxUI::UIDocument class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    getDocument = _swig_new_instance_method(_OpenLxUI.UIDocument_getDocument)
    getSelection = _swig_new_instance_method(_OpenLxUI.UIDocument_getSelection)
    getUIElement = _swig_new_instance_method(_OpenLxUI.UIDocument_getUIElement)
    pickPoint = _swig_new_instance_method(_OpenLxUI.UIDocument_pickPoint)
    getPickedPoint = _swig_new_instance_method(_OpenLxUI.UIDocument_getPickedPoint)
    getPickedElement = _swig_new_instance_method(_OpenLxUI.UIDocument_getPickedElement)
    hasPickedNormal = _swig_new_instance_method(_OpenLxUI.UIDocument_hasPickedNormal)
    getPickedNormal = _swig_new_instance_method(_OpenLxUI.UIDocument_getPickedNormal)
    getPickingService = _swig_new_instance_method(_OpenLxUI.UIDocument_getPickingService)
    setIntersectionPicking = _swig_new_instance_method(_OpenLxUI.UIDocument_setIntersectionPicking)
    isIntersectionPickingEnabled = _swig_new_instance_method(_OpenLxUI.UIDocument_isIntersectionPickingEnabled)
    NOPOINT = _OpenLxUI.UIDocument_NOPOINT
    
    NEARESTPOINT = _OpenLxUI.UIDocument_NEARESTPOINT
    
    MIDPOINT = _OpenLxUI.UIDocument_MIDPOINT
    
    ENDPOINT = _OpenLxUI.UIDocument_ENDPOINT
    
    GRIDPOINT = _OpenLxUI.UIDocument_GRIDPOINT
    
    BBOXPOINT = _OpenLxUI.UIDocument_BBOXPOINT
    
    INTERSECTIONPOINT = _OpenLxUI.UIDocument_INTERSECTIONPOINT
    
    EDGEPOINT = _OpenLxUI.UIDocument_EDGEPOINT
    
    ONLYVERTICES = _OpenLxUI.UIDocument_ONLYVERTICES
    
    ONLYVIRTUALGEO = _OpenLxUI.UIDocument_ONLYVIRTUALGEO
    
    CONTROLPOINT = _OpenLxUI.UIDocument_CONTROLPOINT
    
    INVISIBLECONTROLPOINT = _OpenLxUI.UIDocument_INVISIBLECONTROLPOINT
    
    AUXILIARYPOINT = _OpenLxUI.UIDocument_AUXILIARYPOINT
    
    getSnapMode = _swig_new_instance_method(_OpenLxUI.UIDocument_getSnapMode)
    getSnapfor2dElements = _swig_new_instance_method(_OpenLxUI.UIDocument_getSnapfor2dElements)
    setSnapMode = _swig_new_instance_method(_OpenLxUI.UIDocument_setSnapMode)
    getPlaneMode = _swig_new_static_method(_OpenLxUI.UIDocument_getPlaneMode)
    moveMouseToWorldPnt = _swig_new_instance_method(_OpenLxUI.UIDocument_moveMouseToWorldPnt)
    getMidPoint = _swig_new_instance_method(_OpenLxUI.UIDocument_getMidPoint)
    drawRubberBand = _swig_new_instance_method(_OpenLxUI.UIDocument_drawRubberBand)
    removeRubberBand = _swig_new_instance_method(_OpenLxUI.UIDocument_removeRubberBand)
    highlightByShapeType = _swig_new_instance_method(_OpenLxUI.UIDocument_highlightByShapeType)
    stopHighlightByShapeType = _swig_new_instance_method(_OpenLxUI.UIDocument_stopHighlightByShapeType)
    drawElementPositionPreview = _swig_new_instance_method(_OpenLxUI.UIDocument_drawElementPositionPreview)
    hideElementAttributesInViewer = _swig_new_instance_method(_OpenLxUI.UIDocument_hideElementAttributesInViewer)
    createTangentArcPreview = _swig_new_instance_method(_OpenLxUI.UIDocument_createTangentArcPreview)
    createLinePreview = _swig_new_instance_method(_OpenLxUI.UIDocument_createLinePreview)
    createArc3PointsPreview = _swig_new_instance_method(_OpenLxUI.UIDocument_createArc3PointsPreview)
    drawPreview = _swig_new_instance_method(_OpenLxUI.UIDocument_drawPreview)
    removePreview = _swig_new_instance_method(_OpenLxUI.UIDocument_removePreview)
    removeAllPreviews = _swig_new_instance_method(_OpenLxUI.UIDocument_removeAllPreviews)
    getAllPreviews = _swig_new_instance_method(_OpenLxUI.UIDocument_getAllPreviews)
    enablePreview = _swig_new_instance_method(_OpenLxUI.UIDocument_enablePreview)
    disablePreview = _swig_new_instance_method(_OpenLxUI.UIDocument_disablePreview)
    drawAngle = _swig_new_instance_method(_OpenLxUI.UIDocument_drawAngle)
    removeAngle = _swig_new_instance_method(_OpenLxUI.UIDocument_removeAngle)
    Justification_LEFT = _OpenLxUI.UIDocument_Justification_LEFT
    
    Justification_RIGHT = _OpenLxUI.UIDocument_Justification_RIGHT
    
    Justification_CENTER = _OpenLxUI.UIDocument_Justification_CENTER
    
    drawOwnText2 = _swig_new_instance_method(_OpenLxUI.UIDocument_drawOwnText2)
    removeOwnText2 = _swig_new_instance_method(_OpenLxUI.UIDocument_removeOwnText2)
    drawHelpPoint = _swig_new_instance_method(_OpenLxUI.UIDocument_drawHelpPoint)
    drawHelpVector = _swig_new_instance_method(_OpenLxUI.UIDocument_drawHelpVector)
    drawHelpAx2 = _swig_new_instance_method(_OpenLxUI.UIDocument_drawHelpAx2)
    removeHelpObjects = _swig_new_instance_method(_OpenLxUI.UIDocument_removeHelpObjects)
    drawOwnDirection = _swig_new_instance_method(_OpenLxUI.UIDocument_drawOwnDirection)
    drawOwnDirectionToPoint = _swig_new_instance_method(_OpenLxUI.UIDocument_drawOwnDirectionToPoint)
    removeOwnDirection = _swig_new_instance_method(_OpenLxUI.UIDocument_removeOwnDirection)
    drawOwnLine = _swig_new_instance_method(_OpenLxUI.UIDocument_drawOwnLine)
    drawOwnOverlayLine = _swig_new_instance_method(_OpenLxUI.UIDocument_drawOwnOverlayLine)
    removeOwnLine = _swig_new_instance_method(_OpenLxUI.UIDocument_removeOwnLine)
    drawOwnMesh = _swig_new_instance_method(_OpenLxUI.UIDocument_drawOwnMesh)
    removeOwnMesh = _swig_new_instance_method(_OpenLxUI.UIDocument_removeOwnMesh)
    drawAuxiliaryLine = _swig_new_instance_method(_OpenLxUI.UIDocument_drawAuxiliaryLine)
    drawHelpPointMeasure = _swig_new_instance_method(_OpenLxUI.UIDocument_drawHelpPointMeasure)
    removeHelpPointsMeasure = _swig_new_instance_method(_OpenLxUI.UIDocument_removeHelpPointsMeasure)
    getVisibleElements = _swig_new_instance_method(_OpenLxUI.UIDocument_getVisibleElements)
    getSelectedElements = _swig_new_instance_method(_OpenLxUI.UIDocument_getSelectedElements)
    getActiveElement = _swig_new_instance_method(_OpenLxUI.UIDocument_getActiveElement)
    getActiveSubElement = _swig_new_instance_method(_OpenLxUI.UIDocument_getActiveSubElement)
    hasActivePoint = _swig_new_instance_method(_OpenLxUI.UIDocument_hasActivePoint)
    getActivePoint = _swig_new_instance_method(_OpenLxUI.UIDocument_getActivePoint)
    getActiveVertex = _swig_new_instance_method(_OpenLxUI.UIDocument_getActiveVertex)
    getActiveEdge = _swig_new_instance_method(_OpenLxUI.UIDocument_getActiveEdge)
    getActiveFace = _swig_new_instance_method(_OpenLxUI.UIDocument_getActiveFace)
    __swig_destroy__ = _OpenLxUI.delete_UIDocument

# Register UIDocument in _OpenLxUI:
_OpenLxUI.UIDocument_swigregister(UIDocument)
UIDocument_getPlaneMode = _OpenLxUI.UIDocument_getPlaneMode

class UIApplication(object):
    r"""Proxy of C++ OpenLxUI::UIApplication class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    getApplication = _swig_new_instance_method(_OpenLxUI.UIApplication_getApplication)
    getUIDocument = _swig_new_instance_method(_OpenLxUI.UIApplication_getUIDocument)
    getInstance = _swig_new_static_method(_OpenLxUI.UIApplication_getInstance)
    __swig_destroy__ = _OpenLxUI.delete_UIApplication
    processEvents = _swig_new_instance_method(_OpenLxUI.UIApplication_processEvents)
    addCallback = _swig_new_instance_method(_OpenLxUI.UIApplication_addCallback)
    removeCallback = _swig_new_instance_method(_OpenLxUI.UIApplication_removeCallback)
    removeCallbacks = _swig_new_instance_method(_OpenLxUI.UIApplication_removeCallbacks)
    getActiveViewer = _swig_new_instance_method(_OpenLxUI.UIApplication_getActiveViewer)
    getViewer = _swig_new_instance_method(_OpenLxUI.UIApplication_getViewer)
    testCB = _swig_new_instance_method(_OpenLxUI.UIApplication_testCB)
    onLexocadChangedUIProperty = _swig_new_instance_method(_OpenLxUI.UIApplication_onLexocadChangedUIProperty)

# Register UIApplication in _OpenLxUI:
_OpenLxUI.UIApplication_swigregister(UIApplication)
UIApplication_getInstance = _OpenLxUI.UIApplication_getInstance

class UIApplicationCB(object):
    r"""Proxy of C++ OpenLxUI::UIApplicationCB class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(UIApplicationCB self) -> UIApplicationCB"""
        if self.__class__ == UIApplicationCB:
            _self = None
        else:
            _self = self
        _OpenLxUI.UIApplicationCB_swiginit(self, _OpenLxUI.new_UIApplicationCB(_self, ))
    __swig_destroy__ = _OpenLxUI.delete_UIApplicationCB
    test = _swig_new_instance_method(_OpenLxUI.UIApplicationCB_test)
    onLexocadDisplayUIProperties = _swig_new_instance_method(_OpenLxUI.UIApplicationCB_onLexocadDisplayUIProperties)
    onLexocadChangedUIProperty = _swig_new_instance_method(_OpenLxUI.UIApplicationCB_onLexocadChangedUIProperty)
    onFileOpened = _swig_new_instance_method(_OpenLxUI.UIApplicationCB_onFileOpened)
    def __disown__(self):
        self.this.disown()
        _OpenLxUI.disown_UIApplicationCB(self)
        return weakref.proxy(self)

# Register UIApplicationCB in _OpenLxUI:
_OpenLxUI.UIApplicationCB_swigregister(UIApplicationCB)
class vector_UIElement(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< OpenLxUI::UIElement > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_OpenLxUI.vector_UIElement_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_OpenLxUI.vector_UIElement___nonzero__)
    __bool__ = _swig_new_instance_method(_OpenLxUI.vector_UIElement___bool__)
    __len__ = _swig_new_instance_method(_OpenLxUI.vector_UIElement___len__)
    __getslice__ = _swig_new_instance_method(_OpenLxUI.vector_UIElement___getslice__)
    __setslice__ = _swig_new_instance_method(_OpenLxUI.vector_UIElement___setslice__)
    __delslice__ = _swig_new_instance_method(_OpenLxUI.vector_UIElement___delslice__)
    __delitem__ = _swig_new_instance_method(_OpenLxUI.vector_UIElement___delitem__)
    __getitem__ = _swig_new_instance_method(_OpenLxUI.vector_UIElement___getitem__)
    __setitem__ = _swig_new_instance_method(_OpenLxUI.vector_UIElement___setitem__)
    pop = _swig_new_instance_method(_OpenLxUI.vector_UIElement_pop)
    append = _swig_new_instance_method(_OpenLxUI.vector_UIElement_append)
    empty = _swig_new_instance_method(_OpenLxUI.vector_UIElement_empty)
    size = _swig_new_instance_method(_OpenLxUI.vector_UIElement_size)
    swap = _swig_new_instance_method(_OpenLxUI.vector_UIElement_swap)
    begin = _swig_new_instance_method(_OpenLxUI.vector_UIElement_begin)
    end = _swig_new_instance_method(_OpenLxUI.vector_UIElement_end)
    rbegin = _swig_new_instance_method(_OpenLxUI.vector_UIElement_rbegin)
    rend = _swig_new_instance_method(_OpenLxUI.vector_UIElement_rend)
    clear = _swig_new_instance_method(_OpenLxUI.vector_UIElement_clear)
    get_allocator = _swig_new_instance_method(_OpenLxUI.vector_UIElement_get_allocator)
    pop_back = _swig_new_instance_method(_OpenLxUI.vector_UIElement_pop_back)
    erase = _swig_new_instance_method(_OpenLxUI.vector_UIElement_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_UIElement self) -> vector_UIElement
        __init__(vector_UIElement self, vector_UIElement other) -> vector_UIElement
        __init__(vector_UIElement self, std::vector< std::shared_ptr< OpenLxUI::UIElement > >::size_type size) -> vector_UIElement
        __init__(vector_UIElement self, std::vector< std::shared_ptr< OpenLxUI::UIElement > >::size_type size, std::vector< std::shared_ptr< OpenLxUI::UIElement > >::value_type const & value) -> vector_UIElement
        """
        _OpenLxUI.vector_UIElement_swiginit(self, _OpenLxUI.new_vector_UIElement(*args))
    push_back = _swig_new_instance_method(_OpenLxUI.vector_UIElement_push_back)
    front = _swig_new_instance_method(_OpenLxUI.vector_UIElement_front)
    back = _swig_new_instance_method(_OpenLxUI.vector_UIElement_back)
    assign = _swig_new_instance_method(_OpenLxUI.vector_UIElement_assign)
    resize = _swig_new_instance_method(_OpenLxUI.vector_UIElement_resize)
    insert = _swig_new_instance_method(_OpenLxUI.vector_UIElement_insert)
    reserve = _swig_new_instance_method(_OpenLxUI.vector_UIElement_reserve)
    capacity = _swig_new_instance_method(_OpenLxUI.vector_UIElement_capacity)
    __swig_destroy__ = _OpenLxUI.delete_vector_UIElement

# Register vector_UIElement in _OpenLxUI:
_OpenLxUI.vector_UIElement_swigregister(vector_UIElement)
class vector_SceneView(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< OpenLxUI::SceneView > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_OpenLxUI.vector_SceneView_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_OpenLxUI.vector_SceneView___nonzero__)
    __bool__ = _swig_new_instance_method(_OpenLxUI.vector_SceneView___bool__)
    __len__ = _swig_new_instance_method(_OpenLxUI.vector_SceneView___len__)
    __getslice__ = _swig_new_instance_method(_OpenLxUI.vector_SceneView___getslice__)
    __setslice__ = _swig_new_instance_method(_OpenLxUI.vector_SceneView___setslice__)
    __delslice__ = _swig_new_instance_method(_OpenLxUI.vector_SceneView___delslice__)
    __delitem__ = _swig_new_instance_method(_OpenLxUI.vector_SceneView___delitem__)
    __getitem__ = _swig_new_instance_method(_OpenLxUI.vector_SceneView___getitem__)
    __setitem__ = _swig_new_instance_method(_OpenLxUI.vector_SceneView___setitem__)
    pop = _swig_new_instance_method(_OpenLxUI.vector_SceneView_pop)
    append = _swig_new_instance_method(_OpenLxUI.vector_SceneView_append)
    empty = _swig_new_instance_method(_OpenLxUI.vector_SceneView_empty)
    size = _swig_new_instance_method(_OpenLxUI.vector_SceneView_size)
    swap = _swig_new_instance_method(_OpenLxUI.vector_SceneView_swap)
    begin = _swig_new_instance_method(_OpenLxUI.vector_SceneView_begin)
    end = _swig_new_instance_method(_OpenLxUI.vector_SceneView_end)
    rbegin = _swig_new_instance_method(_OpenLxUI.vector_SceneView_rbegin)
    rend = _swig_new_instance_method(_OpenLxUI.vector_SceneView_rend)
    clear = _swig_new_instance_method(_OpenLxUI.vector_SceneView_clear)
    get_allocator = _swig_new_instance_method(_OpenLxUI.vector_SceneView_get_allocator)
    pop_back = _swig_new_instance_method(_OpenLxUI.vector_SceneView_pop_back)
    erase = _swig_new_instance_method(_OpenLxUI.vector_SceneView_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_SceneView self) -> vector_SceneView
        __init__(vector_SceneView self, vector_SceneView other) -> vector_SceneView
        __init__(vector_SceneView self, std::vector< std::shared_ptr< OpenLxUI::SceneView > >::size_type size) -> vector_SceneView
        __init__(vector_SceneView self, std::vector< std::shared_ptr< OpenLxUI::SceneView > >::size_type size, std::vector< std::shared_ptr< OpenLxUI::SceneView > >::value_type const & value) -> vector_SceneView
        """
        _OpenLxUI.vector_SceneView_swiginit(self, _OpenLxUI.new_vector_SceneView(*args))
    push_back = _swig_new_instance_method(_OpenLxUI.vector_SceneView_push_back)
    front = _swig_new_instance_method(_OpenLxUI.vector_SceneView_front)
    back = _swig_new_instance_method(_OpenLxUI.vector_SceneView_back)
    assign = _swig_new_instance_method(_OpenLxUI.vector_SceneView_assign)
    resize = _swig_new_instance_method(_OpenLxUI.vector_SceneView_resize)
    insert = _swig_new_instance_method(_OpenLxUI.vector_SceneView_insert)
    reserve = _swig_new_instance_method(_OpenLxUI.vector_SceneView_reserve)
    capacity = _swig_new_instance_method(_OpenLxUI.vector_SceneView_capacity)
    __swig_destroy__ = _OpenLxUI.delete_vector_SceneView

# Register vector_SceneView in _OpenLxUI:
_OpenLxUI.vector_SceneView_swigregister(vector_SceneView)
class vector_Viewer(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< OpenLxUI::Viewer > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_OpenLxUI.vector_Viewer_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_OpenLxUI.vector_Viewer___nonzero__)
    __bool__ = _swig_new_instance_method(_OpenLxUI.vector_Viewer___bool__)
    __len__ = _swig_new_instance_method(_OpenLxUI.vector_Viewer___len__)
    __getslice__ = _swig_new_instance_method(_OpenLxUI.vector_Viewer___getslice__)
    __setslice__ = _swig_new_instance_method(_OpenLxUI.vector_Viewer___setslice__)
    __delslice__ = _swig_new_instance_method(_OpenLxUI.vector_Viewer___delslice__)
    __delitem__ = _swig_new_instance_method(_OpenLxUI.vector_Viewer___delitem__)
    __getitem__ = _swig_new_instance_method(_OpenLxUI.vector_Viewer___getitem__)
    __setitem__ = _swig_new_instance_method(_OpenLxUI.vector_Viewer___setitem__)
    pop = _swig_new_instance_method(_OpenLxUI.vector_Viewer_pop)
    append = _swig_new_instance_method(_OpenLxUI.vector_Viewer_append)
    empty = _swig_new_instance_method(_OpenLxUI.vector_Viewer_empty)
    size = _swig_new_instance_method(_OpenLxUI.vector_Viewer_size)
    swap = _swig_new_instance_method(_OpenLxUI.vector_Viewer_swap)
    begin = _swig_new_instance_method(_OpenLxUI.vector_Viewer_begin)
    end = _swig_new_instance_method(_OpenLxUI.vector_Viewer_end)
    rbegin = _swig_new_instance_method(_OpenLxUI.vector_Viewer_rbegin)
    rend = _swig_new_instance_method(_OpenLxUI.vector_Viewer_rend)
    clear = _swig_new_instance_method(_OpenLxUI.vector_Viewer_clear)
    get_allocator = _swig_new_instance_method(_OpenLxUI.vector_Viewer_get_allocator)
    pop_back = _swig_new_instance_method(_OpenLxUI.vector_Viewer_pop_back)
    erase = _swig_new_instance_method(_OpenLxUI.vector_Viewer_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_Viewer self) -> vector_Viewer
        __init__(vector_Viewer self, vector_Viewer other) -> vector_Viewer
        __init__(vector_Viewer self, std::vector< std::shared_ptr< OpenLxUI::Viewer > >::size_type size) -> vector_Viewer
        __init__(vector_Viewer self, std::vector< std::shared_ptr< OpenLxUI::Viewer > >::size_type size, std::vector< std::shared_ptr< OpenLxUI::Viewer > >::value_type const & value) -> vector_Viewer
        """
        _OpenLxUI.vector_Viewer_swiginit(self, _OpenLxUI.new_vector_Viewer(*args))
    push_back = _swig_new_instance_method(_OpenLxUI.vector_Viewer_push_back)
    front = _swig_new_instance_method(_OpenLxUI.vector_Viewer_front)
    back = _swig_new_instance_method(_OpenLxUI.vector_Viewer_back)
    assign = _swig_new_instance_method(_OpenLxUI.vector_Viewer_assign)
    resize = _swig_new_instance_method(_OpenLxUI.vector_Viewer_resize)
    insert = _swig_new_instance_method(_OpenLxUI.vector_Viewer_insert)
    reserve = _swig_new_instance_method(_OpenLxUI.vector_Viewer_reserve)
    capacity = _swig_new_instance_method(_OpenLxUI.vector_Viewer_capacity)
    __swig_destroy__ = _OpenLxUI.delete_vector_Viewer

# Register vector_Viewer in _OpenLxUI:
_OpenLxUI.vector_Viewer_swigregister(vector_Viewer)

