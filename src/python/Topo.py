# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _Topo
else:
    import _Topo

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _Topo.SWIG_PyInstanceMethod_New
_swig_new_static_method = _Topo.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

class SwigPyIterator(object):
    r"""Proxy of C++ swig::SwigPyIterator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Topo.delete_SwigPyIterator
    value = _swig_new_instance_method(_Topo.SwigPyIterator_value)
    incr = _swig_new_instance_method(_Topo.SwigPyIterator_incr)
    decr = _swig_new_instance_method(_Topo.SwigPyIterator_decr)
    distance = _swig_new_instance_method(_Topo.SwigPyIterator_distance)
    equal = _swig_new_instance_method(_Topo.SwigPyIterator_equal)
    copy = _swig_new_instance_method(_Topo.SwigPyIterator_copy)
    next = _swig_new_instance_method(_Topo.SwigPyIterator_next)
    __next__ = _swig_new_instance_method(_Topo.SwigPyIterator___next__)
    previous = _swig_new_instance_method(_Topo.SwigPyIterator_previous)
    advance = _swig_new_instance_method(_Topo.SwigPyIterator_advance)
    __eq__ = _swig_new_instance_method(_Topo.SwigPyIterator___eq__)
    __ne__ = _swig_new_instance_method(_Topo.SwigPyIterator___ne__)
    __iadd__ = _swig_new_instance_method(_Topo.SwigPyIterator___iadd__)
    __isub__ = _swig_new_instance_method(_Topo.SwigPyIterator___isub__)
    __add__ = _swig_new_instance_method(_Topo.SwigPyIterator___add__)
    __sub__ = _swig_new_instance_method(_Topo.SwigPyIterator___sub__)
    def __iter__(self):
        return self

# Register SwigPyIterator in _Topo:
_Topo.SwigPyIterator_swigregister(SwigPyIterator)
class intP(object):
    r"""Proxy of C++ intP class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(intP self) -> intP"""
        _Topo.intP_swiginit(self, _Topo.new_intP())
    __swig_destroy__ = _Topo.delete_intP
    assign = _swig_new_instance_method(_Topo.intP_assign)
    value = _swig_new_instance_method(_Topo.intP_value)
    cast = _swig_new_instance_method(_Topo.intP_cast)
    frompointer = _swig_new_static_method(_Topo.intP_frompointer)

# Register intP in _Topo:
_Topo.intP_swigregister(intP)
intP_frompointer = _Topo.intP_frompointer

class doubleP(object):
    r"""Proxy of C++ doubleP class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(doubleP self) -> doubleP"""
        _Topo.doubleP_swiginit(self, _Topo.new_doubleP())
    __swig_destroy__ = _Topo.delete_doubleP
    assign = _swig_new_instance_method(_Topo.doubleP_assign)
    value = _swig_new_instance_method(_Topo.doubleP_value)
    cast = _swig_new_instance_method(_Topo.doubleP_cast)
    frompointer = _swig_new_static_method(_Topo.doubleP_frompointer)

# Register doubleP in _Topo:
_Topo.doubleP_swigregister(doubleP)
doubleP_frompointer = _Topo.doubleP_frompointer

class boolP(object):
    r"""Proxy of C++ boolP class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(boolP self) -> boolP"""
        _Topo.boolP_swiginit(self, _Topo.new_boolP())
    __swig_destroy__ = _Topo.delete_boolP
    assign = _swig_new_instance_method(_Topo.boolP_assign)
    value = _swig_new_instance_method(_Topo.boolP_value)
    cast = _swig_new_instance_method(_Topo.boolP_cast)
    frompointer = _swig_new_static_method(_Topo.boolP_frompointer)

# Register boolP in _Topo:
_Topo.boolP_swigregister(boolP)
boolP_frompointer = _Topo.boolP_frompointer

import Base
import Geom
SHARED_PTR_DISOWN = _Topo.SHARED_PTR_DISOWN

class ET_ProjectPointOnEdge_Result1(object):
    r"""Proxy of C++ Topo::ET_ProjectPointOnEdge_Result1 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ok = property(_Topo.ET_ProjectPointOnEdge_Result1_ok_get, _Topo.ET_ProjectPointOnEdge_Result1_ok_set, doc=r"""ok : bool""")
    nearest = property(_Topo.ET_ProjectPointOnEdge_Result1_nearest_get, _Topo.ET_ProjectPointOnEdge_Result1_nearest_set, doc=r"""nearest : Geom::Pnt""")
    refDirection = property(_Topo.ET_ProjectPointOnEdge_Result1_refDirection_get, _Topo.ET_ProjectPointOnEdge_Result1_refDirection_set, doc=r"""refDirection : Geom::Dir""")

    def __init__(self):
        r"""__init__(ET_ProjectPointOnEdge_Result1 self) -> ET_ProjectPointOnEdge_Result1"""
        _Topo.ET_ProjectPointOnEdge_Result1_swiginit(self, _Topo.new_ET_ProjectPointOnEdge_Result1())
    __swig_destroy__ = _Topo.delete_ET_ProjectPointOnEdge_Result1

# Register ET_ProjectPointOnEdge_Result1 in _Topo:
_Topo.ET_ProjectPointOnEdge_Result1_swigregister(ET_ProjectPointOnEdge_Result1)
class ET_ProjectPointOnEdge_Result2(object):
    r"""Proxy of C++ Topo::ET_ProjectPointOnEdge_Result2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ok = property(_Topo.ET_ProjectPointOnEdge_Result2_ok_get, _Topo.ET_ProjectPointOnEdge_Result2_ok_set, doc=r"""ok : bool""")
    u = property(_Topo.ET_ProjectPointOnEdge_Result2_u_get, _Topo.ET_ProjectPointOnEdge_Result2_u_set, doc=r"""u : double""")

    def __init__(self):
        r"""__init__(ET_ProjectPointOnEdge_Result2 self) -> ET_ProjectPointOnEdge_Result2"""
        _Topo.ET_ProjectPointOnEdge_Result2_swiginit(self, _Topo.new_ET_ProjectPointOnEdge_Result2())
    __swig_destroy__ = _Topo.delete_ET_ProjectPointOnEdge_Result2

# Register ET_ProjectPointOnEdge_Result2 in _Topo:
_Topo.ET_ProjectPointOnEdge_Result2_swigregister(ET_ProjectPointOnEdge_Result2)
class ET_CalculateOffsetFromEdgeThruPoint_Result(object):
    r"""Proxy of C++ Topo::ET_CalculateOffsetFromEdgeThruPoint_Result class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ok = property(_Topo.ET_CalculateOffsetFromEdgeThruPoint_Result_ok_get, _Topo.ET_CalculateOffsetFromEdgeThruPoint_Result_ok_set, doc=r"""ok : bool""")
    offset = property(_Topo.ET_CalculateOffsetFromEdgeThruPoint_Result_offset_get, _Topo.ET_CalculateOffsetFromEdgeThruPoint_Result_offset_set, doc=r"""offset : double""")
    refDirection = property(_Topo.ET_CalculateOffsetFromEdgeThruPoint_Result_refDirection_get, _Topo.ET_CalculateOffsetFromEdgeThruPoint_Result_refDirection_set, doc=r"""refDirection : Geom::Dir""")

    def __init__(self):
        r"""__init__(ET_CalculateOffsetFromEdgeThruPoint_Result self) -> ET_CalculateOffsetFromEdgeThruPoint_Result"""
        _Topo.ET_CalculateOffsetFromEdgeThruPoint_Result_swiginit(self, _Topo.new_ET_CalculateOffsetFromEdgeThruPoint_Result())
    __swig_destroy__ = _Topo.delete_ET_CalculateOffsetFromEdgeThruPoint_Result

# Register ET_CalculateOffsetFromEdgeThruPoint_Result in _Topo:
_Topo.ET_CalculateOffsetFromEdgeThruPoint_Result_swigregister(ET_CalculateOffsetFromEdgeThruPoint_Result)
class ET_FirstParameter_Result(object):
    r"""Proxy of C++ Topo::ET_FirstParameter_Result class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ok = property(_Topo.ET_FirstParameter_Result_ok_get, _Topo.ET_FirstParameter_Result_ok_set, doc=r"""ok : bool""")
    u = property(_Topo.ET_FirstParameter_Result_u_get, _Topo.ET_FirstParameter_Result_u_set, doc=r"""u : double""")

    def __init__(self):
        r"""__init__(ET_FirstParameter_Result self) -> ET_FirstParameter_Result"""
        _Topo.ET_FirstParameter_Result_swiginit(self, _Topo.new_ET_FirstParameter_Result())
    __swig_destroy__ = _Topo.delete_ET_FirstParameter_Result

# Register ET_FirstParameter_Result in _Topo:
_Topo.ET_FirstParameter_Result_swigregister(ET_FirstParameter_Result)
class ET_LastParameter_Result(object):
    r"""Proxy of C++ Topo::ET_LastParameter_Result class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ok = property(_Topo.ET_LastParameter_Result_ok_get, _Topo.ET_LastParameter_Result_ok_set, doc=r"""ok : bool""")
    u = property(_Topo.ET_LastParameter_Result_u_get, _Topo.ET_LastParameter_Result_u_set, doc=r"""u : double""")

    def __init__(self):
        r"""__init__(ET_LastParameter_Result self) -> ET_LastParameter_Result"""
        _Topo.ET_LastParameter_Result_swiginit(self, _Topo.new_ET_LastParameter_Result())
    __swig_destroy__ = _Topo.delete_ET_LastParameter_Result

# Register ET_LastParameter_Result in _Topo:
_Topo.ET_LastParameter_Result_swigregister(ET_LastParameter_Result)
class ET_Value_Result(object):
    r"""Proxy of C++ Topo::ET_Value_Result class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ok = property(_Topo.ET_Value_Result_ok_get, _Topo.ET_Value_Result_ok_set, doc=r"""ok : bool""")
    p = property(_Topo.ET_Value_Result_p_get, _Topo.ET_Value_Result_p_set, doc=r"""p : Geom::Pnt""")

    def __init__(self):
        r"""__init__(ET_Value_Result self) -> ET_Value_Result"""
        _Topo.ET_Value_Result_swiginit(self, _Topo.new_ET_Value_Result())
    __swig_destroy__ = _Topo.delete_ET_Value_Result

# Register ET_Value_Result in _Topo:
_Topo.ET_Value_Result_swigregister(ET_Value_Result)
class ET_D0_Result(object):
    r"""Proxy of C++ Topo::ET_D0_Result class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ok = property(_Topo.ET_D0_Result_ok_get, _Topo.ET_D0_Result_ok_set, doc=r"""ok : bool""")
    p = property(_Topo.ET_D0_Result_p_get, _Topo.ET_D0_Result_p_set, doc=r"""p : Geom::Pnt""")

    def __init__(self):
        r"""__init__(ET_D0_Result self) -> ET_D0_Result"""
        _Topo.ET_D0_Result_swiginit(self, _Topo.new_ET_D0_Result())
    __swig_destroy__ = _Topo.delete_ET_D0_Result

# Register ET_D0_Result in _Topo:
_Topo.ET_D0_Result_swigregister(ET_D0_Result)
class ET_D1_Result(object):
    r"""Proxy of C++ Topo::ET_D1_Result class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ok = property(_Topo.ET_D1_Result_ok_get, _Topo.ET_D1_Result_ok_set, doc=r"""ok : bool""")
    p = property(_Topo.ET_D1_Result_p_get, _Topo.ET_D1_Result_p_set, doc=r"""p : Geom::Pnt""")
    v1 = property(_Topo.ET_D1_Result_v1_get, _Topo.ET_D1_Result_v1_set, doc=r"""v1 : Geom::Vec""")

    def __init__(self):
        r"""__init__(ET_D1_Result self) -> ET_D1_Result"""
        _Topo.ET_D1_Result_swiginit(self, _Topo.new_ET_D1_Result())
    __swig_destroy__ = _Topo.delete_ET_D1_Result

# Register ET_D1_Result in _Topo:
_Topo.ET_D1_Result_swigregister(ET_D1_Result)
class ET_D2_Result(object):
    r"""Proxy of C++ Topo::ET_D2_Result class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ok = property(_Topo.ET_D2_Result_ok_get, _Topo.ET_D2_Result_ok_set, doc=r"""ok : bool""")
    p = property(_Topo.ET_D2_Result_p_get, _Topo.ET_D2_Result_p_set, doc=r"""p : Geom::Pnt""")
    v1 = property(_Topo.ET_D2_Result_v1_get, _Topo.ET_D2_Result_v1_set, doc=r"""v1 : Geom::Vec""")
    v2 = property(_Topo.ET_D2_Result_v2_get, _Topo.ET_D2_Result_v2_set, doc=r"""v2 : Geom::Vec""")

    def __init__(self):
        r"""__init__(ET_D2_Result self) -> ET_D2_Result"""
        _Topo.ET_D2_Result_swiginit(self, _Topo.new_ET_D2_Result())
    __swig_destroy__ = _Topo.delete_ET_D2_Result

# Register ET_D2_Result in _Topo:
_Topo.ET_D2_Result_swigregister(ET_D2_Result)
class ET_D3_Result(object):
    r"""Proxy of C++ Topo::ET_D3_Result class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ok = property(_Topo.ET_D3_Result_ok_get, _Topo.ET_D3_Result_ok_set, doc=r"""ok : bool""")
    p = property(_Topo.ET_D3_Result_p_get, _Topo.ET_D3_Result_p_set, doc=r"""p : Geom::Pnt""")
    v1 = property(_Topo.ET_D3_Result_v1_get, _Topo.ET_D3_Result_v1_set, doc=r"""v1 : Geom::Vec""")
    v2 = property(_Topo.ET_D3_Result_v2_get, _Topo.ET_D3_Result_v2_set, doc=r"""v2 : Geom::Vec""")
    v3 = property(_Topo.ET_D3_Result_v3_get, _Topo.ET_D3_Result_v3_set, doc=r"""v3 : Geom::Vec""")

    def __init__(self):
        r"""__init__(ET_D3_Result self) -> ET_D3_Result"""
        _Topo.ET_D3_Result_swiginit(self, _Topo.new_ET_D3_Result())
    __swig_destroy__ = _Topo.delete_ET_D3_Result

# Register ET_D3_Result in _Topo:
_Topo.ET_D3_Result_swigregister(ET_D3_Result)
class ET_SplitEdge_Result(object):
    r"""Proxy of C++ Topo::ET_SplitEdge_Result class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ok = property(_Topo.ET_SplitEdge_Result_ok_get, _Topo.ET_SplitEdge_Result_ok_set, doc=r"""ok : bool""")
    edge1 = property(_Topo.ET_SplitEdge_Result_edge1_get, _Topo.ET_SplitEdge_Result_edge1_set, doc=r"""edge1 : pEdge""")
    edge2 = property(_Topo.ET_SplitEdge_Result_edge2_get, _Topo.ET_SplitEdge_Result_edge2_set, doc=r"""edge2 : pEdge""")

    def __init__(self):
        r"""__init__(ET_SplitEdge_Result self) -> ET_SplitEdge_Result"""
        _Topo.ET_SplitEdge_Result_swiginit(self, _Topo.new_ET_SplitEdge_Result())
    __swig_destroy__ = _Topo.delete_ET_SplitEdge_Result

# Register ET_SplitEdge_Result in _Topo:
_Topo.ET_SplitEdge_Result_swigregister(ET_SplitEdge_Result)
class ET_GeomCurveType_Result(object):
    r"""Proxy of C++ Topo::ET_GeomCurveType_Result class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ok = property(_Topo.ET_GeomCurveType_Result_ok_get, _Topo.ET_GeomCurveType_Result_ok_set, doc=r"""ok : bool""")
    type = property(_Topo.ET_GeomCurveType_Result_type_get, _Topo.ET_GeomCurveType_Result_type_set, doc=r"""type : Geom::CurveType""")

    def __init__(self):
        r"""__init__(ET_GeomCurveType_Result self) -> ET_GeomCurveType_Result"""
        _Topo.ET_GeomCurveType_Result_swiginit(self, _Topo.new_ET_GeomCurveType_Result())
    __swig_destroy__ = _Topo.delete_ET_GeomCurveType_Result

# Register ET_GeomCurveType_Result in _Topo:
_Topo.ET_GeomCurveType_Result_swigregister(ET_GeomCurveType_Result)
class ET_ArcParameters_Result(object):
    r"""Proxy of C++ Topo::ET_ArcParameters_Result class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ok = property(_Topo.ET_ArcParameters_Result_ok_get, _Topo.ET_ArcParameters_Result_ok_set, doc=r"""ok : bool""")
    circle = property(_Topo.ET_ArcParameters_Result_circle_get, _Topo.ET_ArcParameters_Result_circle_set, doc=r"""circle : Geom::Circ""")
    startParam = property(_Topo.ET_ArcParameters_Result_startParam_get, _Topo.ET_ArcParameters_Result_startParam_set, doc=r"""startParam : double""")
    endParam = property(_Topo.ET_ArcParameters_Result_endParam_get, _Topo.ET_ArcParameters_Result_endParam_set, doc=r"""endParam : double""")

    def __init__(self):
        r"""__init__(ET_ArcParameters_Result self) -> ET_ArcParameters_Result"""
        _Topo.ET_ArcParameters_Result_swiginit(self, _Topo.new_ET_ArcParameters_Result())
    __swig_destroy__ = _Topo.delete_ET_ArcParameters_Result

# Register ET_ArcParameters_Result in _Topo:
_Topo.ET_ArcParameters_Result_swigregister(ET_ArcParameters_Result)
class ET_LineParameters_Result(object):
    r"""Proxy of C++ Topo::ET_LineParameters_Result class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ok = property(_Topo.ET_LineParameters_Result_ok_get, _Topo.ET_LineParameters_Result_ok_set, doc=r"""ok : bool""")
    line = property(_Topo.ET_LineParameters_Result_line_get, _Topo.ET_LineParameters_Result_line_set, doc=r"""line : Geom::Lin""")
    startParam = property(_Topo.ET_LineParameters_Result_startParam_get, _Topo.ET_LineParameters_Result_startParam_set, doc=r"""startParam : double""")
    endParam = property(_Topo.ET_LineParameters_Result_endParam_get, _Topo.ET_LineParameters_Result_endParam_set, doc=r"""endParam : double""")
    scale = property(_Topo.ET_LineParameters_Result_scale_get, _Topo.ET_LineParameters_Result_scale_set, doc=r"""scale : double""")

    def __init__(self):
        r"""__init__(ET_LineParameters_Result self) -> ET_LineParameters_Result"""
        _Topo.ET_LineParameters_Result_swiginit(self, _Topo.new_ET_LineParameters_Result())
    __swig_destroy__ = _Topo.delete_ET_LineParameters_Result

# Register ET_LineParameters_Result in _Topo:
_Topo.ET_LineParameters_Result_swigregister(ET_LineParameters_Result)
class ET_Intersects_Result(object):
    r"""Proxy of C++ Topo::ET_Intersects_Result class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ok = property(_Topo.ET_Intersects_Result_ok_get, _Topo.ET_Intersects_Result_ok_set, doc=r"""ok : bool""")
    intersections = property(_Topo.ET_Intersects_Result_intersections_get, _Topo.ET_Intersects_Result_intersections_set, doc=r"""intersections : std::vector<(Geom::Pnt,std::allocator<(Geom::Pnt)>)>""")

    def __init__(self):
        r"""__init__(ET_Intersects_Result self) -> ET_Intersects_Result"""
        _Topo.ET_Intersects_Result_swiginit(self, _Topo.new_ET_Intersects_Result())
    __swig_destroy__ = _Topo.delete_ET_Intersects_Result

# Register ET_Intersects_Result in _Topo:
_Topo.ET_Intersects_Result_swigregister(ET_Intersects_Result)
class ET_DiscretizeNonLinearEdge_Result(object):
    r"""Proxy of C++ Topo::ET_DiscretizeNonLinearEdge_Result class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ok = property(_Topo.ET_DiscretizeNonLinearEdge_Result_ok_get, _Topo.ET_DiscretizeNonLinearEdge_Result_ok_set, doc=r"""ok : bool""")
    points = property(_Topo.ET_DiscretizeNonLinearEdge_Result_points_get, _Topo.ET_DiscretizeNonLinearEdge_Result_points_set, doc=r"""points : std::vector<(Geom::Pnt,std::allocator<(Geom::Pnt)>)>""")

    def __init__(self):
        r"""__init__(ET_DiscretizeNonLinearEdge_Result self) -> ET_DiscretizeNonLinearEdge_Result"""
        _Topo.ET_DiscretizeNonLinearEdge_Result_swiginit(self, _Topo.new_ET_DiscretizeNonLinearEdge_Result())
    __swig_destroy__ = _Topo.delete_ET_DiscretizeNonLinearEdge_Result

# Register ET_DiscretizeNonLinearEdge_Result in _Topo:
_Topo.ET_DiscretizeNonLinearEdge_Result_swigregister(ET_DiscretizeNonLinearEdge_Result)
class ET_Bspline_facet_Result(object):
    r"""Proxy of C++ Topo::ET_Bspline_facet_Result class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ok = property(_Topo.ET_Bspline_facet_Result_ok_get, _Topo.ET_Bspline_facet_Result_ok_set, doc=r"""ok : bool""")
    faceted_pnts = property(_Topo.ET_Bspline_facet_Result_faceted_pnts_get, _Topo.ET_Bspline_facet_Result_faceted_pnts_set, doc=r"""faceted_pnts : std::vector<(Geom::Pnt,std::allocator<(Geom::Pnt)>)>""")

    def __init__(self):
        r"""__init__(ET_Bspline_facet_Result self) -> ET_Bspline_facet_Result"""
        _Topo.ET_Bspline_facet_Result_swiginit(self, _Topo.new_ET_Bspline_facet_Result())
    __swig_destroy__ = _Topo.delete_ET_Bspline_facet_Result

# Register ET_Bspline_facet_Result in _Topo:
_Topo.ET_Bspline_facet_Result_swigregister(ET_Bspline_facet_Result)
class ET_ClothoidParameters_Result(object):
    r"""Proxy of C++ Topo::ET_ClothoidParameters_Result class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ok = property(_Topo.ET_ClothoidParameters_Result_ok_get, _Topo.ET_ClothoidParameters_Result_ok_set, doc=r"""ok : bool""")
    ax2 = property(_Topo.ET_ClothoidParameters_Result_ax2_get, _Topo.ET_ClothoidParameters_Result_ax2_set, doc=r"""ax2 : Geom::Ax2""")
    clothoid = property(_Topo.ET_ClothoidParameters_Result_clothoid_get, _Topo.ET_ClothoidParameters_Result_clothoid_set, doc=r"""clothoid : Geom::Clothoid2d""")

    def __init__(self):
        r"""__init__(ET_ClothoidParameters_Result self) -> ET_ClothoidParameters_Result"""
        _Topo.ET_ClothoidParameters_Result_swiginit(self, _Topo.new_ET_ClothoidParameters_Result())
    __swig_destroy__ = _Topo.delete_ET_ClothoidParameters_Result

# Register ET_ClothoidParameters_Result in _Topo:
_Topo.ET_ClothoidParameters_Result_swigregister(ET_ClothoidParameters_Result)
class CompoundTool(object):
    r"""Proxy of C++ Topo::CompoundTool class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _Topo.delete_CompoundTool
    __setDefaultTool__ = _swig_new_static_method(_Topo.CompoundTool___setDefaultTool__)

    def __init__(self):
        r"""__init__(CompoundTool self) -> CompoundTool"""
        _Topo.CompoundTool_swiginit(self, _Topo.new_CompoundTool())

# Register CompoundTool in _Topo:
_Topo.CompoundTool_swigregister(CompoundTool)
CompoundTool___setDefaultTool__ = _Topo.CompoundTool___setDefaultTool__

class EdgeTool(object):
    r"""Proxy of C++ Topo::EdgeTool class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    copy = _swig_new_static_method(_Topo.EdgeTool_copy)
    makeEdge = _swig_new_static_method(_Topo.EdgeTool_makeEdge)
    makeArcOfCircle = _swig_new_static_method(_Topo.EdgeTool_makeArcOfCircle)
    makeEllipse = _swig_new_static_method(_Topo.EdgeTool_makeEllipse)
    makeHelix = _swig_new_static_method(_Topo.EdgeTool_makeHelix)
    sense = _swig_new_static_method(_Topo.EdgeTool_sense)
    getLength = _swig_new_static_method(_Topo.EdgeTool_getLength)
    isPointOnEdge = _swig_new_static_method(_Topo.EdgeTool_isPointOnEdge)
    isStraight = _swig_new_static_method(_Topo.EdgeTool_isStraight)
    isCircular = _swig_new_static_method(_Topo.EdgeTool_isCircular)
    isHelix = _swig_new_static_method(_Topo.EdgeTool_isHelix)
    getHelixParameters = _swig_new_static_method(_Topo.EdgeTool_getHelixParameters)
    getOrientation = _swig_new_static_method(_Topo.EdgeTool_getOrientation)
    reversed = _swig_new_static_method(_Topo.EdgeTool_reversed)
    getCentre = _swig_new_static_method(_Topo.EdgeTool_getCentre)
    extrudeEdge = _swig_new_static_method(_Topo.EdgeTool_extrudeEdge)
    transformed = _swig_new_static_method(_Topo.EdgeTool_transformed)
    areTheSameInstance = _swig_new_static_method(_Topo.EdgeTool_areTheSameInstance)
    getInstancePointer = _swig_new_static_method(_Topo.EdgeTool_getInstancePointer)
    makeParabolicArcSegment = _swig_new_static_method(_Topo.EdgeTool_makeParabolicArcSegment)
    makeClothoidSegment = _swig_new_static_method(_Topo.EdgeTool_makeClothoidSegment)
    getKnotsAndControlPointsFromEdge = _swig_new_static_method(_Topo.EdgeTool_getKnotsAndControlPointsFromEdge)
    join = _swig_new_static_method(_Topo.EdgeTool_join)
    projectPointOnEdge = _swig_new_static_method(_Topo.EdgeTool_projectPointOnEdge)
    projectPointOnEdge2 = _swig_new_static_method(_Topo.EdgeTool_projectPointOnEdge2)
    calculateOffsetFromEdgeThruPoint = _swig_new_static_method(_Topo.EdgeTool_calculateOffsetFromEdgeThruPoint)
    firstParameter = _swig_new_static_method(_Topo.EdgeTool_firstParameter)
    lastParameter = _swig_new_static_method(_Topo.EdgeTool_lastParameter)
    value = _swig_new_static_method(_Topo.EdgeTool_value)
    d0 = _swig_new_static_method(_Topo.EdgeTool_d0)
    d1 = _swig_new_static_method(_Topo.EdgeTool_d1)
    d2 = _swig_new_static_method(_Topo.EdgeTool_d2)
    d3 = _swig_new_static_method(_Topo.EdgeTool_d3)
    splitEdge = _swig_new_static_method(_Topo.EdgeTool_splitEdge)
    getGeomCurveType = _swig_new_static_method(_Topo.EdgeTool_getGeomCurveType)
    getArcParameters = _swig_new_static_method(_Topo.EdgeTool_getArcParameters)
    getLineParameters = _swig_new_static_method(_Topo.EdgeTool_getLineParameters)
    intersects = _swig_new_static_method(_Topo.EdgeTool_intersects)
    discretizeNonLinearEdge = _swig_new_static_method(_Topo.EdgeTool_discretizeNonLinearEdge)
    bspline_facet = _swig_new_static_method(_Topo.EdgeTool_bspline_facet)
    getClothoidParameters = _swig_new_static_method(_Topo.EdgeTool_getClothoidParameters)

    def __init__(self):
        r"""__init__(EdgeTool self) -> EdgeTool"""
        _Topo.EdgeTool_swiginit(self, _Topo.new_EdgeTool())
    __swig_destroy__ = _Topo.delete_EdgeTool

# Register EdgeTool in _Topo:
_Topo.EdgeTool_swigregister(EdgeTool)
EdgeTool_copy = _Topo.EdgeTool_copy
EdgeTool_makeEdge = _Topo.EdgeTool_makeEdge
EdgeTool_makeArcOfCircle = _Topo.EdgeTool_makeArcOfCircle
EdgeTool_makeEllipse = _Topo.EdgeTool_makeEllipse
EdgeTool_makeHelix = _Topo.EdgeTool_makeHelix
EdgeTool_sense = _Topo.EdgeTool_sense
EdgeTool_getLength = _Topo.EdgeTool_getLength
EdgeTool_isPointOnEdge = _Topo.EdgeTool_isPointOnEdge
EdgeTool_isStraight = _Topo.EdgeTool_isStraight
EdgeTool_isCircular = _Topo.EdgeTool_isCircular
EdgeTool_isHelix = _Topo.EdgeTool_isHelix
EdgeTool_getHelixParameters = _Topo.EdgeTool_getHelixParameters
EdgeTool_getOrientation = _Topo.EdgeTool_getOrientation
EdgeTool_reversed = _Topo.EdgeTool_reversed
EdgeTool_getCentre = _Topo.EdgeTool_getCentre
EdgeTool_extrudeEdge = _Topo.EdgeTool_extrudeEdge
EdgeTool_transformed = _Topo.EdgeTool_transformed
EdgeTool_areTheSameInstance = _Topo.EdgeTool_areTheSameInstance
EdgeTool_getInstancePointer = _Topo.EdgeTool_getInstancePointer
EdgeTool_makeParabolicArcSegment = _Topo.EdgeTool_makeParabolicArcSegment
EdgeTool_makeClothoidSegment = _Topo.EdgeTool_makeClothoidSegment
EdgeTool_getKnotsAndControlPointsFromEdge = _Topo.EdgeTool_getKnotsAndControlPointsFromEdge
EdgeTool_join = _Topo.EdgeTool_join
EdgeTool_projectPointOnEdge = _Topo.EdgeTool_projectPointOnEdge
EdgeTool_projectPointOnEdge2 = _Topo.EdgeTool_projectPointOnEdge2
EdgeTool_calculateOffsetFromEdgeThruPoint = _Topo.EdgeTool_calculateOffsetFromEdgeThruPoint
EdgeTool_firstParameter = _Topo.EdgeTool_firstParameter
EdgeTool_lastParameter = _Topo.EdgeTool_lastParameter
EdgeTool_value = _Topo.EdgeTool_value
EdgeTool_d0 = _Topo.EdgeTool_d0
EdgeTool_d1 = _Topo.EdgeTool_d1
EdgeTool_d2 = _Topo.EdgeTool_d2
EdgeTool_d3 = _Topo.EdgeTool_d3
EdgeTool_splitEdge = _Topo.EdgeTool_splitEdge
EdgeTool_getGeomCurveType = _Topo.EdgeTool_getGeomCurveType
EdgeTool_getArcParameters = _Topo.EdgeTool_getArcParameters
EdgeTool_getLineParameters = _Topo.EdgeTool_getLineParameters
EdgeTool_intersects = _Topo.EdgeTool_intersects
EdgeTool_discretizeNonLinearEdge = _Topo.EdgeTool_discretizeNonLinearEdge
EdgeTool_bspline_facet = _Topo.EdgeTool_bspline_facet
EdgeTool_getClothoidParameters = _Topo.EdgeTool_getClothoidParameters

class FaceTool(object):
    r"""Proxy of C++ Topo::FaceTool class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(FaceTool self) -> FaceTool"""
        _Topo.FaceTool_swiginit(self, _Topo.new_FaceTool())
    __swig_destroy__ = _Topo.delete_FaceTool
    copy = _swig_new_static_method(_Topo.FaceTool_copy)
    makeCylindricalFace = _swig_new_static_method(_Topo.FaceTool_makeCylindricalFace)
    makePlanarFace = _swig_new_static_method(_Topo.FaceTool_makePlanarFace)
    makePlanarFaceWithoutVoids = _swig_new_static_method(_Topo.FaceTool_makePlanarFaceWithoutVoids)
    makePolygon = _swig_new_static_method(_Topo.FaceTool_makePolygon)
    isValidPointForFace = _swig_new_static_method(_Topo.FaceTool_isValidPointForFace)
    transformed = _swig_new_static_method(_Topo.FaceTool_transformed)
    getGeomSurfaceType = _swig_new_static_method(_Topo.FaceTool_getGeomSurfaceType)
    getArea = _swig_new_static_method(_Topo.FaceTool_getArea)
    getOuterBoundary = _swig_new_static_method(_Topo.FaceTool_getOuterBoundary)
    getInnerBoundaries = _swig_new_static_method(_Topo.FaceTool_getInnerBoundaries)
    makeConnectedFaceSet = _swig_new_static_method(_Topo.FaceTool_makeConnectedFaceSet)
    isNurbs = _swig_new_static_method(_Topo.FaceTool_isNurbs)
    extrudePlanarFace = _swig_new_static_method(_Topo.FaceTool_extrudePlanarFace)
    extrudedFace = _swig_new_static_method(_Topo.FaceTool_extrudedFace)
    tweakFaceToPlane = _swig_new_static_method(_Topo.FaceTool_tweakFaceToPlane)
    extendFace = _swig_new_static_method(_Topo.FaceTool_extendFace)
    getCircularSurfaceParams = _swig_new_static_method(_Topo.FaceTool_getCircularSurfaceParams)
    getCylinderSurfaceParams = _swig_new_static_method(_Topo.FaceTool_getCylinderSurfaceParams)
    getConeSurfaceParams = _swig_new_static_method(_Topo.FaceTool_getConeSurfaceParams)
    getCentre = _swig_new_static_method(_Topo.FaceTool_getCentre)
    projectPointOnFace = _swig_new_static_method(_Topo.FaceTool_projectPointOnFace)
    isSelfIntersecting = _swig_new_static_method(_Topo.FaceTool_isSelfIntersecting)
    getOuterBoundaryPoints = _swig_new_static_method(_Topo.FaceTool_getOuterBoundaryPoints)
    getPointFaceDistance = _swig_new_static_method(_Topo.FaceTool_getPointFaceDistance)
    containsFace = _swig_new_static_method(_Topo.FaceTool_containsFace)
    getSpecialFaceInfo = _swig_new_static_method(_Topo.FaceTool_getSpecialFaceInfo)
    clash = _swig_new_static_method(_Topo.FaceTool_clash)
    clashFaces = _swig_new_static_method(_Topo.FaceTool_clashFaces)
    isRectangular = _swig_new_static_method(_Topo.FaceTool_isRectangular)
    projectFaceOnPlane = _swig_new_static_method(_Topo.FaceTool_projectFaceOnPlane)
    getOuterBoundaryPointsFast = _swig_new_static_method(_Topo.FaceTool_getOuterBoundaryPointsFast)
    makePlanarFaces = _swig_new_static_method(_Topo.FaceTool_makePlanarFaces)
    __setDefaultFaceTool__ = _swig_new_static_method(_Topo.FaceTool___setDefaultFaceTool__)
    __setAcisShapeTool__ = _swig_new_static_method(_Topo.FaceTool___setAcisShapeTool__)
    isPlanarFace = _swig_new_static_method(_Topo.FaceTool_isPlanarFace)
    makeFace = _swig_new_static_method(_Topo.FaceTool_makeFace)

# Register FaceTool in _Topo:
_Topo.FaceTool_swigregister(FaceTool)
FaceTool_copy = _Topo.FaceTool_copy
FaceTool_makeCylindricalFace = _Topo.FaceTool_makeCylindricalFace
FaceTool_makePlanarFace = _Topo.FaceTool_makePlanarFace
FaceTool_makePlanarFaceWithoutVoids = _Topo.FaceTool_makePlanarFaceWithoutVoids
FaceTool_makePolygon = _Topo.FaceTool_makePolygon
FaceTool_isValidPointForFace = _Topo.FaceTool_isValidPointForFace
FaceTool_transformed = _Topo.FaceTool_transformed
FaceTool_getGeomSurfaceType = _Topo.FaceTool_getGeomSurfaceType
FaceTool_getArea = _Topo.FaceTool_getArea
FaceTool_getOuterBoundary = _Topo.FaceTool_getOuterBoundary
FaceTool_getInnerBoundaries = _Topo.FaceTool_getInnerBoundaries
FaceTool_makeConnectedFaceSet = _Topo.FaceTool_makeConnectedFaceSet
FaceTool_isNurbs = _Topo.FaceTool_isNurbs
FaceTool_extrudePlanarFace = _Topo.FaceTool_extrudePlanarFace
FaceTool_extrudedFace = _Topo.FaceTool_extrudedFace
FaceTool_tweakFaceToPlane = _Topo.FaceTool_tweakFaceToPlane
FaceTool_extendFace = _Topo.FaceTool_extendFace
FaceTool_getCircularSurfaceParams = _Topo.FaceTool_getCircularSurfaceParams
FaceTool_getCylinderSurfaceParams = _Topo.FaceTool_getCylinderSurfaceParams
FaceTool_getConeSurfaceParams = _Topo.FaceTool_getConeSurfaceParams
FaceTool_getCentre = _Topo.FaceTool_getCentre
FaceTool_projectPointOnFace = _Topo.FaceTool_projectPointOnFace
FaceTool_isSelfIntersecting = _Topo.FaceTool_isSelfIntersecting
FaceTool_getOuterBoundaryPoints = _Topo.FaceTool_getOuterBoundaryPoints
FaceTool_getPointFaceDistance = _Topo.FaceTool_getPointFaceDistance
FaceTool_containsFace = _Topo.FaceTool_containsFace
FaceTool_getSpecialFaceInfo = _Topo.FaceTool_getSpecialFaceInfo
FaceTool_clash = _Topo.FaceTool_clash
FaceTool_clashFaces = _Topo.FaceTool_clashFaces
FaceTool_isRectangular = _Topo.FaceTool_isRectangular
FaceTool_projectFaceOnPlane = _Topo.FaceTool_projectFaceOnPlane
FaceTool_getOuterBoundaryPointsFast = _Topo.FaceTool_getOuterBoundaryPointsFast
FaceTool_makePlanarFaces = _Topo.FaceTool_makePlanarFaces
FaceTool___setDefaultFaceTool__ = _Topo.FaceTool___setDefaultFaceTool__
FaceTool___setAcisShapeTool__ = _Topo.FaceTool___setAcisShapeTool__
FaceTool_isPlanarFace = _Topo.FaceTool_isPlanarFace
FaceTool_makeFace = _Topo.FaceTool_makeFace

class LineItem(object):
    r"""Proxy of C++ Topo::LineItem class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    points = property(_Topo.LineItem_points_get, _Topo.LineItem_points_set, doc=r"""points : std::vector<(Geom::Pnt,std::allocator<(Geom::Pnt)>)>""")
    material = property(_Topo.LineItem_material_get, _Topo.LineItem_material_set, doc=r"""material : Draw::OglMaterial""")

    def __init__(self):
        r"""__init__(LineItem self) -> LineItem"""
        _Topo.LineItem_swiginit(self, _Topo.new_LineItem())
    __swig_destroy__ = _Topo.delete_LineItem

# Register LineItem in _Topo:
_Topo.LineItem_swigregister(LineItem)
class MeshTool(object):
    r"""Proxy of C++ Topo::MeshTool class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(MeshTool self) -> MeshTool"""
        _Topo.MeshTool_swiginit(self, _Topo.new_MeshTool())
    __swig_destroy__ = _Topo.delete_MeshTool
    copy = _swig_new_static_method(_Topo.MeshTool_copy)
    isClosed = _swig_new_static_method(_Topo.MeshTool_isClosed)
    isPlanar = _swig_new_static_method(_Topo.MeshTool_isPlanar)
    triangulationToMesh = _swig_new_static_method(_Topo.MeshTool_triangulationToMesh)
    convertMesh2Shape = _swig_new_static_method(_Topo.MeshTool_convertMesh2Shape)
    convertMesh2Solid = _swig_new_static_method(_Topo.MeshTool_convertMesh2Solid)
    convertMesh2Polyhedral = _swig_new_static_method(_Topo.MeshTool_convertMesh2Polyhedral)
    convertMesh2Brep_by_Face_Stiching = _swig_new_static_method(_Topo.MeshTool_convertMesh2Brep_by_Face_Stiching)
    convertMesh2Shell = _swig_new_static_method(_Topo.MeshTool_convertMesh2Shell)
    makeMeshFromBrepData = _swig_new_static_method(_Topo.MeshTool_makeMeshFromBrepData)
    makeMesh = _swig_new_static_method(_Topo.MeshTool_makeMesh)
    getMesh = _swig_new_static_method(_Topo.MeshTool_getMesh)
    getCreaseAngle = _swig_new_static_method(_Topo.MeshTool_getCreaseAngle)
    mergeEdges = _swig_new_static_method(_Topo.MeshTool_mergeEdges)
    getElementsFromOMFFile = _swig_new_static_method(_Topo.MeshTool_getElementsFromOMFFile)
    getModel = _swig_new_static_method(_Topo.MeshTool_getModel)
    getPoints = _swig_new_static_method(_Topo.MeshTool_getPoints)
    __setDefaultMeshTool__ = _swig_new_static_method(_Topo.MeshTool___setDefaultMeshTool__)
    writeOmfFile = _swig_new_static_method(_Topo.MeshTool_writeOmfFile)
    getInventorMeshColors = _swig_new_static_method(_Topo.MeshTool_getInventorMeshColors)
    makePlateFast = _swig_new_static_method(_Topo.MeshTool_makePlateFast)
    triangulateClosedPolyline = _swig_new_static_method(_Topo.MeshTool_triangulateClosedPolyline)
    tryToCloseMesh = _swig_new_static_method(_Topo.MeshTool_tryToCloseMesh)
    section = _swig_new_static_method(_Topo.MeshTool_section)
    getCreaseAngleFace = _swig_new_static_method(_Topo.MeshTool_getCreaseAngleFace)
    getCreaseAngleFaceMesh = _swig_new_static_method(_Topo.MeshTool_getCreaseAngleFaceMesh)
    computeCreaseEdges = _swig_new_static_method(_Topo.MeshTool_computeCreaseEdges)
    computeCreaseWires = _swig_new_static_method(_Topo.MeshTool_computeCreaseWires)

# Register MeshTool in _Topo:
_Topo.MeshTool_swigregister(MeshTool)
MeshTool_copy = _Topo.MeshTool_copy
MeshTool_isClosed = _Topo.MeshTool_isClosed
MeshTool_isPlanar = _Topo.MeshTool_isPlanar
MeshTool_triangulationToMesh = _Topo.MeshTool_triangulationToMesh
MeshTool_convertMesh2Shape = _Topo.MeshTool_convertMesh2Shape
MeshTool_convertMesh2Solid = _Topo.MeshTool_convertMesh2Solid
MeshTool_convertMesh2Polyhedral = _Topo.MeshTool_convertMesh2Polyhedral
MeshTool_convertMesh2Brep_by_Face_Stiching = _Topo.MeshTool_convertMesh2Brep_by_Face_Stiching
MeshTool_convertMesh2Shell = _Topo.MeshTool_convertMesh2Shell
MeshTool_makeMeshFromBrepData = _Topo.MeshTool_makeMeshFromBrepData
MeshTool_makeMesh = _Topo.MeshTool_makeMesh
MeshTool_getMesh = _Topo.MeshTool_getMesh
MeshTool_getCreaseAngle = _Topo.MeshTool_getCreaseAngle
MeshTool_mergeEdges = _Topo.MeshTool_mergeEdges
MeshTool_getElementsFromOMFFile = _Topo.MeshTool_getElementsFromOMFFile
MeshTool_getModel = _Topo.MeshTool_getModel
MeshTool_getPoints = _Topo.MeshTool_getPoints
MeshTool___setDefaultMeshTool__ = _Topo.MeshTool___setDefaultMeshTool__
MeshTool_writeOmfFile = _Topo.MeshTool_writeOmfFile
MeshTool_getInventorMeshColors = _Topo.MeshTool_getInventorMeshColors
MeshTool_makePlateFast = _Topo.MeshTool_makePlateFast
MeshTool_triangulateClosedPolyline = _Topo.MeshTool_triangulateClosedPolyline
MeshTool_tryToCloseMesh = _Topo.MeshTool_tryToCloseMesh
MeshTool_section = _Topo.MeshTool_section
MeshTool_getCreaseAngleFace = _Topo.MeshTool_getCreaseAngleFace
MeshTool_getCreaseAngleFaceMesh = _Topo.MeshTool_getCreaseAngleFaceMesh
MeshTool_computeCreaseEdges = _Topo.MeshTool_computeCreaseEdges
MeshTool_computeCreaseWires = _Topo.MeshTool_computeCreaseWires

class NurbsOptions(object):
    r"""Proxy of C++ Topo::NurbsOptions class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

# Register NurbsOptions in _Topo:
_Topo.NurbsOptions_swigregister(NurbsOptions)
class SkinningOptions(NurbsOptions):
    r"""Proxy of C++ Topo::SkinningOptions class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(SkinningOptions self) -> SkinningOptions"""
        _Topo.SkinningOptions_swiginit(self, _Topo.new_SkinningOptions())
    __swig_destroy__ = _Topo.delete_SkinningOptions
    setWiresU = _swig_new_instance_method(_Topo.SkinningOptions_setWiresU)
    getWiresU = _swig_new_instance_method(_Topo.SkinningOptions_getWiresU)
    ClosedMode_Open = _Topo.SkinningOptions_ClosedMode_Open
    
    ClosedMode_Closed = _Topo.SkinningOptions_ClosedMode_Closed
    
    ClosedMode_Loop = _Topo.SkinningOptions_ClosedMode_Loop
    
    ClosedMode_Solid = _Topo.SkinningOptions_ClosedMode_Solid
    
    setClosedMode = _swig_new_instance_method(_Topo.SkinningOptions_setClosedMode)
    getClosedMode = _swig_new_instance_method(_Topo.SkinningOptions_getClosedMode)
    setFlatShapes = _swig_new_instance_method(_Topo.SkinningOptions_setFlatShapes)
    setSolid = _swig_new_instance_method(_Topo.SkinningOptions_setSolid)
    getSolid = _swig_new_instance_method(_Topo.SkinningOptions_getSolid)
    setUniformUV = _swig_new_instance_method(_Topo.SkinningOptions_setUniformUV)
    getArcLen = _swig_new_instance_method(_Topo.SkinningOptions_getArcLen)
    getArcLenU = _swig_new_instance_method(_Topo.SkinningOptions_getArcLenU)
    getAllowUV = _swig_new_instance_method(_Topo.SkinningOptions_getAllowUV)
    getMerge = _swig_new_instance_method(_Topo.SkinningOptions_getMerge)
    getSelfIntersect = _swig_new_instance_method(_Topo.SkinningOptions_getSelfIntersect)
    getSimplify = _swig_new_instance_method(_Topo.SkinningOptions_getSimplify)

# Register SkinningOptions in _Topo:
_Topo.SkinningOptions_swigregister(SkinningOptions)
class BasicSkinningOptions(SkinningOptions):
    r"""Proxy of C++ Topo::BasicSkinningOptions class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(BasicSkinningOptions self) -> BasicSkinningOptions"""
        _Topo.BasicSkinningOptions_swiginit(self, _Topo.new_BasicSkinningOptions())
    __swig_destroy__ = _Topo.delete_BasicSkinningOptions

# Register BasicSkinningOptions in _Topo:
_Topo.BasicSkinningOptions_swigregister(BasicSkinningOptions)
class DraftSkinningOptions(SkinningOptions):
    r"""Proxy of C++ Topo::DraftSkinningOptions class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(DraftSkinningOptions self) -> DraftSkinningOptions"""
        _Topo.DraftSkinningOptions_swiginit(self, _Topo.new_DraftSkinningOptions())
    __swig_destroy__ = _Topo.delete_DraftSkinningOptions
    GapMode_Extended = _Topo.DraftSkinningOptions_GapMode_Extended
    
    GapMode_Rounded = _Topo.DraftSkinningOptions_GapMode_Rounded
    
    GapMode_Chamfered = _Topo.DraftSkinningOptions_GapMode_Chamfered
    
    setGapMode = _swig_new_instance_method(_Topo.DraftSkinningOptions_setGapMode)
    getGapMode = _swig_new_instance_method(_Topo.DraftSkinningOptions_getGapMode)
    endAngle = property(_Topo.DraftSkinningOptions_endAngle_get, _Topo.DraftSkinningOptions_endAngle_set, doc=r"""endAngle : double""")
    endMagnitude = property(_Topo.DraftSkinningOptions_endMagnitude_get, _Topo.DraftSkinningOptions_endMagnitude_set, doc=r"""endMagnitude : double""")
    startAngle = property(_Topo.DraftSkinningOptions_startAngle_get, _Topo.DraftSkinningOptions_startAngle_set, doc=r"""startAngle : double""")
    startMagnitude = property(_Topo.DraftSkinningOptions_startMagnitude_get, _Topo.DraftSkinningOptions_startMagnitude_set, doc=r"""startMagnitude : double""")

# Register DraftSkinningOptions in _Topo:
_Topo.DraftSkinningOptions_swigregister(DraftSkinningOptions)
class GuideSkinningOptions(SkinningOptions):
    r"""Proxy of C++ Topo::GuideSkinningOptions class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(GuideSkinningOptions self) -> GuideSkinningOptions"""
        _Topo.GuideSkinningOptions_swiginit(self, _Topo.new_GuideSkinningOptions())
    __swig_destroy__ = _Topo.delete_GuideSkinningOptions
    setWiresV = _swig_new_instance_method(_Topo.GuideSkinningOptions_setWiresV)
    getWiresV = _swig_new_instance_method(_Topo.GuideSkinningOptions_getWiresV)
    setVirtualGuides = _swig_new_instance_method(_Topo.GuideSkinningOptions_setVirtualGuides)
    getVirtualGuides = _swig_new_instance_method(_Topo.GuideSkinningOptions_getVirtualGuides)

# Register GuideSkinningOptions in _Topo:
_Topo.GuideSkinningOptions_swigregister(GuideSkinningOptions)
class LinearSkinningOptions(SkinningOptions):
    r"""Proxy of C++ Topo::LinearSkinningOptions class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(LinearSkinningOptions self) -> LinearSkinningOptions"""
        _Topo.LinearSkinningOptions_swiginit(self, _Topo.new_LinearSkinningOptions())
    __swig_destroy__ = _Topo.delete_LinearSkinningOptions

# Register LinearSkinningOptions in _Topo:
_Topo.LinearSkinningOptions_swigregister(LinearSkinningOptions)
class PathSkinningOptions(SkinningOptions):
    r"""Proxy of C++ Topo::PathSkinningOptions class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(PathSkinningOptions self) -> PathSkinningOptions"""
        _Topo.PathSkinningOptions_swiginit(self, _Topo.new_PathSkinningOptions())
    __swig_destroy__ = _Topo.delete_PathSkinningOptions
    setPath = _swig_new_instance_method(_Topo.PathSkinningOptions_setPath)
    getPath = _swig_new_instance_method(_Topo.PathSkinningOptions_getPath)

# Register PathSkinningOptions in _Topo:
_Topo.PathSkinningOptions_swigregister(PathSkinningOptions)
class PlanarSkinningOptions(SkinningOptions):
    r"""Proxy of C++ Topo::PlanarSkinningOptions class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(PlanarSkinningOptions self) -> PlanarSkinningOptions"""
        _Topo.PlanarSkinningOptions_swiginit(self, _Topo.new_PlanarSkinningOptions())
    __swig_destroy__ = _Topo.delete_PlanarSkinningOptions
    NormalsMode_First = _Topo.PlanarSkinningOptions_NormalsMode_First
    
    NormalsMode_Last = _Topo.PlanarSkinningOptions_NormalsMode_Last
    
    NormalsMode_Ends = _Topo.PlanarSkinningOptions_NormalsMode_Ends
    
    NormalsMode_All = _Topo.PlanarSkinningOptions_NormalsMode_All
    
    setNormalsMode = _swig_new_instance_method(_Topo.PlanarSkinningOptions_setNormalsMode)
    getNormalsMode = _swig_new_instance_method(_Topo.PlanarSkinningOptions_getNormalsMode)

# Register PlanarSkinningOptions in _Topo:
_Topo.PlanarSkinningOptions_swigregister(PlanarSkinningOptions)
class SweepingOptions(NurbsOptions):
    r"""Proxy of C++ Topo::SweepingOptions class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(SweepingOptions self) -> SweepingOptions"""
        _Topo.SweepingOptions_swiginit(self, _Topo.new_SweepingOptions())
    __swig_destroy__ = _Topo.delete_SweepingOptions
    setShapeU = _swig_new_instance_method(_Topo.SweepingOptions_setShapeU)
    getShapeU = _swig_new_instance_method(_Topo.SweepingOptions_getShapeU)
    setToFace = _swig_new_instance_method(_Topo.SweepingOptions_setToFace)
    getToFace = _swig_new_instance_method(_Topo.SweepingOptions_getToFace)
    setSolid = _swig_new_instance_method(_Topo.SweepingOptions_setSolid)
    getSolid = _swig_new_instance_method(_Topo.SweepingOptions_getSolid)
    setSelfIntersect = _swig_new_instance_method(_Topo.SweepingOptions_setSelfIntersect)
    getSelfIntersect = _swig_new_instance_method(_Topo.SweepingOptions_getSelfIntersect)
    getSimplify = _swig_new_instance_method(_Topo.SweepingOptions_getSimplify)

# Register SweepingOptions in _Topo:
_Topo.SweepingOptions_swigregister(SweepingOptions)
class VectorSweepingOptions(SweepingOptions):
    r"""Proxy of C++ Topo::VectorSweepingOptions class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(VectorSweepingOptions self) -> VectorSweepingOptions"""
        _Topo.VectorSweepingOptions_swiginit(self, _Topo.new_VectorSweepingOptions())
    __swig_destroy__ = _Topo.delete_VectorSweepingOptions
    setVector = _swig_new_instance_method(_Topo.VectorSweepingOptions_setVector)
    getVector = _swig_new_instance_method(_Topo.VectorSweepingOptions_getVector)

# Register VectorSweepingOptions in _Topo:
_Topo.VectorSweepingOptions_swigregister(VectorSweepingOptions)
class PathSweepingOptions(SweepingOptions):
    r"""Proxy of C++ Topo::PathSweepingOptions class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(PathSweepingOptions self) -> PathSweepingOptions"""
        _Topo.PathSweepingOptions_swiginit(self, _Topo.new_PathSweepingOptions())
    __swig_destroy__ = _Topo.delete_PathSweepingOptions
    setShapeV = _swig_new_instance_method(_Topo.PathSweepingOptions_setShapeV)
    getShapeV = _swig_new_instance_method(_Topo.PathSweepingOptions_getShapeV)
    setFinalTwistAngle = _swig_new_instance_method(_Topo.PathSweepingOptions_setFinalTwistAngle)
    getFinalTwistAngle = _swig_new_instance_method(_Topo.PathSweepingOptions_getFinalTwistAngle)
    setRigid = _swig_new_instance_method(_Topo.PathSweepingOptions_setRigid)
    getRigid = _swig_new_instance_method(_Topo.PathSweepingOptions_getRigid)
    setUseRail = _swig_new_instance_method(_Topo.PathSweepingOptions_setUseRail)
    getUseRail = _swig_new_instance_method(_Topo.PathSweepingOptions_getUseRail)

# Register PathSweepingOptions in _Topo:
_Topo.PathSweepingOptions_swigregister(PathSweepingOptions)
class PathExtrusionFixVerticalOptions(NurbsOptions):
    r"""Proxy of C++ Topo::PathExtrusionFixVerticalOptions class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(PathExtrusionFixVerticalOptions self) -> PathExtrusionFixVerticalOptions"""
        _Topo.PathExtrusionFixVerticalOptions_swiginit(self, _Topo.new_PathExtrusionFixVerticalOptions())
    __swig_destroy__ = _Topo.delete_PathExtrusionFixVerticalOptions
    setProfile = _swig_new_instance_method(_Topo.PathExtrusionFixVerticalOptions_setProfile)
    getProfile = _swig_new_instance_method(_Topo.PathExtrusionFixVerticalOptions_getProfile)
    setPath = _swig_new_instance_method(_Topo.PathExtrusionFixVerticalOptions_setPath)
    getPath = _swig_new_instance_method(_Topo.PathExtrusionFixVerticalOptions_getPath)
    addDebugShape = _swig_new_instance_method(_Topo.PathExtrusionFixVerticalOptions_addDebugShape)
    getDebugShapes = _swig_new_instance_method(_Topo.PathExtrusionFixVerticalOptions_getDebugShapes)
    setSolutionType = _swig_new_instance_method(_Topo.PathExtrusionFixVerticalOptions_setSolutionType)
    getSolutionType = _swig_new_instance_method(_Topo.PathExtrusionFixVerticalOptions_getSolutionType)

# Register PathExtrusionFixVerticalOptions in _Topo:
_Topo.PathExtrusionFixVerticalOptions_swigregister(PathExtrusionFixVerticalOptions)
ShapeType_MESH = _Topo.ShapeType_MESH

ShapeType_COMPOUND = _Topo.ShapeType_COMPOUND

ShapeType_COMPSOLID = _Topo.ShapeType_COMPSOLID

ShapeType_NCOMPOUND = _Topo.ShapeType_NCOMPOUND

ShapeType_SOLID = _Topo.ShapeType_SOLID

ShapeType_SHELL = _Topo.ShapeType_SHELL

ShapeType_FACE = _Topo.ShapeType_FACE

ShapeType_WIRE = _Topo.ShapeType_WIRE

ShapeType_EDGE = _Topo.ShapeType_EDGE

ShapeType_VERTEX = _Topo.ShapeType_VERTEX

ShapeType_SHAPE = _Topo.ShapeType_SHAPE

ShapeType_UNDEFINED = _Topo.ShapeType_UNDEFINED

class ShapeFactory(object):
    r"""Proxy of C++ Topo::ShapeFactory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    registry = property(_Topo.ShapeFactory_registry_get, _Topo.ShapeFactory_registry_set, doc=r"""registry : std::map<(std::string,p.Topo::ShapeFactory,std::less<(std::string)>,std::allocator<(std::pair<(q(const).std::string,p.Topo::ShapeFactory)>)>)>""")
    __swig_destroy__ = _Topo.delete_ShapeFactory

# Register ShapeFactory in _Topo:
_Topo.ShapeFactory_swigregister(ShapeFactory)
cvar = _Topo.cvar

class TopologicalItem(object):
    r"""Proxy of C++ Topo::TopologicalItem class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    getClassTypeId = _swig_new_static_method(_Topo.TopologicalItem_getClassTypeId)
    getTypeId = _swig_new_instance_method(_Topo.TopologicalItem_getTypeId)
    setIfcNameAndID = _swig_new_static_method(_Topo.TopologicalItem_setIfcNameAndID)
    init = _swig_new_static_method(_Topo.TopologicalItem_init)
    create = _swig_new_static_method(_Topo.TopologicalItem_create)
    __swig_destroy__ = _Topo.delete_TopologicalItem
    MesherType_Default_Mesher = _Topo.TopologicalItem_MesherType_Default_Mesher
    
    MesherType_Acis_Mesher = _Topo.TopologicalItem_MesherType_Acis_Mesher
    
    MesherType_Compound_Mesher = _Topo.TopologicalItem_MesherType_Compound_Mesher
    
    ModelingKernel_OCC = _Topo.TopologicalItem_ModelingKernel_OCC
    
    ModelingKernel_ACIS = _Topo.TopologicalItem_ModelingKernel_ACIS
    
    ModelingKernel_CARVE = _Topo.TopologicalItem_ModelingKernel_CARVE
    
    ModelingKernel_MIXED = _Topo.TopologicalItem_ModelingKernel_MIXED
    
    ModelingKernel_UNKNOWN = _Topo.TopologicalItem_ModelingKernel_UNKNOWN
    
    getMesherType = _swig_new_instance_method(_Topo.TopologicalItem_getMesherType)
    getModelingKernel = _swig_new_instance_method(_Topo.TopologicalItem_getModelingKernel)
    getOwner = _swig_new_instance_method(_Topo.TopologicalItem_getOwner)
    getShapeTool = _swig_new_instance_method(_Topo.TopologicalItem_getShapeTool)
    getGeometricInformation = _swig_new_instance_method(_Topo.TopologicalItem_getGeometricInformation)
    getEntity = _swig_new_instance_method(_Topo.TopologicalItem_getEntity)

# Register TopologicalItem in _Topo:
_Topo.TopologicalItem_swigregister(TopologicalItem)
TopologicalItem_getClassTypeId = _Topo.TopologicalItem_getClassTypeId
TopologicalItem_setIfcNameAndID = _Topo.TopologicalItem_setIfcNameAndID
TopologicalItem_init = _Topo.TopologicalItem_init
TopologicalItem_create = _Topo.TopologicalItem_create

class Shape(TopologicalItem):
    r"""Proxy of C++ Topo::Shape class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    getClassTypeId = _swig_new_static_method(_Topo.Shape_getClassTypeId)
    setIfcNameAndID = _swig_new_static_method(_Topo.Shape_setIfcNameAndID)
    init = _swig_new_static_method(_Topo.Shape_init)
    create = _swig_new_static_method(_Topo.Shape_create)
    __swig_destroy__ = _Topo.delete_Shape
    CheckShapeIsValidAndThrowException = _Topo.Shape_CheckShapeIsValidAndThrowException
    
    CheckShapeIsValid = _Topo.Shape_CheckShapeIsValid
    
    Unchecked = _Topo.Shape_Unchecked
    
    transform = _swig_new_instance_method(_Topo.Shape_transform)
    getTransform = _swig_new_instance_method(_Topo.Shape_getTransform)
    getShapeType = _swig_new_instance_method(_Topo.Shape_getShapeType)
    hasShapeAttributes = _swig_new_instance_method(_Topo.Shape_hasShapeAttributes)
    getShapeAttributes = _swig_new_instance_method(_Topo.Shape_getShapeAttributes)
    addShapeAttributes = _swig_new_instance_method(_Topo.Shape_addShapeAttributes)
    releaseShapesAttributes = _swig_new_instance_method(_Topo.Shape_releaseShapesAttributes)
    getBoundingBox = _swig_new_instance_method(_Topo.Shape_getBoundingBox)
    setIndexMesh = _swig_new_instance_method(_Topo.Shape_setIndexMesh)
    getIndexedMesh = _swig_new_instance_method(_Topo.Shape_getIndexedMesh)
    createIndexedMesh = _swig_new_instance_method(_Topo.Shape_createIndexedMesh)
    setIndexedDrawable = _swig_new_instance_method(_Topo.Shape_setIndexedDrawable)
    getIndexedDrawable = _swig_new_instance_method(_Topo.Shape_getIndexedDrawable)
    getDbgInfo = _swig_new_instance_method(_Topo.Shape_getDbgInfo)
    clone = _swig_new_instance_method(_Topo.Shape_clone)
    wasCreatedWithProblems = _swig_new_instance_method(_Topo.Shape_wasCreatedWithProblems)
    setWasCreatedWithProblems = _swig_new_instance_method(_Topo.Shape_setWasCreatedWithProblems)
    m_appGeometryBackLinks = property(_Topo.Shape_m_appGeometryBackLinks_get, _Topo.Shape_m_appGeometryBackLinks_set, doc=r"""m_appGeometryBackLinks : std::set<(p.Core::DocObject)>""")

# Register Shape in _Topo:
_Topo.Shape_swigregister(Shape)
Shape_getClassTypeId = _Topo.Shape_getClassTypeId
Shape_setIfcNameAndID = _Topo.Shape_setIfcNameAndID
Shape_init = _Topo.Shape_init
Shape_create = _Topo.Shape_create

class MeshShape(Shape):
    r"""Proxy of C++ Topo::MeshShape class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    getClassTypeId = _swig_new_static_method(_Topo.MeshShape_getClassTypeId)
    setIfcNameAndID = _swig_new_static_method(_Topo.MeshShape_setIfcNameAndID)
    init = _swig_new_static_method(_Topo.MeshShape_init)
    create = _swig_new_static_method(_Topo.MeshShape_create)
    __swig_destroy__ = _Topo.delete_MeshShape
    copyFrom = _swig_new_instance_method(_Topo.MeshShape_copyFrom)
    getMeshAsBrepData = _swig_new_instance_method(_Topo.MeshShape_getMeshAsBrepData)
    getTextureCoordinates = _swig_new_instance_method(_Topo.MeshShape_getTextureCoordinates)
    calculateDetail = _swig_new_instance_method(_Topo.MeshShape_calculateDetail)
    getEdges = _swig_new_instance_method(_Topo.MeshShape_getEdges)
    getEdge = _swig_new_instance_method(_Topo.MeshShape_getEdge)
    getPoints = _swig_new_instance_method(_Topo.MeshShape_getPoints)
    getModel = _swig_new_instance_method(_Topo.MeshShape_getModel)
    getNormals = _swig_new_instance_method(_Topo.MeshShape_getNormals)
    getOuterBoundaries = _swig_new_instance_method(_Topo.MeshShape_getOuterBoundaries)
    getFacePoints = _swig_new_instance_method(_Topo.MeshShape_getFacePoints)

# Register MeshShape in _Topo:
_Topo.MeshShape_swigregister(MeshShape)
MeshShape_getClassTypeId = _Topo.MeshShape_getClassTypeId
MeshShape_setIfcNameAndID = _Topo.MeshShape_setIfcNameAndID
MeshShape_init = _Topo.MeshShape_init
MeshShape_create = _Topo.MeshShape_create

class Compound(Shape):
    r"""Proxy of C++ Topo::Compound class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    getClassTypeId = _swig_new_static_method(_Topo.Compound_getClassTypeId)
    setIfcNameAndID = _swig_new_static_method(_Topo.Compound_setIfcNameAndID)
    init = _swig_new_static_method(_Topo.Compound_init)
    create = _swig_new_static_method(_Topo.Compound_create)
    __swig_destroy__ = _Topo.delete_Compound
    copyFrom = _swig_new_instance_method(_Topo.Compound_copyFrom)

# Register Compound in _Topo:
_Topo.Compound_swigregister(Compound)
Compound_getClassTypeId = _Topo.Compound_getClassTypeId
Compound_setIfcNameAndID = _Topo.Compound_setIfcNameAndID
Compound_init = _Topo.Compound_init
Compound_create = _Topo.Compound_create

class Solid(Shape):
    r"""Proxy of C++ Topo::Solid class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    getClassTypeId = _swig_new_static_method(_Topo.Solid_getClassTypeId)
    setIfcNameAndID = _swig_new_static_method(_Topo.Solid_setIfcNameAndID)
    init = _swig_new_static_method(_Topo.Solid_init)
    create = _swig_new_static_method(_Topo.Solid_create)
    __swig_destroy__ = _Topo.delete_Solid
    copyFrom = _swig_new_instance_method(_Topo.Solid_copyFrom)

# Register Solid in _Topo:
_Topo.Solid_swigregister(Solid)
Solid_getClassTypeId = _Topo.Solid_getClassTypeId
Solid_setIfcNameAndID = _Topo.Solid_setIfcNameAndID
Solid_init = _Topo.Solid_init
Solid_create = _Topo.Solid_create

class Shell(TopologicalItem):
    r"""Proxy of C++ Topo::Shell class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    getClassTypeId = _swig_new_static_method(_Topo.Shell_getClassTypeId)
    setIfcNameAndID = _swig_new_static_method(_Topo.Shell_setIfcNameAndID)
    init = _swig_new_static_method(_Topo.Shell_init)
    create = _swig_new_static_method(_Topo.Shell_create)
    __swig_destroy__ = _Topo.delete_Shell
    copyFrom = _swig_new_instance_method(_Topo.Shell_copyFrom)
    transform = _swig_new_instance_method(_Topo.Shell_transform)

# Register Shell in _Topo:
_Topo.Shell_swigregister(Shell)
Shell_getClassTypeId = _Topo.Shell_getClassTypeId
Shell_setIfcNameAndID = _Topo.Shell_setIfcNameAndID
Shell_init = _Topo.Shell_init
Shell_create = _Topo.Shell_create

class Face(TopologicalItem):
    r"""Proxy of C++ Topo::Face class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    getClassTypeId = _swig_new_static_method(_Topo.Face_getClassTypeId)
    setIfcNameAndID = _swig_new_static_method(_Topo.Face_setIfcNameAndID)
    init = _swig_new_static_method(_Topo.Face_init)
    create = _swig_new_static_method(_Topo.Face_create)
    __swig_destroy__ = _Topo.delete_Face
    getFaceNormal = _swig_new_instance_method(_Topo.Face_getFaceNormal)
    getGeometry = _swig_new_instance_method(_Topo.Face_getGeometry)
    transform = _swig_new_instance_method(_Topo.Face_transform)

# Register Face in _Topo:
_Topo.Face_swigregister(Face)
Face_getClassTypeId = _Topo.Face_getClassTypeId
Face_setIfcNameAndID = _Topo.Face_setIfcNameAndID
Face_init = _Topo.Face_init
Face_create = _Topo.Face_create

class Wire(TopologicalItem):
    r"""Proxy of C++ Topo::Wire class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    getClassTypeId = _swig_new_static_method(_Topo.Wire_getClassTypeId)
    setIfcNameAndID = _swig_new_static_method(_Topo.Wire_setIfcNameAndID)
    init = _swig_new_static_method(_Topo.Wire_init)
    create = _swig_new_static_method(_Topo.Wire_create)
    __swig_destroy__ = _Topo.delete_Wire
    copyFrom = _swig_new_instance_method(_Topo.Wire_copyFrom)
    getEdgeCount = _swig_new_instance_method(_Topo.Wire_getEdgeCount)
    getEdgeByIndex = _swig_new_instance_method(_Topo.Wire_getEdgeByIndex)
    transform = _swig_new_instance_method(_Topo.Wire_transform)
    isLoop = _swig_new_instance_method(_Topo.Wire_isLoop)

# Register Wire in _Topo:
_Topo.Wire_swigregister(Wire)
Wire_getClassTypeId = _Topo.Wire_getClassTypeId
Wire_setIfcNameAndID = _Topo.Wire_setIfcNameAndID
Wire_init = _Topo.Wire_init
Wire_create = _Topo.Wire_create

class Edge(TopologicalItem):
    r"""Proxy of C++ Topo::Edge class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    getClassTypeId = _swig_new_static_method(_Topo.Edge_getClassTypeId)
    setIfcNameAndID = _swig_new_static_method(_Topo.Edge_setIfcNameAndID)
    init = _swig_new_static_method(_Topo.Edge_init)
    create = _swig_new_static_method(_Topo.Edge_create)
    __swig_destroy__ = _Topo.delete_Edge
    copyFrom = _swig_new_instance_method(_Topo.Edge_copyFrom)
    transform = _swig_new_instance_method(_Topo.Edge_transform)

# Register Edge in _Topo:
_Topo.Edge_swigregister(Edge)
Edge_getClassTypeId = _Topo.Edge_getClassTypeId
Edge_setIfcNameAndID = _Topo.Edge_setIfcNameAndID
Edge_init = _Topo.Edge_init
Edge_create = _Topo.Edge_create

class Coedge(TopologicalItem):
    r"""Proxy of C++ Topo::Coedge class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    getClassTypeId = _swig_new_static_method(_Topo.Coedge_getClassTypeId)
    setIfcNameAndID = _swig_new_static_method(_Topo.Coedge_setIfcNameAndID)
    init = _swig_new_static_method(_Topo.Coedge_init)
    create = _swig_new_static_method(_Topo.Coedge_create)
    __swig_destroy__ = _Topo.delete_Coedge
    copyFrom = _swig_new_instance_method(_Topo.Coedge_copyFrom)
    transform = _swig_new_instance_method(_Topo.Coedge_transform)
    getEdge = _swig_new_instance_method(_Topo.Coedge_getEdge)

# Register Coedge in _Topo:
_Topo.Coedge_swigregister(Coedge)
Coedge_getClassTypeId = _Topo.Coedge_getClassTypeId
Coedge_setIfcNameAndID = _Topo.Coedge_setIfcNameAndID
Coedge_init = _Topo.Coedge_init
Coedge_create = _Topo.Coedge_create

class Vertex(TopologicalItem):
    r"""Proxy of C++ Topo::Vertex class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    getClassTypeId = _swig_new_static_method(_Topo.Vertex_getClassTypeId)
    setIfcNameAndID = _swig_new_static_method(_Topo.Vertex_setIfcNameAndID)
    init = _swig_new_static_method(_Topo.Vertex_init)
    create = _swig_new_static_method(_Topo.Vertex_create)
    __swig_destroy__ = _Topo.delete_Vertex
    copyFrom = _swig_new_instance_method(_Topo.Vertex_copyFrom)
    getPoint = _swig_new_instance_method(_Topo.Vertex_getPoint)
    transform = _swig_new_instance_method(_Topo.Vertex_transform)

# Register Vertex in _Topo:
_Topo.Vertex_swigregister(Vertex)
Vertex_getClassTypeId = _Topo.Vertex_getClassTypeId
Vertex_setIfcNameAndID = _Topo.Vertex_setIfcNameAndID
Vertex_init = _Topo.Vertex_init
Vertex_create = _Topo.Vertex_create

class LazyFacetedBrepShape(Shape):
    r"""Proxy of C++ Topo::LazyFacetedBrepShape class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    getClassTypeId = _swig_new_static_method(_Topo.LazyFacetedBrepShape_getClassTypeId)
    setIfcNameAndID = _swig_new_static_method(_Topo.LazyFacetedBrepShape_setIfcNameAndID)
    init = _swig_new_static_method(_Topo.LazyFacetedBrepShape_init)
    create = _swig_new_static_method(_Topo.LazyFacetedBrepShape_create)
    __swig_destroy__ = _Topo.delete_LazyFacetedBrepShape

# Register LazyFacetedBrepShape in _Topo:
_Topo.LazyFacetedBrepShape_swigregister(LazyFacetedBrepShape)
LazyFacetedBrepShape_getClassTypeId = _Topo.LazyFacetedBrepShape_getClassTypeId
LazyFacetedBrepShape_setIfcNameAndID = _Topo.LazyFacetedBrepShape_setIfcNameAndID
LazyFacetedBrepShape_init = _Topo.LazyFacetedBrepShape_init
LazyFacetedBrepShape_create = _Topo.LazyFacetedBrepShape_create

class FacetedShape(object):
    r"""Proxy of C++ Topo::FacetedShape class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(FacetedShape self) -> FacetedShape"""
        _Topo.FacetedShape_swiginit(self, _Topo.new_FacetedShape())
    __swig_destroy__ = _Topo.delete_FacetedShape
    face_vertices = property(_Topo.FacetedShape_face_vertices_get, _Topo.FacetedShape_face_vertices_set, doc=r"""face_vertices : std::vector<(Geom::Pnt,std::allocator<(Geom::Pnt)>)>""")
    face_coordinateIndices = property(_Topo.FacetedShape_face_coordinateIndices_get, _Topo.FacetedShape_face_coordinateIndices_set, doc=r"""face_coordinateIndices : std::vector<(long,std::allocator<(long)>)>""")
    face_per_vertex_normals = property(_Topo.FacetedShape_face_per_vertex_normals_get, _Topo.FacetedShape_face_per_vertex_normals_set, doc=r"""face_per_vertex_normals : std::vector<(Geom::Dir,std::allocator<(Geom::Dir)>)>""")
    wire_vertices = property(_Topo.FacetedShape_wire_vertices_get, _Topo.FacetedShape_wire_vertices_set, doc=r"""wire_vertices : std::vector<(Geom::Pnt,std::allocator<(Geom::Pnt)>)>""")
    wire_coordinateIndices = property(_Topo.FacetedShape_wire_coordinateIndices_get, _Topo.FacetedShape_wire_coordinateIndices_set, doc=r"""wire_coordinateIndices : std::vector<(long,std::allocator<(long)>)>""")

# Register FacetedShape in _Topo:
_Topo.FacetedShape_swigregister(FacetedShape)
class ShapeVariantHandler(object):
    r"""Proxy of C++ Topo::ShapeVariantHandler class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    create = _swig_new_instance_method(_Topo.ShapeVariantHandler_create)
    isEqual = _swig_new_instance_method(_Topo.ShapeVariantHandler_isEqual)
    getType = _swig_new_instance_method(_Topo.ShapeVariantHandler_getType)
    getAsString = _swig_new_instance_method(_Topo.ShapeVariantHandler_getAsString)

    def __init__(self):
        r"""__init__(ShapeVariantHandler self) -> ShapeVariantHandler"""
        _Topo.ShapeVariantHandler_swiginit(self, _Topo.new_ShapeVariantHandler())
    __swig_destroy__ = _Topo.delete_ShapeVariantHandler

# Register ShapeVariantHandler in _Topo:
_Topo.ShapeVariantHandler_swigregister(ShapeVariantHandler)
class ConstShapeVariantHandler(object):
    r"""Proxy of C++ Topo::ConstShapeVariantHandler class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    create = _swig_new_instance_method(_Topo.ConstShapeVariantHandler_create)
    isEqual = _swig_new_instance_method(_Topo.ConstShapeVariantHandler_isEqual)
    getType = _swig_new_instance_method(_Topo.ConstShapeVariantHandler_getType)
    getAsString = _swig_new_instance_method(_Topo.ConstShapeVariantHandler_getAsString)

    def __init__(self):
        r"""__init__(ConstShapeVariantHandler self) -> ConstShapeVariantHandler"""
        _Topo.ConstShapeVariantHandler_swiginit(self, _Topo.new_ConstShapeVariantHandler())
    __swig_destroy__ = _Topo.delete_ConstShapeVariantHandler

# Register ConstShapeVariantHandler in _Topo:
_Topo.ConstShapeVariantHandler_swigregister(ConstShapeVariantHandler)
class ShapeAttributes(object):
    r"""Proxy of C++ Topo::ShapeAttributes class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    getCopy = _swig_new_instance_method(_Topo.ShapeAttributes_getCopy)
    __swig_destroy__ = _Topo.delete_ShapeAttributes

# Register ShapeAttributes in _Topo:
_Topo.ShapeAttributes_swigregister(ShapeAttributes)
class Cdwk_SAT_Attributes(ShapeAttributes):
    r"""Proxy of C++ Topo::Cdwk_SAT_Attributes class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Cdwk_SAT_Attributes self) -> Cdwk_SAT_Attributes"""
        _Topo.Cdwk_SAT_Attributes_swiginit(self, _Topo.new_Cdwk_SAT_Attributes())
    attribute = property(_Topo.Cdwk_SAT_Attributes_attribute_get, _Topo.Cdwk_SAT_Attributes_attribute_set, doc=r"""attribute : Core::CdwkAttributeData""")
    shapeBody = property(_Topo.Cdwk_SAT_Attributes_shapeBody_get, _Topo.Cdwk_SAT_Attributes_shapeBody_set, doc=r"""shapeBody : p.BODY""")
    openings = property(_Topo.Cdwk_SAT_Attributes_openings_get, _Topo.Cdwk_SAT_Attributes_openings_set, doc=r"""openings : std::vector<(p.BODY,std::allocator<(p.BODY)>)>""")
    __swig_destroy__ = _Topo.delete_Cdwk_SAT_Attributes

# Register Cdwk_SAT_Attributes in _Topo:
_Topo.Cdwk_SAT_Attributes_swigregister(Cdwk_SAT_Attributes)
class ShapeTool(object):
    r"""Proxy of C++ Topo::ShapeTool class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(ShapeTool self) -> ShapeTool"""
        _Topo.ShapeTool_swiginit(self, _Topo.new_ShapeTool())
    __swig_destroy__ = _Topo.delete_ShapeTool
    BuildingElementHintEnum_NO_HINT = _Topo.ShapeTool_BuildingElementHintEnum_NO_HINT
    
    BuildingElementHintEnum_BEAM_HINT = _Topo.ShapeTool_BuildingElementHintEnum_BEAM_HINT
    
    BuildingElementHintEnum_COLUMN_HINT = _Topo.ShapeTool_BuildingElementHintEnum_COLUMN_HINT
    
    BuildingElementHintEnum_DOOR_HINT = _Topo.ShapeTool_BuildingElementHintEnum_DOOR_HINT
    
    BuildingElementHintEnum_MEMBER_HINT = _Topo.ShapeTool_BuildingElementHintEnum_MEMBER_HINT
    
    BuildingElementHintEnum_PLATE_HINT = _Topo.ShapeTool_BuildingElementHintEnum_PLATE_HINT
    
    BuildingElementHintEnum_SLAB_HINT = _Topo.ShapeTool_BuildingElementHintEnum_SLAB_HINT
    
    BuildingElementHintEnum_WALL_HINT = _Topo.ShapeTool_BuildingElementHintEnum_WALL_HINT
    
    BuildingElementHintEnum_WINDOW_HINT = _Topo.ShapeTool_BuildingElementHintEnum_WINDOW_HINT
    
    EShadowShapeType_WIRE = _Topo.ShapeTool_EShadowShapeType_WIRE
    
    EShadowShapeType_FACE = _Topo.ShapeTool_EShadowShapeType_FACE
    
    makeLazyFacetedBrepShape = _swig_new_static_method(_Topo.ShapeTool_makeLazyFacetedBrepShape)
    makeInventorMeshShape = _swig_new_static_method(_Topo.ShapeTool_makeInventorMeshShape)
    makeOMFMeshShape = _swig_new_static_method(_Topo.ShapeTool_makeOMFMeshShape)
    makeIndexedMesh = _swig_new_static_method(_Topo.ShapeTool_makeIndexedMesh)
    makeAcisShape = _swig_new_static_method(_Topo.ShapeTool_makeAcisShape)
    createBrepData = _swig_new_static_method(_Topo.ShapeTool_createBrepData)
    makeShapes_parallel = _swig_new_static_method(_Topo.ShapeTool_makeShapes_parallel)
    makeFaceSet = _swig_new_static_method(_Topo.ShapeTool_makeFaceSet)
    makeCompound = _swig_new_static_method(_Topo.ShapeTool_makeCompound)
    makeShape = _swig_new_static_method(_Topo.ShapeTool_makeShape)
    getLumpsCount = _swig_new_static_method(_Topo.ShapeTool_getLumpsCount)
    getFaceCount = _swig_new_static_method(_Topo.ShapeTool_getFaceCount)
    getWireCount = _swig_new_static_method(_Topo.ShapeTool_getWireCount)
    getEdgeCount = _swig_new_static_method(_Topo.ShapeTool_getEdgeCount)
    getVertexCount = _swig_new_static_method(_Topo.ShapeTool_getVertexCount)
    getFaceByIndex = _swig_new_static_method(_Topo.ShapeTool_getFaceByIndex)
    getWireByIndex = _swig_new_static_method(_Topo.ShapeTool_getWireByIndex)
    getEdgeByIndex = _swig_new_static_method(_Topo.ShapeTool_getEdgeByIndex)
    getVertexByIndex = _swig_new_static_method(_Topo.ShapeTool_getVertexByIndex)
    getIndexFromShell = _swig_new_static_method(_Topo.ShapeTool_getIndexFromShell)
    getIndexFromFace = _swig_new_static_method(_Topo.ShapeTool_getIndexFromFace)
    getIndexesFromFaces = _swig_new_static_method(_Topo.ShapeTool_getIndexesFromFaces)
    getIndexFromWire = _swig_new_static_method(_Topo.ShapeTool_getIndexFromWire)
    getIndexFromEdge = _swig_new_static_method(_Topo.ShapeTool_getIndexFromEdge)
    getIndexFromVertex = _swig_new_static_method(_Topo.ShapeTool_getIndexFromVertex)
    getShells = _swig_new_static_method(_Topo.ShapeTool_getShells)
    getFaces = _swig_new_static_method(_Topo.ShapeTool_getFaces)
    getFacesAsCopy = _swig_new_static_method(_Topo.ShapeTool_getFacesAsCopy)
    getWires = _swig_new_static_method(_Topo.ShapeTool_getWires)
    getEdges = _swig_new_static_method(_Topo.ShapeTool_getEdges)
    getEdges_visible = _swig_new_static_method(_Topo.ShapeTool_getEdges_visible)
    getVertices = _swig_new_static_method(_Topo.ShapeTool_getVertices)
    getAdjacentFaceIndicesFromVertexIndex = _swig_new_static_method(_Topo.ShapeTool_getAdjacentFaceIndicesFromVertexIndex)
    getAdjacentFacesFromEdge = _swig_new_static_method(_Topo.ShapeTool_getAdjacentFacesFromEdge)
    getEdgeIndicesFromFace = _swig_new_static_method(_Topo.ShapeTool_getEdgeIndicesFromFace)
    getVertexIndicesFromWire = _swig_new_static_method(_Topo.ShapeTool_getVertexIndicesFromWire)
    getWireIndicesFromFace = _swig_new_static_method(_Topo.ShapeTool_getWireIndicesFromFace)
    getVerticesAsPoints = _swig_new_static_method(_Topo.ShapeTool_getVerticesAsPoints)
    getBoundingBox = _swig_new_static_method(_Topo.ShapeTool_getBoundingBox)
    getTransform = _swig_new_static_method(_Topo.ShapeTool_getTransform)
    calculateLocalAxes = _swig_new_static_method(_Topo.ShapeTool_calculateLocalAxes)
    calculateDetail = _swig_new_static_method(_Topo.ShapeTool_calculateDetail)
    cast2Solid = _swig_new_static_method(_Topo.ShapeTool_cast2Solid)
    cast2Compound = _swig_new_static_method(_Topo.ShapeTool_cast2Compound)
    cast2Mesh = _swig_new_static_method(_Topo.ShapeTool_cast2Mesh)
    cast2ConstSolid = _swig_new_static_method(_Topo.ShapeTool_cast2ConstSolid)
    cast2ConstCompound = _swig_new_static_method(_Topo.ShapeTool_cast2ConstCompound)
    cast2ConstMesh = _swig_new_static_method(_Topo.ShapeTool_cast2ConstMesh)
    getVolume = _swig_new_static_method(_Topo.ShapeTool_getVolume)
    getCentroid = _swig_new_static_method(_Topo.ShapeTool_getCentroid)
    setNeedMassUpdate = _swig_new_static_method(_Topo.ShapeTool_setNeedMassUpdate)
    updateShapeTransform = _swig_new_static_method(_Topo.ShapeTool_updateShapeTransform)
    write = _swig_new_static_method(_Topo.ShapeTool_write)
    writeAcisFile = _swig_new_static_method(_Topo.ShapeTool_writeAcisFile)
    appendAcisFile = _swig_new_static_method(_Topo.ShapeTool_appendAcisFile)
    canWriteAs = _swig_new_static_method(_Topo.ShapeTool_canWriteAs)
    getWriteFormat = _swig_new_static_method(_Topo.ShapeTool_getWriteFormat)
    read = _swig_new_static_method(_Topo.ShapeTool_read)
    intersectBBoxes = _swig_new_static_method(_Topo.ShapeTool_intersectBBoxes)
    cut = _swig_new_static_method(_Topo.ShapeTool_cut)
    fuse = _swig_new_static_method(_Topo.ShapeTool_fuse)
    common = _swig_new_static_method(_Topo.ShapeTool_common)
    section = _swig_new_static_method(_Topo.ShapeTool_section)
    s_cut = _swig_new_static_method(_Topo.ShapeTool_s_cut)
    s_common = _swig_new_static_method(_Topo.ShapeTool_s_common)
    cutWithPlane = _swig_new_static_method(_Topo.ShapeTool_cutWithPlane)
    splitByPlane = _swig_new_static_method(_Topo.ShapeTool_splitByPlane)
    transformed = _swig_new_static_method(_Topo.ShapeTool_transformed)
    moved = _swig_new_static_method(_Topo.ShapeTool_moved)
    scaled = _swig_new_static_method(_Topo.ShapeTool_scaled)
    isNull = _swig_new_static_method(_Topo.ShapeTool_isNull)
    isValid = _swig_new_static_method(_Topo.ShapeTool_isValid)
    isValidInCadwork3d = _swig_new_static_method(_Topo.ShapeTool_isValidInCadwork3d)
    isEqual = _swig_new_static_method(_Topo.ShapeTool_isEqual)
    getGeometricInformation = _swig_new_static_method(_Topo.ShapeTool_getGeometricInformation)
    getAxesOrientedSurfaces = _swig_new_static_method(_Topo.ShapeTool_getAxesOrientedSurfaces)
    getVerticalAndHorizontalFaceAreas = _swig_new_static_method(_Topo.ShapeTool_getVerticalAndHorizontalFaceAreas)
    getAreaFromTop = _swig_new_static_method(_Topo.ShapeTool_getAreaFromTop)
    getLargestFaceArea = _swig_new_static_method(_Topo.ShapeTool_getLargestFaceArea)
    getLargestFaceNormal = _swig_new_static_method(_Topo.ShapeTool_getLargestFaceNormal)
    copy = _swig_new_static_method(_Topo.ShapeTool_copy)
    makeDbgElementFromShape = _swig_new_static_method(_Topo.ShapeTool_makeDbgElementFromShape)
    makeDbgSubElementFromShape = _swig_new_static_method(_Topo.ShapeTool_makeDbgSubElementFromShape)
    triangulationToMesh = _swig_new_static_method(_Topo.ShapeTool_triangulationToMesh)
    isFaceted = _swig_new_static_method(_Topo.ShapeTool_isFaceted)
    hasVoids = _swig_new_static_method(_Topo.ShapeTool_hasVoids)
    regularise = _swig_new_static_method(_Topo.ShapeTool_regularise)
    mergePlanarFaces = _swig_new_static_method(_Topo.ShapeTool_mergePlanarFaces)
    convertToPolygonalFaces = _swig_new_static_method(_Topo.ShapeTool_convertToPolygonalFaces)
    hasNurbsFace = _swig_new_static_method(_Topo.ShapeTool_hasNurbsFace)
    hasTriangulation = _swig_new_static_method(_Topo.ShapeTool_hasTriangulation)
    getClosestVertexToPoint = _swig_new_static_method(_Topo.ShapeTool_getClosestVertexToPoint)
    hasFaces = _swig_new_static_method(_Topo.ShapeTool_hasFaces)
    importBrep = _swig_new_static_method(_Topo.ShapeTool_importBrep)
    extrudedWire = _swig_new_static_method(_Topo.ShapeTool_extrudedWire)
    thickenSheets = _swig_new_static_method(_Topo.ShapeTool_thickenSheets)
    deformed = _swig_new_static_method(_Topo.ShapeTool_deformed)
    mirrored = _swig_new_static_method(_Topo.ShapeTool_mirrored)
    clash = _swig_new_static_method(_Topo.ShapeTool_clash)
    clashBodies = _swig_new_static_method(_Topo.ShapeTool_clashBodies)
    createContactFaces = _swig_new_static_method(_Topo.ShapeTool_createContactFaces)
    isSingleWire = _swig_new_static_method(_Topo.ShapeTool_isSingleWire)
    isSingleFace = _swig_new_static_method(_Topo.ShapeTool_isSingleFace)
    isSingleEdge = _swig_new_static_method(_Topo.ShapeTool_isSingleEdge)
    isSingleVertex = _swig_new_static_method(_Topo.ShapeTool_isSingleVertex)
    isShell = _swig_new_static_method(_Topo.ShapeTool_isShell)
    isOpenShell = _swig_new_static_method(_Topo.ShapeTool_isOpenShell)
    isClosedShell = _swig_new_static_method(_Topo.ShapeTool_isClosedShell)
    isClosedSolid = _swig_new_static_method(_Topo.ShapeTool_isClosedSolid)
    isWire = _swig_new_static_method(_Topo.ShapeTool_isWire)
    isCompound = _swig_new_static_method(_Topo.ShapeTool_isCompound)
    isMesh = _swig_new_static_method(_Topo.ShapeTool_isMesh)
    isVertex = _swig_new_static_method(_Topo.ShapeTool_isVertex)
    isExtrudedAreaSolid = _swig_new_static_method(_Topo.ShapeTool_isExtrudedAreaSolid)
    isCylinder = _swig_new_static_method(_Topo.ShapeTool_isCylinder)
    getAttributeInteger = _swig_new_static_method(_Topo.ShapeTool_getAttributeInteger)
    setAttributeInteger = _swig_new_static_method(_Topo.ShapeTool_setAttributeInteger)
    removeAttribute = _swig_new_static_method(_Topo.ShapeTool_removeAttribute)
    getAttributeString = _swig_new_static_method(_Topo.ShapeTool_getAttributeString)
    setAttributeString = _swig_new_static_method(_Topo.ShapeTool_setAttributeString)
    setAttributeStringNonCopy = _swig_new_static_method(_Topo.ShapeTool_setAttributeStringNonCopy)
    getAttributeCount = _swig_new_static_method(_Topo.ShapeTool_getAttributeCount)
    setCdwkSATAttributes = _swig_new_static_method(_Topo.ShapeTool_setCdwkSATAttributes)
    releaseCdwkSATAttributes = _swig_new_static_method(_Topo.ShapeTool_releaseCdwkSATAttributes)
    cleanupShape = _swig_new_static_method(_Topo.ShapeTool_cleanupShape)
    hasSliverFaces = _swig_new_static_method(_Topo.ShapeTool_hasSliverFaces)
    removedSliverFaces = _swig_new_static_method(_Topo.ShapeTool_removedSliverFaces)
    imprint = _swig_new_static_method(_Topo.ShapeTool_imprint)
    projectShadow = _swig_new_static_method(_Topo.ShapeTool_projectShadow)
    projectWiresOnGroundPlane = _swig_new_static_method(_Topo.ShapeTool_projectWiresOnGroundPlane)
    rayPick = _swig_new_static_method(_Topo.ShapeTool_rayPick)
    removeFaceting = _swig_new_static_method(_Topo.ShapeTool_removeFaceting)
    getColorRGB = _swig_new_static_method(_Topo.ShapeTool_getColorRGB)
    skinning = _swig_new_static_method(_Topo.ShapeTool_skinning)
    sweeping = _swig_new_static_method(_Topo.ShapeTool_sweeping)
    pathExtrusionFixVertical = _swig_new_static_method(_Topo.ShapeTool_pathExtrusionFixVertical)
    getModelingTolerance = _swig_new_static_method(_Topo.ShapeTool_getModelingTolerance)
    getThreadPool = _swig_new_static_method(_Topo.ShapeTool_getThreadPool)
    transformShape2LocalSpaceOfElement = _swig_new_static_method(_Topo.ShapeTool_transformShape2LocalSpaceOfElement)
    hasPolyHedral = _swig_new_static_method(_Topo.ShapeTool_hasPolyHedral)
    getModelFromPolyHedral = _swig_new_static_method(_Topo.ShapeTool_getModelFromPolyHedral)
    makePolyHedral = _swig_new_static_method(_Topo.ShapeTool_makePolyHedral)
    is_polyhedral_body = _swig_new_static_method(_Topo.ShapeTool_is_polyhedral_body)
    getIndexDrawable = _swig_new_static_method(_Topo.ShapeTool_getIndexDrawable)
    getIntersectionPoints = _swig_new_static_method(_Topo.ShapeTool_getIntersectionPoints)
    getAllIntersectionPoints = _swig_new_static_method(_Topo.ShapeTool_getAllIntersectionPoints)
    getAllIntersectionPointsIn2DMode = _swig_new_static_method(_Topo.ShapeTool_getAllIntersectionPointsIn2DMode)
    getAllIntersectionPointsWithLineIn2DMode = _swig_new_static_method(_Topo.ShapeTool_getAllIntersectionPointsWithLineIn2DMode)
    createShell = _swig_new_static_method(_Topo.ShapeTool_createShell)
    createSheet = _swig_new_static_method(_Topo.ShapeTool_createSheet)
    splitLumps = _swig_new_static_method(_Topo.ShapeTool_splitLumps)
    makeShapes = _swig_new_static_method(_Topo.ShapeTool_makeShapes)
    createElementFromShape = _swig_new_static_method(_Topo.ShapeTool_createElementFromShape)
    getShapeCount = _swig_new_static_method(_Topo.ShapeTool_getShapeCount)
    shapeCountInc = _swig_new_static_method(_Topo.ShapeTool_shapeCountInc)
    shapeCountDec = _swig_new_static_method(_Topo.ShapeTool_shapeCountDec)
    getBoundingBoxSizes = _swig_new_static_method(_Topo.ShapeTool_getBoundingBoxSizes)
    simplifyShape = _swig_new_static_method(_Topo.ShapeTool_simplifyShape)
    offsetShape = _swig_new_static_method(_Topo.ShapeTool_offsetShape)
    debugShape = _swig_new_static_method(_Topo.ShapeTool_debugShape)
    isManifold = _swig_new_static_method(_Topo.ShapeTool_isManifold)
    restoreGlobalAttachment = _swig_new_static_method(_Topo.ShapeTool_restoreGlobalAttachment)
    getFaceIndexByPointOnFace = _swig_new_static_method(_Topo.ShapeTool_getFaceIndexByPointOnFace)
    getFaceIndexesByPointOnFace = _swig_new_static_method(_Topo.ShapeTool_getFaceIndexesByPointOnFace)
    getFacesByMaxNormalToVectorAngle = _swig_new_static_method(_Topo.ShapeTool_getFacesByMaxNormalToVectorAngle)
    getTopoDS_Shape = _swig_new_static_method(_Topo.ShapeTool_getTopoDS_Shape)
    getEntityAttribute_Int = _swig_new_static_method(_Topo.ShapeTool_getEntityAttribute_Int)
    setEntityAttribute_Int = _swig_new_static_method(_Topo.ShapeTool_setEntityAttribute_Int)
    getSurfaceArea = _swig_new_static_method(_Topo.ShapeTool_getSurfaceArea)
    getVisibleAreaFrom = _swig_new_static_method(_Topo.ShapeTool_getVisibleAreaFrom)
    getVisibleProjectedAreaFrom = _swig_new_static_method(_Topo.ShapeTool_getVisibleProjectedAreaFrom)
    hasOnlyLineWires = _swig_new_static_method(_Topo.ShapeTool_hasOnlyLineWires)
    getFaceSlopes = _swig_new_static_method(_Topo.ShapeTool_getFaceSlopes)
    __setOCCShapeTool__ = _swig_new_static_method(_Topo.ShapeTool___setOCCShapeTool__)
    __setAcisShapeTool__ = _swig_new_static_method(_Topo.ShapeTool___setAcisShapeTool__)
    __setDefaultShapeTool__ = _swig_new_static_method(_Topo.ShapeTool___setDefaultShapeTool__)
    __setInventorShapeTool__ = _swig_new_static_method(_Topo.ShapeTool___setInventorShapeTool__)
    __setOMFShapeTool__ = _swig_new_static_method(_Topo.ShapeTool___setOMFShapeTool__)
    __setAcisMeshShapeTool__ = _swig_new_static_method(_Topo.ShapeTool___setAcisMeshShapeTool__)
    getFirstShape_Helper = _swig_new_static_method(_Topo.ShapeTool_getFirstShape_Helper)

# Register ShapeTool in _Topo:
_Topo.ShapeTool_swigregister(ShapeTool)
ShapeTool_makeLazyFacetedBrepShape = _Topo.ShapeTool_makeLazyFacetedBrepShape
ShapeTool_makeInventorMeshShape = _Topo.ShapeTool_makeInventorMeshShape
ShapeTool_makeOMFMeshShape = _Topo.ShapeTool_makeOMFMeshShape
ShapeTool_makeIndexedMesh = _Topo.ShapeTool_makeIndexedMesh
ShapeTool_makeAcisShape = _Topo.ShapeTool_makeAcisShape
ShapeTool_createBrepData = _Topo.ShapeTool_createBrepData
ShapeTool_makeShapes_parallel = _Topo.ShapeTool_makeShapes_parallel
ShapeTool_makeFaceSet = _Topo.ShapeTool_makeFaceSet
ShapeTool_makeCompound = _Topo.ShapeTool_makeCompound
ShapeTool_makeShape = _Topo.ShapeTool_makeShape
ShapeTool_getLumpsCount = _Topo.ShapeTool_getLumpsCount
ShapeTool_getFaceCount = _Topo.ShapeTool_getFaceCount
ShapeTool_getWireCount = _Topo.ShapeTool_getWireCount
ShapeTool_getEdgeCount = _Topo.ShapeTool_getEdgeCount
ShapeTool_getVertexCount = _Topo.ShapeTool_getVertexCount
ShapeTool_getFaceByIndex = _Topo.ShapeTool_getFaceByIndex
ShapeTool_getWireByIndex = _Topo.ShapeTool_getWireByIndex
ShapeTool_getEdgeByIndex = _Topo.ShapeTool_getEdgeByIndex
ShapeTool_getVertexByIndex = _Topo.ShapeTool_getVertexByIndex
ShapeTool_getIndexFromShell = _Topo.ShapeTool_getIndexFromShell
ShapeTool_getIndexFromFace = _Topo.ShapeTool_getIndexFromFace
ShapeTool_getIndexesFromFaces = _Topo.ShapeTool_getIndexesFromFaces
ShapeTool_getIndexFromWire = _Topo.ShapeTool_getIndexFromWire
ShapeTool_getIndexFromEdge = _Topo.ShapeTool_getIndexFromEdge
ShapeTool_getIndexFromVertex = _Topo.ShapeTool_getIndexFromVertex
ShapeTool_getShells = _Topo.ShapeTool_getShells
ShapeTool_getFaces = _Topo.ShapeTool_getFaces
ShapeTool_getFacesAsCopy = _Topo.ShapeTool_getFacesAsCopy
ShapeTool_getWires = _Topo.ShapeTool_getWires
ShapeTool_getEdges = _Topo.ShapeTool_getEdges
ShapeTool_getEdges_visible = _Topo.ShapeTool_getEdges_visible
ShapeTool_getVertices = _Topo.ShapeTool_getVertices
ShapeTool_getAdjacentFaceIndicesFromVertexIndex = _Topo.ShapeTool_getAdjacentFaceIndicesFromVertexIndex
ShapeTool_getAdjacentFacesFromEdge = _Topo.ShapeTool_getAdjacentFacesFromEdge
ShapeTool_getEdgeIndicesFromFace = _Topo.ShapeTool_getEdgeIndicesFromFace
ShapeTool_getVertexIndicesFromWire = _Topo.ShapeTool_getVertexIndicesFromWire
ShapeTool_getWireIndicesFromFace = _Topo.ShapeTool_getWireIndicesFromFace
ShapeTool_getVerticesAsPoints = _Topo.ShapeTool_getVerticesAsPoints
ShapeTool_getBoundingBox = _Topo.ShapeTool_getBoundingBox
ShapeTool_getTransform = _Topo.ShapeTool_getTransform
ShapeTool_calculateLocalAxes = _Topo.ShapeTool_calculateLocalAxes
ShapeTool_calculateDetail = _Topo.ShapeTool_calculateDetail
ShapeTool_cast2Solid = _Topo.ShapeTool_cast2Solid
ShapeTool_cast2Compound = _Topo.ShapeTool_cast2Compound
ShapeTool_cast2Mesh = _Topo.ShapeTool_cast2Mesh
ShapeTool_cast2ConstSolid = _Topo.ShapeTool_cast2ConstSolid
ShapeTool_cast2ConstCompound = _Topo.ShapeTool_cast2ConstCompound
ShapeTool_cast2ConstMesh = _Topo.ShapeTool_cast2ConstMesh
ShapeTool_getVolume = _Topo.ShapeTool_getVolume
ShapeTool_getCentroid = _Topo.ShapeTool_getCentroid
ShapeTool_setNeedMassUpdate = _Topo.ShapeTool_setNeedMassUpdate
ShapeTool_updateShapeTransform = _Topo.ShapeTool_updateShapeTransform
ShapeTool_write = _Topo.ShapeTool_write
ShapeTool_writeAcisFile = _Topo.ShapeTool_writeAcisFile
ShapeTool_appendAcisFile = _Topo.ShapeTool_appendAcisFile
ShapeTool_canWriteAs = _Topo.ShapeTool_canWriteAs
ShapeTool_getWriteFormat = _Topo.ShapeTool_getWriteFormat
ShapeTool_read = _Topo.ShapeTool_read
ShapeTool_intersectBBoxes = _Topo.ShapeTool_intersectBBoxes
ShapeTool_cut = _Topo.ShapeTool_cut
ShapeTool_fuse = _Topo.ShapeTool_fuse
ShapeTool_common = _Topo.ShapeTool_common
ShapeTool_section = _Topo.ShapeTool_section
ShapeTool_s_cut = _Topo.ShapeTool_s_cut
ShapeTool_s_common = _Topo.ShapeTool_s_common
ShapeTool_cutWithPlane = _Topo.ShapeTool_cutWithPlane
ShapeTool_splitByPlane = _Topo.ShapeTool_splitByPlane
ShapeTool_transformed = _Topo.ShapeTool_transformed
ShapeTool_moved = _Topo.ShapeTool_moved
ShapeTool_scaled = _Topo.ShapeTool_scaled
ShapeTool_isNull = _Topo.ShapeTool_isNull
ShapeTool_isValid = _Topo.ShapeTool_isValid
ShapeTool_isValidInCadwork3d = _Topo.ShapeTool_isValidInCadwork3d
ShapeTool_isEqual = _Topo.ShapeTool_isEqual
ShapeTool_getGeometricInformation = _Topo.ShapeTool_getGeometricInformation
ShapeTool_getAxesOrientedSurfaces = _Topo.ShapeTool_getAxesOrientedSurfaces
ShapeTool_getVerticalAndHorizontalFaceAreas = _Topo.ShapeTool_getVerticalAndHorizontalFaceAreas
ShapeTool_getAreaFromTop = _Topo.ShapeTool_getAreaFromTop
ShapeTool_getLargestFaceArea = _Topo.ShapeTool_getLargestFaceArea
ShapeTool_getLargestFaceNormal = _Topo.ShapeTool_getLargestFaceNormal
ShapeTool_copy = _Topo.ShapeTool_copy
ShapeTool_makeDbgElementFromShape = _Topo.ShapeTool_makeDbgElementFromShape
ShapeTool_makeDbgSubElementFromShape = _Topo.ShapeTool_makeDbgSubElementFromShape
ShapeTool_triangulationToMesh = _Topo.ShapeTool_triangulationToMesh
ShapeTool_isFaceted = _Topo.ShapeTool_isFaceted
ShapeTool_hasVoids = _Topo.ShapeTool_hasVoids
ShapeTool_regularise = _Topo.ShapeTool_regularise
ShapeTool_mergePlanarFaces = _Topo.ShapeTool_mergePlanarFaces
ShapeTool_convertToPolygonalFaces = _Topo.ShapeTool_convertToPolygonalFaces
ShapeTool_hasNurbsFace = _Topo.ShapeTool_hasNurbsFace
ShapeTool_hasTriangulation = _Topo.ShapeTool_hasTriangulation
ShapeTool_getClosestVertexToPoint = _Topo.ShapeTool_getClosestVertexToPoint
ShapeTool_hasFaces = _Topo.ShapeTool_hasFaces
ShapeTool_importBrep = _Topo.ShapeTool_importBrep
ShapeTool_extrudedWire = _Topo.ShapeTool_extrudedWire
ShapeTool_thickenSheets = _Topo.ShapeTool_thickenSheets
ShapeTool_deformed = _Topo.ShapeTool_deformed
ShapeTool_mirrored = _Topo.ShapeTool_mirrored
ShapeTool_clash = _Topo.ShapeTool_clash
ShapeTool_clashBodies = _Topo.ShapeTool_clashBodies
ShapeTool_createContactFaces = _Topo.ShapeTool_createContactFaces
ShapeTool_isSingleWire = _Topo.ShapeTool_isSingleWire
ShapeTool_isSingleFace = _Topo.ShapeTool_isSingleFace
ShapeTool_isSingleEdge = _Topo.ShapeTool_isSingleEdge
ShapeTool_isSingleVertex = _Topo.ShapeTool_isSingleVertex
ShapeTool_isShell = _Topo.ShapeTool_isShell
ShapeTool_isOpenShell = _Topo.ShapeTool_isOpenShell
ShapeTool_isClosedShell = _Topo.ShapeTool_isClosedShell
ShapeTool_isClosedSolid = _Topo.ShapeTool_isClosedSolid
ShapeTool_isWire = _Topo.ShapeTool_isWire
ShapeTool_isCompound = _Topo.ShapeTool_isCompound
ShapeTool_isMesh = _Topo.ShapeTool_isMesh
ShapeTool_isVertex = _Topo.ShapeTool_isVertex
ShapeTool_isExtrudedAreaSolid = _Topo.ShapeTool_isExtrudedAreaSolid
ShapeTool_isCylinder = _Topo.ShapeTool_isCylinder
ShapeTool_getAttributeInteger = _Topo.ShapeTool_getAttributeInteger
ShapeTool_setAttributeInteger = _Topo.ShapeTool_setAttributeInteger
ShapeTool_removeAttribute = _Topo.ShapeTool_removeAttribute
ShapeTool_getAttributeString = _Topo.ShapeTool_getAttributeString
ShapeTool_setAttributeString = _Topo.ShapeTool_setAttributeString
ShapeTool_setAttributeStringNonCopy = _Topo.ShapeTool_setAttributeStringNonCopy
ShapeTool_getAttributeCount = _Topo.ShapeTool_getAttributeCount
ShapeTool_setCdwkSATAttributes = _Topo.ShapeTool_setCdwkSATAttributes
ShapeTool_releaseCdwkSATAttributes = _Topo.ShapeTool_releaseCdwkSATAttributes
ShapeTool_cleanupShape = _Topo.ShapeTool_cleanupShape
ShapeTool_hasSliverFaces = _Topo.ShapeTool_hasSliverFaces
ShapeTool_removedSliverFaces = _Topo.ShapeTool_removedSliverFaces
ShapeTool_imprint = _Topo.ShapeTool_imprint
ShapeTool_projectShadow = _Topo.ShapeTool_projectShadow
ShapeTool_projectWiresOnGroundPlane = _Topo.ShapeTool_projectWiresOnGroundPlane
ShapeTool_rayPick = _Topo.ShapeTool_rayPick
ShapeTool_removeFaceting = _Topo.ShapeTool_removeFaceting
ShapeTool_getColorRGB = _Topo.ShapeTool_getColorRGB
ShapeTool_skinning = _Topo.ShapeTool_skinning
ShapeTool_sweeping = _Topo.ShapeTool_sweeping
ShapeTool_pathExtrusionFixVertical = _Topo.ShapeTool_pathExtrusionFixVertical
ShapeTool_getModelingTolerance = _Topo.ShapeTool_getModelingTolerance
ShapeTool_getThreadPool = _Topo.ShapeTool_getThreadPool
ShapeTool_transformShape2LocalSpaceOfElement = _Topo.ShapeTool_transformShape2LocalSpaceOfElement
ShapeTool_hasPolyHedral = _Topo.ShapeTool_hasPolyHedral
ShapeTool_getModelFromPolyHedral = _Topo.ShapeTool_getModelFromPolyHedral
ShapeTool_makePolyHedral = _Topo.ShapeTool_makePolyHedral
ShapeTool_is_polyhedral_body = _Topo.ShapeTool_is_polyhedral_body
ShapeTool_getIndexDrawable = _Topo.ShapeTool_getIndexDrawable
ShapeTool_getIntersectionPoints = _Topo.ShapeTool_getIntersectionPoints
ShapeTool_getAllIntersectionPoints = _Topo.ShapeTool_getAllIntersectionPoints
ShapeTool_getAllIntersectionPointsIn2DMode = _Topo.ShapeTool_getAllIntersectionPointsIn2DMode
ShapeTool_getAllIntersectionPointsWithLineIn2DMode = _Topo.ShapeTool_getAllIntersectionPointsWithLineIn2DMode
ShapeTool_createShell = _Topo.ShapeTool_createShell
ShapeTool_createSheet = _Topo.ShapeTool_createSheet
ShapeTool_splitLumps = _Topo.ShapeTool_splitLumps
ShapeTool_makeShapes = _Topo.ShapeTool_makeShapes
ShapeTool_createElementFromShape = _Topo.ShapeTool_createElementFromShape
ShapeTool_getShapeCount = _Topo.ShapeTool_getShapeCount
ShapeTool_shapeCountInc = _Topo.ShapeTool_shapeCountInc
ShapeTool_shapeCountDec = _Topo.ShapeTool_shapeCountDec
ShapeTool_getBoundingBoxSizes = _Topo.ShapeTool_getBoundingBoxSizes
ShapeTool_simplifyShape = _Topo.ShapeTool_simplifyShape
ShapeTool_offsetShape = _Topo.ShapeTool_offsetShape
ShapeTool_debugShape = _Topo.ShapeTool_debugShape
ShapeTool_isManifold = _Topo.ShapeTool_isManifold
ShapeTool_restoreGlobalAttachment = _Topo.ShapeTool_restoreGlobalAttachment
ShapeTool_getFaceIndexByPointOnFace = _Topo.ShapeTool_getFaceIndexByPointOnFace
ShapeTool_getFaceIndexesByPointOnFace = _Topo.ShapeTool_getFaceIndexesByPointOnFace
ShapeTool_getFacesByMaxNormalToVectorAngle = _Topo.ShapeTool_getFacesByMaxNormalToVectorAngle
ShapeTool_getTopoDS_Shape = _Topo.ShapeTool_getTopoDS_Shape
ShapeTool_getEntityAttribute_Int = _Topo.ShapeTool_getEntityAttribute_Int
ShapeTool_setEntityAttribute_Int = _Topo.ShapeTool_setEntityAttribute_Int
ShapeTool_getSurfaceArea = _Topo.ShapeTool_getSurfaceArea
ShapeTool_getVisibleAreaFrom = _Topo.ShapeTool_getVisibleAreaFrom
ShapeTool_getVisibleProjectedAreaFrom = _Topo.ShapeTool_getVisibleProjectedAreaFrom
ShapeTool_hasOnlyLineWires = _Topo.ShapeTool_hasOnlyLineWires
ShapeTool_getFaceSlopes = _Topo.ShapeTool_getFaceSlopes
ShapeTool___setOCCShapeTool__ = _Topo.ShapeTool___setOCCShapeTool__
ShapeTool___setAcisShapeTool__ = _Topo.ShapeTool___setAcisShapeTool__
ShapeTool___setDefaultShapeTool__ = _Topo.ShapeTool___setDefaultShapeTool__
ShapeTool___setInventorShapeTool__ = _Topo.ShapeTool___setInventorShapeTool__
ShapeTool___setOMFShapeTool__ = _Topo.ShapeTool___setOMFShapeTool__
ShapeTool___setAcisMeshShapeTool__ = _Topo.ShapeTool___setAcisMeshShapeTool__
ShapeTool_getFirstShape_Helper = _Topo.ShapeTool_getFirstShape_Helper

class ShellTool(object):
    r"""Proxy of C++ Topo::ShellTool class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(ShellTool self) -> ShellTool"""
        _Topo.ShellTool_swiginit(self, _Topo.new_ShellTool())
    __swig_destroy__ = _Topo.delete_ShellTool

# Register ShellTool in _Topo:
_Topo.ShellTool_swigregister(ShellTool)
class SolidTool(object):
    r"""Proxy of C++ Topo::SolidTool class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(SolidTool self) -> SolidTool"""
        _Topo.SolidTool_swiginit(self, _Topo.new_SolidTool())
    __swig_destroy__ = _Topo.delete_SolidTool
    makeSolid_by_Face_stiching = _swig_new_static_method(_Topo.SolidTool_makeSolid_by_Face_stiching)
    makeSolid = _swig_new_static_method(_Topo.SolidTool_makeSolid)
    getCentre = _swig_new_static_method(_Topo.SolidTool_getCentre)
    makeBox = _swig_new_static_method(_Topo.SolidTool_makeBox)
    makeCylinder = _swig_new_static_method(_Topo.SolidTool_makeCylinder)
    makeFourAngleRoof = _swig_new_static_method(_Topo.SolidTool_makeFourAngleRoof)
    makeHipRoofWithWall = _swig_new_static_method(_Topo.SolidTool_makeHipRoofWithWall)
    makeBeveledPlate = _swig_new_static_method(_Topo.SolidTool_makeBeveledPlate)
    makeStairsU = _swig_new_static_method(_Topo.SolidTool_makeStairsU)
    makeStairsL = _swig_new_static_method(_Topo.SolidTool_makeStairsL)
    makeStairsI = _swig_new_static_method(_Topo.SolidTool_makeStairsI)
    makeWindowArch = _swig_new_static_method(_Topo.SolidTool_makeWindowArch)
    __setDefaultSolidTool__ = _swig_new_static_method(_Topo.SolidTool___setDefaultSolidTool__)

# Register SolidTool in _Topo:
_Topo.SolidTool_swigregister(SolidTool)
SolidTool_makeSolid_by_Face_stiching = _Topo.SolidTool_makeSolid_by_Face_stiching
SolidTool_makeSolid = _Topo.SolidTool_makeSolid
SolidTool_getCentre = _Topo.SolidTool_getCentre
SolidTool_makeBox = _Topo.SolidTool_makeBox
SolidTool_makeCylinder = _Topo.SolidTool_makeCylinder
SolidTool_makeFourAngleRoof = _Topo.SolidTool_makeFourAngleRoof
SolidTool_makeHipRoofWithWall = _Topo.SolidTool_makeHipRoofWithWall
SolidTool_makeBeveledPlate = _Topo.SolidTool_makeBeveledPlate
SolidTool_makeStairsU = _Topo.SolidTool_makeStairsU
SolidTool_makeStairsL = _Topo.SolidTool_makeStairsL
SolidTool_makeStairsI = _Topo.SolidTool_makeStairsI
SolidTool_makeWindowArch = _Topo.SolidTool_makeWindowArch
SolidTool___setDefaultSolidTool__ = _Topo.SolidTool___setDefaultSolidTool__

OrientationType_UNDEFINED = _Topo.OrientationType_UNDEFINED

OrientationType_FORWARD = _Topo.OrientationType_FORWARD

OrientationType_REVERSED = _Topo.OrientationType_REVERSED

OrientationType_INTERNAL = _Topo.OrientationType_INTERNAL

OrientationType_EXTERNAL = _Topo.OrientationType_EXTERNAL

class VertexTool(object):
    r"""Proxy of C++ Topo::VertexTool class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(VertexTool self) -> VertexTool"""
        _Topo.VertexTool_swiginit(self, _Topo.new_VertexTool())
    __swig_destroy__ = _Topo.delete_VertexTool
    makeVertex = _swig_new_static_method(_Topo.VertexTool_makeVertex)
    transformed = _swig_new_static_method(_Topo.VertexTool_transformed)
    __setDefaultVertexTool__ = _swig_new_static_method(_Topo.VertexTool___setDefaultVertexTool__)

# Register VertexTool in _Topo:
_Topo.VertexTool_swigregister(VertexTool)
VertexTool_makeVertex = _Topo.VertexTool_makeVertex
VertexTool_transformed = _Topo.VertexTool_transformed
VertexTool___setDefaultVertexTool__ = _Topo.VertexTool___setDefaultVertexTool__

class VisibleEdge(object):
    r"""Proxy of C++ Topo::VisibleEdge class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    VisibleEdgeInfo_EDGE_VIS = _Topo.VisibleEdge_VisibleEdgeInfo_EDGE_VIS
    
    VisibleEdgeInfo_EDGE_HID = _Topo.VisibleEdge_VisibleEdgeInfo_EDGE_HID
    
    VisibleEdgeInfo_EDGE_OCC = _Topo.VisibleEdge_VisibleEdgeInfo_EDGE_OCC
    
    VisibleEdgeInfo_EDGE_UND = _Topo.VisibleEdge_VisibleEdgeInfo_EDGE_UND
    
    VisibleEdgeInfo_EDGE_VIS_SMOOTH = _Topo.VisibleEdge_VisibleEdgeInfo_EDGE_VIS_SMOOTH
    
    VisibleEdgeInfo_EDGE_HID_SMOOTH = _Topo.VisibleEdge_VisibleEdgeInfo_EDGE_HID_SMOOTH
    
    VisibleEdgeState_UNDEFINED = _Topo.VisibleEdge_VisibleEdgeState_UNDEFINED
    
    VisibleEdgeState_OUTER = _Topo.VisibleEdge_VisibleEdgeState_OUTER
    
    VisibleEdgeState_INNER = _Topo.VisibleEdge_VisibleEdgeState_INNER
    

    def __init__(self, e, s_shape, vis, aState):
        r"""__init__(VisibleEdge self, pConstEdge e, pConstShape s_shape, Topo::VisibleEdge::VisibleEdgeInfo vis, Topo::VisibleEdge::VisibleEdgeState aState) -> VisibleEdge"""
        _Topo.VisibleEdge_swiginit(self, _Topo.new_VisibleEdge(e, s_shape, vis, aState))
    getEdge = _swig_new_instance_method(_Topo.VisibleEdge_getEdge)
    getSourceShape = _swig_new_instance_method(_Topo.VisibleEdge_getSourceShape)
    getVisibility = _swig_new_instance_method(_Topo.VisibleEdge_getVisibility)
    getState = _swig_new_instance_method(_Topo.VisibleEdge_getState)
    __swig_destroy__ = _Topo.delete_VisibleEdge

# Register VisibleEdge in _Topo:
_Topo.VisibleEdge_swigregister(VisibleEdge)
class WireTool(object):
    r"""Proxy of C++ Topo::WireTool class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    projectWireOnPlane = _swig_new_static_method(_Topo.WireTool_projectWireOnPlane)
    projectPointOnWire = _swig_new_static_method(_Topo.WireTool_projectPointOnWire)
    isPlanar = _swig_new_static_method(_Topo.WireTool_isPlanar)
    isClosed = _swig_new_static_method(_Topo.WireTool_isClosed)
    close = _swig_new_static_method(_Topo.WireTool_close)
    closed = _swig_new_static_method(_Topo.WireTool_closed)
    addEdge = _swig_new_static_method(_Topo.WireTool_addEdge)
    addConstEdge = _swig_new_static_method(_Topo.WireTool_addConstEdge)
    addedEdge = _swig_new_static_method(_Topo.WireTool_addedEdge)
    getClosestVertexToPoint = _swig_new_static_method(_Topo.WireTool_getClosestVertexToPoint)
    getClosestEdgesToPoint = _swig_new_static_method(_Topo.WireTool_getClosestEdgesToPoint)
    getAdjacentEdgesToVertexOnWire = _swig_new_static_method(_Topo.WireTool_getAdjacentEdgesToVertexOnWire)
    getAdjacentEdgesToPointOnWire = _swig_new_static_method(_Topo.WireTool_getAdjacentEdgesToPointOnWire)
    makeWire = _swig_new_static_method(_Topo.WireTool_makeWire)
    makeWires = _swig_new_static_method(_Topo.WireTool_makeWires)
    copy = _swig_new_static_method(_Topo.WireTool_copy)
    makePolygon = _swig_new_static_method(_Topo.WireTool_makePolygon)
    makePolyline = _swig_new_static_method(_Topo.WireTool_makePolyline)
    getEdges = _swig_new_static_method(_Topo.WireTool_getEdges)
    getEdgesCopy = _swig_new_static_method(_Topo.WireTool_getEdgesCopy)
    getVertices = _swig_new_static_method(_Topo.WireTool_getVertices)
    getPoints = _swig_new_static_method(_Topo.WireTool_getPoints)
    hasOnlyLines = _swig_new_static_method(_Topo.WireTool_hasOnlyLines)
    hasHelix = _swig_new_static_method(_Topo.WireTool_hasHelix)
    fixReorder = _swig_new_static_method(_Topo.WireTool_fixReorder)
    writeDbgInfo = _swig_new_static_method(_Topo.WireTool_writeDbgInfo)
    getCentre = _swig_new_static_method(_Topo.WireTool_getCentre)
    filletWireAtVertex = _swig_new_static_method(_Topo.WireTool_filletWireAtVertex)
    chamferWireAtVertex = _swig_new_static_method(_Topo.WireTool_chamferWireAtVertex)
    removeEdgesFromWire = _swig_new_static_method(_Topo.WireTool_removeEdgesFromWire)
    replaceCollinearEdges = _swig_new_static_method(_Topo.WireTool_replaceCollinearEdges)
    transformed = _swig_new_static_method(_Topo.WireTool_transformed)
    isSelfIntersecting = _swig_new_static_method(_Topo.WireTool_isSelfIntersecting)
    createOffset = _swig_new_static_method(_Topo.WireTool_createOffset)
    reversed = _swig_new_static_method(_Topo.WireTool_reversed)
    joined = _swig_new_static_method(_Topo.WireTool_joined)
    getWirePlane = _swig_new_static_method(_Topo.WireTool_getWirePlane)
    getLength = _swig_new_static_method(_Topo.WireTool_getLength)
    discretize = _swig_new_static_method(_Topo.WireTool_discretize)
    __setDefaultWireTool__ = _swig_new_static_method(_Topo.WireTool___setDefaultWireTool__)
    reverseWirePointsConnection = _swig_new_static_method(_Topo.WireTool_reverseWirePointsConnection)
    combineWireWithWire = _swig_new_static_method(_Topo.WireTool_combineWireWithWire)

    def __init__(self):
        r"""__init__(WireTool self) -> WireTool"""
        _Topo.WireTool_swiginit(self, _Topo.new_WireTool())
    __swig_destroy__ = _Topo.delete_WireTool

# Register WireTool in _Topo:
_Topo.WireTool_swigregister(WireTool)
WireTool_projectWireOnPlane = _Topo.WireTool_projectWireOnPlane
WireTool_projectPointOnWire = _Topo.WireTool_projectPointOnWire
WireTool_isPlanar = _Topo.WireTool_isPlanar
WireTool_isClosed = _Topo.WireTool_isClosed
WireTool_close = _Topo.WireTool_close
WireTool_closed = _Topo.WireTool_closed
WireTool_addEdge = _Topo.WireTool_addEdge
WireTool_addConstEdge = _Topo.WireTool_addConstEdge
WireTool_addedEdge = _Topo.WireTool_addedEdge
WireTool_getClosestVertexToPoint = _Topo.WireTool_getClosestVertexToPoint
WireTool_getClosestEdgesToPoint = _Topo.WireTool_getClosestEdgesToPoint
WireTool_getAdjacentEdgesToVertexOnWire = _Topo.WireTool_getAdjacentEdgesToVertexOnWire
WireTool_getAdjacentEdgesToPointOnWire = _Topo.WireTool_getAdjacentEdgesToPointOnWire
WireTool_makeWire = _Topo.WireTool_makeWire
WireTool_makeWires = _Topo.WireTool_makeWires
WireTool_copy = _Topo.WireTool_copy
WireTool_makePolygon = _Topo.WireTool_makePolygon
WireTool_makePolyline = _Topo.WireTool_makePolyline
WireTool_getEdges = _Topo.WireTool_getEdges
WireTool_getEdgesCopy = _Topo.WireTool_getEdgesCopy
WireTool_getVertices = _Topo.WireTool_getVertices
WireTool_getPoints = _Topo.WireTool_getPoints
WireTool_hasOnlyLines = _Topo.WireTool_hasOnlyLines
WireTool_hasHelix = _Topo.WireTool_hasHelix
WireTool_fixReorder = _Topo.WireTool_fixReorder
WireTool_writeDbgInfo = _Topo.WireTool_writeDbgInfo
WireTool_getCentre = _Topo.WireTool_getCentre
WireTool_filletWireAtVertex = _Topo.WireTool_filletWireAtVertex
WireTool_chamferWireAtVertex = _Topo.WireTool_chamferWireAtVertex
WireTool_removeEdgesFromWire = _Topo.WireTool_removeEdgesFromWire
WireTool_replaceCollinearEdges = _Topo.WireTool_replaceCollinearEdges
WireTool_transformed = _Topo.WireTool_transformed
WireTool_isSelfIntersecting = _Topo.WireTool_isSelfIntersecting
WireTool_createOffset = _Topo.WireTool_createOffset
WireTool_reversed = _Topo.WireTool_reversed
WireTool_joined = _Topo.WireTool_joined
WireTool_getWirePlane = _Topo.WireTool_getWirePlane
WireTool_getLength = _Topo.WireTool_getLength
WireTool_discretize = _Topo.WireTool_discretize
WireTool___setDefaultWireTool__ = _Topo.WireTool___setDefaultWireTool__
WireTool_reverseWirePointsConnection = _Topo.WireTool_reverseWirePointsConnection
WireTool_combineWireWithWire = _Topo.WireTool_combineWireWithWire

class vector_Compound(object):
    r"""Proxy of C++ std::vector< pCompound > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_Topo.vector_Compound_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_Topo.vector_Compound___nonzero__)
    __bool__ = _swig_new_instance_method(_Topo.vector_Compound___bool__)
    __len__ = _swig_new_instance_method(_Topo.vector_Compound___len__)
    __getslice__ = _swig_new_instance_method(_Topo.vector_Compound___getslice__)
    __setslice__ = _swig_new_instance_method(_Topo.vector_Compound___setslice__)
    __delslice__ = _swig_new_instance_method(_Topo.vector_Compound___delslice__)
    __delitem__ = _swig_new_instance_method(_Topo.vector_Compound___delitem__)
    __getitem__ = _swig_new_instance_method(_Topo.vector_Compound___getitem__)
    __setitem__ = _swig_new_instance_method(_Topo.vector_Compound___setitem__)
    pop = _swig_new_instance_method(_Topo.vector_Compound_pop)
    append = _swig_new_instance_method(_Topo.vector_Compound_append)
    empty = _swig_new_instance_method(_Topo.vector_Compound_empty)
    size = _swig_new_instance_method(_Topo.vector_Compound_size)
    swap = _swig_new_instance_method(_Topo.vector_Compound_swap)
    begin = _swig_new_instance_method(_Topo.vector_Compound_begin)
    end = _swig_new_instance_method(_Topo.vector_Compound_end)
    rbegin = _swig_new_instance_method(_Topo.vector_Compound_rbegin)
    rend = _swig_new_instance_method(_Topo.vector_Compound_rend)
    clear = _swig_new_instance_method(_Topo.vector_Compound_clear)
    get_allocator = _swig_new_instance_method(_Topo.vector_Compound_get_allocator)
    pop_back = _swig_new_instance_method(_Topo.vector_Compound_pop_back)
    erase = _swig_new_instance_method(_Topo.vector_Compound_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_Compound self) -> vector_Compound
        __init__(vector_Compound self, vector_Compound other) -> vector_Compound
        __init__(vector_Compound self, std::vector< std::shared_ptr< Topo::Compound > >::size_type size) -> vector_Compound
        __init__(vector_Compound self, std::vector< std::shared_ptr< Topo::Compound > >::size_type size, std::vector< std::shared_ptr< Topo::Compound > >::value_type const & value) -> vector_Compound
        """
        _Topo.vector_Compound_swiginit(self, _Topo.new_vector_Compound(*args))
    push_back = _swig_new_instance_method(_Topo.vector_Compound_push_back)
    front = _swig_new_instance_method(_Topo.vector_Compound_front)
    back = _swig_new_instance_method(_Topo.vector_Compound_back)
    assign = _swig_new_instance_method(_Topo.vector_Compound_assign)
    resize = _swig_new_instance_method(_Topo.vector_Compound_resize)
    insert = _swig_new_instance_method(_Topo.vector_Compound_insert)
    reserve = _swig_new_instance_method(_Topo.vector_Compound_reserve)
    capacity = _swig_new_instance_method(_Topo.vector_Compound_capacity)
    __swig_destroy__ = _Topo.delete_vector_Compound

# Register vector_Compound in _Topo:
_Topo.vector_Compound_swigregister(vector_Compound)
class vector_Edge(object):
    r"""Proxy of C++ std::vector< pEdge > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_Topo.vector_Edge_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_Topo.vector_Edge___nonzero__)
    __bool__ = _swig_new_instance_method(_Topo.vector_Edge___bool__)
    __len__ = _swig_new_instance_method(_Topo.vector_Edge___len__)
    __getslice__ = _swig_new_instance_method(_Topo.vector_Edge___getslice__)
    __setslice__ = _swig_new_instance_method(_Topo.vector_Edge___setslice__)
    __delslice__ = _swig_new_instance_method(_Topo.vector_Edge___delslice__)
    __delitem__ = _swig_new_instance_method(_Topo.vector_Edge___delitem__)
    __getitem__ = _swig_new_instance_method(_Topo.vector_Edge___getitem__)
    __setitem__ = _swig_new_instance_method(_Topo.vector_Edge___setitem__)
    pop = _swig_new_instance_method(_Topo.vector_Edge_pop)
    append = _swig_new_instance_method(_Topo.vector_Edge_append)
    empty = _swig_new_instance_method(_Topo.vector_Edge_empty)
    size = _swig_new_instance_method(_Topo.vector_Edge_size)
    swap = _swig_new_instance_method(_Topo.vector_Edge_swap)
    begin = _swig_new_instance_method(_Topo.vector_Edge_begin)
    end = _swig_new_instance_method(_Topo.vector_Edge_end)
    rbegin = _swig_new_instance_method(_Topo.vector_Edge_rbegin)
    rend = _swig_new_instance_method(_Topo.vector_Edge_rend)
    clear = _swig_new_instance_method(_Topo.vector_Edge_clear)
    get_allocator = _swig_new_instance_method(_Topo.vector_Edge_get_allocator)
    pop_back = _swig_new_instance_method(_Topo.vector_Edge_pop_back)
    erase = _swig_new_instance_method(_Topo.vector_Edge_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_Edge self) -> vector_Edge
        __init__(vector_Edge self, vector_Edge other) -> vector_Edge
        __init__(vector_Edge self, std::vector< std::shared_ptr< Topo::Edge > >::size_type size) -> vector_Edge
        __init__(vector_Edge self, std::vector< std::shared_ptr< Topo::Edge > >::size_type size, std::vector< std::shared_ptr< Topo::Edge > >::value_type const & value) -> vector_Edge
        """
        _Topo.vector_Edge_swiginit(self, _Topo.new_vector_Edge(*args))
    push_back = _swig_new_instance_method(_Topo.vector_Edge_push_back)
    front = _swig_new_instance_method(_Topo.vector_Edge_front)
    back = _swig_new_instance_method(_Topo.vector_Edge_back)
    assign = _swig_new_instance_method(_Topo.vector_Edge_assign)
    resize = _swig_new_instance_method(_Topo.vector_Edge_resize)
    insert = _swig_new_instance_method(_Topo.vector_Edge_insert)
    reserve = _swig_new_instance_method(_Topo.vector_Edge_reserve)
    capacity = _swig_new_instance_method(_Topo.vector_Edge_capacity)
    __swig_destroy__ = _Topo.delete_vector_Edge

# Register vector_Edge in _Topo:
_Topo.vector_Edge_swigregister(vector_Edge)
class vector_Face(object):
    r"""Proxy of C++ std::vector< pFace > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_Topo.vector_Face_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_Topo.vector_Face___nonzero__)
    __bool__ = _swig_new_instance_method(_Topo.vector_Face___bool__)
    __len__ = _swig_new_instance_method(_Topo.vector_Face___len__)
    __getslice__ = _swig_new_instance_method(_Topo.vector_Face___getslice__)
    __setslice__ = _swig_new_instance_method(_Topo.vector_Face___setslice__)
    __delslice__ = _swig_new_instance_method(_Topo.vector_Face___delslice__)
    __delitem__ = _swig_new_instance_method(_Topo.vector_Face___delitem__)
    __getitem__ = _swig_new_instance_method(_Topo.vector_Face___getitem__)
    __setitem__ = _swig_new_instance_method(_Topo.vector_Face___setitem__)
    pop = _swig_new_instance_method(_Topo.vector_Face_pop)
    append = _swig_new_instance_method(_Topo.vector_Face_append)
    empty = _swig_new_instance_method(_Topo.vector_Face_empty)
    size = _swig_new_instance_method(_Topo.vector_Face_size)
    swap = _swig_new_instance_method(_Topo.vector_Face_swap)
    begin = _swig_new_instance_method(_Topo.vector_Face_begin)
    end = _swig_new_instance_method(_Topo.vector_Face_end)
    rbegin = _swig_new_instance_method(_Topo.vector_Face_rbegin)
    rend = _swig_new_instance_method(_Topo.vector_Face_rend)
    clear = _swig_new_instance_method(_Topo.vector_Face_clear)
    get_allocator = _swig_new_instance_method(_Topo.vector_Face_get_allocator)
    pop_back = _swig_new_instance_method(_Topo.vector_Face_pop_back)
    erase = _swig_new_instance_method(_Topo.vector_Face_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_Face self) -> vector_Face
        __init__(vector_Face self, vector_Face other) -> vector_Face
        __init__(vector_Face self, std::vector< std::shared_ptr< Topo::Face > >::size_type size) -> vector_Face
        __init__(vector_Face self, std::vector< std::shared_ptr< Topo::Face > >::size_type size, std::vector< std::shared_ptr< Topo::Face > >::value_type const & value) -> vector_Face
        """
        _Topo.vector_Face_swiginit(self, _Topo.new_vector_Face(*args))
    push_back = _swig_new_instance_method(_Topo.vector_Face_push_back)
    front = _swig_new_instance_method(_Topo.vector_Face_front)
    back = _swig_new_instance_method(_Topo.vector_Face_back)
    assign = _swig_new_instance_method(_Topo.vector_Face_assign)
    resize = _swig_new_instance_method(_Topo.vector_Face_resize)
    insert = _swig_new_instance_method(_Topo.vector_Face_insert)
    reserve = _swig_new_instance_method(_Topo.vector_Face_reserve)
    capacity = _swig_new_instance_method(_Topo.vector_Face_capacity)
    __swig_destroy__ = _Topo.delete_vector_Face

# Register vector_Face in _Topo:
_Topo.vector_Face_swigregister(vector_Face)
class vector_Shape(object):
    r"""Proxy of C++ std::vector< pShape > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_Topo.vector_Shape_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_Topo.vector_Shape___nonzero__)
    __bool__ = _swig_new_instance_method(_Topo.vector_Shape___bool__)
    __len__ = _swig_new_instance_method(_Topo.vector_Shape___len__)
    __getslice__ = _swig_new_instance_method(_Topo.vector_Shape___getslice__)
    __setslice__ = _swig_new_instance_method(_Topo.vector_Shape___setslice__)
    __delslice__ = _swig_new_instance_method(_Topo.vector_Shape___delslice__)
    __delitem__ = _swig_new_instance_method(_Topo.vector_Shape___delitem__)
    __getitem__ = _swig_new_instance_method(_Topo.vector_Shape___getitem__)
    __setitem__ = _swig_new_instance_method(_Topo.vector_Shape___setitem__)
    pop = _swig_new_instance_method(_Topo.vector_Shape_pop)
    append = _swig_new_instance_method(_Topo.vector_Shape_append)
    empty = _swig_new_instance_method(_Topo.vector_Shape_empty)
    size = _swig_new_instance_method(_Topo.vector_Shape_size)
    swap = _swig_new_instance_method(_Topo.vector_Shape_swap)
    begin = _swig_new_instance_method(_Topo.vector_Shape_begin)
    end = _swig_new_instance_method(_Topo.vector_Shape_end)
    rbegin = _swig_new_instance_method(_Topo.vector_Shape_rbegin)
    rend = _swig_new_instance_method(_Topo.vector_Shape_rend)
    clear = _swig_new_instance_method(_Topo.vector_Shape_clear)
    get_allocator = _swig_new_instance_method(_Topo.vector_Shape_get_allocator)
    pop_back = _swig_new_instance_method(_Topo.vector_Shape_pop_back)
    erase = _swig_new_instance_method(_Topo.vector_Shape_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_Shape self) -> vector_Shape
        __init__(vector_Shape self, vector_Shape other) -> vector_Shape
        __init__(vector_Shape self, std::vector< std::shared_ptr< Topo::Shape > >::size_type size) -> vector_Shape
        __init__(vector_Shape self, std::vector< std::shared_ptr< Topo::Shape > >::size_type size, std::vector< std::shared_ptr< Topo::Shape > >::value_type const & value) -> vector_Shape
        """
        _Topo.vector_Shape_swiginit(self, _Topo.new_vector_Shape(*args))
    push_back = _swig_new_instance_method(_Topo.vector_Shape_push_back)
    front = _swig_new_instance_method(_Topo.vector_Shape_front)
    back = _swig_new_instance_method(_Topo.vector_Shape_back)
    assign = _swig_new_instance_method(_Topo.vector_Shape_assign)
    resize = _swig_new_instance_method(_Topo.vector_Shape_resize)
    insert = _swig_new_instance_method(_Topo.vector_Shape_insert)
    reserve = _swig_new_instance_method(_Topo.vector_Shape_reserve)
    capacity = _swig_new_instance_method(_Topo.vector_Shape_capacity)
    __swig_destroy__ = _Topo.delete_vector_Shape

# Register vector_Shape in _Topo:
_Topo.vector_Shape_swigregister(vector_Shape)
class vector_Shell(object):
    r"""Proxy of C++ std::vector< pShell > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_Topo.vector_Shell_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_Topo.vector_Shell___nonzero__)
    __bool__ = _swig_new_instance_method(_Topo.vector_Shell___bool__)
    __len__ = _swig_new_instance_method(_Topo.vector_Shell___len__)
    __getslice__ = _swig_new_instance_method(_Topo.vector_Shell___getslice__)
    __setslice__ = _swig_new_instance_method(_Topo.vector_Shell___setslice__)
    __delslice__ = _swig_new_instance_method(_Topo.vector_Shell___delslice__)
    __delitem__ = _swig_new_instance_method(_Topo.vector_Shell___delitem__)
    __getitem__ = _swig_new_instance_method(_Topo.vector_Shell___getitem__)
    __setitem__ = _swig_new_instance_method(_Topo.vector_Shell___setitem__)
    pop = _swig_new_instance_method(_Topo.vector_Shell_pop)
    append = _swig_new_instance_method(_Topo.vector_Shell_append)
    empty = _swig_new_instance_method(_Topo.vector_Shell_empty)
    size = _swig_new_instance_method(_Topo.vector_Shell_size)
    swap = _swig_new_instance_method(_Topo.vector_Shell_swap)
    begin = _swig_new_instance_method(_Topo.vector_Shell_begin)
    end = _swig_new_instance_method(_Topo.vector_Shell_end)
    rbegin = _swig_new_instance_method(_Topo.vector_Shell_rbegin)
    rend = _swig_new_instance_method(_Topo.vector_Shell_rend)
    clear = _swig_new_instance_method(_Topo.vector_Shell_clear)
    get_allocator = _swig_new_instance_method(_Topo.vector_Shell_get_allocator)
    pop_back = _swig_new_instance_method(_Topo.vector_Shell_pop_back)
    erase = _swig_new_instance_method(_Topo.vector_Shell_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_Shell self) -> vector_Shell
        __init__(vector_Shell self, vector_Shell other) -> vector_Shell
        __init__(vector_Shell self, std::vector< std::shared_ptr< Topo::Shell > >::size_type size) -> vector_Shell
        __init__(vector_Shell self, std::vector< std::shared_ptr< Topo::Shell > >::size_type size, std::vector< std::shared_ptr< Topo::Shell > >::value_type const & value) -> vector_Shell
        """
        _Topo.vector_Shell_swiginit(self, _Topo.new_vector_Shell(*args))
    push_back = _swig_new_instance_method(_Topo.vector_Shell_push_back)
    front = _swig_new_instance_method(_Topo.vector_Shell_front)
    back = _swig_new_instance_method(_Topo.vector_Shell_back)
    assign = _swig_new_instance_method(_Topo.vector_Shell_assign)
    resize = _swig_new_instance_method(_Topo.vector_Shell_resize)
    insert = _swig_new_instance_method(_Topo.vector_Shell_insert)
    reserve = _swig_new_instance_method(_Topo.vector_Shell_reserve)
    capacity = _swig_new_instance_method(_Topo.vector_Shell_capacity)
    __swig_destroy__ = _Topo.delete_vector_Shell

# Register vector_Shell in _Topo:
_Topo.vector_Shell_swigregister(vector_Shell)
class vector_Solid(object):
    r"""Proxy of C++ std::vector< pSolid > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_Topo.vector_Solid_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_Topo.vector_Solid___nonzero__)
    __bool__ = _swig_new_instance_method(_Topo.vector_Solid___bool__)
    __len__ = _swig_new_instance_method(_Topo.vector_Solid___len__)
    __getslice__ = _swig_new_instance_method(_Topo.vector_Solid___getslice__)
    __setslice__ = _swig_new_instance_method(_Topo.vector_Solid___setslice__)
    __delslice__ = _swig_new_instance_method(_Topo.vector_Solid___delslice__)
    __delitem__ = _swig_new_instance_method(_Topo.vector_Solid___delitem__)
    __getitem__ = _swig_new_instance_method(_Topo.vector_Solid___getitem__)
    __setitem__ = _swig_new_instance_method(_Topo.vector_Solid___setitem__)
    pop = _swig_new_instance_method(_Topo.vector_Solid_pop)
    append = _swig_new_instance_method(_Topo.vector_Solid_append)
    empty = _swig_new_instance_method(_Topo.vector_Solid_empty)
    size = _swig_new_instance_method(_Topo.vector_Solid_size)
    swap = _swig_new_instance_method(_Topo.vector_Solid_swap)
    begin = _swig_new_instance_method(_Topo.vector_Solid_begin)
    end = _swig_new_instance_method(_Topo.vector_Solid_end)
    rbegin = _swig_new_instance_method(_Topo.vector_Solid_rbegin)
    rend = _swig_new_instance_method(_Topo.vector_Solid_rend)
    clear = _swig_new_instance_method(_Topo.vector_Solid_clear)
    get_allocator = _swig_new_instance_method(_Topo.vector_Solid_get_allocator)
    pop_back = _swig_new_instance_method(_Topo.vector_Solid_pop_back)
    erase = _swig_new_instance_method(_Topo.vector_Solid_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_Solid self) -> vector_Solid
        __init__(vector_Solid self, vector_Solid other) -> vector_Solid
        __init__(vector_Solid self, std::vector< std::shared_ptr< Topo::Solid > >::size_type size) -> vector_Solid
        __init__(vector_Solid self, std::vector< std::shared_ptr< Topo::Solid > >::size_type size, std::vector< std::shared_ptr< Topo::Solid > >::value_type const & value) -> vector_Solid
        """
        _Topo.vector_Solid_swiginit(self, _Topo.new_vector_Solid(*args))
    push_back = _swig_new_instance_method(_Topo.vector_Solid_push_back)
    front = _swig_new_instance_method(_Topo.vector_Solid_front)
    back = _swig_new_instance_method(_Topo.vector_Solid_back)
    assign = _swig_new_instance_method(_Topo.vector_Solid_assign)
    resize = _swig_new_instance_method(_Topo.vector_Solid_resize)
    insert = _swig_new_instance_method(_Topo.vector_Solid_insert)
    reserve = _swig_new_instance_method(_Topo.vector_Solid_reserve)
    capacity = _swig_new_instance_method(_Topo.vector_Solid_capacity)
    __swig_destroy__ = _Topo.delete_vector_Solid

# Register vector_Solid in _Topo:
_Topo.vector_Solid_swigregister(vector_Solid)
class vector_TopoItem(object):
    r"""Proxy of C++ std::vector< pTopologicalItem > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_Topo.vector_TopoItem_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_Topo.vector_TopoItem___nonzero__)
    __bool__ = _swig_new_instance_method(_Topo.vector_TopoItem___bool__)
    __len__ = _swig_new_instance_method(_Topo.vector_TopoItem___len__)
    __getslice__ = _swig_new_instance_method(_Topo.vector_TopoItem___getslice__)
    __setslice__ = _swig_new_instance_method(_Topo.vector_TopoItem___setslice__)
    __delslice__ = _swig_new_instance_method(_Topo.vector_TopoItem___delslice__)
    __delitem__ = _swig_new_instance_method(_Topo.vector_TopoItem___delitem__)
    __getitem__ = _swig_new_instance_method(_Topo.vector_TopoItem___getitem__)
    __setitem__ = _swig_new_instance_method(_Topo.vector_TopoItem___setitem__)
    pop = _swig_new_instance_method(_Topo.vector_TopoItem_pop)
    append = _swig_new_instance_method(_Topo.vector_TopoItem_append)
    empty = _swig_new_instance_method(_Topo.vector_TopoItem_empty)
    size = _swig_new_instance_method(_Topo.vector_TopoItem_size)
    swap = _swig_new_instance_method(_Topo.vector_TopoItem_swap)
    begin = _swig_new_instance_method(_Topo.vector_TopoItem_begin)
    end = _swig_new_instance_method(_Topo.vector_TopoItem_end)
    rbegin = _swig_new_instance_method(_Topo.vector_TopoItem_rbegin)
    rend = _swig_new_instance_method(_Topo.vector_TopoItem_rend)
    clear = _swig_new_instance_method(_Topo.vector_TopoItem_clear)
    get_allocator = _swig_new_instance_method(_Topo.vector_TopoItem_get_allocator)
    pop_back = _swig_new_instance_method(_Topo.vector_TopoItem_pop_back)
    erase = _swig_new_instance_method(_Topo.vector_TopoItem_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_TopoItem self) -> vector_TopoItem
        __init__(vector_TopoItem self, vector_TopoItem other) -> vector_TopoItem
        __init__(vector_TopoItem self, std::vector< std::shared_ptr< Topo::TopologicalItem > >::size_type size) -> vector_TopoItem
        __init__(vector_TopoItem self, std::vector< std::shared_ptr< Topo::TopologicalItem > >::size_type size, std::vector< std::shared_ptr< Topo::TopologicalItem > >::value_type const & value) -> vector_TopoItem
        """
        _Topo.vector_TopoItem_swiginit(self, _Topo.new_vector_TopoItem(*args))
    push_back = _swig_new_instance_method(_Topo.vector_TopoItem_push_back)
    front = _swig_new_instance_method(_Topo.vector_TopoItem_front)
    back = _swig_new_instance_method(_Topo.vector_TopoItem_back)
    assign = _swig_new_instance_method(_Topo.vector_TopoItem_assign)
    resize = _swig_new_instance_method(_Topo.vector_TopoItem_resize)
    insert = _swig_new_instance_method(_Topo.vector_TopoItem_insert)
    reserve = _swig_new_instance_method(_Topo.vector_TopoItem_reserve)
    capacity = _swig_new_instance_method(_Topo.vector_TopoItem_capacity)
    __swig_destroy__ = _Topo.delete_vector_TopoItem

# Register vector_TopoItem in _Topo:
_Topo.vector_TopoItem_swigregister(vector_TopoItem)
class vector_Vertex(object):
    r"""Proxy of C++ std::vector< pVertex > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_Topo.vector_Vertex_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_Topo.vector_Vertex___nonzero__)
    __bool__ = _swig_new_instance_method(_Topo.vector_Vertex___bool__)
    __len__ = _swig_new_instance_method(_Topo.vector_Vertex___len__)
    __getslice__ = _swig_new_instance_method(_Topo.vector_Vertex___getslice__)
    __setslice__ = _swig_new_instance_method(_Topo.vector_Vertex___setslice__)
    __delslice__ = _swig_new_instance_method(_Topo.vector_Vertex___delslice__)
    __delitem__ = _swig_new_instance_method(_Topo.vector_Vertex___delitem__)
    __getitem__ = _swig_new_instance_method(_Topo.vector_Vertex___getitem__)
    __setitem__ = _swig_new_instance_method(_Topo.vector_Vertex___setitem__)
    pop = _swig_new_instance_method(_Topo.vector_Vertex_pop)
    append = _swig_new_instance_method(_Topo.vector_Vertex_append)
    empty = _swig_new_instance_method(_Topo.vector_Vertex_empty)
    size = _swig_new_instance_method(_Topo.vector_Vertex_size)
    swap = _swig_new_instance_method(_Topo.vector_Vertex_swap)
    begin = _swig_new_instance_method(_Topo.vector_Vertex_begin)
    end = _swig_new_instance_method(_Topo.vector_Vertex_end)
    rbegin = _swig_new_instance_method(_Topo.vector_Vertex_rbegin)
    rend = _swig_new_instance_method(_Topo.vector_Vertex_rend)
    clear = _swig_new_instance_method(_Topo.vector_Vertex_clear)
    get_allocator = _swig_new_instance_method(_Topo.vector_Vertex_get_allocator)
    pop_back = _swig_new_instance_method(_Topo.vector_Vertex_pop_back)
    erase = _swig_new_instance_method(_Topo.vector_Vertex_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_Vertex self) -> vector_Vertex
        __init__(vector_Vertex self, vector_Vertex other) -> vector_Vertex
        __init__(vector_Vertex self, std::vector< std::shared_ptr< Topo::Vertex > >::size_type size) -> vector_Vertex
        __init__(vector_Vertex self, std::vector< std::shared_ptr< Topo::Vertex > >::size_type size, std::vector< std::shared_ptr< Topo::Vertex > >::value_type const & value) -> vector_Vertex
        """
        _Topo.vector_Vertex_swiginit(self, _Topo.new_vector_Vertex(*args))
    push_back = _swig_new_instance_method(_Topo.vector_Vertex_push_back)
    front = _swig_new_instance_method(_Topo.vector_Vertex_front)
    back = _swig_new_instance_method(_Topo.vector_Vertex_back)
    assign = _swig_new_instance_method(_Topo.vector_Vertex_assign)
    resize = _swig_new_instance_method(_Topo.vector_Vertex_resize)
    insert = _swig_new_instance_method(_Topo.vector_Vertex_insert)
    reserve = _swig_new_instance_method(_Topo.vector_Vertex_reserve)
    capacity = _swig_new_instance_method(_Topo.vector_Vertex_capacity)
    __swig_destroy__ = _Topo.delete_vector_Vertex

# Register vector_Vertex in _Topo:
_Topo.vector_Vertex_swigregister(vector_Vertex)
class vector_Wire(object):
    r"""Proxy of C++ std::vector< pWire > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_Topo.vector_Wire_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_Topo.vector_Wire___nonzero__)
    __bool__ = _swig_new_instance_method(_Topo.vector_Wire___bool__)
    __len__ = _swig_new_instance_method(_Topo.vector_Wire___len__)
    __getslice__ = _swig_new_instance_method(_Topo.vector_Wire___getslice__)
    __setslice__ = _swig_new_instance_method(_Topo.vector_Wire___setslice__)
    __delslice__ = _swig_new_instance_method(_Topo.vector_Wire___delslice__)
    __delitem__ = _swig_new_instance_method(_Topo.vector_Wire___delitem__)
    __getitem__ = _swig_new_instance_method(_Topo.vector_Wire___getitem__)
    __setitem__ = _swig_new_instance_method(_Topo.vector_Wire___setitem__)
    pop = _swig_new_instance_method(_Topo.vector_Wire_pop)
    append = _swig_new_instance_method(_Topo.vector_Wire_append)
    empty = _swig_new_instance_method(_Topo.vector_Wire_empty)
    size = _swig_new_instance_method(_Topo.vector_Wire_size)
    swap = _swig_new_instance_method(_Topo.vector_Wire_swap)
    begin = _swig_new_instance_method(_Topo.vector_Wire_begin)
    end = _swig_new_instance_method(_Topo.vector_Wire_end)
    rbegin = _swig_new_instance_method(_Topo.vector_Wire_rbegin)
    rend = _swig_new_instance_method(_Topo.vector_Wire_rend)
    clear = _swig_new_instance_method(_Topo.vector_Wire_clear)
    get_allocator = _swig_new_instance_method(_Topo.vector_Wire_get_allocator)
    pop_back = _swig_new_instance_method(_Topo.vector_Wire_pop_back)
    erase = _swig_new_instance_method(_Topo.vector_Wire_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_Wire self) -> vector_Wire
        __init__(vector_Wire self, vector_Wire other) -> vector_Wire
        __init__(vector_Wire self, std::vector< std::shared_ptr< Topo::Wire > >::size_type size) -> vector_Wire
        __init__(vector_Wire self, std::vector< std::shared_ptr< Topo::Wire > >::size_type size, std::vector< std::shared_ptr< Topo::Wire > >::value_type const & value) -> vector_Wire
        """
        _Topo.vector_Wire_swiginit(self, _Topo.new_vector_Wire(*args))
    push_back = _swig_new_instance_method(_Topo.vector_Wire_push_back)
    front = _swig_new_instance_method(_Topo.vector_Wire_front)
    back = _swig_new_instance_method(_Topo.vector_Wire_back)
    assign = _swig_new_instance_method(_Topo.vector_Wire_assign)
    resize = _swig_new_instance_method(_Topo.vector_Wire_resize)
    insert = _swig_new_instance_method(_Topo.vector_Wire_insert)
    reserve = _swig_new_instance_method(_Topo.vector_Wire_reserve)
    capacity = _swig_new_instance_method(_Topo.vector_Wire_capacity)
    __swig_destroy__ = _Topo.delete_vector_Wire

# Register vector_Wire in _Topo:
_Topo.vector_Wire_swigregister(vector_Wire)
class vector_ConstCompound(object):
    r"""Proxy of C++ std::vector< pConstCompound > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_Topo.vector_ConstCompound_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_Topo.vector_ConstCompound___nonzero__)
    __bool__ = _swig_new_instance_method(_Topo.vector_ConstCompound___bool__)
    __len__ = _swig_new_instance_method(_Topo.vector_ConstCompound___len__)
    __getslice__ = _swig_new_instance_method(_Topo.vector_ConstCompound___getslice__)
    __setslice__ = _swig_new_instance_method(_Topo.vector_ConstCompound___setslice__)
    __delslice__ = _swig_new_instance_method(_Topo.vector_ConstCompound___delslice__)
    __delitem__ = _swig_new_instance_method(_Topo.vector_ConstCompound___delitem__)
    __getitem__ = _swig_new_instance_method(_Topo.vector_ConstCompound___getitem__)
    __setitem__ = _swig_new_instance_method(_Topo.vector_ConstCompound___setitem__)
    pop = _swig_new_instance_method(_Topo.vector_ConstCompound_pop)
    append = _swig_new_instance_method(_Topo.vector_ConstCompound_append)
    empty = _swig_new_instance_method(_Topo.vector_ConstCompound_empty)
    size = _swig_new_instance_method(_Topo.vector_ConstCompound_size)
    swap = _swig_new_instance_method(_Topo.vector_ConstCompound_swap)
    begin = _swig_new_instance_method(_Topo.vector_ConstCompound_begin)
    end = _swig_new_instance_method(_Topo.vector_ConstCompound_end)
    rbegin = _swig_new_instance_method(_Topo.vector_ConstCompound_rbegin)
    rend = _swig_new_instance_method(_Topo.vector_ConstCompound_rend)
    clear = _swig_new_instance_method(_Topo.vector_ConstCompound_clear)
    get_allocator = _swig_new_instance_method(_Topo.vector_ConstCompound_get_allocator)
    pop_back = _swig_new_instance_method(_Topo.vector_ConstCompound_pop_back)
    erase = _swig_new_instance_method(_Topo.vector_ConstCompound_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_ConstCompound self) -> vector_ConstCompound
        __init__(vector_ConstCompound self, vector_ConstCompound other) -> vector_ConstCompound
        __init__(vector_ConstCompound self, std::vector< std::shared_ptr< Topo::Compound const > >::size_type size) -> vector_ConstCompound
        __init__(vector_ConstCompound self, std::vector< std::shared_ptr< Topo::Compound const > >::size_type size, std::vector< std::shared_ptr< Topo::Compound const > >::value_type const & value) -> vector_ConstCompound
        """
        _Topo.vector_ConstCompound_swiginit(self, _Topo.new_vector_ConstCompound(*args))
    push_back = _swig_new_instance_method(_Topo.vector_ConstCompound_push_back)
    front = _swig_new_instance_method(_Topo.vector_ConstCompound_front)
    back = _swig_new_instance_method(_Topo.vector_ConstCompound_back)
    assign = _swig_new_instance_method(_Topo.vector_ConstCompound_assign)
    resize = _swig_new_instance_method(_Topo.vector_ConstCompound_resize)
    insert = _swig_new_instance_method(_Topo.vector_ConstCompound_insert)
    reserve = _swig_new_instance_method(_Topo.vector_ConstCompound_reserve)
    capacity = _swig_new_instance_method(_Topo.vector_ConstCompound_capacity)
    __swig_destroy__ = _Topo.delete_vector_ConstCompound

# Register vector_ConstCompound in _Topo:
_Topo.vector_ConstCompound_swigregister(vector_ConstCompound)
class vector_ConstEdge(object):
    r"""Proxy of C++ std::vector< pConstEdge > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_Topo.vector_ConstEdge_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_Topo.vector_ConstEdge___nonzero__)
    __bool__ = _swig_new_instance_method(_Topo.vector_ConstEdge___bool__)
    __len__ = _swig_new_instance_method(_Topo.vector_ConstEdge___len__)
    __getslice__ = _swig_new_instance_method(_Topo.vector_ConstEdge___getslice__)
    __setslice__ = _swig_new_instance_method(_Topo.vector_ConstEdge___setslice__)
    __delslice__ = _swig_new_instance_method(_Topo.vector_ConstEdge___delslice__)
    __delitem__ = _swig_new_instance_method(_Topo.vector_ConstEdge___delitem__)
    __getitem__ = _swig_new_instance_method(_Topo.vector_ConstEdge___getitem__)
    __setitem__ = _swig_new_instance_method(_Topo.vector_ConstEdge___setitem__)
    pop = _swig_new_instance_method(_Topo.vector_ConstEdge_pop)
    append = _swig_new_instance_method(_Topo.vector_ConstEdge_append)
    empty = _swig_new_instance_method(_Topo.vector_ConstEdge_empty)
    size = _swig_new_instance_method(_Topo.vector_ConstEdge_size)
    swap = _swig_new_instance_method(_Topo.vector_ConstEdge_swap)
    begin = _swig_new_instance_method(_Topo.vector_ConstEdge_begin)
    end = _swig_new_instance_method(_Topo.vector_ConstEdge_end)
    rbegin = _swig_new_instance_method(_Topo.vector_ConstEdge_rbegin)
    rend = _swig_new_instance_method(_Topo.vector_ConstEdge_rend)
    clear = _swig_new_instance_method(_Topo.vector_ConstEdge_clear)
    get_allocator = _swig_new_instance_method(_Topo.vector_ConstEdge_get_allocator)
    pop_back = _swig_new_instance_method(_Topo.vector_ConstEdge_pop_back)
    erase = _swig_new_instance_method(_Topo.vector_ConstEdge_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_ConstEdge self) -> vector_ConstEdge
        __init__(vector_ConstEdge self, vector_ConstEdge other) -> vector_ConstEdge
        __init__(vector_ConstEdge self, std::vector< std::shared_ptr< Topo::Edge const > >::size_type size) -> vector_ConstEdge
        __init__(vector_ConstEdge self, std::vector< std::shared_ptr< Topo::Edge const > >::size_type size, std::vector< std::shared_ptr< Topo::Edge const > >::value_type const & value) -> vector_ConstEdge
        """
        _Topo.vector_ConstEdge_swiginit(self, _Topo.new_vector_ConstEdge(*args))
    push_back = _swig_new_instance_method(_Topo.vector_ConstEdge_push_back)
    front = _swig_new_instance_method(_Topo.vector_ConstEdge_front)
    back = _swig_new_instance_method(_Topo.vector_ConstEdge_back)
    assign = _swig_new_instance_method(_Topo.vector_ConstEdge_assign)
    resize = _swig_new_instance_method(_Topo.vector_ConstEdge_resize)
    insert = _swig_new_instance_method(_Topo.vector_ConstEdge_insert)
    reserve = _swig_new_instance_method(_Topo.vector_ConstEdge_reserve)
    capacity = _swig_new_instance_method(_Topo.vector_ConstEdge_capacity)
    __swig_destroy__ = _Topo.delete_vector_ConstEdge

# Register vector_ConstEdge in _Topo:
_Topo.vector_ConstEdge_swigregister(vector_ConstEdge)
class vector_ConstFace(object):
    r"""Proxy of C++ std::vector< pConstFace > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_Topo.vector_ConstFace_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_Topo.vector_ConstFace___nonzero__)
    __bool__ = _swig_new_instance_method(_Topo.vector_ConstFace___bool__)
    __len__ = _swig_new_instance_method(_Topo.vector_ConstFace___len__)
    __getslice__ = _swig_new_instance_method(_Topo.vector_ConstFace___getslice__)
    __setslice__ = _swig_new_instance_method(_Topo.vector_ConstFace___setslice__)
    __delslice__ = _swig_new_instance_method(_Topo.vector_ConstFace___delslice__)
    __delitem__ = _swig_new_instance_method(_Topo.vector_ConstFace___delitem__)
    __getitem__ = _swig_new_instance_method(_Topo.vector_ConstFace___getitem__)
    __setitem__ = _swig_new_instance_method(_Topo.vector_ConstFace___setitem__)
    pop = _swig_new_instance_method(_Topo.vector_ConstFace_pop)
    append = _swig_new_instance_method(_Topo.vector_ConstFace_append)
    empty = _swig_new_instance_method(_Topo.vector_ConstFace_empty)
    size = _swig_new_instance_method(_Topo.vector_ConstFace_size)
    swap = _swig_new_instance_method(_Topo.vector_ConstFace_swap)
    begin = _swig_new_instance_method(_Topo.vector_ConstFace_begin)
    end = _swig_new_instance_method(_Topo.vector_ConstFace_end)
    rbegin = _swig_new_instance_method(_Topo.vector_ConstFace_rbegin)
    rend = _swig_new_instance_method(_Topo.vector_ConstFace_rend)
    clear = _swig_new_instance_method(_Topo.vector_ConstFace_clear)
    get_allocator = _swig_new_instance_method(_Topo.vector_ConstFace_get_allocator)
    pop_back = _swig_new_instance_method(_Topo.vector_ConstFace_pop_back)
    erase = _swig_new_instance_method(_Topo.vector_ConstFace_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_ConstFace self) -> vector_ConstFace
        __init__(vector_ConstFace self, vector_ConstFace other) -> vector_ConstFace
        __init__(vector_ConstFace self, std::vector< std::shared_ptr< Topo::Face const > >::size_type size) -> vector_ConstFace
        __init__(vector_ConstFace self, std::vector< std::shared_ptr< Topo::Face const > >::size_type size, std::vector< std::shared_ptr< Topo::Face const > >::value_type const & value) -> vector_ConstFace
        """
        _Topo.vector_ConstFace_swiginit(self, _Topo.new_vector_ConstFace(*args))
    push_back = _swig_new_instance_method(_Topo.vector_ConstFace_push_back)
    front = _swig_new_instance_method(_Topo.vector_ConstFace_front)
    back = _swig_new_instance_method(_Topo.vector_ConstFace_back)
    assign = _swig_new_instance_method(_Topo.vector_ConstFace_assign)
    resize = _swig_new_instance_method(_Topo.vector_ConstFace_resize)
    insert = _swig_new_instance_method(_Topo.vector_ConstFace_insert)
    reserve = _swig_new_instance_method(_Topo.vector_ConstFace_reserve)
    capacity = _swig_new_instance_method(_Topo.vector_ConstFace_capacity)
    __swig_destroy__ = _Topo.delete_vector_ConstFace

# Register vector_ConstFace in _Topo:
_Topo.vector_ConstFace_swigregister(vector_ConstFace)
class vector_ConstShape(object):
    r"""Proxy of C++ std::vector< pConstShape > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_Topo.vector_ConstShape_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_Topo.vector_ConstShape___nonzero__)
    __bool__ = _swig_new_instance_method(_Topo.vector_ConstShape___bool__)
    __len__ = _swig_new_instance_method(_Topo.vector_ConstShape___len__)
    __getslice__ = _swig_new_instance_method(_Topo.vector_ConstShape___getslice__)
    __setslice__ = _swig_new_instance_method(_Topo.vector_ConstShape___setslice__)
    __delslice__ = _swig_new_instance_method(_Topo.vector_ConstShape___delslice__)
    __delitem__ = _swig_new_instance_method(_Topo.vector_ConstShape___delitem__)
    __getitem__ = _swig_new_instance_method(_Topo.vector_ConstShape___getitem__)
    __setitem__ = _swig_new_instance_method(_Topo.vector_ConstShape___setitem__)
    pop = _swig_new_instance_method(_Topo.vector_ConstShape_pop)
    append = _swig_new_instance_method(_Topo.vector_ConstShape_append)
    empty = _swig_new_instance_method(_Topo.vector_ConstShape_empty)
    size = _swig_new_instance_method(_Topo.vector_ConstShape_size)
    swap = _swig_new_instance_method(_Topo.vector_ConstShape_swap)
    begin = _swig_new_instance_method(_Topo.vector_ConstShape_begin)
    end = _swig_new_instance_method(_Topo.vector_ConstShape_end)
    rbegin = _swig_new_instance_method(_Topo.vector_ConstShape_rbegin)
    rend = _swig_new_instance_method(_Topo.vector_ConstShape_rend)
    clear = _swig_new_instance_method(_Topo.vector_ConstShape_clear)
    get_allocator = _swig_new_instance_method(_Topo.vector_ConstShape_get_allocator)
    pop_back = _swig_new_instance_method(_Topo.vector_ConstShape_pop_back)
    erase = _swig_new_instance_method(_Topo.vector_ConstShape_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_ConstShape self) -> vector_ConstShape
        __init__(vector_ConstShape self, vector_ConstShape other) -> vector_ConstShape
        __init__(vector_ConstShape self, std::vector< std::shared_ptr< Topo::Shape const > >::size_type size) -> vector_ConstShape
        __init__(vector_ConstShape self, std::vector< std::shared_ptr< Topo::Shape const > >::size_type size, std::vector< std::shared_ptr< Topo::Shape const > >::value_type const & value) -> vector_ConstShape
        """
        _Topo.vector_ConstShape_swiginit(self, _Topo.new_vector_ConstShape(*args))
    push_back = _swig_new_instance_method(_Topo.vector_ConstShape_push_back)
    front = _swig_new_instance_method(_Topo.vector_ConstShape_front)
    back = _swig_new_instance_method(_Topo.vector_ConstShape_back)
    assign = _swig_new_instance_method(_Topo.vector_ConstShape_assign)
    resize = _swig_new_instance_method(_Topo.vector_ConstShape_resize)
    insert = _swig_new_instance_method(_Topo.vector_ConstShape_insert)
    reserve = _swig_new_instance_method(_Topo.vector_ConstShape_reserve)
    capacity = _swig_new_instance_method(_Topo.vector_ConstShape_capacity)
    __swig_destroy__ = _Topo.delete_vector_ConstShape

# Register vector_ConstShape in _Topo:
_Topo.vector_ConstShape_swigregister(vector_ConstShape)
class vector_ConstShell(object):
    r"""Proxy of C++ std::vector< pConstShell > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_Topo.vector_ConstShell_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_Topo.vector_ConstShell___nonzero__)
    __bool__ = _swig_new_instance_method(_Topo.vector_ConstShell___bool__)
    __len__ = _swig_new_instance_method(_Topo.vector_ConstShell___len__)
    __getslice__ = _swig_new_instance_method(_Topo.vector_ConstShell___getslice__)
    __setslice__ = _swig_new_instance_method(_Topo.vector_ConstShell___setslice__)
    __delslice__ = _swig_new_instance_method(_Topo.vector_ConstShell___delslice__)
    __delitem__ = _swig_new_instance_method(_Topo.vector_ConstShell___delitem__)
    __getitem__ = _swig_new_instance_method(_Topo.vector_ConstShell___getitem__)
    __setitem__ = _swig_new_instance_method(_Topo.vector_ConstShell___setitem__)
    pop = _swig_new_instance_method(_Topo.vector_ConstShell_pop)
    append = _swig_new_instance_method(_Topo.vector_ConstShell_append)
    empty = _swig_new_instance_method(_Topo.vector_ConstShell_empty)
    size = _swig_new_instance_method(_Topo.vector_ConstShell_size)
    swap = _swig_new_instance_method(_Topo.vector_ConstShell_swap)
    begin = _swig_new_instance_method(_Topo.vector_ConstShell_begin)
    end = _swig_new_instance_method(_Topo.vector_ConstShell_end)
    rbegin = _swig_new_instance_method(_Topo.vector_ConstShell_rbegin)
    rend = _swig_new_instance_method(_Topo.vector_ConstShell_rend)
    clear = _swig_new_instance_method(_Topo.vector_ConstShell_clear)
    get_allocator = _swig_new_instance_method(_Topo.vector_ConstShell_get_allocator)
    pop_back = _swig_new_instance_method(_Topo.vector_ConstShell_pop_back)
    erase = _swig_new_instance_method(_Topo.vector_ConstShell_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_ConstShell self) -> vector_ConstShell
        __init__(vector_ConstShell self, vector_ConstShell other) -> vector_ConstShell
        __init__(vector_ConstShell self, std::vector< std::shared_ptr< Topo::Shell const > >::size_type size) -> vector_ConstShell
        __init__(vector_ConstShell self, std::vector< std::shared_ptr< Topo::Shell const > >::size_type size, std::vector< std::shared_ptr< Topo::Shell const > >::value_type const & value) -> vector_ConstShell
        """
        _Topo.vector_ConstShell_swiginit(self, _Topo.new_vector_ConstShell(*args))
    push_back = _swig_new_instance_method(_Topo.vector_ConstShell_push_back)
    front = _swig_new_instance_method(_Topo.vector_ConstShell_front)
    back = _swig_new_instance_method(_Topo.vector_ConstShell_back)
    assign = _swig_new_instance_method(_Topo.vector_ConstShell_assign)
    resize = _swig_new_instance_method(_Topo.vector_ConstShell_resize)
    insert = _swig_new_instance_method(_Topo.vector_ConstShell_insert)
    reserve = _swig_new_instance_method(_Topo.vector_ConstShell_reserve)
    capacity = _swig_new_instance_method(_Topo.vector_ConstShell_capacity)
    __swig_destroy__ = _Topo.delete_vector_ConstShell

# Register vector_ConstShell in _Topo:
_Topo.vector_ConstShell_swigregister(vector_ConstShell)
class vector_ConstSolid(object):
    r"""Proxy of C++ std::vector< pConstSolid > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_Topo.vector_ConstSolid_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_Topo.vector_ConstSolid___nonzero__)
    __bool__ = _swig_new_instance_method(_Topo.vector_ConstSolid___bool__)
    __len__ = _swig_new_instance_method(_Topo.vector_ConstSolid___len__)
    __getslice__ = _swig_new_instance_method(_Topo.vector_ConstSolid___getslice__)
    __setslice__ = _swig_new_instance_method(_Topo.vector_ConstSolid___setslice__)
    __delslice__ = _swig_new_instance_method(_Topo.vector_ConstSolid___delslice__)
    __delitem__ = _swig_new_instance_method(_Topo.vector_ConstSolid___delitem__)
    __getitem__ = _swig_new_instance_method(_Topo.vector_ConstSolid___getitem__)
    __setitem__ = _swig_new_instance_method(_Topo.vector_ConstSolid___setitem__)
    pop = _swig_new_instance_method(_Topo.vector_ConstSolid_pop)
    append = _swig_new_instance_method(_Topo.vector_ConstSolid_append)
    empty = _swig_new_instance_method(_Topo.vector_ConstSolid_empty)
    size = _swig_new_instance_method(_Topo.vector_ConstSolid_size)
    swap = _swig_new_instance_method(_Topo.vector_ConstSolid_swap)
    begin = _swig_new_instance_method(_Topo.vector_ConstSolid_begin)
    end = _swig_new_instance_method(_Topo.vector_ConstSolid_end)
    rbegin = _swig_new_instance_method(_Topo.vector_ConstSolid_rbegin)
    rend = _swig_new_instance_method(_Topo.vector_ConstSolid_rend)
    clear = _swig_new_instance_method(_Topo.vector_ConstSolid_clear)
    get_allocator = _swig_new_instance_method(_Topo.vector_ConstSolid_get_allocator)
    pop_back = _swig_new_instance_method(_Topo.vector_ConstSolid_pop_back)
    erase = _swig_new_instance_method(_Topo.vector_ConstSolid_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_ConstSolid self) -> vector_ConstSolid
        __init__(vector_ConstSolid self, vector_ConstSolid other) -> vector_ConstSolid
        __init__(vector_ConstSolid self, std::vector< std::shared_ptr< Topo::Solid const > >::size_type size) -> vector_ConstSolid
        __init__(vector_ConstSolid self, std::vector< std::shared_ptr< Topo::Solid const > >::size_type size, std::vector< std::shared_ptr< Topo::Solid const > >::value_type const & value) -> vector_ConstSolid
        """
        _Topo.vector_ConstSolid_swiginit(self, _Topo.new_vector_ConstSolid(*args))
    push_back = _swig_new_instance_method(_Topo.vector_ConstSolid_push_back)
    front = _swig_new_instance_method(_Topo.vector_ConstSolid_front)
    back = _swig_new_instance_method(_Topo.vector_ConstSolid_back)
    assign = _swig_new_instance_method(_Topo.vector_ConstSolid_assign)
    resize = _swig_new_instance_method(_Topo.vector_ConstSolid_resize)
    insert = _swig_new_instance_method(_Topo.vector_ConstSolid_insert)
    reserve = _swig_new_instance_method(_Topo.vector_ConstSolid_reserve)
    capacity = _swig_new_instance_method(_Topo.vector_ConstSolid_capacity)
    __swig_destroy__ = _Topo.delete_vector_ConstSolid

# Register vector_ConstSolid in _Topo:
_Topo.vector_ConstSolid_swigregister(vector_ConstSolid)
class vector_ConstTopoItem(object):
    r"""Proxy of C++ std::vector< pConstTopologicalItem > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_Topo.vector_ConstTopoItem_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_Topo.vector_ConstTopoItem___nonzero__)
    __bool__ = _swig_new_instance_method(_Topo.vector_ConstTopoItem___bool__)
    __len__ = _swig_new_instance_method(_Topo.vector_ConstTopoItem___len__)
    __getslice__ = _swig_new_instance_method(_Topo.vector_ConstTopoItem___getslice__)
    __setslice__ = _swig_new_instance_method(_Topo.vector_ConstTopoItem___setslice__)
    __delslice__ = _swig_new_instance_method(_Topo.vector_ConstTopoItem___delslice__)
    __delitem__ = _swig_new_instance_method(_Topo.vector_ConstTopoItem___delitem__)
    __getitem__ = _swig_new_instance_method(_Topo.vector_ConstTopoItem___getitem__)
    __setitem__ = _swig_new_instance_method(_Topo.vector_ConstTopoItem___setitem__)
    pop = _swig_new_instance_method(_Topo.vector_ConstTopoItem_pop)
    append = _swig_new_instance_method(_Topo.vector_ConstTopoItem_append)
    empty = _swig_new_instance_method(_Topo.vector_ConstTopoItem_empty)
    size = _swig_new_instance_method(_Topo.vector_ConstTopoItem_size)
    swap = _swig_new_instance_method(_Topo.vector_ConstTopoItem_swap)
    begin = _swig_new_instance_method(_Topo.vector_ConstTopoItem_begin)
    end = _swig_new_instance_method(_Topo.vector_ConstTopoItem_end)
    rbegin = _swig_new_instance_method(_Topo.vector_ConstTopoItem_rbegin)
    rend = _swig_new_instance_method(_Topo.vector_ConstTopoItem_rend)
    clear = _swig_new_instance_method(_Topo.vector_ConstTopoItem_clear)
    get_allocator = _swig_new_instance_method(_Topo.vector_ConstTopoItem_get_allocator)
    pop_back = _swig_new_instance_method(_Topo.vector_ConstTopoItem_pop_back)
    erase = _swig_new_instance_method(_Topo.vector_ConstTopoItem_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_ConstTopoItem self) -> vector_ConstTopoItem
        __init__(vector_ConstTopoItem self, vector_ConstTopoItem other) -> vector_ConstTopoItem
        __init__(vector_ConstTopoItem self, std::vector< std::shared_ptr< Topo::TopologicalItem const > >::size_type size) -> vector_ConstTopoItem
        __init__(vector_ConstTopoItem self, std::vector< std::shared_ptr< Topo::TopologicalItem const > >::size_type size, std::vector< std::shared_ptr< Topo::TopologicalItem const > >::value_type const & value) -> vector_ConstTopoItem
        """
        _Topo.vector_ConstTopoItem_swiginit(self, _Topo.new_vector_ConstTopoItem(*args))
    push_back = _swig_new_instance_method(_Topo.vector_ConstTopoItem_push_back)
    front = _swig_new_instance_method(_Topo.vector_ConstTopoItem_front)
    back = _swig_new_instance_method(_Topo.vector_ConstTopoItem_back)
    assign = _swig_new_instance_method(_Topo.vector_ConstTopoItem_assign)
    resize = _swig_new_instance_method(_Topo.vector_ConstTopoItem_resize)
    insert = _swig_new_instance_method(_Topo.vector_ConstTopoItem_insert)
    reserve = _swig_new_instance_method(_Topo.vector_ConstTopoItem_reserve)
    capacity = _swig_new_instance_method(_Topo.vector_ConstTopoItem_capacity)
    __swig_destroy__ = _Topo.delete_vector_ConstTopoItem

# Register vector_ConstTopoItem in _Topo:
_Topo.vector_ConstTopoItem_swigregister(vector_ConstTopoItem)
class vector_ConstVertex(object):
    r"""Proxy of C++ std::vector< pConstVertex > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_Topo.vector_ConstVertex_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_Topo.vector_ConstVertex___nonzero__)
    __bool__ = _swig_new_instance_method(_Topo.vector_ConstVertex___bool__)
    __len__ = _swig_new_instance_method(_Topo.vector_ConstVertex___len__)
    __getslice__ = _swig_new_instance_method(_Topo.vector_ConstVertex___getslice__)
    __setslice__ = _swig_new_instance_method(_Topo.vector_ConstVertex___setslice__)
    __delslice__ = _swig_new_instance_method(_Topo.vector_ConstVertex___delslice__)
    __delitem__ = _swig_new_instance_method(_Topo.vector_ConstVertex___delitem__)
    __getitem__ = _swig_new_instance_method(_Topo.vector_ConstVertex___getitem__)
    __setitem__ = _swig_new_instance_method(_Topo.vector_ConstVertex___setitem__)
    pop = _swig_new_instance_method(_Topo.vector_ConstVertex_pop)
    append = _swig_new_instance_method(_Topo.vector_ConstVertex_append)
    empty = _swig_new_instance_method(_Topo.vector_ConstVertex_empty)
    size = _swig_new_instance_method(_Topo.vector_ConstVertex_size)
    swap = _swig_new_instance_method(_Topo.vector_ConstVertex_swap)
    begin = _swig_new_instance_method(_Topo.vector_ConstVertex_begin)
    end = _swig_new_instance_method(_Topo.vector_ConstVertex_end)
    rbegin = _swig_new_instance_method(_Topo.vector_ConstVertex_rbegin)
    rend = _swig_new_instance_method(_Topo.vector_ConstVertex_rend)
    clear = _swig_new_instance_method(_Topo.vector_ConstVertex_clear)
    get_allocator = _swig_new_instance_method(_Topo.vector_ConstVertex_get_allocator)
    pop_back = _swig_new_instance_method(_Topo.vector_ConstVertex_pop_back)
    erase = _swig_new_instance_method(_Topo.vector_ConstVertex_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_ConstVertex self) -> vector_ConstVertex
        __init__(vector_ConstVertex self, vector_ConstVertex other) -> vector_ConstVertex
        __init__(vector_ConstVertex self, std::vector< std::shared_ptr< Topo::Vertex const > >::size_type size) -> vector_ConstVertex
        __init__(vector_ConstVertex self, std::vector< std::shared_ptr< Topo::Vertex const > >::size_type size, std::vector< std::shared_ptr< Topo::Vertex const > >::value_type const & value) -> vector_ConstVertex
        """
        _Topo.vector_ConstVertex_swiginit(self, _Topo.new_vector_ConstVertex(*args))
    push_back = _swig_new_instance_method(_Topo.vector_ConstVertex_push_back)
    front = _swig_new_instance_method(_Topo.vector_ConstVertex_front)
    back = _swig_new_instance_method(_Topo.vector_ConstVertex_back)
    assign = _swig_new_instance_method(_Topo.vector_ConstVertex_assign)
    resize = _swig_new_instance_method(_Topo.vector_ConstVertex_resize)
    insert = _swig_new_instance_method(_Topo.vector_ConstVertex_insert)
    reserve = _swig_new_instance_method(_Topo.vector_ConstVertex_reserve)
    capacity = _swig_new_instance_method(_Topo.vector_ConstVertex_capacity)
    __swig_destroy__ = _Topo.delete_vector_ConstVertex

# Register vector_ConstVertex in _Topo:
_Topo.vector_ConstVertex_swigregister(vector_ConstVertex)
class vector_ConstWire(object):
    r"""Proxy of C++ std::vector< pConstWire > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_Topo.vector_ConstWire_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_Topo.vector_ConstWire___nonzero__)
    __bool__ = _swig_new_instance_method(_Topo.vector_ConstWire___bool__)
    __len__ = _swig_new_instance_method(_Topo.vector_ConstWire___len__)
    __getslice__ = _swig_new_instance_method(_Topo.vector_ConstWire___getslice__)
    __setslice__ = _swig_new_instance_method(_Topo.vector_ConstWire___setslice__)
    __delslice__ = _swig_new_instance_method(_Topo.vector_ConstWire___delslice__)
    __delitem__ = _swig_new_instance_method(_Topo.vector_ConstWire___delitem__)
    __getitem__ = _swig_new_instance_method(_Topo.vector_ConstWire___getitem__)
    __setitem__ = _swig_new_instance_method(_Topo.vector_ConstWire___setitem__)
    pop = _swig_new_instance_method(_Topo.vector_ConstWire_pop)
    append = _swig_new_instance_method(_Topo.vector_ConstWire_append)
    empty = _swig_new_instance_method(_Topo.vector_ConstWire_empty)
    size = _swig_new_instance_method(_Topo.vector_ConstWire_size)
    swap = _swig_new_instance_method(_Topo.vector_ConstWire_swap)
    begin = _swig_new_instance_method(_Topo.vector_ConstWire_begin)
    end = _swig_new_instance_method(_Topo.vector_ConstWire_end)
    rbegin = _swig_new_instance_method(_Topo.vector_ConstWire_rbegin)
    rend = _swig_new_instance_method(_Topo.vector_ConstWire_rend)
    clear = _swig_new_instance_method(_Topo.vector_ConstWire_clear)
    get_allocator = _swig_new_instance_method(_Topo.vector_ConstWire_get_allocator)
    pop_back = _swig_new_instance_method(_Topo.vector_ConstWire_pop_back)
    erase = _swig_new_instance_method(_Topo.vector_ConstWire_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_ConstWire self) -> vector_ConstWire
        __init__(vector_ConstWire self, vector_ConstWire other) -> vector_ConstWire
        __init__(vector_ConstWire self, std::vector< std::shared_ptr< Topo::Wire const > >::size_type size) -> vector_ConstWire
        __init__(vector_ConstWire self, std::vector< std::shared_ptr< Topo::Wire const > >::size_type size, std::vector< std::shared_ptr< Topo::Wire const > >::value_type const & value) -> vector_ConstWire
        """
        _Topo.vector_ConstWire_swiginit(self, _Topo.new_vector_ConstWire(*args))
    push_back = _swig_new_instance_method(_Topo.vector_ConstWire_push_back)
    front = _swig_new_instance_method(_Topo.vector_ConstWire_front)
    back = _swig_new_instance_method(_Topo.vector_ConstWire_back)
    assign = _swig_new_instance_method(_Topo.vector_ConstWire_assign)
    resize = _swig_new_instance_method(_Topo.vector_ConstWire_resize)
    insert = _swig_new_instance_method(_Topo.vector_ConstWire_insert)
    reserve = _swig_new_instance_method(_Topo.vector_ConstWire_reserve)
    capacity = _swig_new_instance_method(_Topo.vector_ConstWire_capacity)
    __swig_destroy__ = _Topo.delete_vector_ConstWire

# Register vector_ConstWire in _Topo:
_Topo.vector_ConstWire_swigregister(vector_ConstWire)

